/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-04-03 10:10:21.552571
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[5]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKsin(j[3]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.70711151877903)*x7);
x13=((0.70711151877903)*x8);
x14=((0.70711151877903)*x0);
x15=((0.70711151877903)*x10);
x16=((0.0603519681277902)*x3);
x17=((0.707102043562323)*x10);
x18=((0.0579124333880025)*x7);
x19=((0.707102043562323)*x7);
x20=((0.150789510789665)*x3);
x21=((0.0603519681277902)*x2);
x22=((1.0)*x3);
x23=((1.0)*x2);
x24=((0.707102043562323)*x8);
x25=((0.0579116573677543)*x7);
x26=((0.0603511594180443)*x2);
x27=((0.08535)*x2);
x28=((0.150791531379628)*x3);
x29=((0.0603511594180443)*x3);
x30=(x0*x1);
x31=(x11*x6);
x32=(x1*x6);
x33=(x3*x4);
x34=(x4*x6);
x35=(x0*x10);
x36=(x1*x2);
x37=(x10*x6);
x38=((0.70711151877903)*x31);
x39=((0.707102043562323)*x31);
x40=(x0*x2*x4);
x41=(x22*x32);
x42=(x22*x30);
x43=(x33+x36);
x44=(((x1*x22))+(((-1.0)*x23*x4)));
x45=(x43*x7);
x46=(x44*x8);
x47=((((-1.0)*x42))+x40);
x48=((((-1.0)*x41))+((x2*x34)));
x49=(x41+(((-1.0)*x23*x34)));
x50=((((-1.0)*x0*x23*x4))+x42);
x51=(((x23*x32))+((x22*x34)));
x52=(((x23*x30))+((x0*x22*x4)));
x53=(x48*x7);
x54=(x47*x7);
x55=(x51*x8);
x56=(x52*x8);
x57=(x46+x45);
x58=(((x8*(((((1.0)*x22*x4))+(((1.0)*x1*x23))))))+(((-1.0)*x44*x7)));
x59=(x54+x56);
x60=(x55+x53);
x61=(x10*x60);
x62=(x15*x59);
x63=(((x13*x50))+((x12*x52)));
x64=((((-1.0)*x24*x49))+(((-1.0)*x19*x51)));
x65=((((-1.0)*x19*x52))+(((-1.0)*x24*x50)));
x66=((((-1.0)*x12*x51))+(((-1.0)*x13*x49)));
x67=(x17*x59);
x68=(((x17*x60))+(((0.707102043562323)*x0*x11)));
x69=(((x15*x60))+((x11*x14)));
eerot[0]=((((-1.0)*x68*x9))+((x5*x63))+((x5*x64))+((x9*(((((-1.0)*x38))+x62)))));
eerot[1]=(((x5*((x38+(((-1.0)*x62))))))+((x5*x68))+((x64*x9))+((x63*x9)));
eerot[2]=((((-1.0)*x0*x17))+((x11*(((((-1.0)*x12*x47))+(((-1.0)*x13*x52))))))+((x11*((((x19*x48))+((x24*x51))))))+(((-1.0)*x15*x6)));
IkReal x70=((1.0)*x30);
IkReal x71=(x0*x4);
eetrans[0]=((((0.150789510789665)*x2*x34))+((x7*((((x29*x34))+((x26*x32))))))+(((-1.0)*x20*x32))+((x28*x30))+((x11*((((x25*x48))+(((0.0579116573677543)*x55))))))+(((-0.0579124333880025)*x37))+((x11*(((((-1.0)*x18*x47))+(((-0.0579124333880025)*x56))))))+((x7*(((((-1.0)*x21*x70))+(((-1.0)*x16*x71))))))+(((-0.150791531379628)*x40))+(((-0.079443979134824)*x6))+(((0.172287721550511)*x30))+(((-0.0579116573677543)*x35))+(((-0.17228541291396)*x32))+((x8*((((x29*x32))+(((-1.0)*x26*x34))))))+((x8*((((x21*x71))+(((-1.0)*x16*x70))))))+(((-0.079442914594227)*x0)));
eerot[3]=((((-1.0)*x69*x9))+((x9*((x39+(((-1.0)*x67))))))+((x5*x65))+((x5*x66)));
eerot[4]=(((x5*(((((-1.0)*x39))+x67))))+((x5*x69))+((x66*x9))+((x65*x9)));
eerot[5]=((((-1.0)*x10*x14))+((x11*((((x19*x47))+((x24*x52))))))+((x17*x6))+((x11*((((x13*x51))+((x12*x48)))))));
IkReal x72=(x0*x4);
eetrans[1]=(((x11*((((x18*x48))+(((0.0579124333880025)*x55))))))+(((-0.172287721550511)*x32))+(((0.079442914594227)*x6))+(((-1.0)*x20*x30))+(((0.0579116573677543)*x37))+((x8*((((x29*x30))+(((-1.0)*x26*x72))))))+((x8*((((x16*x32))+(((-1.0)*x21*x34))))))+(((0.150789510789665)*x40))+((x11*((((x25*x47))+(((0.0579116573677543)*x56))))))+(((-0.0579124333880025)*x35))+(((0.150791531379628)*x2*x34))+((x7*((((x26*x30))+((x29*x72))))))+(((-0.079443979134824)*x0))+(((-1.0)*x28*x32))+((x7*((((x16*x34))+((x21*x32))))))+(((-0.17228541291396)*x30)));
eerot[6]=(((x10*x9*(((((-1.0)*x45))+(((-1.0)*x46))))))+((x5*x58)));
eerot[7]=(((x10*x5*x57))+((x58*x9)));
eerot[8]=(x11*x57);
IkReal x73=((1.0)*x27);
eetrans[2]=((-0.1519)+(((0.21325)*x36))+(((0.21325)*x33))+((x8*(((((-0.08535)*x33))+(((-1.0)*x1*x73))))))+((x11*(((((0.0819)*x46))+(((0.0819)*x45))))))+((x7*(((((-1.0)*x4*x73))+(((0.08535)*x1*x3))))))+(((0.24365)*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.707102043562323)*r10))+(((0.70711151877903)*r00)));
new_r01=((((-0.707102043562323)*r11))+(((0.70711151877903)*r01)));
new_r02=((((-0.707102043562323)*r12))+(((0.70711151877903)*r02)));
new_px=((((-0.0579124333880026)*r02))+(((0.0579116573677543)*r12))+(((-0.707102043562323)*py))+(((0.70711151877903)*px)));
new_r10=((((-0.70711151877903)*r10))+(((-0.707102043562323)*r00)));
new_r11=((((-0.70711151877903)*r11))+(((-0.707102043562323)*r01)));
new_r12=((((-0.70711151877903)*r12))+(((-0.707102043562323)*r02)));
new_py=((((0.0579124333880026)*r12))+(((0.0579116573677543)*r02))+(((-0.70711151877903)*py))+(((-0.707102043562323)*px)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((-0.1519)+(((-1.0)*pz))+(((0.0819)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x74=((1.0)*px);
IkReal x75=((1.0)*pz);
IkReal x76=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x76))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x75)));
rxp0_2=((((-1.0)*r10*x74))+((py*r00)));
rxp1_0=((((-1.0)*r21*x76))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x75)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x74)));
rxp2_0=((((-1.0)*r22*x76))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x75)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x74)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x77=((0.1707)*npx);
IkReal x78=((0.1707)*npy);
IkReal x79=((0.08535)*r22);
IkReal x80=((0.08535)*r21);
IkReal x81=((-0.08535)*r20);
IkReal x82=((-1.0)*r20);
IkReal x83=((-1.0)*rxp0_2);
IkReal x84=((-0.08535)*r21);
IkReal x85=((-1.0)*r21);
IkReal x86=((-1.0)*rxp1_2);
IkReal x87=((-1.0)*npx);
IkReal x88=((-1.0)*r22);
IkReal x89=((-1.0)*npz);
matrixinvcoeffs[0]=x81;
matrixinvcoeffs[1]=x77;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x82;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x83;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x81;
matrixinvcoeffs[19]=x77;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x82;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x83;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x84;
matrixinvcoeffs[33]=x78;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x85;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x86;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x84;
matrixinvcoeffs[51]=x78;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x85;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x86;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x88;
matrixinvcoeffs[76]=x79;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x89;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x79;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x86;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x84;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x86;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x80;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x82;
matrixinvcoeffs[133]=x87;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x82;
matrixinvcoeffs[151]=x87;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x81;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x88;
matrixinvcoeffs[165]=x89;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x79;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x88;
matrixinvcoeffs[183]=x89;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x85;
matrixinvcoeffs[204]=x80;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x86;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x80;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x87;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x81;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x82;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x81;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x83;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x90=pz*pz;
IkReal x91=pp*pp;
IkReal x92=((0.1707)*pz);
IkReal x93=(pp*r21);
IkReal x94=((0.1707)*rxp1_2);
IkReal x95=(gclwh13_1*pp);
IkReal x96=(gclwh9_0*r20);
IkReal x97=(npy*pz);
IkReal x98=((4.561674317235e-5)*r21);
IkReal x99=(npz*pz);
IkReal x100=(gclwh13_15*r21);
IkReal x101=((0.0072846225)*pz);
IkReal x102=(gclwh11_13*r22);
IkReal x103=((0.014569245)*r21);
IkReal x104=(gclwh8_12*r20);
IkReal x105=(gclwh15_1*r20);
IkReal x106=((2.0)*pp);
IkReal x107=(pp*r20);
IkReal x108=(pp*r22);
IkReal x109=(gclwh14_2*pz);
IkReal x110=(gclwh6_11*r21);
IkReal x111=((0.3414)*rxp0_2);
IkReal x112=(npx*pz);
IkReal x113=((0.001068933642)*rxp2_2);
IkReal x114=(gclwh15_10*r20);
IkReal x115=((0.853)*pp);
IkReal x116=(gclwh9_13*rxp0_2);
IkReal x117=(gclwh2_0*r21);
IkReal x118=((0.019178145)*rxp0_2);
IkReal x119=((0.2247)*gclwh15_15);
IkReal x120=(gclwh5_9*r22);
IkReal x121=(gclwh8_2*rxp0_2);
IkReal x122=((0.6828)*rxp2_2);
IkReal x123=((0.014569245)*rxp1_2);
IkReal x124=((0.15598566)*rxp0_2);
IkReal x125=(gclwh14_3*rxp0_2);
IkReal x126=(gclwh13_0*pz);
IkReal x127=(gclwh11_10*r22);
IkReal x128=(gclwh10_11*r22);
IkReal x129=((1.0)*pz);
IkReal x130=(gclwh13_0*rxp1_2);
IkReal x131=(gclwh4_14*rxp2_2);
IkReal x132=((0.1707)*rxp2_2);
IkReal x133=((0.00518928)*rxp1_2);
IkReal x134=(gclwh5_0*pz);
IkReal x135=((0.00155960496929498)*r21);
IkReal x136=(gclwh4_3*r22);
IkReal x137=(gclwh14_8*rxp0_2);
IkReal x138=((0.00332834402025)*r22);
IkReal x139=(gclwh4_2*r22);
IkReal x140=(gclwh12_14*rxp1_2);
IkReal x141=(gclwh10_2*r22);
IkReal x142=((0.000818427337875)*r20);
IkReal x143=((0.001068933642)*rxp1_2);
IkReal x144=((0.01037856)*rxp0_2);
IkReal x145=(gclwh15_9*r20);
IkReal x146=(gclwh5_10*r22);
IkReal x147=(gclwh4_8*rxp2_2);
IkReal x148=(gclwh9_10*r20);
IkReal x149=((4.0)*gclwh11_10);
IkReal x150=(gclwh6_12*r21);
IkReal x151=((0.00310689149625)*r20);
IkReal x152=(gclwh13_9*r21);
IkReal x153=(gclwh12_8*r21);
IkReal x154=((0.3414)*rxp1_2);
IkReal x155=((2.0)*gclwh7_10);
IkReal x156=((0.07280355)*rxp1_2);
IkReal x157=(gclwh8_2*r20);
IkReal x158=(gclwh4_14*r22);
IkReal x159=((0.6828)*rxp1_2);
IkReal x160=(gclwh15_15*rxp0_2);
IkReal x161=((4.0)*gclwh8_11);
IkReal x162=(gclwh7_0*r21);
IkReal x163=(gclwh5_15*rxp2_2);
IkReal x164=(gclwh15_9*rxp0_2);
IkReal x165=(gclwh4_2*rxp2_2);
IkReal x166=(gclwh14_11*r20);
IkReal x167=((0.019178145)*rxp1_2);
IkReal x168=((4.561674317235e-5)*r22);
IkReal x169=((4.0)*gclwh9_10);
IkReal x170=((0.6828)*rxp0_2);
IkReal x171=(gclwh5_9*rxp2_2);
IkReal x172=(gclwh15_1*rxp0_2);
IkReal x173=(gclwh9_13*r20);
IkReal x174=(gclwh6_2*r21);
IkReal x175=((0.00310689149625)*r21);
IkReal x176=((0.019178145)*rxp2_2);
IkReal x177=((0.0304)*pp);
IkReal x178=((0.2247)*gclwh13_15);
IkReal x179=((0.000818427337875)*r22);
IkReal x180=((0.00163685467575)*r20);
IkReal x181=((0.000818427337875)*r21);
IkReal x182=(gclwh5_0*r22);
IkReal x183=((0.1707)*rxp0_2);
IkReal x184=((0.08318211)*rxp1_2);
IkReal x185=((2.0)*gclwh6_11);
IkReal x186=(gclwh1_3*r20);
IkReal x187=((0.036546103557)*rxp2_2);
IkReal x188=((4.0)*gclwh10_11);
IkReal x189=((0.036546103557)*rxp1_2);
IkReal x190=((0.1707)*pp);
IkReal x191=(gclwh11_13*rxp2_2);
IkReal x192=((0.3414)*rxp2_2);
IkReal x193=(gclwh10_12*rxp2_2);
IkReal x194=((0.0072846225)*r21);
IkReal x195=(gclwh4_8*r22);
IkReal x196=((0.07280355)*rxp0_2);
IkReal x197=((2.0)*gclwh12_11);
IkReal x198=(gclwh11_0*r22);
IkReal x199=(gclwh14_8*r20);
IkReal x200=(gclwh14_14*rxp0_2);
IkReal x201=(gclwh7_13*r21);
IkReal x202=(gclwh11_0*pz);
IkReal x203=(gclwh10_2*pz);
IkReal x204=(gclwh12_2*rxp1_2);
IkReal x205=(gclwh5_0*rxp2_2);
IkReal x206=((0.07280355)*rxp2_2);
IkReal x207=((0.4569)*pp);
IkReal x208=(gclwh4_11*r22);
IkReal x209=((4.0)*gclwh6_11);
IkReal x210=(gclwh8_11*r20);
IkReal x211=((0.2247)*gclwh5_15);
IkReal x212=((4.0)*gclwh7_10);
IkReal x213=((2.0)*gclwh13_10);
IkReal x214=((0.07799283)*rxp1_2);
IkReal x215=(gclwh5_1*r22);
IkReal x216=((0.2247)*gclwh4_14);
IkReal x217=(gclwh10_12*r22);
IkReal x218=((0.2247)*gclwh14_14);
IkReal x219=((0.2247)*gclwh12_14);
IkReal x220=(gclwh14_3*r20);
IkReal x221=(gclwh13_15*rxp1_2);
IkReal x222=(gclwh11_1*r22);
IkReal x223=(gclwh0_1*r20);
IkReal x224=(gclwh8_12*rxp0_2);
IkReal x225=(gclwh14_14*x118);
IkReal x226=(gclwh6_5*x181);
IkReal x227=((0.019178145)*x140);
IkReal x228=((0.019178145)*x131);
IkReal x229=(gclwh10_5*x179);
IkReal x230=(gclwh8_5*x142);
IkReal x231=((0.014569245)*x147);
IkReal x232=((0.0072846225)*x110);
IkReal x233=(gclwh12_8*x123);
IkReal x234=(gclwh4_11*x132);
IkReal x235=(gclwh12_11*x94);
IkReal x236=(gclwh14_11*x183);
IkReal x237=((0.0072846225)*x128);
IkReal x238=((0.014569245)*x137);
IkReal x239=((0.0072846225)*x210);
IkReal x240=(gclwh13_9*x123);
IkReal x241=((0.014569245)*x171);
IkReal x242=((0.0072846225)*x127);
IkReal x243=(gclwh15_10*x183);
IkReal x244=((0.0072846225)*x148);
IkReal x245=(gclwh13_10*x94);
IkReal x246=(gclwh7_10*x194);
IkReal x247=((0.014569245)*x164);
IkReal x248=(gclwh5_10*x132);
IkReal x249=(gclwh15_15*x118);
IkReal x250=(gclwh7_7*x181);
IkReal x251=(gclwh13_15*x167);
IkReal x252=((0.019178145)*x163);
IkReal x253=(gclwh11_7*x179);
IkReal x254=(gclwh9_7*x142);
IkReal x255=(gclwh8_5*x118);
IkReal x256=(gclwh10_5*x176);
IkReal x257=(gclwh14_14*x142);
IkReal x258=(gclwh6_5*x167);
IkReal x259=(gclwh12_14*x181);
IkReal x260=((0.000818427337875)*x158);
IkReal x261=(gclwh8_11*x183);
IkReal x262=(gclwh10_11*x132);
IkReal x263=(gclwh12_11*x194);
IkReal x264=((0.000621742530375)*x195);
IkReal x265=((0.0072846225)*x208);
IkReal x266=((0.000621742530375)*x153);
IkReal x267=((0.000621742530375)*x199);
IkReal x268=(gclwh6_11*x94);
IkReal x269=((0.0072846225)*x166);
IkReal x270=(gclwh9_10*x183);
IkReal x271=((0.000621742530375)*x145);
IkReal x272=((0.0072846225)*x146);
IkReal x273=(gclwh11_10*x132);
IkReal x274=(gclwh13_10*x194);
IkReal x275=((0.000621742530375)*x152);
IkReal x276=((0.0072846225)*x114);
IkReal x277=(gclwh7_10*x94);
IkReal x278=((0.000621742530375)*x120);
IkReal x279=((0.000818427337875)*x100);
IkReal x280=(gclwh5_15*x179);
IkReal x281=(gclwh7_7*x167);
IkReal x282=(gclwh15_15*x142);
IkReal x283=(gclwh11_7*x176);
IkReal x284=(gclwh9_7*x118);
IkReal x285=(gclwh14_11*x111);
IkReal x286=((0.014569245)*x128);
IkReal x287=((0.014569245)*x210);
IkReal x288=((0.03835629)*x200);
IkReal x289=((0.03835629)*x131);
IkReal x290=((0.03835629)*x140);
IkReal x291=(gclwh4_11*x192);
IkReal x292=(gclwh12_11*x154);
IkReal x293=(gclwh6_11*x103);
IkReal x294=((0.03835629)*x163);
IkReal x295=((0.03835629)*x221);
IkReal x296=((0.03835629)*x160);
IkReal x297=(gclwh15_10*x111);
IkReal x298=((0.014569245)*x148);
IkReal x299=((0.014569245)*x127);
IkReal x300=((0.0608)*x97);
IkReal x301=((2.0)*x90);
IkReal x302=(r21*x91);
IkReal x303=((1.0)*x91);
IkReal x304=((0.2247)*gclwh10_5*x99);
IkReal x305=((0.2247)*gclwh8_5*x112);
IkReal x306=((0.11235)*gclwh6_5*x93);
IkReal x307=((0.11235)*gclwh8_5*x107);
IkReal x308=((0.2247)*gclwh6_5*x97);
IkReal x309=((0.11235)*gclwh10_5*x108);
IkReal x310=(gclwh12_3*pp*x94);
IkReal x311=(gclwh14_2*rxp0_2*x92);
IkReal x312=(gclwh6_3*x302);
IkReal x313=(x101*x141);
IkReal x314=((2.0)*gclwh10_11*x99);
IkReal x315=((2.0)*gclwh8_11*x112);
IkReal x316=(x108*x203);
IkReal x317=(gclwh4_3*pp*x132);
IkReal x318=(x101*x157);
IkReal x319=(gclwh8_2*pz*x107);
IkReal x320=(x101*x174);
IkReal x321=(x185*x97);
IkReal x322=(x204*x92);
IkReal x323=(x165*x92);
IkReal x324=(x125*x190);
IkReal x325=(x94*x95);
IkReal x326=(gclwh7_1*x302);
IkReal x327=(x101*x198);
IkReal x328=(gclwh15_0*rxp0_2*x92);
IkReal x329=(x108*x202);
IkReal x330=(gclwh5_1*pp*x132);
IkReal x331=(x155*x97);
IkReal x332=(x101*x96);
IkReal x333=(pp*pz*x96);
IkReal x334=((2.0)*gclwh11_10*x99);
IkReal x335=((2.0)*gclwh9_10*x112);
IkReal x336=(x172*x190);
IkReal x337=(x130*x92);
IkReal x338=(x205*x92);
IkReal x339=(x101*x162);
IkReal x340=((0.2247)*gclwh9_7*x112);
IkReal x341=((0.11235)*gclwh7_7*x93);
IkReal x342=((0.2247)*gclwh11_7*x99);
IkReal x343=((0.11235)*gclwh11_7*x108);
IkReal x344=((0.2247)*gclwh7_7*x97);
IkReal x345=((0.11235)*gclwh9_7*x107);
IkReal x346=(x219*x97);
IkReal x347=((0.11235)*gclwh14_14*x107);
IkReal x348=(x216*x99);
IkReal x349=((0.11235)*gclwh12_14*x93);
IkReal x350=(x112*x218);
IkReal x351=((0.11235)*gclwh4_14*x108);
IkReal x352=(gclwh14_8*npx*x92);
IkReal x353=(x107*x109);
IkReal x354=(gclwh12_3*x302);
IkReal x355=(gclwh3_2*r21*x101);
IkReal x356=((0.08535)*gclwh12_8*x93);
IkReal x357=(gclwh6_2*rxp1_2*x92);
IkReal x358=(gclwh3_3*x302);
IkReal x359=(x186*x91);
IkReal x360=((0.08535)*gclwh4_8*x108);
IkReal x361=(gclwh14_2*r20*x101);
IkReal x362=((2.0)*gclwh14_11*x112);
IkReal x363=(x136*x91);
IkReal x364=(gclwh1_2*r20*x101);
IkReal x365=(gclwh12_8*npy*x92);
IkReal x366=(gclwh4_8*npz*x92);
IkReal x367=(x121*x92);
IkReal x368=((2.0)*gclwh4_11*x99);
IkReal x369=((0.08535)*gclwh14_8*x107);
IkReal x370=(gclwh6_3*pp*x94);
IkReal x371=(gclwh10_2*rxp2_2*x92);
IkReal x372=(x101*x139);
IkReal x373=(gclwh12_2*r21*x101);
IkReal x374=(x197*x97);
IkReal x375=(gclwh13_0*r21*x101);
IkReal x376=(x105*x91);
IkReal x377=((0.08535)*gclwh15_9*x107);
IkReal x378=(x108*x134);
IkReal x379=(x126*x93);
IkReal x380=(x101*x117);
IkReal x381=(gclwh0_0*r20*x101);
IkReal x382=(gclwh9_0*rxp0_2*x92);
IkReal x383=((2.0)*gclwh15_10*x112);
IkReal x384=(x101*x182);
IkReal x385=(gclwh2_1*x302);
IkReal x386=(gclwh5_9*npz*x92);
IkReal x387=(gclwh7_1*pp*x94);
IkReal x388=(gclwh11_0*rxp2_2*x92);
IkReal x389=(gclwh13_9*npy*x92);
IkReal x390=(x223*x91);
IkReal x391=((0.08535)*gclwh5_9*x108);
IkReal x392=(gclwh15_9*npx*x92);
IkReal x393=((0.08535)*gclwh13_9*x93);
IkReal x394=(gclwh11_1*pp*x132);
IkReal x395=((2.0)*gclwh5_10*x99);
IkReal x396=(x213*x97);
IkReal x397=(gclwh7_0*rxp1_2*x92);
IkReal x398=(gclwh15_0*r20*x101);
IkReal x399=(x112*x119);
IkReal x400=((0.11235)*gclwh5_15*x108);
IkReal x401=((0.11235)*gclwh13_15*x93);
IkReal x402=(x178*x97);
IkReal x403=(x211*x99);
IkReal x404=((0.11235)*gclwh15_15*x107);
IkReal x405=(x106*x210);
IkReal x406=(x106*x128);
IkReal x407=(x209*x97);
IkReal x408=(x112*x161);
IkReal x409=(x185*x93);
IkReal x410=(x188*x99);
IkReal x411=(x106*x127);
IkReal x412=(x212*x97);
IkReal x413=(x106*x148);
IkReal x414=(gclwh6_2*npy*x301);
IkReal x415=(gclwh6_3*x106*x97);
IkReal x416=(gclwh6_2*x129*x93);
IkReal x417=(gclwh10_2*npz*x301);
IkReal x418=(gclwh8_2*npx*x301);
IkReal x419=(gclwh11_1*x106*x99);
IkReal x420=(gclwh7_0*npy*x301);
IkReal x421=(gclwh9_0*npx*x301);
IkReal x422=(x222*x303);
IkReal x423=(gclwh7_1*x106*x97);
IkReal x424=(gclwh11_0*npz*x301);
IkReal x425=(gclwh7_0*x129*x93);
IkReal x426=(gclwh12_2*npy*x301);
IkReal x427=(gclwh3_2*npy*x301);
IkReal x428=(gclwh1_2*npx*x301);
IkReal x429=(gclwh14_3*x106*x112);
IkReal x430=(gclwh4_2*npz*x301);
IkReal x431=(gclwh4_3*x106*x99);
IkReal x432=(gclwh12_2*x129*x93);
IkReal x433=(gclwh1_2*x107*x129);
IkReal x434=(gclwh3_3*x106*x97);
IkReal x435=(gclwh4_2*x108*x129);
IkReal x436=(gclwh1_3*x106*x112);
IkReal x437=(gclwh3_2*x129*x93);
IkReal x438=(gclwh12_3*x106*x97);
IkReal x439=(gclwh14_2*npx*x301);
IkReal x440=(x220*x303);
IkReal x441=(gclwh0_0*npx*x301);
IkReal x442=(gclwh2_0*npy*x301);
IkReal x443=(gclwh5_1*x106*x99);
IkReal x444=((2.0)*x95*x97);
IkReal x445=(gclwh15_0*npx*x301);
IkReal x446=(gclwh2_1*x106*x97);
IkReal x447=(gclwh0_1*x106*x112);
IkReal x448=(gclwh5_0*npz*x301);
IkReal x449=(gclwh13_0*npy*x301);
IkReal x450=(gclwh0_0*x107*x129);
IkReal x451=(gclwh15_0*x107*x129);
IkReal x452=(gclwh2_0*x129*x93);
IkReal x453=((1.0)*gclwh13_1*x302);
IkReal x454=(x215*x303);
IkReal x455=(gclwh15_1*x106*x112);
IkReal x456=(x251+x252);
IkReal x457=(x255+x256);
IkReal x458=(x294+x295);
IkReal x459=(x228+x227);
IkReal x460=(x290+x289);
IkReal x461=(x284+x283);
IkReal x462=(x321+x239+x236+x237);
IkReal x463=(x331+x243+x242+x244);
IkReal x464=(x374+x368+x269+x268);
IkReal x465=(x395+x396+x276+x277);
IkReal x466=(x346+x347+x348+x257);
IkReal x467=(x306+x304+x305+x226);
IkReal x468=(x282+x403+x402+x404);
IkReal x469=(x342+x340+x341+x250);
IkReal x470=(x362+x265+x261+x263+x262);
IkReal x471=(x383+x274+x272+x273+x270);
IkReal x472=(x335+x334+x246+x245+x248);
IkReal x473=(x315+x314+x232+x234+x235);
IkReal x474=(x343+x344+x345+x254+x253);
IkReal x475=(x308+x309+x307+x229+x230);
IkReal x476=(x351+x350+x349+x259+x260);
IkReal x477=(x399+x279+x280+x401+x400);
IkReal x478=(x291+x292+x293+x409+x408+x410);
IkReal x479=(((gclwh7_10*x103))+((gclwh13_10*x154))+((x112*x169))+((gclwh5_10*x192))+((x149*x99))+((x155*x93)));
IkReal x480=(x287+x286+x285+x405+x407+x406);
IkReal x481=(x298+x299+x297+x412+x413+x411);
IkReal x482=(x324+x320+x322+x323+x238+x416+x417+x415+x418);
IkReal x483=(x319+x318+x317+x316+x311+x310+x313+x312+x233+x231+x414);
IkReal x484=(x339+x338+x337+x336+x247+x425+x424+x423+x422+x421);
IkReal x485=(x333+x332+x330+x325+x326+x327+x328+x329+x241+x240+x419+x420);
IkReal x486=(x394+x397+x391+x393+x392+x398+x275+x278+x449+x448+x447+x446+x454+x455+x452+x453+x450+x451);
IkReal x487=(x353+x352+x355+x354+x357+x356+x359+x358+x360+x361+x363+x364+x264+x266+x429+x428+x427+x426+x430+x92);
IkReal x488=(x373+x372+x371+x370+x369+x365+x366+x367+x267+x438+x439+x431+x432+x433+x434+x435+x436+x437+x440);
IkReal x489=(x386+x387+x384+x385+x382+x380+x381+x388+x389+x379+x378+x377+x376+x375+x390+x271+x445+x444+x441+x443+x442+x92);
op[0]=((((-1.0)*gclwh10_12*x138))+(((-1.0)*x104*x207))+(((-0.9138)*gclwh6_12*x97))+(((-1.0)*gclwh12_8*x214))+(((-1.0)*x475))+(((0.00332834402025)*x150))+(((0.4569)*gclwh6_12*x93))+(((0.9138)*gclwh8_12*x112))+x459+x467+(((-0.4569)*gclwh10_12*x108))+(((-0.07799283)*x147))+(((0.07799283)*x137))+(((0.9138)*gclwh10_12*x99))+(((-0.00332834402025)*x104))+(((-1.0)*x225)));
op[1]=(((gclwh8_11*x107))+(((-1.0)*x482))+(((-0.2068108875)*gclwh6_3*x93))+(((-1.0)*gclwh12_3*x189))+(((0.42819102)*gclwh6_3*x97))+(((0.036546103557)*x125))+((gclwh10_11*x108))+(((-1.0)*x473))+(((-1.0)*gclwh6_3*x135))+x483+x462+(((-1.0)*gclwh6_11*x93))+(((-1.0)*gclwh4_3*x187)));
op[2]=((-0.09583455)+(((-1.0)*x478))+x480);
op[3]=((((-0.4265)*gclwh6_2*x93))+(((-0.08318211)*x137))+(((-1.0)*gclwh12_2*x156))+(((-0.00310689149625)*x174))+(((-0.07280355)*x165))+(((0.08318211)*x147))+(((-0.853)*gclwh8_2*x112))+(((0.4265)*gclwh8_2*x107))+(((-0.853)*gclwh10_2*x99))+(((-1.0)*x460))+(((0.853)*gclwh6_2*x97))+x288+((gclwh8_2*x151))+(((0.4265)*gclwh10_2*x108))+((gclwh12_8*x184))+(((0.00310689149625)*x141))+((gclwh14_2*x196)));
op[4]=((((0.00518928)*x147))+(((0.000221452524)*x150))+(((-0.000221452524)*x217))+(((-0.0304)*gclwh10_12*x108))+((gclwh12_8*x133))+(((-1.0)*x475))+(((0.0304)*gclwh6_12*x93))+(((0.0608)*gclwh8_12*x112))+(((-1.0)*x459))+x225+(((-0.00518928)*x137))+x467+(((-1.0)*x104*x177))+(((-0.000221452524)*x104))+(((-1.0)*gclwh6_12*x300))+(((0.0608)*gclwh10_12*x99)));
op[5]=((((0.0010225625)*gclwh6_3*x93))+(((-1.0)*x482))+(((-1.0)*gclwh8_11*x107))+(((-1.0)*gclwh10_11*x108))+(((0.01252412)*gclwh6_3*x97))+(((-1.0)*x462))+(((-1.0)*gclwh6_3*x98))+(((-1.0)*gclwh4_3*x113))+x483+x473+((gclwh6_11*x93))+(((0.001068933642)*x125))+(((-1.0)*gclwh12_3*x143)));
op[6]=((((-1.0)*x484))+(((-1.0)*gclwh7_1*x135))+((gclwh7_10*x93))+(((-1.0)*gclwh9_10*x107))+(((-0.2068108875)*gclwh7_1*x93))+(((-1.0)*gclwh5_1*x187))+(((0.42819102)*gclwh7_1*x97))+(((-1.0)*x463))+(((0.00155960496929498)*x222))+x485+x472+(((-1.0)*gclwh13_1*x189))+(((0.2068108875)*gclwh11_1*x108))+(((-1.0)*gclwh11_10*x108))+(((0.036546103557)*x172))+(((-0.42819102)*gclwh11_1*x99)));
op[7]=((((0.00332834402025)*x201))+(((0.9138)*gclwh11_13*x99))+(((-0.9138)*gclwh7_13*x97))+(((-1.0)*x102*x207))+(((-1.0)*x474))+(((-1.0)*gclwh13_9*x214))+(((0.4569)*gclwh7_13*x93))+(((0.07799283)*x164))+x456+x469+(((-0.07799283)*x171))+(((-0.00332834402025)*x173))+(((-1.0)*x249))+(((-0.00332834402025)*x102))+(((0.9138)*gclwh9_13*x112))+(((-0.4569)*gclwh9_13*x107)));
op[8]=((((-0.4265)*gclwh7_0*x93))+(((0.00310689149625)*x96))+(((0.08318211)*x164))+(((0.4265)*gclwh11_0*x108))+(((-0.07280355)*x205))+(((-1.0)*gclwh13_9*x184))+(((-0.00310689149625)*x162))+(((-1.0)*x296))+((gclwh15_0*x196))+(((-0.08318211)*x171))+(((0.00310689149625)*x198))+x458+(((-0.07280355)*x130))+(((0.4265)*pp*x96))+(((-0.853)*gclwh9_0*x112))+(((-0.853)*gclwh11_0*x99))+(((0.853)*gclwh7_0*x97)));
op[9]=((-0.09583455)+(((-1.0)*x479))+x481);
op[10]=((((-1.0)*x484))+(((0.0010225625)*gclwh7_1*x93))+(((-1.0)*gclwh7_10*x93))+(((-0.01252412)*gclwh11_1*x99))+(((-1.0)*x472))+((gclwh11_1*x168))+(((-1.0)*gclwh7_1*x98))+(((-1.0)*gclwh13_1*x143))+x485+x463+((gclwh11_10*x108))+(((-0.0010225625)*gclwh11_1*x108))+(((-1.0)*gclwh5_1*x113))+((gclwh9_10*x107))+(((0.001068933642)*x172))+(((0.01252412)*gclwh7_1*x97)));
op[11]=((((0.00518928)*x171))+(((0.0608)*gclwh11_13*x99))+(((-0.000221452524)*x173))+(((0.0304)*gclwh7_13*x93))+(((-1.0)*x474))+(((-1.0)*x456))+x249+x469+(((0.0608)*gclwh9_13*x112))+(((-1.0)*x102*x177))+(((0.000221452524)*x201))+(((-1.0)*gclwh7_13*x300))+((gclwh13_9*x133))+(((-0.00518928)*x164))+(((-0.000221452524)*x102))+(((-0.0304)*gclwh9_13*x107)));
op[12]=((((-0.4569)*gclwh12_8*x93))+(((0.9138)*gclwh12_8*x97))+(((-0.4569)*gclwh4_8*x108))+(((0.07799283)*x224))+(((0.00332834402025)*x199))+(((-1.0)*x466))+(((-1.0)*gclwh4_8*x138))+(((-0.00332834402025)*x153))+x457+x476+(((0.9138)*gclwh4_8*x99))+(((0.07799283)*x193))+(((0.4569)*gclwh14_8*x107))+(((-1.0)*gclwh6_12*x214))+(((-0.9138)*gclwh14_8*x112))+(((-1.0)*x258)));
op[13]=((-0.2213801325)+(((0.00155960496929498)*x186))+(((0.42819102)*gclwh4_3*x99))+(((-0.2213801325)*gclwh1_3*x107))+(((0.2068108875)*gclwh14_3*x107))+(((0.42819102)*gclwh3_3*x97))+(((-0.42819102)*gclwh14_3*x112))+(((0.42819102)*gclwh12_3*x97))+(((-0.2213801325)*gclwh3_3*x93))+(((-1.0)*x488))+((gclwh3_3*x135))+((gclwh6_3*x189))+(((-1.0)*x470))+(((0.00155960496929498)*x220))+x487+x464+(((-1.0)*gclwh4_11*x108))+(((-0.2068108875)*gclwh12_3*x93))+(((0.42819102)*gclwh1_3*x112))+(((-1.0)*gclwh12_11*x93))+(((-0.00155960496929498)*x136))+((gclwh14_11*x107))+(((-1.0)*gclwh12_3*x135))+(((-0.2068108875)*gclwh4_3*x108)));
op[14]=((-0.053024565)+((x106*x166))+(((-0.014569245)*x208))+(((-1.0)*gclwh10_11*x192))+(((-4.0)*gclwh14_11*x112))+(((-1.0)*gclwh12_11*x103))+(((4.0)*gclwh12_11*x97))+(((-1.0)*gclwh8_11*x111))+(((0.014569245)*x166))+(((-1.0)*x197*x93))+(((-1.0)*x106*x208))+(((4.0)*gclwh4_11*x99))+((gclwh6_11*x154)));
op[15]=((((-1.0)*gclwh12_2*x175))+((gclwh1_2*x151))+(((0.853)*gclwh12_2*x97))+(((0.9746)*gclwh14_8*x112))+(((0.853)*gclwh1_2*x112))+(((-0.4873)*gclwh14_8*x107))+(((0.853)*gclwh4_2*x99))+(((0.853)*gclwh3_2*x97))+(((0.4494)*gclwh12_14*x97))+(((-0.4265)*gclwh1_2*x107))+(((-0.9746)*gclwh12_8*x97))+((gclwh14_14*x180))+(((-0.00354979654425)*x199))+(((-0.4265)*gclwh3_2*x93))+(((0.4873)*gclwh4_8*x108))+(((-1.0)*x219*x93))+(((0.4265)*gclwh14_2*x107))+(((-0.9746)*gclwh4_8*x99))+(((-0.07280355)*x121))+(((0.00354979654425)*x195))+(((-0.4265)*gclwh12_2*x93))+(((-0.853)*npx*x109))+((x107*x218))+(((-0.4494)*gclwh14_14*x112))+((gclwh14_2*x151))+(((-1.0)*gclwh10_2*x206))+(((-0.00163685467575)*x158))+(((-0.00163685467575)*gclwh12_14*r21))+(((0.00354979654425)*x153))+(((-0.4265)*gclwh4_2*x108))+(((0.4873)*gclwh12_8*x93))+((gclwh6_2*x156))+((gclwh3_2*x175))+(((-0.00310689149625)*x139))+(((-1.0)*x108*x216))+(((0.4494)*gclwh4_14*x99)));
op[16]=((((-0.0608)*gclwh4_8*x99))+(((0.000221452524)*x153))+(((0.00518928)*x193))+(((-1.0)*gclwh6_12*x133))+(((-1.0)*gclwh12_8*x300))+(((-1.0)*x476))+(((-0.000221452524)*x199))+x457+x466+(((0.0304)*gclwh12_8*x93))+(((0.00518928)*x224))+(((0.0608)*gclwh14_8*x112))+(((0.000221452524)*x195))+(((0.0304)*gclwh4_8*x108))+(((-0.0304)*gclwh14_8*x107))+(((-1.0)*x258)));
op[17]=((0.0135466825)+(((-0.01252412)*gclwh14_3*x112))+(((-4.561674317235e-5)*x136))+(((-1.0)*x488))+((gclwh6_3*x143))+(((-0.0135466825)*gclwh1_3*x107))+(((0.01252412)*gclwh4_3*x99))+(((-1.0)*x464))+(((4.561674317235e-5)*x186))+(((4.561674317235e-5)*x220))+((gclwh3_3*x98))+(((-1.0)*gclwh12_3*x98))+(((0.0010225625)*gclwh4_3*x108))+((gclwh4_11*x108))+x487+x470+(((0.01252412)*gclwh12_3*x97))+(((0.01252412)*gclwh3_3*x97))+(((0.0010225625)*gclwh12_3*x93))+((gclwh12_11*x93))+(((0.01252412)*gclwh1_3*x112))+(((-0.0135466825)*gclwh3_3*x93))+(((-0.0010225625)*gclwh14_3*x107))+(((-1.0)*gclwh14_11*x107)));
op[18]=((0.2213801325)+(((0.42819102)*gclwh2_1*x97))+(((-0.42819102)*gclwh13_1*x97))+(((0.42819102)*gclwh15_1*x112))+(((-1.0)*x486))+(((-0.2068108875)*pp*x105))+(((-1.0)*gclwh7_1*x189))+((gclwh2_1*x135))+(((-1.0)*x471))+((gclwh13_1*x135))+(((-0.2213801325)*gclwh2_1*x93))+((gclwh15_10*x107))+(((0.00155960496929498)*x223))+(((-1.0)*gclwh13_10*x93))+((gclwh11_1*x187))+x489+x465+(((-0.42819102)*gclwh5_1*x99))+(((-0.2213801325)*gclwh0_1*x107))+(((-0.00155960496929498)*x105))+(((0.2068108875)*gclwh13_1*x93))+(((0.2068108875)*gclwh5_1*x108))+(((0.00155960496929498)*x215))+(((-1.0)*gclwh5_10*x108))+(((0.42819102)*gclwh0_1*x112)));
op[19]=((((-0.9138)*gclwh5_9*x99))+(((-0.07799283)*x116))+(((-0.9138)*gclwh13_9*x97))+((gclwh7_13*x214))+(((0.4569)*gclwh5_9*x108))+(((-1.0)*x477))+(((0.00332834402025)*x152))+(((-1.0)*x461))+(((0.4569)*gclwh13_9*x93))+x281+x468+(((-0.4569)*gclwh15_9*x107))+(((-0.00332834402025)*x145))+(((-0.07799283)*x191))+(((0.9138)*gclwh15_9*x112))+(((0.00332834402025)*x120)));
op[20]=((((-1.0)*x178*x93))+(((-0.853)*gclwh13_0*x97))+(((-0.4873)*gclwh15_9*x107))+(((-0.00163685467575)*x100))+(((0.4494)*gclwh5_15*x99))+(((0.853)*gclwh2_0*x97))+(((-0.9746)*gclwh13_9*x97))+(((0.4265)*gclwh13_0*x93))+(((-0.00354979654425)*x145))+(((-0.4265)*gclwh15_0*x107))+(((-0.4494)*gclwh15_15*x112))+(((0.4873)*gclwh13_9*x93))+(((-0.00163685467575)*gclwh5_15*r22))+(((-0.4265)*gclwh0_0*x107))+(((0.9746)*gclwh15_9*x112))+(((0.00310689149625)*x182))+(((0.4494)*gclwh13_15*x97))+(((0.853)*gclwh0_0*x112))+(((-1.0)*gclwh15_0*x151))+(((0.00310689149625)*x117))+(((-1.0)*gclwh7_0*x156))+((gclwh11_0*x206))+(((-0.9746)*gclwh5_9*x99))+(((-0.4265)*gclwh2_0*x93))+(((0.00354979654425)*x152))+((gclwh0_0*x151))+(((0.853)*gclwh15_0*x112))+((gclwh9_0*x196))+(((0.00354979654425)*x120))+(((-0.853)*gclwh5_0*x99))+(((-1.0)*x108*x211))+(((0.4873)*gclwh5_9*x108))+((gclwh15_15*x180))+(((0.4265)*gclwh5_0*x108))+((x107*x119))+((gclwh13_0*x175)));
op[21]=((-0.053024565)+((gclwh11_10*x192))+(((-4.0)*gclwh5_10*x99))+(((-0.014569245)*x114))+(((0.014569245)*x146))+((gclwh13_10*x103))+(((-1.0)*x106*x114))+((gclwh9_10*x111))+(((-1.0)*gclwh7_10*x154))+(((4.0)*gclwh15_10*x112))+((x213*x93))+((x106*x146))+(((-4.0)*gclwh13_10*x97)));
op[22]=((-0.0135466825)+(((-0.01252412)*gclwh5_1*x99))+(((-0.0010225625)*gclwh13_1*x93))+(((-4.561674317235e-5)*x105))+(((-1.0)*gclwh15_10*x107))+(((-0.0135466825)*gclwh2_1*x93))+(((-1.0)*x486))+((gclwh5_10*x108))+(((-1.0)*x465))+(((0.01252412)*gclwh0_1*x112))+(((0.01252412)*gclwh15_1*x112))+(((4.561674317235e-5)*x223))+x489+x471+(((-1.0)*gclwh7_1*x143))+(((-0.0135466825)*gclwh0_1*x107))+((gclwh2_1*x98))+((gclwh13_10*x93))+(((0.0010225625)*pp*x105))+(((-0.0010225625)*gclwh5_1*x108))+(((0.01252412)*gclwh2_1*x97))+(((-0.01252412)*gclwh13_1*x97))+((gclwh11_1*x113))+((gclwh13_1*x98))+((gclwh5_1*x168)));
op[23]=((((-0.000221452524)*x120))+(((-0.000221452524)*x152))+(((0.000221452524)*x145))+((gclwh7_13*x133))+(((-0.0304)*gclwh13_9*x93))+(((-1.0)*x468))+(((-1.0)*x461))+((gclwh13_9*x300))+(((-0.0608)*gclwh15_9*x112))+x281+(((0.0608)*gclwh5_9*x99))+x477+(((-0.00518928)*x116))+(((-0.00518928)*x191))+(((0.0304)*gclwh15_9*x107))+(((-0.0304)*gclwh5_9*x108)));
op[24]=((-0.20533086)+(((-1.0)*x478))+x480);
op[25]=((((-0.0066566880405)*x174))+(((0.0066566880405)*x141))+(((0.0066566880405)*x157))+(((-1.0)*x460))+((gclwh14_2*x124))+(((1.8276)*gclwh6_2*x97))+x288+(((-0.9138)*gclwh6_2*x93))+(((0.9138)*gclwh10_2*x108))+(((0.9138)*gclwh8_2*x107))+(((-0.15598566)*x165))+(((-1.8276)*gclwh10_2*x99))+(((-1.8276)*gclwh8_2*x112))+(((-0.15598566)*x204)));
op[26]=((((-0.07671258)*x131))+(((-0.0062137829925)*x150))+(((-1.706)*gclwh8_12*x112))+(((0.853)*gclwh10_12*x108))+(((0.07671258)*x200))+(((-0.853)*gclwh6_12*x93))+(((1.706)*gclwh6_12*x97))+(((-0.07671258)*x140))+(((0.0062137829925)*x104))+((x104*x115))+(((0.0062137829925)*x217))+(((-1.706)*gclwh10_12*x99)));
op[27]=((((8.0)*gclwh8_11*x112))+(((-0.02913849)*x210))+(((0.02913849)*x110))+(((-1.0)*x108*x188))+(((-8.0)*gclwh6_11*x97))+((gclwh4_11*x122))+(((-1.0)*gclwh14_11*x170))+(((-0.02913849)*x128))+(((8.0)*gclwh10_11*x99))+(((-1.0)*x107*x161))+((gclwh12_11*x159))+((x209*x93)));
op[28]=((-0.01366176)+(((-1.0)*x480))+x478);
op[29]=((((0.0608)*gclwh8_2*x107))+(((-0.0608)*gclwh6_2*x93))+(((0.1216)*gclwh6_2*x97))+(((0.000442905048)*x157))+(((-0.01037856)*x204))+(((0.000442905048)*x141))+(((-0.1216)*gclwh8_2*x112))+((gclwh14_2*x144))+x460+(((-0.01037856)*x165))+(((0.0608)*gclwh10_2*x108))+(((-0.1216)*gclwh10_2*x99))+(((-1.0)*x288))+(((-0.000442905048)*x174)));
op[30]=((((0.9138)*pp*x96))+(((-0.0066566880405)*x162))+((gclwh15_0*x124))+(((-1.0)*x296))+(((-0.15598566)*x130))+(((0.0066566880405)*x198))+(((0.0066566880405)*x96))+x458+(((1.8276)*gclwh7_0*x97))+(((-1.8276)*gclwh9_0*x112))+(((-0.9138)*gclwh7_0*x93))+(((-1.8276)*gclwh11_0*x99))+(((-0.15598566)*x205))+(((0.9138)*gclwh11_0*x108)));
op[31]=((-0.20533086)+(((-1.0)*x479))+x481);
op[32]=((((0.02913849)*x127))+(((-1.0)*x212*x93))+((x107*x169))+(((-1.0)*gclwh13_10*x159))+(((-8.0)*gclwh9_10*x112))+((gclwh15_10*x170))+(((8.0)*gclwh7_10*x97))+(((0.02913849)*x148))+((x108*x149))+(((-1.0)*gclwh5_10*x122))+(((-0.02913849)*gclwh7_10*r21))+(((-8.0)*gclwh11_10*x99)));
op[33]=((((0.0062137829925)*x173))+((x102*x115))+(((0.07671258)*x160))+(((-0.07671258)*x163))+(((-0.07671258)*x221))+(((1.706)*gclwh7_13*x97))+(((-1.706)*gclwh11_13*x99))+(((-1.706)*gclwh9_13*x112))+(((0.0062137829925)*x102))+(((0.853)*gclwh9_13*x107))+(((-0.0062137829925)*x201))+(((-0.853)*gclwh7_13*x93)));
op[34]=((((0.000442905048)*x96))+(((-0.0608)*gclwh7_0*x93))+(((-0.01037856)*x205))+(((0.000442905048)*x198))+(((-0.1216)*gclwh11_0*x99))+(((0.0608)*pp*x96))+(((-0.1216)*gclwh9_0*x112))+(((-1.0)*x458))+x296+(((0.1216)*gclwh7_0*x97))+(((0.0608)*gclwh11_0*x108))+((gclwh15_0*x144))+(((-0.000442905048)*x162))+(((-0.01037856)*x130)));
IkReal x490=pz*pz;
IkReal x491=pp*pp;
IkReal x492=((0.1707)*pz);
IkReal x493=(npy*pz);
IkReal x494=(pp*r21);
IkReal x495=((0.1707)*rxp1_2);
IkReal x496=(gclwh13_1*pp);
IkReal x497=(gclwh9_13*rxp0_2);
IkReal x498=((4.561674317235e-5)*r21);
IkReal x499=((4.0)*gclwh12_11);
IkReal x500=(npz*pz);
IkReal x501=((0.00163685467575)*r21);
IkReal x502=(gclwh10_12*rxp2_2);
IkReal x503=(pz*r20);
IkReal x504=(gclwh4_2*r22);
IkReal x505=(gclwh11_13*r22);
IkReal x506=((0.02913849)*r22);
IkReal x507=((0.014569245)*r21);
IkReal x508=(gclwh15_1*r20);
IkReal x509=(pp*r20);
IkReal x510=((2.0)*gclwh11_10);
IkReal x511=((0.0072846225)*r21);
IkReal x512=(npx*pz);
IkReal x513=((0.001068933642)*rxp2_2);
IkReal x514=((2.0)*gclwh4_11);
IkReal x515=(gclwh5_9*r22);
IkReal x516=((0.08535)*pp);
IkReal x517=(gclwh2_0*pz);
IkReal x518=((0.019178145)*rxp0_2);
IkReal x519=((0.2247)*gclwh15_15);
IkReal x520=(gclwh9_0*rxp0_2);
IkReal x521=(gclwh8_2*rxp0_2);
IkReal x522=(gclwh12_8*rxp1_2);
IkReal x523=((0.3414)*rxp0_2);
IkReal x524=(pp*r22);
IkReal x525=(gclwh14_3*rxp0_2);
IkReal x526=(gclwh13_0*pz);
IkReal x527=(gclwh12_2*r21);
IkReal x528=(gclwh11_10*rxp2_2);
IkReal x529=((0.0072846225)*r22);
IkReal x530=((0.1707)*rxp2_2);
IkReal x531=(gclwh5_1*pp);
IkReal x532=(gclwh5_0*pz);
IkReal x533=((0.00155960496929498)*r21);
IkReal x534=((2.0)*gclwh9_10);
IkReal x535=((2.0)*gclwh15_10);
IkReal x536=(gclwh14_11*r20);
IkReal x537=((0.1707)*rxp0_2);
IkReal x538=((4.0)*gclwh14_11);
IkReal x539=((0.00332834402025)*r22);
IkReal x540=((0.08318211)*rxp0_2);
IkReal x541=(gclwh12_14*rxp1_2);
IkReal x542=((0.4494)*gclwh4_14);
IkReal x543=(gclwh6_12*rxp1_2);
IkReal x544=((0.001068933642)*rxp1_2);
IkReal x545=(gclwh15_9*r20);
IkReal x546=((0.4494)*gclwh15_15);
IkReal x547=(gclwh4_8*rxp2_2);
IkReal x548=((0.2247)*gclwh12_14);
IkReal x549=((0.0072846225)*r20);
IkReal x550=((0.00310689149625)*r20);
IkReal x551=((0.3414)*rxp1_2);
IkReal x552=((0.6828)*rxp0_2);
IkReal x553=((2.0)*gclwh7_10);
IkReal x554=((0.000442905048)*r21);
IkReal x555=((1.0)*pp);
IkReal x556=((0.0032737093515)*r20);
IkReal x557=((0.07280355)*rxp1_2);
IkReal x558=((1.0)*pz);
IkReal x559=((4.0)*gclwh15_10);
IkReal x560=(gclwh4_14*r22);
IkReal x561=((0.000818427337875)*r20);
IkReal x562=(gclwh7_0*pz);
IkReal x563=(gclwh5_15*rxp2_2);
IkReal x564=(gclwh12_3*pp);
IkReal x565=(gclwh10_2*pz);
IkReal x566=(gclwh13_9*r21);
IkReal x567=(gclwh13_9*rxp1_2);
IkReal x568=((0.014569245)*rxp0_2);
IkReal x569=((0.019178145)*rxp1_2);
IkReal x570=((4.561674317235e-5)*r22);
IkReal x571=((0.15598566)*rxp1_2);
IkReal x572=(gclwh5_0*r22);
IkReal x573=(gclwh5_9*rxp2_2);
IkReal x574=((0.000221452524)*r20);
IkReal x575=(gclwh4_3*pp);
IkReal x576=(gclwh15_1*rxp0_2);
IkReal x577=(gclwh6_12*r21);
IkReal x578=((0.03835629)*rxp0_2);
IkReal x579=((0.019178145)*rxp2_2);
IkReal x580=(gclwh7_1*pp);
IkReal x581=((0.000818427337875)*r22);
IkReal x582=(gclwh10_11*rxp2_2);
IkReal x583=((0.000442905048)*r20);
IkReal x584=((0.4569)*pp);
IkReal x585=((0.000818427337875)*r21);
IkReal x586=((4.0)*gclwh4_11);
IkReal x587=((0.4494)*gclwh12_14);
IkReal x588=((2.0)*pp);
IkReal x589=((0.014569245)*r22);
IkReal x590=(gclwh12_8*r21);
IkReal x591=((0.00332834402025)*r20);
IkReal x592=((2.0)*gclwh6_11);
IkReal x593=(gclwh1_3*r20);
IkReal x594=((0.036546103557)*rxp2_2);
IkReal x595=((0.036546103557)*rxp1_2);
IkReal x596=((0.3414)*rxp2_2);
IkReal x597=(gclwh4_8*r22);
IkReal x598=((0.07280355)*rxp0_2);
IkReal x599=((2.0)*gclwh12_11);
IkReal x600=(gclwh2_0*r21);
IkReal x601=(gclwh5_15*r22);
IkReal x602=(gclwh6_2*pz);
IkReal x603=((0.4494)*gclwh13_15);
IkReal x604=(gclwh7_13*r21);
IkReal x605=(gclwh11_0*pz);
IkReal x606=((0.014569245)*r20);
IkReal x607=((0.00518928)*rxp0_2);
IkReal x608=(gclwh13_0*r21);
IkReal x609=((0.00310689149625)*r22);
IkReal x610=((2.0)*gclwh8_11);
IkReal x611=(gclwh11_0*rxp2_2);
IkReal x612=((0.00163685467575)*r20);
IkReal x613=((0.07280355)*rxp2_2);
IkReal x614=((4.0)*gclwh5_10);
IkReal x615=((2.0)*gclwh5_10);
IkReal x616=((0.6828)*rxp1_2);
IkReal x617=(gclwh8_12*rxp0_2);
IkReal x618=((0.00155960496929498)*r22);
IkReal x619=((0.07799283)*rxp0_2);
IkReal x620=((0.4494)*gclwh14_14);
IkReal x621=((0.2247)*gclwh5_15);
IkReal x622=((2.0)*gclwh13_10);
IkReal x623=((0.00310689149625)*r21);
IkReal x624=((0.2247)*gclwh4_14);
IkReal x625=(gclwh14_3*r20);
IkReal x626=((0.01037856)*rxp1_2);
IkReal x627=(gclwh11_13*rxp2_2);
IkReal x628=((0.4494)*gclwh5_15);
IkReal x629=((0.2247)*gclwh14_14);
IkReal x630=(gclwh12_2*pz);
IkReal x631=((0.02913849)*r21);
IkReal x632=((0.0066566880405)*r20);
IkReal x633=(gclwh14_8*r20);
IkReal x634=((0.0032737093515)*r21);
IkReal x635=((0.2247)*gclwh13_15);
IkReal x636=(gclwh0_1*r20);
IkReal x637=((2.0)*gclwh10_11);
IkReal x638=(gclwh7_13*rxp1_2);
IkReal x639=(gclwh10_2*rxp2_2);
IkReal x640=((4.0)*gclwh13_10);
IkReal x641=((2.0)*gclwh14_11);
IkReal x642=(gclwh8_11*x523);
IkReal x643=((0.3414)*x582);
IkReal x644=(gclwh12_11*x507);
IkReal x645=(gclwh4_11*x589);
IkReal x646=((0.014569245)*x536);
IkReal x647=(gclwh6_11*x551);
IkReal x648=((0.00163685467575)*x560);
IkReal x649=(gclwh12_14*x501);
IkReal x650=(gclwh14_14*x612);
IkReal x651=((0.00163685467575)*x601);
IkReal x652=(gclwh13_15*x501);
IkReal x653=(gclwh15_15*x612);
IkReal x654=(gclwh7_10*x551);
IkReal x655=(gclwh15_10*x606);
IkReal x656=(gclwh13_10*x507);
IkReal x657=((0.3414)*x528);
IkReal x658=(gclwh5_10*x589);
IkReal x659=(gclwh9_10*x523);
IkReal x660=((0.019178145)*x541);
IkReal x661=(gclwh4_14*x579);
IkReal x662=(gclwh6_5*x585);
IkReal x663=(gclwh10_5*x581);
IkReal x664=(gclwh8_5*x561);
IkReal x665=(gclwh14_14*x518);
IkReal x666=((0.014569245)*x547);
IkReal x667=(gclwh14_11*x537);
IkReal x668=((0.014569245)*x522);
IkReal x669=(gclwh10_11*x529);
IkReal x670=(gclwh8_11*x549);
IkReal x671=(gclwh6_11*x511);
IkReal x672=(gclwh4_11*x530);
IkReal x673=(gclwh14_8*x568);
IkReal x674=(gclwh12_11*x495);
IkReal x675=(gclwh5_10*x596);
IkReal x676=(gclwh7_10*x507);
IkReal x677=(gclwh13_10*x551);
IkReal x678=(gclwh13_10*x495);
IkReal x679=(gclwh7_10*x511);
IkReal x680=((0.014569245)*x567);
IkReal x681=(gclwh5_10*x530);
IkReal x682=((0.014569245)*x573);
IkReal x683=(gclwh15_9*x568);
IkReal x684=(gclwh11_10*x529);
IkReal x685=(gclwh15_10*x537);
IkReal x686=(gclwh9_10*x549);
IkReal x687=(gclwh13_15*x569);
IkReal x688=(gclwh7_7*x585);
IkReal x689=((0.019178145)*x563);
IkReal x690=(gclwh15_15*x518);
IkReal x691=(gclwh11_7*x581);
IkReal x692=(gclwh9_7*x561);
IkReal x693=(gclwh12_14*x585);
IkReal x694=(gclwh8_5*x518);
IkReal x695=(gclwh10_5*x579);
IkReal x696=((0.000818427337875)*x560);
IkReal x697=(gclwh6_5*x569);
IkReal x698=(gclwh14_14*x561);
IkReal x699=((0.000621742530375)*x597);
IkReal x700=(gclwh6_11*x495);
IkReal x701=((0.0072846225)*x536);
IkReal x702=((0.000621742530375)*x590);
IkReal x703=((0.000621742530375)*x633);
IkReal x704=(gclwh8_11*x537);
IkReal x705=(gclwh10_11*x530);
IkReal x706=(gclwh12_11*x511);
IkReal x707=(gclwh4_11*x529);
IkReal x708=(gclwh15_10*x549);
IkReal x709=((0.000621742530375)*x545);
IkReal x710=(gclwh7_10*x495);
IkReal x711=((0.000621742530375)*x566);
IkReal x712=(gclwh9_10*x537);
IkReal x713=(gclwh5_10*x529);
IkReal x714=((0.1707)*x528);
IkReal x715=(gclwh13_10*x511);
IkReal x716=((0.000621742530375)*x515);
IkReal x717=(r21*x491);
IkReal x718=((2.0)*x490);
IkReal x719=((1.0)*x491);
IkReal x720=(x514*x524);
IkReal x721=(x494*x599);
IkReal x722=(x512*x538);
IkReal x723=(x509*x641);
IkReal x724=(x493*x499);
IkReal x725=(x500*x586);
IkReal x726=(x524*x624);
IkReal x727=(x512*x620);
IkReal x728=(x494*x548);
IkReal x729=(x500*x542);
IkReal x730=(x509*x629);
IkReal x731=(x493*x587);
IkReal x732=(x524*x621);
IkReal x733=(x494*x635);
IkReal x734=(x512*x546);
IkReal x735=(x509*x519);
IkReal x736=(x493*x603);
IkReal x737=(x500*x628);
IkReal x738=(x509*x535);
IkReal x739=(x500*x614);
IkReal x740=(x493*x640);
IkReal x741=(x494*x622);
IkReal x742=(x512*x559);
IkReal x743=(x524*x615);
IkReal x744=((0.2247)*gclwh10_5*x500);
IkReal x745=((0.2247)*gclwh8_5*x512);
IkReal x746=((0.11235)*gclwh6_5*x494);
IkReal x747=((0.11235)*gclwh8_5*x509);
IkReal x748=((0.2247)*gclwh6_5*x493);
IkReal x749=((0.11235)*gclwh10_5*x524);
IkReal x750=(x495*x564);
IkReal x751=(gclwh14_2*rxp0_2*x492);
IkReal x752=(gclwh6_3*x717);
IkReal x753=(x529*x565);
IkReal x754=(x493*x592);
IkReal x755=(x524*x565);
IkReal x756=(x530*x575);
IkReal x757=((0.0072846225)*gclwh8_2*x503);
IkReal x758=(gclwh8_2*pp*x503);
IkReal x759=(x511*x602);
IkReal x760=(gclwh12_2*rxp1_2*x492);
IkReal x761=(x500*x637);
IkReal x762=(gclwh4_2*rxp2_2*x492);
IkReal x763=(x512*x610);
IkReal x764=((0.1707)*pp*x525);
IkReal x765=(x494*x553);
IkReal x766=((4.0)*gclwh9_10*x512);
IkReal x767=((4.0)*gclwh11_10*x500);
IkReal x768=(x500*x510);
IkReal x769=(x495*x496);
IkReal x770=(x512*x534);
IkReal x771=(gclwh7_1*x717);
IkReal x772=(x529*x605);
IkReal x773=(gclwh15_0*rxp0_2*x492);
IkReal x774=(x524*x605);
IkReal x775=(x530*x531);
IkReal x776=((0.0072846225)*gclwh9_0*x503);
IkReal x777=(gclwh9_0*pp*x503);
IkReal x778=(gclwh15_1*pp*x537);
IkReal x779=(gclwh13_0*rxp1_2*x492);
IkReal x780=(gclwh5_0*rxp2_2*x492);
IkReal x781=(x493*x553);
IkReal x782=(x511*x562);
IkReal x783=((0.2247)*gclwh9_7*x512);
IkReal x784=((0.11235)*gclwh7_7*x494);
IkReal x785=((0.2247)*gclwh11_7*x500);
IkReal x786=((0.11235)*gclwh11_7*x524);
IkReal x787=((0.2247)*gclwh7_7*x493);
IkReal x788=((0.11235)*gclwh9_7*x509);
IkReal x789=((0.11235)*gclwh12_14*x494);
IkReal x790=(x512*x629);
IkReal x791=((0.11235)*gclwh4_14*x524);
IkReal x792=(x493*x548);
IkReal x793=((0.11235)*gclwh14_14*x509);
IkReal x794=(x500*x624);
IkReal x795=(gclwh14_8*npx*x492);
IkReal x796=(gclwh14_2*pp*x503);
IkReal x797=(gclwh12_3*x717);
IkReal x798=(gclwh3_2*pz*x511);
IkReal x799=((0.08535)*gclwh12_8*x494);
IkReal x800=(x500*x514);
IkReal x801=(gclwh6_2*rxp1_2*x492);
IkReal x802=(gclwh3_3*x717);
IkReal x803=(x491*x593);
IkReal x804=(x516*x597);
IkReal x805=((0.0072846225)*gclwh14_2*x503);
IkReal x806=(gclwh4_3*r22*x491);
IkReal x807=((0.0072846225)*gclwh1_2*x503);
IkReal x808=(x493*x599);
IkReal x809=(gclwh12_8*npy*x492);
IkReal x810=(gclwh4_8*npz*x492);
IkReal x811=(x492*x521);
IkReal x812=((0.08535)*gclwh14_8*x509);
IkReal x813=(x512*x641);
IkReal x814=(gclwh6_3*pp*x495);
IkReal x815=(x492*x639);
IkReal x816=((0.0072846225)*pz*x504);
IkReal x817=(x511*x630);
IkReal x818=(x511*x526);
IkReal x819=(x491*x508);
IkReal x820=((0.08535)*gclwh15_9*x509);
IkReal x821=(x524*x532);
IkReal x822=(x494*x526);
IkReal x823=(x511*x517);
IkReal x824=((0.0072846225)*gclwh0_0*x503);
IkReal x825=(x492*x520);
IkReal x826=(x529*x532);
IkReal x827=(gclwh2_1*x717);
IkReal x828=(x500*x615);
IkReal x829=(gclwh5_9*npz*x492);
IkReal x830=(x495*x580);
IkReal x831=(x493*x622);
IkReal x832=(x492*x611);
IkReal x833=(gclwh13_9*npy*x492);
IkReal x834=(x491*x636);
IkReal x835=(x515*x516);
IkReal x836=(gclwh15_9*npx*x492);
IkReal x837=((0.08535)*gclwh13_9*x494);
IkReal x838=(gclwh11_1*pp*x530);
IkReal x839=(x512*x535);
IkReal x840=(gclwh7_0*rxp1_2*x492);
IkReal x841=((0.0072846225)*gclwh15_0*x503);
IkReal x842=(gclwh6_2*npy*x718);
IkReal x843=(gclwh6_3*x493*x588);
IkReal x844=(gclwh6_2*x494*x558);
IkReal x845=(gclwh10_2*npz*x718);
IkReal x846=(gclwh8_2*npx*x718);
IkReal x847=(gclwh11_1*x500*x588);
IkReal x848=(gclwh7_0*npy*x718);
IkReal x849=(gclwh9_0*npx*x718);
IkReal x850=(gclwh11_1*r22*x719);
IkReal x851=((2.0)*x493*x580);
IkReal x852=(gclwh11_0*npz*x718);
IkReal x853=(gclwh7_0*x494*x558);
IkReal x854=(gclwh12_2*npy*x718);
IkReal x855=(gclwh3_2*npy*x718);
IkReal x856=(gclwh1_2*npx*x718);
IkReal x857=(gclwh14_3*x512*x588);
IkReal x858=(gclwh4_2*npz*x718);
IkReal x859=((2.0)*x500*x575);
IkReal x860=(gclwh12_2*x494*x558);
IkReal x861=(gclwh1_2*x503*x555);
IkReal x862=(gclwh3_3*x493*x588);
IkReal x863=(pz*x504*x555);
IkReal x864=(gclwh1_3*x512*x588);
IkReal x865=(gclwh3_2*x494*x558);
IkReal x866=((2.0)*x493*x564);
IkReal x867=(gclwh14_2*npx*x718);
IkReal x868=(x625*x719);
IkReal x869=(gclwh0_0*npx*x718);
IkReal x870=(gclwh2_0*npy*x718);
IkReal x871=((2.0)*x500*x531);
IkReal x872=((2.0)*x493*x496);
IkReal x873=(gclwh15_0*npx*x718);
IkReal x874=(gclwh2_1*x493*x588);
IkReal x875=(gclwh0_1*x512*x588);
IkReal x876=(gclwh5_0*npz*x718);
IkReal x877=(gclwh13_0*npy*x718);
IkReal x878=(gclwh0_0*x503*x555);
IkReal x879=(gclwh15_0*x503*x555);
IkReal x880=((1.0)*x494*x517);
IkReal x881=((1.0)*gclwh13_1*x717);
IkReal x882=(gclwh5_1*r22*x719);
IkReal x883=(gclwh15_1*x512*x588);
IkReal x884=(x694+x695);
IkReal x885=(x661+x660);
IkReal x886=(x689+x687);
IkReal x887=(x669+x667+x670+x754);
IkReal x888=(x686+x685+x684+x781);
IkReal x889=(x710+x708+x828+x831);
IkReal x890=(x700+x701+x808+x800);
IkReal x891=(x650+x731+x730+x729);
IkReal x892=(x698+x793+x792+x794);
IkReal x893=(x653+x737+x736+x735);
IkReal x894=(x688+x783+x784+x785);
IkReal x895=(x662+x746+x744+x745);
IkReal x896=(x706+x707+x704+x705+x813);
IkReal x897=(x713+x712+x715+x714+x839);
IkReal x898=(x672+x671+x674+x761+x763);
IkReal x899=(x678+x679+x681+x770+x768);
IkReal x900=(x647+x646+x723+x724+x725);
IkReal x901=(x649+x648+x726+x727+x728);
IkReal x902=(x654+x655+x739+x738+x740);
IkReal x903=(x663+x664+x747+x748+x749);
IkReal x904=(x651+x652+x734+x733+x732);
IkReal x905=(x691+x692+x786+x787+x788);
IkReal x906=(x696+x693+x791+x790+x789);
IkReal x907=(((gclwh15_10*x523))+((gclwh11_10*x589))+((x509*x534))+((x510*x524))+((gclwh9_10*x606))+(((4.0)*gclwh7_10*x493)));
IkReal x908=(x676+x677+x675+x765+x766+x767);
IkReal x909=(x656+x657+x658+x659+x742+x743+x741);
IkReal x910=(x645+x644+x643+x642+x720+x721+x722);
IkReal x911=(x673+x759+x764+x760+x762+x843+x845+x844+x846);
IkReal x912=(x668+x666+x755+x757+x756+x751+x750+x753+x752+x758+x842);
IkReal x913=(x683+x779+x778+x782+x780+x852+x853+x850+x851+x849);
IkReal x914=(x682+x680+x773+x772+x771+x777+x776+x775+x774+x769+x847+x848);
IkReal x915=(x711+x716+x878+x879+x874+x875+x876+x877+x881+x880+x883+x882+x835+x836+x837+x838+x841+x840);
IkReal x916=(x492+x699+x702+x795+x797+x796+x799+x798+x856+x857+x854+x855+x858+x805+x804+x807+x806+x801+x803+x802);
IkReal x917=(x703+x859+x868+x867+x866+x865+x864+x863+x862+x861+x860+x816+x817+x814+x815+x812+x810+x811+x809);
IkReal x918=(x492+x709+x869+x870+x871+x872+x873+x818+x819+x829+x823+x822+x821+x820+x827+x826+x825+x824+x834+x830+x832+x833);
op[35]=((-0.01366176)+(((-1.0)*x907))+x908);
op[36]=((0.392270175)+(((-1.0)*x910))+x900);
op[37]=((((1.8276)*gclwh1_2*x512))+(((-0.9138)*gclwh1_2*x509))+(((-0.0066566880405)*x527))+(((1.8276)*gclwh12_2*x493))+(((1.8276)*gclwh4_2*x500))+(((-1.0)*x901))+(((0.9138)*gclwh14_2*x509))+(((-0.9138)*gclwh12_2*x494))+(((0.0066566880405)*gclwh3_2*r21))+(((-0.9138)*pp*x504))+(((-1.8276)*gclwh14_2*x512))+(((-0.9138)*gclwh3_2*x494))+(((-0.0066566880405)*x504))+((gclwh6_2*x571))+x891+((gclwh14_2*x632))+(((-0.15598566)*x639))+((gclwh1_2*x632))+(((-0.15598566)*x521))+(((1.8276)*gclwh3_2*x493)));
op[38]=((((-1.0)*x524*x542))+(((-1.0)*gclwh12_14*x634))+((x509*x620))+(((-0.1456071)*x617))+(((-0.1456071)*x502))+(((-0.8988)*gclwh14_14*x512))+(((0.8988)*gclwh12_14*x493))+(((0.1456071)*x543))+((gclwh14_14*x556))+(((-1.0)*x494*x587))+(((-0.0032737093515)*x560))+(((0.8988)*gclwh4_14*x500)));
op[39]=((-0.00506895)+(((8.0)*gclwh14_11*x512))+((x524*x586))+(((-8.0)*gclwh12_11*x493))+((gclwh8_11*x552))+(((0.6828)*x582))+(((-1.0)*gclwh6_11*x616))+((x494*x499))+((gclwh12_11*x631))+(((-0.02913849)*x536))+(((-8.0)*gclwh4_11*x500))+(((-1.0)*x509*x538))+((gclwh4_11*x506)));
op[40]=((0.023396725)+(((-1.0)*x900))+x910);
op[41]=((((-0.01037856)*x521))+(((-0.0608)*pp*x504))+(((-0.000442905048)*x527))+(((-1.0)*x891))+(((-0.0608)*gclwh3_2*x494))+(((-0.1216)*gclwh14_2*x512))+(((0.1216)*gclwh4_2*x500))+(((0.1216)*gclwh1_2*x512))+(((-0.01037856)*x639))+(((0.0608)*gclwh14_2*x509))+((gclwh3_2*x554))+(((0.1216)*gclwh12_2*x493))+((gclwh1_2*x583))+(((0.1216)*gclwh3_2*x493))+(((-0.000442905048)*x504))+(((-0.0608)*gclwh12_2*x494))+((gclwh14_2*x583))+(((-0.0608)*gclwh1_2*x509))+x901+((gclwh6_2*x626)));
op[42]=((((0.15598566)*x520))+(((0.9138)*gclwh13_0*x494))+(((-0.9138)*gclwh2_0*x494))+(((-1.8276)*gclwh13_0*x493))+(((0.9138)*gclwh5_0*x524))+(((-1.0)*gclwh15_0*x632))+((gclwh0_0*x632))+(((-1.0)*x904))+(((1.8276)*gclwh15_0*x512))+(((1.8276)*gclwh0_0*x512))+(((-0.9138)*gclwh0_0*x509))+(((0.15598566)*x611))+(((-0.9138)*gclwh15_0*x509))+(((1.8276)*gclwh2_0*x493))+(((-1.8276)*gclwh5_0*x500))+x893+(((0.0066566880405)*x600))+(((0.0066566880405)*x608))+(((-1.0)*gclwh7_0*x571))+(((0.0066566880405)*x572)));
op[43]=((0.392270175)+(((-1.0)*x902))+x909);
op[44]=((0.00506895)+((gclwh13_10*x631))+(((0.6828)*x528))+(((-8.0)*gclwh5_10*x500))+((x494*x640))+((gclwh5_10*x506))+(((-1.0)*x509*x559))+(((-0.02913849)*gclwh15_10*r20))+(((-8.0)*gclwh13_10*x493))+((x524*x614))+(((-1.0)*gclwh7_10*x616))+(((8.0)*gclwh15_10*x512))+((gclwh9_10*x552)));
op[45]=((((-1.0)*gclwh15_15*x556))+(((-0.8988)*gclwh5_15*x500))+(((0.1456071)*x627))+((gclwh13_15*x634))+(((-0.1456071)*x638))+((x524*x628))+(((0.1456071)*x497))+((x494*x603))+(((0.0032737093515)*x601))+(((-1.0)*x509*x546))+(((-0.8988)*gclwh13_15*x493))+(((0.8988)*gclwh15_15*x512)));
op[46]=((((0.0608)*gclwh5_0*x524))+((gclwh2_0*x554))+((gclwh13_0*x554))+(((0.000442905048)*x572))+(((0.01037856)*x611))+((gclwh0_0*x583))+(((0.1216)*gclwh0_0*x512))+(((-0.0608)*gclwh2_0*x494))+(((-0.0608)*gclwh15_0*x509))+(((-1.0)*x893))+(((-0.1216)*gclwh13_0*x493))+(((0.1216)*gclwh15_0*x512))+(((0.0608)*gclwh13_0*x494))+(((-0.1216)*gclwh5_0*x500))+(((-1.0)*gclwh7_0*x626))+(((-0.0608)*gclwh0_0*x509))+(((-1.0)*gclwh15_0*x583))+(((0.1216)*gclwh2_0*x493))+(((0.01037856)*x520))+x904);
op[47]=((0.023396725)+(((-1.0)*x909))+x902);
op[48]=(((gclwh10_12*x539))+((gclwh14_8*x619))+(((-1.0)*x903))+(((-1.0)*x885))+(((-0.9138)*gclwh8_12*x512))+(((0.4569)*gclwh10_12*x524))+(((-0.4569)*gclwh6_12*x494))+(((0.4569)*gclwh8_12*x509))+(((-0.9138)*gclwh10_12*x500))+((gclwh8_12*x591))+x665+(((-0.07799283)*x522))+(((-0.07799283)*x547))+x895+(((0.9138)*gclwh6_12*x493))+(((-0.00332834402025)*x577)));
op[49]=((((0.42819102)*gclwh6_3*x493))+(((-1.0)*gclwh12_3*x595))+(((-1.0)*gclwh4_3*x594))+(((-1.0)*x911))+((gclwh6_11*x494))+(((-1.0)*gclwh10_11*x524))+(((-1.0)*x887))+(((-1.0)*gclwh6_3*x533))+(((0.036546103557)*x525))+x898+x912+(((-0.2068108875)*gclwh6_3*x494))+(((-1.0)*gclwh8_11*x509)));
op[50]=((0.09583455)+((gclwh12_11*x551))+((x494*x592))+(((-1.0)*gclwh14_11*x523))+(((-1.0)*x524*x637))+(((-4.0)*gclwh6_11*x493))+((gclwh4_11*x596))+(((4.0)*gclwh10_11*x500))+(((-1.0)*x509*x610))+((gclwh6_11*x507))+(((-1.0)*gclwh8_11*x606))+(((4.0)*gclwh8_11*x512))+(((-1.0)*gclwh10_11*x589)));
op[51]=((((0.4265)*gclwh6_2*x494))+(((-1.0)*gclwh8_2*x550))+(((-1.0)*gclwh14_2*x598))+(((-1.0)*gclwh14_14*x578))+(((0.853)*gclwh10_2*x500))+(((0.08318211)*x522))+(((0.08318211)*x547))+(((0.03835629)*gclwh4_14*rxp2_2))+(((-0.853)*gclwh6_2*x493))+(((-0.4265)*gclwh8_2*x509))+(((0.853)*gclwh8_2*x512))+((gclwh12_2*x557))+(((-1.0)*gclwh14_8*x540))+(((0.03835629)*x541))+((gclwh4_2*x613))+(((-0.4265)*gclwh10_2*x524))+(((-1.0)*gclwh10_2*x609))+((gclwh6_2*x623)));
op[52]=((((0.0304)*gclwh8_12*x509))+(((0.00518928)*x547))+(((-0.0608)*gclwh8_12*x512))+(((-1.0)*gclwh14_8*x607))+(((-1.0)*x903))+(((-0.0608)*gclwh10_12*x500))+((gclwh8_12*x574))+(((0.000221452524)*gclwh10_12*r22))+(((-0.000221452524)*x577))+(((-0.0304)*gclwh6_12*x494))+(((0.0608)*gclwh6_12*x493))+(((-1.0)*x665))+(((0.0304)*gclwh10_12*x524))+x885+x895+(((0.00518928)*x522)));
op[53]=(((gclwh8_11*x509))+(((0.01252412)*gclwh6_3*x493))+(((0.001068933642)*x525))+(((-1.0)*x898))+(((-1.0)*gclwh6_3*x498))+(((-1.0)*x911))+(((-1.0)*gclwh4_3*x513))+(((0.0010225625)*gclwh6_3*x494))+x887+((gclwh10_11*x524))+(((-1.0)*gclwh6_11*x494))+x912+(((-1.0)*gclwh12_3*x544)));
op[54]=((((0.036546103557)*x576))+(((-1.0)*gclwh7_1*x533))+(((-0.42819102)*gclwh11_1*x500))+((gclwh9_10*x509))+(((-1.0)*gclwh5_1*x594))+(((-1.0)*x899))+(((-1.0)*x913))+(((0.2068108875)*gclwh11_1*x524))+((gclwh11_10*x524))+(((-1.0)*gclwh13_1*x595))+(((0.42819102)*gclwh7_1*x493))+(((-1.0)*gclwh7_10*x494))+((gclwh11_1*x618))+x888+x914+(((-0.2068108875)*gclwh7_1*x494)));
op[55]=((((-0.9138)*gclwh11_13*x500))+(((-0.07799283)*x567))+((gclwh9_13*x591))+(((-1.0)*x905))+((x505*x584))+(((-1.0)*x886))+(((-0.4569)*gclwh7_13*x494))+(((0.4569)*gclwh9_13*x509))+x690+(((-0.9138)*gclwh9_13*x512))+(((-0.00332834402025)*x604))+x894+(((0.00332834402025)*x505))+((gclwh15_9*x619))+(((-0.07799283)*x573))+(((0.9138)*gclwh7_13*x493)));
op[56]=(((gclwh7_0*x623))+(((-0.03835629)*x563))+((gclwh15_15*x578))+(((-1.0)*gclwh15_0*x598))+((gclwh15_9*x540))+((gclwh13_0*x557))+(((-0.4265)*gclwh9_0*x509))+((gclwh5_0*x613))+(((-1.0)*gclwh11_0*x609))+(((-1.0)*gclwh9_0*x550))+(((-0.08318211)*x567))+(((-0.4265)*gclwh11_0*x524))+(((0.4265)*gclwh7_0*x494))+(((-0.853)*gclwh7_0*x493))+(((0.853)*gclwh9_0*x512))+(((-0.08318211)*x573))+(((0.853)*gclwh11_0*x500))+(((-0.03835629)*gclwh13_15*rxp1_2)));
op[57]=((0.09583455)+(((-1.0)*x907))+x908);
op[58]=(((gclwh11_1*x570))+(((-0.0010225625)*gclwh11_1*x524))+(((0.001068933642)*x576))+(((-1.0)*x913))+(((-1.0)*x888))+(((-0.01252412)*gclwh11_1*x500))+(((0.0010225625)*gclwh7_1*x494))+(((-1.0)*gclwh11_10*x524))+(((-1.0)*gclwh7_1*x498))+(((-1.0)*gclwh9_10*x509))+x899+((gclwh7_10*x494))+(((-1.0)*gclwh5_1*x513))+x914+(((-1.0)*gclwh13_1*x544))+(((0.01252412)*gclwh7_1*x493)));
op[59]=((((0.0608)*gclwh7_13*x493))+(((0.00518928)*x573))+(((-0.000221452524)*x604))+(((0.00518928)*x567))+(((-1.0)*gclwh15_9*x607))+(((-1.0)*x905))+(((0.0304)*pp*x505))+(((-0.0608)*gclwh11_13*x500))+((gclwh9_13*x574))+(((0.0304)*gclwh9_13*x509))+(((-1.0)*x690))+(((-0.0304)*gclwh7_13*x494))+(((0.000221452524)*x505))+x886+x894+(((-0.0608)*gclwh9_13*x512)));
op[60]=((((-1.0)*gclwh4_8*x539))+(((-0.07799283)*x502))+(((-0.00332834402025)*x590))+(((-1.0)*x906))+(((-0.07799283)*x617))+(((-0.4569)*gclwh12_8*x494))+((gclwh14_8*x591))+(((0.07799283)*x543))+(((0.9138)*gclwh4_8*x500))+(((0.9138)*gclwh12_8*x493))+(((-1.0)*x697))+(((0.4569)*gclwh14_8*x509))+x884+x892+(((-0.9138)*gclwh14_8*x512))+(((-0.4569)*gclwh4_8*x524)));
op[61]=((0.2213801325)+(((-0.2068108875)*gclwh12_3*x494))+(((-0.2068108875)*gclwh4_3*x524))+(((-1.0)*gclwh4_3*x618))+(((-1.0)*gclwh14_11*x509))+(((0.00155960496929498)*x625))+(((-1.0)*x890))+((gclwh12_11*x494))+(((-1.0)*x917))+(((0.42819102)*gclwh4_3*x500))+(((0.42819102)*gclwh3_3*x493))+(((0.42819102)*gclwh12_3*x493))+(((-0.2213801325)*gclwh1_3*x509))+(((-0.2213801325)*gclwh3_3*x494))+(((0.2068108875)*gclwh14_3*x509))+x896+(((-1.0)*gclwh12_3*x533))+((gclwh4_11*x524))+x916+((gclwh3_3*x533))+((gclwh6_3*x595))+(((-0.42819102)*gclwh14_3*x512))+(((0.00155960496929498)*x593))+(((0.42819102)*gclwh1_3*x512)));
op[62]=((0.053024565)+(((-1.0)*x900))+x910);
op[63]=((((0.07280355)*x521))+(((-1.0)*gclwh1_2*x550))+(((-0.853)*gclwh1_2*x512))+(((0.9746)*gclwh14_8*x512))+(((0.4265)*gclwh3_2*x494))+(((-0.9746)*gclwh4_8*x500))+(((-0.853)*gclwh4_2*x500))+(((-0.9746)*gclwh12_8*x493))+((gclwh10_2*x613))+(((-0.853)*gclwh3_2*x493))+(((-1.0)*x891))+(((0.00354979654425)*x597))+(((0.00354979654425)*x590))+(((0.00310689149625)*x527))+(((0.4265)*gclwh12_2*x494))+(((0.4873)*gclwh12_8*x494))+(((-0.853)*gclwh12_2*x493))+(((-0.4265)*gclwh14_2*x509))+(((0.00310689149625)*x504))+(((-0.4873)*gclwh14_8*x509))+(((0.4265)*gclwh1_2*x509))+(((-1.0)*gclwh14_2*x550))+(((0.4265)*pp*x504))+x901+(((0.853)*gclwh14_2*x512))+(((-0.00354979654425)*x633))+(((-1.0)*gclwh3_2*x623))+(((0.4873)*gclwh4_8*x524))+(((-1.0)*gclwh6_2*x557)));
op[64]=((((0.00518928)*x543))+(((-0.00518928)*x502))+(((0.0304)*gclwh4_8*x524))+(((-1.0)*x892))+(((-1.0)*gclwh14_8*x574))+(((-0.0304)*gclwh14_8*x509))+(((0.0608)*gclwh14_8*x512))+(((0.0304)*gclwh12_8*x494))+(((-1.0)*x697))+(((0.000221452524)*x597))+(((0.000221452524)*x590))+(((-0.0608)*gclwh12_8*x493))+x884+(((-0.0608)*gclwh4_8*x500))+(((-1.0)*gclwh8_12*x607))+x906);
op[65]=((-0.0135466825)+(((0.0010225625)*gclwh4_3*x524))+(((-1.0)*gclwh12_3*x498))+(((-0.0010225625)*gclwh14_3*x509))+((gclwh6_3*x544))+((gclwh14_11*x509))+(((-0.01252412)*gclwh14_3*x512))+(((0.01252412)*gclwh1_3*x512))+(((-1.0)*x896))+(((-1.0)*x917))+(((-1.0)*gclwh4_11*x524))+(((-1.0)*gclwh4_3*x570))+(((4.561674317235e-5)*x593))+(((0.0010225625)*gclwh12_3*x494))+(((-0.0135466825)*gclwh3_3*x494))+(((-0.0135466825)*gclwh1_3*x509))+(((4.561674317235e-5)*x625))+(((0.01252412)*gclwh3_3*x493))+x890+(((0.01252412)*gclwh4_3*x500))+x916+(((0.01252412)*gclwh12_3*x493))+((gclwh3_3*x498))+(((-1.0)*gclwh12_11*x494)));
op[66]=((-0.2213801325)+((gclwh11_1*x594))+(((0.2068108875)*gclwh5_1*x524))+(((-0.2068108875)*pp*x508))+(((0.42819102)*gclwh2_1*x493))+((gclwh5_1*x618))+(((-0.2213801325)*gclwh2_1*x494))+(((-0.42819102)*gclwh5_1*x500))+(((0.00155960496929498)*x636))+(((-1.0)*gclwh15_10*x509))+(((-1.0)*x915))+((gclwh5_10*x524))+(((-1.0)*x889))+((gclwh2_1*x533))+(((0.42819102)*gclwh0_1*x512))+(((0.42819102)*gclwh15_1*x512))+((gclwh13_10*x494))+(((0.2068108875)*gclwh13_1*x494))+(((-0.00155960496929498)*x508))+x897+(((-0.42819102)*gclwh13_1*x493))+x918+(((-0.2213801325)*gclwh0_1*x509))+((gclwh13_1*x533))+(((-1.0)*gclwh7_1*x595)));
op[67]=((((-0.9138)*gclwh5_9*x500))+(((0.9138)*gclwh15_9*x512))+(((-1.0)*gclwh11_7*x579))+(((-1.0)*x500*x621))+(((-0.9138)*gclwh13_9*x493))+(((-0.07799283)*x638))+((gclwh13_15*x585))+(((0.00332834402025)*x515))+(((-1.0)*gclwh15_15*x561))+((x512*x519))+(((-0.11235)*gclwh15_15*x509))+((x515*x584))+(((-0.00332834402025)*x545))+(((0.11235)*gclwh13_15*x494))+(((0.07799283)*x497))+((gclwh7_7*x569))+(((-1.0)*gclwh9_7*x518))+(((0.00332834402025)*x566))+(((-0.4569)*gclwh15_9*x509))+(((0.4569)*gclwh13_9*x494))+(((0.07799283)*x627))+(((0.11235)*gclwh5_15*x524))+((gclwh5_15*x581))+(((-1.0)*x493*x635)));
op[68]=((((-0.07280355)*x520))+(((0.00354979654425)*x566))+(((0.4873)*gclwh13_9*x494))+(((0.853)*gclwh5_0*x500))+(((-0.00310689149625)*x608))+(((-0.00310689149625)*x600))+(((-1.0)*x893))+(((-0.4265)*gclwh13_0*x494))+(((-0.4873)*gclwh15_9*x509))+(((-1.0)*gclwh0_0*x550))+(((0.4265)*gclwh15_0*x509))+(((0.9746)*gclwh15_9*x512))+((gclwh7_0*x557))+(((0.853)*gclwh13_0*x493))+(((-0.853)*gclwh2_0*x493))+(((0.4265)*gclwh2_0*x494))+(((0.4873)*pp*x515))+(((-0.00354979654425)*x545))+(((-0.07280355)*x611))+(((-0.9746)*gclwh5_9*x500))+(((-0.00310689149625)*x572))+(((-0.853)*gclwh15_0*x512))+(((0.4265)*gclwh0_0*x509))+x904+((gclwh15_0*x550))+(((0.00354979654425)*x515))+(((-0.4265)*gclwh5_0*x524))+(((-0.9746)*gclwh13_9*x493))+(((-0.853)*gclwh0_0*x512)));
op[69]=((0.053024565)+(((-1.0)*x909))+x902);
op[70]=((0.0135466825)+(((-1.0)*gclwh13_10*x494))+((gclwh2_1*x498))+(((-1.0)*gclwh7_1*x544))+(((-0.0010225625)*gclwh5_1*x524))+(((-0.0135466825)*gclwh2_1*x494))+(((-1.0)*gclwh5_10*x524))+(((-1.0)*x897))+(((-1.0)*x915))+(((0.01252412)*gclwh0_1*x512))+((gclwh13_1*x498))+(((-0.0135466825)*gclwh0_1*x509))+(((-0.01252412)*gclwh5_1*x500))+(((4.561674317235e-5)*x636))+(((0.01252412)*gclwh15_1*x512))+(((0.0010225625)*pp*x508))+(((-0.0010225625)*gclwh13_1*x494))+(((0.01252412)*gclwh2_1*x493))+x889+(((-0.01252412)*gclwh13_1*x493))+((gclwh5_1*x570))+x918+(((-4.561674317235e-5)*x508))+((gclwh11_1*x513))+((gclwh15_10*x509)));
IkReal x919=((0.0304)*pp);
IkReal x920=(gclwh13_9*r21);
IkReal x921=(gclwh5_9*r22);
IkReal x922=((0.0608)*pz);
IkReal x923=(gclwh15_9*r20);
IkReal x924=((0.2247)*pz);
IkReal x925=(gclwh13_15*r21);
IkReal x926=(gclwh15_15*r20);
IkReal x927=((0.11235)*pp);
IkReal x928=(gclwh5_15*r22);
op[71]=((((0.00518928)*gclwh11_13*rxp2_2))+(((-1.0)*x925*x927))+((x919*x923))+((gclwh5_15*npz*x924))+(((-0.000818427337875)*x925))+(((-0.000818427337875)*x928))+((gclwh13_9*npy*x922))+(((-1.0)*gclwh15_15*npx*x924))+(((-0.019178145)*gclwh11_7*rxp2_2))+((gclwh5_9*npz*x922))+(((0.000221452524)*x923))+(((0.00518928)*gclwh9_13*rxp0_2))+(((-1.0)*x927*x928))+(((-0.000221452524)*x921))+(((-0.000221452524)*x920))+(((0.019178145)*gclwh7_7*rxp1_2))+(((-1.0)*x919*x921))+(((-1.0)*x919*x920))+(((-0.019178145)*gclwh9_7*rxp0_2))+((x926*x927))+(((-0.00518928)*gclwh7_13*rxp1_2))+(((0.000818427337875)*x926))+(((-1.0)*gclwh15_9*npx*x922))+((gclwh13_15*npy*x924)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x929=htj1*htj1;
CheckValue<IkReal> x930=IKPowWithIntegerCheck(((1.0)+x929),-1);
if(!x930.valid){
continue;
}
cj1array[numsolutions]=((x930.value)*(((1.0)+(((-1.0)*x929)))));
CheckValue<IkReal> x931=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x931.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x931.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x932=htj2*htj2;
CheckValue<IkReal> x933=IKPowWithIntegerCheck(((1.0)+x932),-1);
if(!x933.valid){
continue;
}
cj2array[numsolutions]=((x933.value)*(((1.0)+(((-1.0)*x932)))));
CheckValue<IkReal> x934=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x934.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x934.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x935=htj3*htj3;
CheckValue<IkReal> x936=IKPowWithIntegerCheck(((1.0)+x935),-1);
if(!x936.valid){
continue;
}
cj3array[numsolutions]=((x936.value)*(((1.0)+(((-1.0)*x935)))));
CheckValue<IkReal> x937=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x937.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x937.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x938=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x938);
rxp1_0=(pz*r11);
rxp1_1=(r01*x938);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x939=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x939);
rxp1_0=(pz*r11);
rxp1_1=(r01*x939);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x940=IKPowWithIntegerCheck(r22,-1);
if(!x940.valid){
continue;
}
CheckValue<IkReal> x941=IKPowWithIntegerCheck(sj3,-1);
if(!x941.valid){
continue;
}
sj4array[0]=((x940.value)*(x941.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x942=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x942);
rxp1_0=(pz*r11);
rxp1_1=(r01*x942);
IkReal x943=((16.0)*sj4);
IkReal x944=(cj1*cj2);
IkReal x945=((4.0)*sj3);
IkReal x946=((8.0)*sj4);
IkReal x947=((4.0)*cj4);
IkReal x948=(sj1*sj2);
IkReal x949=((4.0)*sj4);
IkReal x950=(cj3*r02);
IkReal x951=((16.0)*sj3);
IkReal x952=((8.0)*sj3);
IkReal x953=((12.0)*cj4);
IkReal x954=((12.0)*sj4);
IkReal x955=(cj3*r12);
IkReal x956=(r11*x945);
IkReal x957=(r01*x945);
IkReal x958=(r01*x948);
IkReal x959=(cj3*cj4*r01);
IkReal x960=(cj3*cj4*r11);
IkReal x961=(cj3*r10*x947);
IkReal x962=(x954*x955);
IkReal x963=(cj3*r00*x947);
IkReal x964=(x950*x954);
IkReal x965=(r00*x948*x949);
IkReal x966=(r02*x948*x953);
IkReal x967=(r00*x944*x949);
IkReal x968=(r02*x944*x953);
IkReal x969=(r10*x948*x949);
IkReal x970=(r12*x944*x953);
IkReal x971=(r12*x948*x953);
IkReal x972=(r10*x944*x949);
IkReal x973=(x967+x956);
IkReal x974=(x969+x957);
IkReal x975=(x961+x965);
IkReal x976=(x962+x968);
IkReal x977=(x972+x963);
IkReal x978=(x971+x964);
j5eval[0]=((((0.5)*(IKabs((((r02*x947*x948))+(((-1.0)*x949*x955))+x973+(((-1.0)*r02*x944*x947))+(((-1.0)*x975)))))))+(((0.5)*(IKabs((x970+x974+(((-1.0)*x978))+(((-1.0)*x977)))))))+(IKabs(((((-1.0)*r10*x952))+(((-8.0)*x960))+((r01*x944*x946))+(((-1.0)*x946*x958)))))+(IKabs(((((-8.0)*x959))+(((-1.0)*r00*x952))+(((-1.0)*r11*x944*x946))+((r11*x946*x948)))))+(((0.5)*(IKabs((x975+x966+(((-1.0)*x973))+(((-1.0)*x976)))))))+(((0.5)*(IKabs((x973+x966+(((-1.0)*x975))+(((-1.0)*x976)))))))+(((0.5)*(IKabs((x970+x977+(((-1.0)*x974))+(((-1.0)*x978)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x943*x944))+(((-1.0)*r00*x951))+(((-16.0)*x959))+((r11*x943*x948)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x951))+((r01*x943*x944))+(((-1.0)*x943*x958))+(((-16.0)*x960)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x947*x948))+(((-1.0)*x949*x950))+x974+(((-1.0)*x977))+((r12*x944*x947))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x979=(r10*sj3);
IkReal x980=(r01*sj4);
IkReal x981=(cj1*cj2);
IkReal x982=(cj3*cj4);
IkReal x983=(sj1*sj2);
IkReal x984=(cj4*r02);
IkReal x985=((4.0)*r11*sj3);
IkReal x986=(cj3*r12*sj4);
IkReal x987=((4.0)*r00*sj4);
IkReal x988=((4.0)*r10*x982);
IkReal x989=((12.0)*x986);
IkReal x990=((4.0)*x986);
IkReal x991=(x981*x987);
IkReal x992=(x983*x987);
IkReal x993=((12.0)*x983*x984);
IkReal x994=((12.0)*x981*x984);
IkReal x995=((4.0)*x983*x984);
IkReal x996=((4.0)*x981*x984);
IkReal x997=(x991+x985);
IkReal x998=(x992+x988);
IkReal x999=(x990+x996);
IkReal x1000=(x994+x989);
IkReal x1001=((((-8.0)*x980*x983))+(((-8.0)*x979))+(((-8.0)*r11*x982))+(((8.0)*x980*x981)));
op[0]=((((-1.0)*x998))+(((-1.0)*x999))+x997+x995);
op[1]=x1001;
op[2]=((((-1.0)*x1000))+(((-1.0)*x998))+x993+x997);
op[3]=((((-16.0)*r11*x982))+(((-16.0)*x979))+(((-16.0)*x980*x983))+(((16.0)*x980*x981)));
op[4]=((((-1.0)*x1000))+(((-1.0)*x997))+x993+x998);
op[5]=x1001;
op[6]=((((-1.0)*x997))+(((-1.0)*x999))+x995+x998);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1002=(cj1*cj2);
IkReal x1003=((4.0)*cj4);
IkReal x1004=(sj1*sj2);
IkReal x1005=((4.0)*sj4);
IkReal x1006=(r00*sj3);
IkReal x1007=(cj3*r02);
IkReal x1008=((4.0)*r01*sj3);
IkReal x1009=((16.0)*r11*sj4);
IkReal x1010=(cj3*cj4*r01);
IkReal x1011=((12.0)*cj4*r12);
IkReal x1012=((8.0)*r11*sj4);
IkReal x1013=(cj3*r00*x1003);
IkReal x1014=((12.0)*sj4*x1007);
IkReal x1015=(x1005*x1007);
IkReal x1016=(r10*x1002*x1005);
IkReal x1017=(r10*x1004*x1005);
IkReal x1018=(x1002*x1011);
IkReal x1019=(x1004*x1011);
IkReal x1020=(r12*x1002*x1003);
IkReal x1021=(r12*x1003*x1004);
IkReal x1022=(x1017+x1008);
IkReal x1023=(x1016+x1013);
IkReal x1024=(x1015+x1021);
IkReal x1025=(x1019+x1014);
IkReal x1026=((((-8.0)*x1006))+(((-8.0)*x1010))+((x1004*x1012))+(((-1.0)*x1002*x1012)));
j5evalpoly[0]=(x1020+x1023+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1020+x1022+(((-1.0)*x1024))+(((-1.0)*x1023))))))+((htj5*x1026))+(((-1.0)*x1024))+(((-1.0)*x1022))+(((htj5*htj5)*((x1018+x1023+(((-1.0)*x1025))+(((-1.0)*x1022))))))+(((htj5*htj5*htj5*htj5)*((x1018+x1022+(((-1.0)*x1025))+(((-1.0)*x1023))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1010))+(((-16.0)*x1006))+((x1004*x1009))+(((-1.0)*x1002*x1009))))))+((x1026*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1027=(cj5*sj4);
IkReal x1028=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1028))+(((-1.0)*r00*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1028))+((cj4*r12))+((r10*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1028))+(((-1.0)*r00*x1027))))+IKsqr(((((-1.0)*r11*x1028))+((cj4*r12))+((r10*x1027))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1028))+(((-1.0)*r00*x1027))), ((((-1.0)*r11*x1028))+((cj4*r12))+((r10*x1027))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1029=IKcos(j0);
IkReal x1030=IKsin(j0);
IkReal x1031=(r02*sj4);
IkReal x1032=((1.0)*sj3);
IkReal x1033=(r12*sj4);
IkReal x1034=((0.21325)*cj2);
IkReal x1035=((1.0)*cj3);
IkReal x1036=((1.0)*sj2);
IkReal x1037=(r11*sj5);
IkReal x1038=(cj5*r01);
IkReal x1039=(cj5*r11);
IkReal x1040=(r00*sj5);
IkReal x1041=((1.0)*cj2);
IkReal x1042=(r10*sj5);
IkReal x1043=((1.0)*cj4);
IkReal x1044=(cj1*x1030);
IkReal x1045=(cj4*cj5*r00);
IkReal x1046=(cj1*x1029);
IkReal x1047=(cj4*cj5*r10);
IkReal x1048=(cj4*r01*sj5);
IkReal x1049=((0.21325)*sj1*sj2);
IkReal x1050=(sj1*x1029);
IkReal x1051=((1.0)*cj5*sj4);
IkReal x1052=(sj1*x1030);
evalcond[0]=(((sj4*x1037))+x1029+(((-1.0)*r10*x1051))+(((-1.0)*r12*x1043)));
evalcond[1]=((((-1.0)*r02*x1043))+(((-1.0)*r00*x1051))+(((-1.0)*x1030))+((r01*sj4*sj5)));
evalcond[2]=((((-0.08535)*x1038))+(((-0.11235)*x1030))+((x1034*x1046))+(((0.24365)*x1046))+(((-1.0)*x1029*x1049))+(((-1.0)*px))+(((-0.08535)*x1040)));
evalcond[3]=((((-0.08535)*x1039))+((x1034*x1044))+(((0.11235)*x1029))+(((0.24365)*x1044))+(((-1.0)*py))+(((-0.08535)*x1042))+(((-1.0)*x1030*x1049)));
evalcond[4]=(((cj3*x1031))+((sj2*x1050))+((sj3*x1040))+(((-1.0)*x1041*x1046))+((sj3*x1038))+((cj3*x1048))+(((-1.0)*x1035*x1045)));
evalcond[5]=(((cj3*x1033))+((sj2*x1052))+((sj3*x1042))+(((-1.0)*x1041*x1044))+((sj3*x1039))+((cj3*cj4*x1037))+(((-1.0)*x1035*x1047)));
evalcond[6]=((((-1.0)*x1032*x1048))+((cj3*x1038))+((sj3*x1045))+(((-1.0)*x1041*x1050))+((cj3*x1040))+(((-1.0)*x1031*x1032))+(((-1.0)*x1036*x1046)));
evalcond[7]=(((cj3*x1039))+(((-1.0)*x1032*x1033))+((sj3*x1047))+(((-1.0)*x1041*x1052))+((cj3*x1042))+(((-1.0)*cj4*x1032*x1037))+(((-1.0)*x1036*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1053=IKPowWithIntegerCheck(cj3,-1);
if(!x1053.valid){
continue;
}
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(r22,-1);
if(!x1054.valid){
continue;
}
sj4array[0]=((-1.0)*(x1053.value)*(x1054.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1055=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1055);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1055);
IkReal x1056=((16.0)*sj4);
IkReal x1057=(cj1*cj2);
IkReal x1058=((4.0)*sj3);
IkReal x1059=((8.0)*sj4);
IkReal x1060=((4.0)*cj4);
IkReal x1061=(sj1*sj2);
IkReal x1062=((4.0)*sj4);
IkReal x1063=(cj3*r02);
IkReal x1064=((16.0)*sj3);
IkReal x1065=((8.0)*sj3);
IkReal x1066=((12.0)*cj4);
IkReal x1067=((12.0)*sj4);
IkReal x1068=(cj3*r12);
IkReal x1069=(r11*x1058);
IkReal x1070=(r01*x1058);
IkReal x1071=(r01*x1061);
IkReal x1072=(cj3*cj4*r01);
IkReal x1073=(cj3*cj4*r11);
IkReal x1074=(cj3*r10*x1060);
IkReal x1075=(x1067*x1068);
IkReal x1076=(cj3*r00*x1060);
IkReal x1077=(x1063*x1067);
IkReal x1078=(r00*x1061*x1062);
IkReal x1079=(r02*x1061*x1066);
IkReal x1080=(r00*x1057*x1062);
IkReal x1081=(r02*x1057*x1066);
IkReal x1082=(r10*x1061*x1062);
IkReal x1083=(r12*x1057*x1066);
IkReal x1084=(r12*x1061*x1066);
IkReal x1085=(r10*x1057*x1062);
IkReal x1086=(x1069+x1080);
IkReal x1087=(x1070+x1082);
IkReal x1088=(x1078+x1074);
IkReal x1089=(x1075+x1081);
IkReal x1090=(x1076+x1085);
IkReal x1091=(x1077+x1084);
j5eval[0]=((((0.5)*(IKabs((x1090+x1083+(((-1.0)*x1091))+(((-1.0)*x1087)))))))+(((0.5)*(IKabs((x1079+x1086+(((-1.0)*x1088))+(((-1.0)*x1089)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1064))+(((-1.0)*x1056*x1071))+(((-16.0)*x1073))+((r01*x1056*x1057)))))))+(((0.5)*(IKabs((x1079+x1088+(((-1.0)*x1086))+(((-1.0)*x1089)))))))+(((0.5)*(IKabs((((r02*x1060*x1061))+(((-1.0)*r02*x1057*x1060))+x1086+(((-1.0)*x1062*x1068))+(((-1.0)*x1088)))))))+(((0.5)*(IKabs((x1087+x1083+(((-1.0)*x1091))+(((-1.0)*x1090)))))))+(((0.5)*(IKabs((x1087+(((-1.0)*x1090))+(((-1.0)*x1062*x1063))+((r12*x1057*x1060))+(((-1.0)*r12*x1060*x1061)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1064))+(((-1.0)*r11*x1056*x1057))+((r11*x1056*x1061))+(((-16.0)*x1072)))))))+(IKabs(((((-8.0)*x1072))+(((-1.0)*r00*x1065))+((r11*x1059*x1061))+(((-1.0)*r11*x1057*x1059)))))+(IKabs(((((-8.0)*x1073))+((r01*x1057*x1059))+(((-1.0)*r10*x1065))+(((-1.0)*x1059*x1071))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1092=(r10*sj3);
IkReal x1093=(r01*sj4);
IkReal x1094=(cj1*cj2);
IkReal x1095=(cj3*cj4);
IkReal x1096=(sj1*sj2);
IkReal x1097=(cj4*r02);
IkReal x1098=((4.0)*r11*sj3);
IkReal x1099=(cj3*r12*sj4);
IkReal x1100=((4.0)*r00*sj4);
IkReal x1101=((4.0)*r10*x1095);
IkReal x1102=((12.0)*x1099);
IkReal x1103=((4.0)*x1099);
IkReal x1104=(x1094*x1100);
IkReal x1105=(x1096*x1100);
IkReal x1106=((12.0)*x1096*x1097);
IkReal x1107=((12.0)*x1094*x1097);
IkReal x1108=((4.0)*x1096*x1097);
IkReal x1109=((4.0)*x1094*x1097);
IkReal x1110=(x1104+x1098);
IkReal x1111=(x1105+x1101);
IkReal x1112=(x1103+x1109);
IkReal x1113=(x1107+x1102);
IkReal x1114=((((-8.0)*r11*x1095))+(((-8.0)*x1092))+(((8.0)*x1093*x1094))+(((-8.0)*x1093*x1096)));
op[0]=(x1108+x1110+(((-1.0)*x1112))+(((-1.0)*x1111)));
op[1]=x1114;
op[2]=(x1106+x1110+(((-1.0)*x1113))+(((-1.0)*x1111)));
op[3]=((((16.0)*x1093*x1094))+(((-16.0)*x1093*x1096))+(((-16.0)*x1092))+(((-16.0)*r11*x1095)));
op[4]=(x1106+x1111+(((-1.0)*x1113))+(((-1.0)*x1110)));
op[5]=x1114;
op[6]=(x1108+x1111+(((-1.0)*x1112))+(((-1.0)*x1110)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1115=(cj1*cj2);
IkReal x1116=((4.0)*cj4);
IkReal x1117=(sj1*sj2);
IkReal x1118=((4.0)*sj4);
IkReal x1119=(r00*sj3);
IkReal x1120=(cj3*r02);
IkReal x1121=((4.0)*r01*sj3);
IkReal x1122=((16.0)*r11*sj4);
IkReal x1123=(cj3*cj4*r01);
IkReal x1124=((12.0)*cj4*r12);
IkReal x1125=((8.0)*r11*sj4);
IkReal x1126=(cj3*r00*x1116);
IkReal x1127=((12.0)*sj4*x1120);
IkReal x1128=(x1118*x1120);
IkReal x1129=(r10*x1115*x1118);
IkReal x1130=(r10*x1117*x1118);
IkReal x1131=(x1115*x1124);
IkReal x1132=(x1117*x1124);
IkReal x1133=(r12*x1115*x1116);
IkReal x1134=(r12*x1116*x1117);
IkReal x1135=(x1121+x1130);
IkReal x1136=(x1129+x1126);
IkReal x1137=(x1128+x1134);
IkReal x1138=(x1127+x1132);
IkReal x1139=((((-8.0)*x1123))+((x1117*x1125))+(((-8.0)*x1119))+(((-1.0)*x1115*x1125)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*((x1131+x1135+(((-1.0)*x1138))+(((-1.0)*x1136))))))+x1133+x1136+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1133+x1135+(((-1.0)*x1136))+(((-1.0)*x1137))))))+(((-1.0)*x1135))+(((-1.0)*x1137))+(((htj5*htj5)*((x1131+x1136+(((-1.0)*x1138))+(((-1.0)*x1135))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1119))+((x1117*x1122))+(((-16.0)*x1123))+(((-1.0)*x1115*x1122))))))+((x1139*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1139)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1140=(cj5*sj4);
IkReal x1141=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1140))+(((-1.0)*cj4*r02))+((r01*x1141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1141))+((r10*x1140))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1140))+(((-1.0)*cj4*r02))+((r01*x1141))))+IKsqr(((((-1.0)*r11*x1141))+((r10*x1140))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1140))+(((-1.0)*cj4*r02))+((r01*x1141))), ((((-1.0)*r11*x1141))+((r10*x1140))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1142=IKcos(j0);
IkReal x1143=IKsin(j0);
IkReal x1144=(r02*sj4);
IkReal x1145=((1.0)*sj3);
IkReal x1146=(r12*sj4);
IkReal x1147=((0.21325)*cj2);
IkReal x1148=((1.0)*cj3);
IkReal x1149=((1.0)*sj2);
IkReal x1150=(r11*sj5);
IkReal x1151=(cj5*r01);
IkReal x1152=(cj5*r11);
IkReal x1153=(r00*sj5);
IkReal x1154=((1.0)*cj2);
IkReal x1155=(r10*sj5);
IkReal x1156=((1.0)*cj4);
IkReal x1157=(cj1*x1143);
IkReal x1158=(cj4*cj5*r00);
IkReal x1159=(cj1*x1142);
IkReal x1160=(cj4*cj5*r10);
IkReal x1161=(cj4*r01*sj5);
IkReal x1162=((0.21325)*sj1*sj2);
IkReal x1163=(sj1*x1142);
IkReal x1164=((1.0)*cj5*sj4);
IkReal x1165=(sj1*x1143);
evalcond[0]=((((-1.0)*r10*x1164))+x1142+(((-1.0)*r12*x1156))+((sj4*x1150)));
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*x1143))+(((-1.0)*r02*x1156))+(((-1.0)*r00*x1164)));
evalcond[2]=((((-0.11235)*x1143))+(((-1.0)*px))+(((-1.0)*x1142*x1162))+((x1147*x1159))+(((0.24365)*x1159))+(((-0.08535)*x1151))+(((-0.08535)*x1153)));
evalcond[3]=((((-1.0)*py))+((x1147*x1157))+(((0.24365)*x1157))+(((0.11235)*x1142))+(((-1.0)*x1143*x1162))+(((-0.08535)*x1155))+(((-0.08535)*x1152)));
evalcond[4]=(((sj2*x1163))+(((-1.0)*x1154*x1159))+((cj3*x1144))+((sj3*x1153))+((sj3*x1151))+((cj3*x1161))+(((-1.0)*x1148*x1158)));
evalcond[5]=(((sj2*x1165))+(((-1.0)*x1154*x1157))+(((-1.0)*x1148*x1160))+((cj3*x1146))+((sj3*x1155))+((sj3*x1152))+((cj3*cj4*x1150)));
evalcond[6]=((((-1.0)*x1149*x1159))+((cj3*x1151))+((cj3*x1153))+(((-1.0)*x1145*x1161))+((sj3*x1158))+(((-1.0)*x1144*x1145))+(((-1.0)*x1154*x1163)));
evalcond[7]=((((-1.0)*x1145*x1146))+(((-1.0)*x1149*x1157))+((cj3*x1155))+((cj3*x1152))+(((-1.0)*cj4*x1145*x1150))+(((-1.0)*x1154*x1165))+((sj3*x1160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1166=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1166);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1166);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1168=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1168);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1168);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1169=IKPowWithIntegerCheck(r22,-1);
if(!x1169.valid){
continue;
}
sj4array[0]=((-1.0)*(x1169.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1170=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1170);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1170);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
IkReal x1171=x1172.value;
j5array[0]=((-1.0)*x1171);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1171)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1173=(cj5*sj4);
IkReal x1174=(sj4*sj5);
if( IKabs((((r01*x1174))+(((-1.0)*r00*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1173))+(((-1.0)*r11*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1174))+(((-1.0)*r00*x1173))))+IKsqr((((r10*x1173))+(((-1.0)*r11*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1174))+(((-1.0)*r00*x1173))), (((r10*x1173))+(((-1.0)*r11*x1174))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1175=IKcos(j0);
IkReal x1176=IKsin(j0);
IkReal x1177=(cj5*r01);
IkReal x1178=(sj4*sj5);
IkReal x1179=(r00*sj5);
IkReal x1180=(cj5*r11);
IkReal x1181=((0.24365)*cj1);
IkReal x1182=(r10*sj5);
IkReal x1183=((1.0)*cj1*sj2);
IkReal x1184=((1.0)*cj2*sj1);
IkReal x1185=((1.0)*cj5*sj4);
evalcond[0]=(x1175+(((-1.0)*r10*x1185))+((r11*x1178)));
evalcond[1]=(((r01*x1178))+(((-1.0)*r00*x1185))+(((-1.0)*x1176)));
evalcond[2]=((((-1.0)*x1175*x1183))+(((-1.0)*x1175*x1184))+x1177+x1179);
evalcond[3]=((((-1.0)*x1176*x1183))+(((-1.0)*x1176*x1184))+x1182+x1180);
evalcond[4]=((((-0.08535)*x1177))+(((-0.08535)*x1179))+((x1175*x1181))+(((-1.0)*px))+(((-0.11235)*x1176)));
evalcond[5]=((((-0.08535)*x1182))+(((-0.08535)*x1180))+((x1176*x1181))+(((-1.0)*py))+(((0.11235)*x1175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1186=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1186);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1186);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(r22,-1);
if(!x1187.valid){
continue;
}
sj4array[0]=((x1187.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1188=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1188);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1188);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1190 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1190.valid){
continue;
}
IkReal x1189=x1190.value;
j5array[0]=((-1.0)*x1189);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1189)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1191=(cj5*sj4);
IkReal x1192=(sj4*sj5);
if( IKabs((((r01*x1192))+(((-1.0)*r00*x1191)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1191))+(((-1.0)*r11*x1192)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1192))+(((-1.0)*r00*x1191))))+IKsqr((((r10*x1191))+(((-1.0)*r11*x1192))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1192))+(((-1.0)*r00*x1191))), (((r10*x1191))+(((-1.0)*r11*x1192))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1193=IKcos(j0);
IkReal x1194=IKsin(j0);
IkReal x1195=(sj4*sj5);
IkReal x1196=(r00*sj5);
IkReal x1197=(cj5*r11);
IkReal x1198=((1.0)*r10);
IkReal x1199=((0.24365)*cj1);
IkReal x1200=(cj5*r01);
IkReal x1201=(cj5*sj4);
IkReal x1202=((1.0)*cj1*sj2);
IkReal x1203=((1.0)*cj2*sj1);
evalcond[0]=(x1193+((r11*x1195))+(((-1.0)*x1198*x1201)));
evalcond[1]=((((-1.0)*r00*x1201))+((r01*x1195))+(((-1.0)*x1194)));
evalcond[2]=((((-0.08535)*x1196))+(((-0.08535)*x1200))+(((-1.0)*px))+((x1193*x1199))+(((-0.11235)*x1194)));
evalcond[3]=(((x1194*x1199))+(((-0.08535)*x1197))+(((-1.0)*py))+(((0.11235)*x1193))+(((-0.08535)*r10*sj5)));
evalcond[4]=((((-1.0)*x1200))+(((-1.0)*x1196))+(((-1.0)*x1193*x1203))+(((-1.0)*x1193*x1202)));
evalcond[5]=((((-1.0)*sj5*x1198))+(((-1.0)*x1194*x1203))+(((-1.0)*x1194*x1202))+(((-1.0)*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1204=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1204);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1204);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(r22,-1);
if(!x1205.valid){
continue;
}
sj4array[0]=((x1205.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1206=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1206);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1206);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
IkReal x1207=x1208.value;
j5array[0]=((-1.0)*x1207);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1207)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1209=(cj5*sj4);
IkReal x1210=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1209))+((r01*x1210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1209))+(((-1.0)*r11*x1210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1209))+((r01*x1210))))+IKsqr((((r10*x1209))+(((-1.0)*r11*x1210))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1209))+((r01*x1210))), (((r10*x1209))+(((-1.0)*r11*x1210))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1211=IKcos(j0);
IkReal x1212=IKsin(j0);
IkReal x1213=(cj5*r01);
IkReal x1214=(sj4*sj5);
IkReal x1215=(r00*sj5);
IkReal x1216=(cj5*r11);
IkReal x1217=(r10*sj5);
IkReal x1218=((0.21325)*cj1*cj2);
IkReal x1219=((1.0)*x1212);
IkReal x1220=(cj1*x1211);
IkReal x1221=((1.0)*cj5*sj4);
IkReal x1222=(sj1*sj2*x1211);
IkReal x1223=(sj1*sj2*x1212);
evalcond[0]=(x1211+((r11*x1214))+(((-1.0)*r10*x1221)));
evalcond[1]=((((-1.0)*r00*x1221))+((r01*x1214))+(((-1.0)*x1219)));
evalcond[2]=(x1222+x1213+x1215+(((-1.0)*cj2*x1220)));
evalcond[3]=(x1223+x1216+x1217+(((-1.0)*cj1*cj2*x1219)));
evalcond[4]=((((-0.21325)*x1222))+(((-1.0)*px))+(((-0.11235)*x1212))+((x1211*x1218))+(((0.24365)*x1220))+(((-0.08535)*x1213))+(((-0.08535)*x1215)));
evalcond[5]=(((x1212*x1218))+(((-0.21325)*x1223))+(((0.24365)*cj1*x1212))+(((-1.0)*py))+(((0.11235)*x1211))+(((-0.08535)*x1216))+(((-0.08535)*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1224=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1224);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1224);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1225=IKPowWithIntegerCheck(r22,-1);
if(!x1225.valid){
continue;
}
sj4array[0]=((-1.0)*(x1225.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1226=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1226);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1226);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1228 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1228.valid){
continue;
}
IkReal x1227=x1228.value;
j5array[0]=((-1.0)*x1227);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1227)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1229=(cj5*sj4);
IkReal x1230=(sj4*sj5);
if( IKabs((((r01*x1230))+(((-1.0)*r00*x1229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1230))+((r10*x1229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1230))+(((-1.0)*r00*x1229))))+IKsqr(((((-1.0)*r11*x1230))+((r10*x1229))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1230))+(((-1.0)*r00*x1229))), ((((-1.0)*r11*x1230))+((r10*x1229))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1231=IKcos(j0);
IkReal x1232=IKsin(j0);
IkReal x1233=(sj4*sj5);
IkReal x1234=(cj5*r11);
IkReal x1235=(r00*sj5);
IkReal x1236=((1.0)*r10);
IkReal x1237=(cj5*r01);
IkReal x1238=(cj5*sj4);
IkReal x1239=((0.21325)*cj1*cj2);
IkReal x1240=((1.0)*x1232);
IkReal x1241=(cj1*x1231);
IkReal x1242=(sj1*sj2*x1231);
IkReal x1243=(sj1*sj2*x1232);
evalcond[0]=(x1231+(((-1.0)*x1236*x1238))+((r11*x1233)));
evalcond[1]=(((r01*x1233))+(((-1.0)*x1240))+(((-1.0)*r00*x1238)));
evalcond[2]=((((-1.0)*x1237))+(((-1.0)*x1235))+x1242+(((-1.0)*cj2*x1241)));
evalcond[3]=((((-1.0)*x1234))+x1243+(((-1.0)*cj1*cj2*x1240))+(((-1.0)*sj5*x1236)));
evalcond[4]=((((-0.21325)*x1242))+(((-0.11235)*x1232))+(((-1.0)*px))+(((0.24365)*x1241))+(((-0.08535)*x1235))+(((-0.08535)*x1237))+((x1231*x1239)));
evalcond[5]=((((-0.21325)*x1243))+(((0.24365)*cj1*x1232))+(((-1.0)*py))+(((-0.08535)*r10*sj5))+(((-0.08535)*x1234))+((x1232*x1239))+(((0.11235)*x1231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(r22,-1);
if(!x1244.valid){
continue;
}
CheckValue<IkReal> x1245=IKPowWithIntegerCheck(sj3,-1);
if(!x1245.valid){
continue;
}
sj4array[0]=((x1244.value)*(x1245.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1246=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1246);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1246);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1247=((4.0)*r01);
IkReal x1248=((16.0)*r00);
IkReal x1249=(cj3*sj2);
IkReal x1250=((8.0)*r00);
IkReal x1251=(cj2*cj3);
IkReal x1252=(cj4*r01);
IkReal x1253=((16.0)*cj1);
IkReal x1254=((8.0)*sj1);
IkReal x1255=((16.0)*sj1);
IkReal x1256=((8.0)*cj1);
IkReal x1257=(sj2*sj3);
IkReal x1258=(cj2*sj3);
IkReal x1259=(sj1*x1258);
IkReal x1260=((4.0)*cj4*r00);
IkReal x1261=(((sj1*x1247*x1249))+((x1247*x1259))+((cj1*x1247*x1257))+((sj1*x1257*x1260)));
IkReal x1262=(((cj1*x1247*x1251))+((sj1*x1251*x1260))+((cj1*x1258*x1260))+((cj1*x1249*x1260)));
IkReal x1263=(x1262+(((-1.0)*x1261)));
IkReal x1264=(((x1251*x1252*x1254))+((cj1*x1250*x1257))+(((-1.0)*x1252*x1254*x1257))+((x1250*x1259))+((x1249*x1252*x1256))+(((-1.0)*cj1*x1250*x1251))+((sj1*x1249*x1250))+((x1252*x1256*x1258)));
IkReal x1265=(x1261+(((-1.0)*x1262)));
op[0]=x1263;
op[1]=x1264;
op[2]=x1263;
op[3]=(((x1251*x1252*x1255))+(((-1.0)*x1252*x1255*x1257))+((x1252*x1253*x1258))+((sj1*x1248*x1249))+(((-1.0)*cj1*x1248*x1251))+((cj1*x1248*x1257))+((x1249*x1252*x1253))+((x1248*x1259)));
op[4]=x1265;
op[5]=x1264;
op[6]=x1265;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1266=(cj5*sj4);
IkReal x1267=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1266))+((r01*x1267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1266))+(((-1.0)*r11*x1267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1266))+((r01*x1267))))+IKsqr((((r10*x1266))+(((-1.0)*r11*x1267))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1266))+((r01*x1267))), (((r10*x1266))+(((-1.0)*r11*x1267))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1268=IKcos(j0);
IkReal x1269=IKsin(j0);
IkReal x1270=((0.21325)*cj2);
IkReal x1271=((1.0)*cj3);
IkReal x1272=((1.0)*sj2);
IkReal x1273=(r11*sj5);
IkReal x1274=(cj5*r01);
IkReal x1275=(r01*sj5);
IkReal x1276=((0.21325)*sj2);
IkReal x1277=(cj5*r11);
IkReal x1278=(r00*sj5);
IkReal x1279=(cj3*cj4);
IkReal x1280=((1.0)*cj2);
IkReal x1281=(r10*sj5);
IkReal x1282=(cj1*x1269);
IkReal x1283=(cj4*cj5*r00);
IkReal x1284=(cj1*x1268);
IkReal x1285=(cj4*cj5*r10);
IkReal x1286=((1.0)*cj4*sj3);
IkReal x1287=(sj1*x1268);
IkReal x1288=((1.0)*cj5*sj4);
IkReal x1289=(sj1*x1269);
evalcond[0]=(x1268+((sj4*x1273))+(((-1.0)*r10*x1288)));
evalcond[1]=(((sj4*x1275))+(((-1.0)*r00*x1288))+(((-1.0)*x1269)));
evalcond[2]=(((sj3*x1278))+((sj3*x1274))+((x1275*x1279))+(((-1.0)*x1271*x1283))+((sj2*x1287))+(((-1.0)*x1280*x1284)));
evalcond[3]=(((sj3*x1277))+((x1273*x1279))+(((-1.0)*x1271*x1285))+((sj2*x1289))+((sj3*x1281))+(((-1.0)*x1280*x1282)));
evalcond[4]=((((-1.0)*x1275*x1286))+((cj3*x1278))+((cj3*x1274))+(((-1.0)*x1272*x1284))+((sj3*x1283))+(((-1.0)*x1280*x1287)));
evalcond[5]=(((cj3*x1277))+(((-1.0)*x1273*x1286))+(((-1.0)*x1272*x1282))+((sj3*x1285))+((cj3*x1281))+(((-1.0)*x1280*x1289)));
evalcond[6]=(((x1270*x1284))+(((-1.0)*x1276*x1287))+(((-0.08535)*x1278))+(((-0.08535)*x1274))+(((-1.0)*px))+(((0.24365)*x1284))+(((-0.11235)*x1269)));
evalcond[7]=((((-0.08535)*x1281))+((x1270*x1282))+(((-1.0)*x1276*x1289))+(((-0.08535)*x1277))+(((-1.0)*py))+(((0.11235)*x1268))+(((0.24365)*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1290=IKPowWithIntegerCheck(cj3,-1);
if(!x1290.valid){
continue;
}
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(r22,-1);
if(!x1291.valid){
continue;
}
sj4array[0]=((-1.0)*(x1290.value)*(x1291.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1292=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1292);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1292);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1293=((4.0)*r01);
IkReal x1294=((16.0)*r00);
IkReal x1295=(cj3*sj2);
IkReal x1296=((8.0)*r00);
IkReal x1297=(cj2*cj3);
IkReal x1298=(cj4*r01);
IkReal x1299=((16.0)*cj1);
IkReal x1300=((8.0)*sj1);
IkReal x1301=((16.0)*sj1);
IkReal x1302=((8.0)*cj1);
IkReal x1303=(sj2*sj3);
IkReal x1304=(cj2*sj3);
IkReal x1305=(sj1*x1304);
IkReal x1306=((4.0)*cj4*r00);
IkReal x1307=(((sj1*x1293*x1295))+((sj1*x1303*x1306))+((x1293*x1305))+((cj1*x1293*x1303)));
IkReal x1308=(((cj1*x1293*x1297))+((sj1*x1297*x1306))+((cj1*x1304*x1306))+((cj1*x1295*x1306)));
IkReal x1309=(x1308+(((-1.0)*x1307)));
IkReal x1310=(((x1295*x1298*x1302))+((x1298*x1302*x1304))+((sj1*x1295*x1296))+(((-1.0)*cj1*x1296*x1297))+((x1297*x1298*x1300))+(((-1.0)*x1298*x1300*x1303))+((cj1*x1296*x1303))+((x1296*x1305)));
IkReal x1311=(x1307+(((-1.0)*x1308)));
op[0]=x1309;
op[1]=x1310;
op[2]=x1309;
op[3]=((((-1.0)*x1298*x1301*x1303))+((x1298*x1299*x1304))+((sj1*x1294*x1295))+((cj1*x1294*x1303))+((x1297*x1298*x1301))+((x1294*x1305))+(((-1.0)*cj1*x1294*x1297))+((x1295*x1298*x1299)));
op[4]=x1311;
op[5]=x1310;
op[6]=x1311;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1312=(cj5*sj4);
IkReal x1313=(sj4*sj5);
if( IKabs((((r01*x1313))+(((-1.0)*r00*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1313))+((r10*x1312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1313))+(((-1.0)*r00*x1312))))+IKsqr(((((-1.0)*r11*x1313))+((r10*x1312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1313))+(((-1.0)*r00*x1312))), ((((-1.0)*r11*x1313))+((r10*x1312))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1314=IKcos(j0);
IkReal x1315=IKsin(j0);
IkReal x1316=((0.21325)*cj2);
IkReal x1317=((1.0)*cj3);
IkReal x1318=((1.0)*sj2);
IkReal x1319=(r11*sj5);
IkReal x1320=(cj5*r01);
IkReal x1321=(r01*sj5);
IkReal x1322=((0.21325)*sj2);
IkReal x1323=(cj5*r11);
IkReal x1324=(r00*sj5);
IkReal x1325=(cj3*cj4);
IkReal x1326=((1.0)*cj2);
IkReal x1327=(r10*sj5);
IkReal x1328=(cj1*x1315);
IkReal x1329=(cj4*cj5*r00);
IkReal x1330=(cj1*x1314);
IkReal x1331=(cj4*cj5*r10);
IkReal x1332=((1.0)*cj4*sj3);
IkReal x1333=(sj1*x1314);
IkReal x1334=((1.0)*cj5*sj4);
IkReal x1335=(sj1*x1315);
evalcond[0]=(x1314+((sj4*x1319))+(((-1.0)*r10*x1334)));
evalcond[1]=((((-1.0)*x1315))+((sj4*x1321))+(((-1.0)*r00*x1334)));
evalcond[2]=((((-1.0)*x1326*x1330))+((sj3*x1320))+((sj3*x1324))+((sj2*x1333))+((x1321*x1325))+(((-1.0)*x1317*x1329)));
evalcond[3]=(((sj3*x1323))+((sj3*x1327))+((x1319*x1325))+(((-1.0)*x1326*x1328))+((sj2*x1335))+(((-1.0)*x1317*x1331)));
evalcond[4]=((((-1.0)*x1326*x1333))+((sj3*x1329))+(((-1.0)*x1318*x1330))+((cj3*x1320))+((cj3*x1324))+(((-1.0)*x1321*x1332)));
evalcond[5]=((((-1.0)*x1326*x1335))+(((-1.0)*x1319*x1332))+((sj3*x1331))+((cj3*x1323))+((cj3*x1327))+(((-1.0)*x1318*x1328)));
evalcond[6]=(((x1316*x1330))+(((-1.0)*x1322*x1333))+(((-1.0)*px))+(((0.24365)*x1330))+(((-0.08535)*x1324))+(((-0.08535)*x1320))+(((-0.11235)*x1315)));
evalcond[7]=(((x1316*x1328))+(((-1.0)*x1322*x1335))+(((0.11235)*x1314))+(((-1.0)*py))+(((0.24365)*x1328))+(((-0.08535)*x1327))+(((-0.08535)*x1323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
IkReal x1336=((1.0)*(x1338.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1339.valid){
continue;
}
if( (((-1.0)*(x1339.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1339.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1337=((-1.0)*(IKasin(((-1.0)*(x1339.value)*(((((-0.21325)*cj1*sj2))+(((-1.0)*pz))+(((-0.21325)*cj2*sj1))+(((-0.24365)*sj1))))))));
j5array[0]=((((-1.0)*x1336))+(((-1.0)*x1337)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1337))+(((-1.0)*x1336)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1340=cj5*cj5;
IkReal x1341=r21*r21;
IkReal x1342=(sj3*x1340);
IkReal x1343=(((sj3*(r22*r22)))+((x1342*(r20*r20)))+(((-1.0)*x1341*x1342))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1341)));
j4eval[0]=x1343;
j4eval[1]=IKsign(x1343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1344=cj5*cj5;
IkReal x1345=r21*r21;
IkReal x1346=((1.0)*cj3);
IkReal x1347=(cj3*x1344);
IkReal x1348=((((-1.0)*x1344*x1346*(r20*r20)))+((x1345*x1347))+(((-1.0)*x1345*x1346))+(((2.0)*cj3*cj5*r20*r21*sj5))+(((-1.0)*x1346*(r22*r22))));
j4eval[0]=x1348;
j4eval[1]=IKsign(x1348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1349=cj1*cj1;
IkReal x1350=cj2*cj2;
IkReal x1351=(cj1*sj1*sj2);
IkReal x1352=(cj2*x1349);
IkReal x1353=(x1349*x1350);
j0eval[0]=((4.18279977479812)+x1349+(((-3.27403515251523)*x1350))+(((7.48153495812743)*x1352))+(((-6.54807030503047)*cj2*x1351))+(((-7.48153495812743)*x1351))+(((6.54807030503047)*x1353)));
j0eval[1]=IKsign(((23239234.0)+(((36380450.0)*x1353))+(((-36380450.0)*cj2*x1351))+(((-41566690.0)*x1351))+(((41566690.0)*x1352))+(((5555904.0)*x1349))+(((-18190225.0)*x1350))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1354=((1.0)*cj5);
IkReal x1355=((1.0)*sj5);
IkReal x1356=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1356;
j0eval[1]=((IKabs(((((-1.0)*r00*x1355))+(((-1.0)*r01*x1354)))))+(IKabs(((((-1.0)*r10*x1355))+(((-1.0)*r11*x1354))))));
j0eval[2]=IKsign(x1356);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1357=cj5*cj5;
IkReal x1358=r21*r21;
IkReal x1359=(sj1*sj2);
IkReal x1360=(r21*sj5);
IkReal x1361=(cj5*r20);
IkReal x1362=(cj1*cj2);
IkReal x1363=(x1358+(((-2.0)*x1360*x1361))+(r22*r22)+(((-1.0)*x1357*x1358))+((x1357*(r20*r20))));
j4eval[0]=x1363;
j4eval[1]=IKsign(x1363);
j4eval[2]=((IKabs((((r22*x1359))+(((-1.0)*r22*x1362)))))+(IKabs((((x1361*x1362))+((x1359*x1360))+(((-1.0)*x1359*x1361))+(((-1.0)*x1360*x1362))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1364=IKcos(j0);
IkReal x1365=IKsin(j0);
evalcond[0]=((((0.24365)*x1364))+(((-0.11235)*x1365))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x1364))+(((0.24365)*x1365))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1366=((1.0)*cj5);
IkReal x1367=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1366)));
j4eval[0]=x1367;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1366))))));
j4eval[2]=IKsign(x1367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1368=((1.0)*cj5);
IkReal x1369=((((-1.0)*r11*x1368))+(((-1.0)*r10*sj5)));
j4eval[0]=x1369;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1368))))));
j4eval[2]=IKsign(x1369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1370=cj5*cj5;
IkReal x1371=((1.0)*sj5);
IkReal x1372=(cj5*r20);
IkReal x1373=(r11*r21);
IkReal x1374=(x1373+((r10*r20*x1370))+((r12*r22))+(((-1.0)*r11*x1371*x1372))+(((-1.0)*x1370*x1373))+(((-1.0)*cj5*r10*r21*x1371)));
j4eval[0]=x1374;
j4eval[1]=IKsign(x1374);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1371))+((cj0*x1372)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1375=cj5*cj5;
IkReal x1376=((1.0)*sj5);
IkReal x1377=(cj5*r20);
IkReal x1378=(r11*r21);
CheckValue<IkReal> x1379=IKPowWithIntegerCheck(IKsign((x1378+((r10*r20*x1375))+((r12*r22))+(((-1.0)*x1375*x1378))+(((-1.0)*cj5*r10*r21*x1376))+(((-1.0)*r11*x1376*x1377)))),-1);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1376))+((cj0*x1377)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1379.value)))+(x1380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1381=IKsin(j4);
IkReal x1382=IKcos(j4);
IkReal x1383=((1.0)*sj0);
IkReal x1384=(cj5*r00);
IkReal x1385=(r11*sj5);
IkReal x1386=(cj5*r10);
IkReal x1387=(r21*sj5);
IkReal x1388=(cj5*r20);
IkReal x1389=(r01*sj5);
IkReal x1390=((1.0)*x1382);
IkReal x1391=((1.0)*x1381);
evalcond[0]=(((x1381*x1387))+(((-1.0)*r22*x1390))+(((-1.0)*x1388*x1391)));
evalcond[1]=((((-1.0)*r22*x1391))+(((-1.0)*x1387*x1390))+((x1382*x1388)));
evalcond[2]=(((x1381*x1385))+(((-1.0)*r12*x1390))+cj0+(((-1.0)*x1386*x1391)));
evalcond[3]=((((-1.0)*x1383))+((x1381*x1389))+(((-1.0)*x1384*x1391))+(((-1.0)*r02*x1390)));
evalcond[4]=((((-1.0)*r02*x1391))+(((-1.0)*x1389*x1390))+(((-1.0)*cj0))+((x1382*x1384)));
evalcond[5]=((((-1.0)*x1383))+(((-1.0)*x1385*x1390))+(((-1.0)*r12*x1391))+((x1382*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1392=((1.0)*cj5);
CheckValue<IkReal> x1393 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1393.valid){
continue;
}
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1392)))),-1);
if(!x1394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1393.value)+(((1.5707963267949)*(x1394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1395=IKsin(j4);
IkReal x1396=IKcos(j4);
IkReal x1397=((1.0)*sj0);
IkReal x1398=(cj5*r00);
IkReal x1399=(r11*sj5);
IkReal x1400=(cj5*r10);
IkReal x1401=(r21*sj5);
IkReal x1402=(cj5*r20);
IkReal x1403=(r01*sj5);
IkReal x1404=((1.0)*x1396);
IkReal x1405=((1.0)*x1395);
evalcond[0]=((((-1.0)*r22*x1404))+((x1395*x1401))+(((-1.0)*x1402*x1405)));
evalcond[1]=(((x1396*x1402))+(((-1.0)*r22*x1405))+(((-1.0)*x1401*x1404)));
evalcond[2]=((((-1.0)*r12*x1404))+cj0+((x1395*x1399))+(((-1.0)*x1400*x1405)));
evalcond[3]=((((-1.0)*x1398*x1405))+((x1395*x1403))+(((-1.0)*r02*x1404))+(((-1.0)*x1397)));
evalcond[4]=((((-1.0)*r02*x1405))+((x1396*x1398))+(((-1.0)*x1403*x1404))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1405))+(((-1.0)*x1399*x1404))+((x1396*x1400))+(((-1.0)*x1397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1406=((1.0)*cj5);
CheckValue<IkReal> x1407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1406)))),-1);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1407.value)))+(x1408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1409=IKsin(j4);
IkReal x1410=IKcos(j4);
IkReal x1411=((1.0)*sj0);
IkReal x1412=(cj5*r00);
IkReal x1413=(r11*sj5);
IkReal x1414=(cj5*r10);
IkReal x1415=(r21*sj5);
IkReal x1416=(cj5*r20);
IkReal x1417=(r01*sj5);
IkReal x1418=((1.0)*x1410);
IkReal x1419=((1.0)*x1409);
evalcond[0]=((((-1.0)*r22*x1418))+(((-1.0)*x1416*x1419))+((x1409*x1415)));
evalcond[1]=((((-1.0)*x1415*x1418))+(((-1.0)*r22*x1419))+((x1410*x1416)));
evalcond[2]=(cj0+(((-1.0)*x1414*x1419))+(((-1.0)*r12*x1418))+((x1409*x1413)));
evalcond[3]=((((-1.0)*x1411))+(((-1.0)*x1412*x1419))+(((-1.0)*r02*x1418))+((x1409*x1417)));
evalcond[4]=((((-1.0)*x1417*x1418))+(((-1.0)*r02*x1419))+((x1410*x1412))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1411))+(((-1.0)*x1413*x1418))+((x1410*x1414))+(((-1.0)*r12*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1420=IKcos(j0);
IkReal x1421=IKsin(j0);
evalcond[0]=((((0.24365)*x1420))+(((-1.0)*px))+(((-0.11235)*x1421)));
evalcond[1]=((((0.24365)*x1421))+(((-1.0)*py))+(((0.11235)*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1422=((1.0)*cj5);
IkReal x1423=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1422)));
j4eval[0]=x1423;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1422))))));
j4eval[2]=IKsign(x1423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1424=cj5*cj5;
IkReal x1425=((1.0)*r21);
IkReal x1426=(cj5*sj5);
IkReal x1427=((1.0)*r20);
IkReal x1428=((((-1.0)*r00*x1425*x1426))+(((-1.0)*r01*x1424*x1425))+((r00*r20*x1424))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1426*x1427)));
j4eval[0]=x1428;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1427)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1429=cj5*cj5;
IkReal x1430=(r21*sj5);
IkReal x1431=(r11*r21);
IkReal x1432=((1.0)*cj5*r20);
IkReal x1433=((((-1.0)*x1429*x1431))+(((-1.0)*cj5*r10*x1430))+(((-1.0)*r11*sj5*x1432))+((r12*r22))+x1431+((r10*r20*x1429)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1432))+((sj0*x1430))))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1434=cj5*cj5;
IkReal x1435=(r21*sj5);
IkReal x1436=(r11*r21);
IkReal x1437=((1.0)*cj5*r20);
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1437))+((sj0*x1435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1435))+((r10*r20*x1434))+(((-1.0)*r11*sj5*x1437))+((r12*r22))+(((-1.0)*x1434*x1436))+x1436)),-1);
if(!x1439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1438.value)+(((1.5707963267949)*(x1439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1440=IKsin(j4);
IkReal x1441=IKcos(j4);
IkReal x1442=(r11*sj5);
IkReal x1443=(cj5*r00);
IkReal x1444=(cj5*r10);
IkReal x1445=(r21*sj5);
IkReal x1446=(cj5*r20);
IkReal x1447=(r01*sj5);
IkReal x1448=((1.0)*x1441);
IkReal x1449=((1.0)*x1440);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((x1440*x1445)));
evalcond[1]=((((-1.0)*r22*x1449))+(((-1.0)*x1445*x1448))+((x1441*x1446)));
evalcond[2]=(cj0+((x1440*x1442))+(((-1.0)*r12*x1448))+(((-1.0)*x1444*x1449)));
evalcond[3]=(cj0+((x1441*x1443))+(((-1.0)*x1447*x1448))+(((-1.0)*r02*x1449)));
evalcond[4]=(sj0+((x1441*x1444))+(((-1.0)*r12*x1449))+(((-1.0)*x1442*x1448)));
evalcond[5]=((((-1.0)*sj0))+((x1440*x1447))+(((-1.0)*r02*x1448))+(((-1.0)*x1443*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1450=cj5*cj5;
IkReal x1451=((1.0)*r21);
IkReal x1452=(cj5*sj5);
IkReal x1453=((1.0)*r20);
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1452*x1453))+(((-1.0)*r00*x1451*x1452))+((r01*r21))+((r00*r20*x1450))+(((-1.0)*r01*x1450*x1451))+((r02*r22)))),-1);
if(!x1454.valid){
continue;
}
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1454.value)))+(x1455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1456=IKsin(j4);
IkReal x1457=IKcos(j4);
IkReal x1458=(r11*sj5);
IkReal x1459=(cj5*r00);
IkReal x1460=(cj5*r10);
IkReal x1461=(r21*sj5);
IkReal x1462=(cj5*r20);
IkReal x1463=(r01*sj5);
IkReal x1464=((1.0)*x1457);
IkReal x1465=((1.0)*x1456);
evalcond[0]=((((-1.0)*r22*x1464))+(((-1.0)*x1462*x1465))+((x1456*x1461)));
evalcond[1]=((((-1.0)*r22*x1465))+((x1457*x1462))+(((-1.0)*x1461*x1464)));
evalcond[2]=(((x1456*x1458))+cj0+(((-1.0)*x1460*x1465))+(((-1.0)*r12*x1464)));
evalcond[3]=((((-1.0)*r02*x1465))+cj0+(((-1.0)*x1463*x1464))+((x1457*x1459)));
evalcond[4]=(sj0+(((-1.0)*x1458*x1464))+((x1457*x1460))+(((-1.0)*r12*x1465)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1464))+(((-1.0)*x1459*x1465))+((x1456*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1466=((1.0)*cj5);
CheckValue<IkReal> x1467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1466)))),-1);
if(!x1468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1467.value)+(((1.5707963267949)*(x1468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1469=IKsin(j4);
IkReal x1470=IKcos(j4);
IkReal x1471=(r11*sj5);
IkReal x1472=(cj5*r00);
IkReal x1473=(cj5*r10);
IkReal x1474=(r21*sj5);
IkReal x1475=(cj5*r20);
IkReal x1476=(r01*sj5);
IkReal x1477=((1.0)*x1470);
IkReal x1478=((1.0)*x1469);
evalcond[0]=((((-1.0)*r22*x1477))+(((-1.0)*x1475*x1478))+((x1469*x1474)));
evalcond[1]=((((-1.0)*r22*x1478))+(((-1.0)*x1474*x1477))+((x1470*x1475)));
evalcond[2]=(cj0+(((-1.0)*r12*x1477))+((x1469*x1471))+(((-1.0)*x1473*x1478)));
evalcond[3]=(cj0+(((-1.0)*x1476*x1477))+((x1470*x1472))+(((-1.0)*r02*x1478)));
evalcond[4]=(sj0+(((-1.0)*x1471*x1477))+(((-1.0)*r12*x1478))+((x1470*x1473)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1477))+(((-1.0)*x1472*x1478))+((x1469*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1479=((1.0)*cj5);
IkReal x1480=((((-1.0)*r01*x1479))+(((-1.0)*r00*sj5)));
j4eval[0]=x1480;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1479)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1481=((1.0)*cj5);
IkReal x1482=((((-1.0)*r11*x1481))+(((-1.0)*r10*sj5)));
j4eval[0]=x1482;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1481))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1483=cj5*cj5;
IkReal x1484=((1.0)*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r11*r21);
IkReal x1487=((((-1.0)*x1483*x1486))+(((-1.0)*r11*x1484*x1485))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1484))+x1486+((r10*r20*x1483)));
j4eval[0]=x1487;
j4eval[1]=IKsign(x1487);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1484))+((cj0*x1485)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1488=cj5*cj5;
IkReal x1489=((1.0)*sj5);
IkReal x1490=(cj5*r20);
IkReal x1491=(r11*r21);
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*r21*x1489))+x1491+(((-1.0)*r11*x1489*x1490))+(((-1.0)*x1488*x1491))+((r10*r20*x1488)))),-1);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1489))+((cj0*x1490)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1492.value)))+(x1493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1494=IKsin(j4);
IkReal x1495=IKcos(j4);
IkReal x1496=((1.0)*sj0);
IkReal x1497=(cj5*r00);
IkReal x1498=(r11*sj5);
IkReal x1499=(cj5*r10);
IkReal x1500=(r21*sj5);
IkReal x1501=(cj5*r20);
IkReal x1502=(r01*sj5);
IkReal x1503=((1.0)*x1495);
IkReal x1504=((1.0)*x1494);
evalcond[0]=(((x1494*x1500))+(((-1.0)*r22*x1503))+(((-1.0)*x1501*x1504)));
evalcond[1]=((((-1.0)*r22*x1504))+((x1495*x1501))+(((-1.0)*x1500*x1503)));
evalcond[2]=((((-1.0)*x1499*x1504))+cj0+((x1494*x1498))+(((-1.0)*r12*x1503)));
evalcond[3]=(((x1494*x1502))+(((-1.0)*x1496))+(((-1.0)*r02*x1503))+(((-1.0)*x1497*x1504)));
evalcond[4]=(((x1495*x1497))+(((-1.0)*r02*x1504))+(((-1.0)*x1502*x1503))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1498*x1503))+(((-1.0)*x1496))+((x1495*x1499))+(((-1.0)*r12*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1505=((1.0)*cj5);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1505)))),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1508=IKsin(j4);
IkReal x1509=IKcos(j4);
IkReal x1510=((1.0)*sj0);
IkReal x1511=(cj5*r00);
IkReal x1512=(r11*sj5);
IkReal x1513=(cj5*r10);
IkReal x1514=(r21*sj5);
IkReal x1515=(cj5*r20);
IkReal x1516=(r01*sj5);
IkReal x1517=((1.0)*x1509);
IkReal x1518=((1.0)*x1508);
evalcond[0]=((((-1.0)*x1515*x1518))+((x1508*x1514))+(((-1.0)*r22*x1517)));
evalcond[1]=(((x1509*x1515))+(((-1.0)*r22*x1518))+(((-1.0)*x1514*x1517)));
evalcond[2]=(((x1508*x1512))+cj0+(((-1.0)*x1513*x1518))+(((-1.0)*r12*x1517)));
evalcond[3]=(((x1508*x1516))+(((-1.0)*x1510))+(((-1.0)*r02*x1517))+(((-1.0)*x1511*x1518)));
evalcond[4]=(((x1509*x1511))+(((-1.0)*x1516*x1517))+(((-1.0)*r02*x1518))+(((-1.0)*cj0)));
evalcond[5]=(((x1509*x1513))+(((-1.0)*x1510))+(((-1.0)*x1512*x1517))+(((-1.0)*r12*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1519=((1.0)*cj5);
CheckValue<IkReal> x1520 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1519))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1520.valid){
continue;
}
CheckValue<IkReal> x1521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1519))+(((-1.0)*r00*sj5)))),-1);
if(!x1521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1520.value)+(((1.5707963267949)*(x1521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1522=IKsin(j4);
IkReal x1523=IKcos(j4);
IkReal x1524=((1.0)*sj0);
IkReal x1525=(cj5*r00);
IkReal x1526=(r11*sj5);
IkReal x1527=(cj5*r10);
IkReal x1528=(r21*sj5);
IkReal x1529=(cj5*r20);
IkReal x1530=(r01*sj5);
IkReal x1531=((1.0)*x1523);
IkReal x1532=((1.0)*x1522);
evalcond[0]=((((-1.0)*x1529*x1532))+((x1522*x1528))+(((-1.0)*r22*x1531)));
evalcond[1]=((((-1.0)*r22*x1532))+((x1523*x1529))+(((-1.0)*x1528*x1531)));
evalcond[2]=((((-1.0)*r12*x1531))+cj0+((x1522*x1526))+(((-1.0)*x1527*x1532)));
evalcond[3]=((((-1.0)*x1525*x1532))+(((-1.0)*x1524))+((x1522*x1530))+(((-1.0)*r02*x1531)));
evalcond[4]=((((-1.0)*x1530*x1531))+((x1523*x1525))+(((-1.0)*r02*x1532))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1532))+(((-1.0)*x1524))+((x1523*x1527))+(((-1.0)*x1526*x1531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1533=((1.0)*cj5);
IkReal x1534=((((-1.0)*r01*x1533))+(((-1.0)*r00*sj5)));
j4eval[0]=x1534;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1533))))));
j4eval[2]=IKsign(x1534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1535=cj5*cj5;
IkReal x1536=((1.0)*r21);
IkReal x1537=(cj5*sj5);
IkReal x1538=((1.0)*r20);
IkReal x1539=((((-1.0)*r00*x1536*x1537))+((r01*r21))+(((-1.0)*r01*x1535*x1536))+(((-1.0)*r01*x1537*x1538))+((r02*r22))+((r00*r20*x1535)));
j4eval[0]=x1539;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1538)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1540=cj5*cj5;
IkReal x1541=(r21*sj5);
IkReal x1542=(r11*r21);
IkReal x1543=((1.0)*cj5*r20);
IkReal x1544=((((-1.0)*cj5*r10*x1541))+(((-1.0)*r11*sj5*x1543))+((r12*r22))+x1542+(((-1.0)*x1540*x1542))+((r10*r20*x1540)));
j4eval[0]=x1544;
j4eval[1]=((IKabs((((sj0*x1541))+(((-1.0)*sj0*x1543)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1545=cj5*cj5;
IkReal x1546=(r21*sj5);
IkReal x1547=(r11*r21);
IkReal x1548=((1.0)*cj5*r20);
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1546))+(((-1.0)*r11*sj5*x1548))+((r12*r22))+x1547+((r10*r20*x1545))+(((-1.0)*x1545*x1547)))),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1546))+(((-1.0)*sj0*x1548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1551=IKsin(j4);
IkReal x1552=IKcos(j4);
IkReal x1553=(r11*sj5);
IkReal x1554=(cj5*r00);
IkReal x1555=(cj5*r10);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r01*sj5);
IkReal x1559=((1.0)*x1552);
IkReal x1560=((1.0)*x1551);
evalcond[0]=(((x1551*x1556))+(((-1.0)*r22*x1559))+(((-1.0)*x1557*x1560)));
evalcond[1]=(((x1552*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1556*x1559)));
evalcond[2]=(((x1551*x1553))+cj0+(((-1.0)*x1555*x1560))+(((-1.0)*r12*x1559)));
evalcond[3]=((((-1.0)*x1558*x1559))+(((-1.0)*r02*x1560))+cj0+((x1552*x1554)));
evalcond[4]=(sj0+((x1552*x1555))+(((-1.0)*x1553*x1559))+(((-1.0)*r12*x1560)));
evalcond[5]=(((x1551*x1558))+(((-1.0)*sj0))+(((-1.0)*r02*x1559))+(((-1.0)*x1554*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1561=cj5*cj5;
IkReal x1562=((1.0)*r21);
IkReal x1563=(cj5*sj5);
IkReal x1564=((1.0)*r20);
CheckValue<IkReal> x1565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1563*x1564))+((r01*r21))+(((-1.0)*r01*x1561*x1562))+((r00*r20*x1561))+(((-1.0)*r00*x1562*x1563))+((r02*r22)))),-1);
if(!x1565.valid){
continue;
}
CheckValue<IkReal> x1566 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1565.value)))+(x1566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1567=IKsin(j4);
IkReal x1568=IKcos(j4);
IkReal x1569=(r11*sj5);
IkReal x1570=(cj5*r00);
IkReal x1571=(cj5*r10);
IkReal x1572=(r21*sj5);
IkReal x1573=(cj5*r20);
IkReal x1574=(r01*sj5);
IkReal x1575=((1.0)*x1568);
IkReal x1576=((1.0)*x1567);
evalcond[0]=(((x1567*x1572))+(((-1.0)*x1573*x1576))+(((-1.0)*r22*x1575)));
evalcond[1]=((((-1.0)*x1572*x1575))+(((-1.0)*r22*x1576))+((x1568*x1573)));
evalcond[2]=(((x1567*x1569))+(((-1.0)*x1571*x1576))+cj0+(((-1.0)*r12*x1575)));
evalcond[3]=((((-1.0)*r02*x1576))+cj0+((x1568*x1570))+(((-1.0)*x1574*x1575)));
evalcond[4]=(sj0+((x1568*x1571))+(((-1.0)*x1569*x1575))+(((-1.0)*r12*x1576)));
evalcond[5]=((((-1.0)*r02*x1575))+((x1567*x1574))+(((-1.0)*sj0))+(((-1.0)*x1570*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1577=((1.0)*cj5);
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1577)))),-1);
if(!x1578.valid){
continue;
}
CheckValue<IkReal> x1579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1578.value)))+(x1579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1580=IKsin(j4);
IkReal x1581=IKcos(j4);
IkReal x1582=(r11*sj5);
IkReal x1583=(cj5*r00);
IkReal x1584=(cj5*r10);
IkReal x1585=(r21*sj5);
IkReal x1586=(cj5*r20);
IkReal x1587=(r01*sj5);
IkReal x1588=((1.0)*x1581);
IkReal x1589=((1.0)*x1580);
evalcond[0]=(((x1580*x1585))+(((-1.0)*r22*x1588))+(((-1.0)*x1586*x1589)));
evalcond[1]=((((-1.0)*x1585*x1588))+(((-1.0)*r22*x1589))+((x1581*x1586)));
evalcond[2]=(cj0+(((-1.0)*x1584*x1589))+((x1580*x1582))+(((-1.0)*r12*x1588)));
evalcond[3]=(cj0+(((-1.0)*r02*x1589))+(((-1.0)*x1587*x1588))+((x1581*x1583)));
evalcond[4]=(sj0+(((-1.0)*r12*x1589))+(((-1.0)*x1582*x1588))+((x1581*x1584)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1588))+((x1580*x1587))+(((-1.0)*x1583*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1590=IKcos(j0);
IkReal x1591=IKsin(j0);
evalcond[0]=((((-0.24365)*x1590))+(((-1.0)*px))+(((-0.11235)*x1591)));
evalcond[1]=((((-0.24365)*x1591))+(((0.11235)*x1590))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1592=((1.0)*cj5);
IkReal x1593=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1592)));
j4eval[0]=x1593;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1592))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1594=cj5*cj5;
IkReal x1595=((1.0)*r21);
IkReal x1596=(cj5*sj5);
IkReal x1597=((1.0)*r20);
IkReal x1598=((((-1.0)*r01*x1594*x1595))+(((-1.0)*r00*x1595*x1596))+(((-1.0)*r01*x1596*x1597))+((r01*r21))+((r00*r20*x1594))+((r02*r22)));
j4eval[0]=x1598;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1597)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1599=cj5*cj5;
IkReal x1600=(r21*sj5);
IkReal x1601=(r11*r21);
IkReal x1602=((1.0)*cj5*r20);
IkReal x1603=((((-1.0)*cj5*r10*x1600))+((r10*r20*x1599))+x1601+(((-1.0)*r11*sj5*x1602))+(((-1.0)*x1599*x1601))+((r12*r22)));
j4eval[0]=x1603;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1602))+((sj0*x1600)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1604=cj5*cj5;
IkReal x1605=(r21*sj5);
IkReal x1606=(r11*r21);
IkReal x1607=((1.0)*cj5*r20);
CheckValue<IkReal> x1608 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1607))+((sj0*x1605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1605))+((r10*r20*x1604))+x1606+(((-1.0)*r11*sj5*x1607))+(((-1.0)*x1604*x1606))+((r12*r22)))),-1);
if(!x1609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1608.value)+(((1.5707963267949)*(x1609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1610=IKsin(j4);
IkReal x1611=IKcos(j4);
IkReal x1612=(r11*sj5);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj5*r10);
IkReal x1615=(r21*sj5);
IkReal x1616=(cj5*r20);
IkReal x1617=(r01*sj5);
IkReal x1618=((1.0)*x1611);
IkReal x1619=((1.0)*x1610);
evalcond[0]=((((-1.0)*x1616*x1619))+(((-1.0)*r22*x1618))+((x1610*x1615)));
evalcond[1]=((((-1.0)*r22*x1619))+((x1611*x1616))+(((-1.0)*x1615*x1618)));
evalcond[2]=((((-1.0)*r12*x1618))+cj0+(((-1.0)*x1614*x1619))+((x1610*x1612)));
evalcond[3]=(cj0+(((-1.0)*r02*x1619))+(((-1.0)*x1617*x1618))+((x1611*x1613)));
evalcond[4]=((((-1.0)*r12*x1619))+sj0+(((-1.0)*x1612*x1618))+((x1611*x1614)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1618))+(((-1.0)*x1613*x1619))+((x1610*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1620=cj5*cj5;
IkReal x1621=((1.0)*r21);
IkReal x1622=(cj5*sj5);
IkReal x1623=((1.0)*r20);
CheckValue<IkReal> x1624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1623))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1624.valid){
continue;
}
CheckValue<IkReal> x1625=IKPowWithIntegerCheck(IKsign((((r00*r20*x1620))+((r01*r21))+(((-1.0)*r01*x1622*x1623))+(((-1.0)*r01*x1620*x1621))+((r02*r22))+(((-1.0)*r00*x1621*x1622)))),-1);
if(!x1625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1624.value)+(((1.5707963267949)*(x1625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1626=IKsin(j4);
IkReal x1627=IKcos(j4);
IkReal x1628=(r11*sj5);
IkReal x1629=(cj5*r00);
IkReal x1630=(cj5*r10);
IkReal x1631=(r21*sj5);
IkReal x1632=(cj5*r20);
IkReal x1633=(r01*sj5);
IkReal x1634=((1.0)*x1627);
IkReal x1635=((1.0)*x1626);
evalcond[0]=((((-1.0)*r22*x1634))+(((-1.0)*x1632*x1635))+((x1626*x1631)));
evalcond[1]=(((x1627*x1632))+(((-1.0)*r22*x1635))+(((-1.0)*x1631*x1634)));
evalcond[2]=(cj0+((x1626*x1628))+(((-1.0)*r12*x1634))+(((-1.0)*x1630*x1635)));
evalcond[3]=(((x1627*x1629))+cj0+(((-1.0)*x1633*x1634))+(((-1.0)*r02*x1635)));
evalcond[4]=(((x1627*x1630))+sj0+(((-1.0)*r12*x1635))+(((-1.0)*x1628*x1634)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1629*x1635))+(((-1.0)*r02*x1634))+((x1626*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1636=((1.0)*cj5);
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1636))+(((-1.0)*r00*sj5)))),-1);
if(!x1638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1637.value)+(((1.5707963267949)*(x1638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1639=IKsin(j4);
IkReal x1640=IKcos(j4);
IkReal x1641=(r11*sj5);
IkReal x1642=(cj5*r00);
IkReal x1643=(cj5*r10);
IkReal x1644=(r21*sj5);
IkReal x1645=(cj5*r20);
IkReal x1646=(r01*sj5);
IkReal x1647=((1.0)*x1640);
IkReal x1648=((1.0)*x1639);
evalcond[0]=((((-1.0)*r22*x1647))+(((-1.0)*x1645*x1648))+((x1639*x1644)));
evalcond[1]=(((x1640*x1645))+(((-1.0)*r22*x1648))+(((-1.0)*x1644*x1647)));
evalcond[2]=(cj0+(((-1.0)*r12*x1647))+(((-1.0)*x1643*x1648))+((x1639*x1641)));
evalcond[3]=(((x1640*x1642))+(((-1.0)*x1646*x1647))+cj0+(((-1.0)*r02*x1648)));
evalcond[4]=(((x1640*x1643))+sj0+(((-1.0)*x1641*x1647))+(((-1.0)*r12*x1648)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1642*x1648))+((x1639*x1646))+(((-1.0)*r02*x1647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1649=IKcos(j0);
IkReal x1650=IKsin(j0);
evalcond[0]=((((-0.11235)*x1650))+(((-0.24365)*x1649))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((-0.24365)*x1650))+(((0.11235)*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1651=((1.0)*cj5);
IkReal x1652=((((-1.0)*r01*x1651))+(((-1.0)*r00*sj5)));
j4eval[0]=x1652;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1651)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1653=((1.0)*cj5);
IkReal x1654=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1653)));
j4eval[0]=x1654;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1653))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1654);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1655=cj5*cj5;
IkReal x1656=((1.0)*sj5);
IkReal x1657=(cj5*r20);
IkReal x1658=(r11*r21);
IkReal x1659=((((-1.0)*r11*x1656*x1657))+(((-1.0)*cj5*r10*r21*x1656))+x1658+((r12*r22))+((r10*r20*x1655))+(((-1.0)*x1655*x1658)));
j4eval[0]=x1659;
j4eval[1]=IKsign(x1659);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1656))+((cj0*x1657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1660=cj5*cj5;
IkReal x1661=((1.0)*sj5);
IkReal x1662=(cj5*r20);
IkReal x1663=(r11*r21);
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1661))+((cj0*x1662)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
CheckValue<IkReal> x1665=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1661))+x1663+((r12*r22))+(((-1.0)*x1660*x1663))+(((-1.0)*r11*x1661*x1662))+((r10*r20*x1660)))),-1);
if(!x1665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1664.value)+(((1.5707963267949)*(x1665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1666=IKsin(j4);
IkReal x1667=IKcos(j4);
IkReal x1668=((1.0)*sj0);
IkReal x1669=(cj5*r00);
IkReal x1670=(r11*sj5);
IkReal x1671=(cj5*r10);
IkReal x1672=(r21*sj5);
IkReal x1673=(cj5*r20);
IkReal x1674=(r01*sj5);
IkReal x1675=((1.0)*x1667);
IkReal x1676=((1.0)*x1666);
evalcond[0]=(((x1666*x1672))+(((-1.0)*x1673*x1676))+(((-1.0)*r22*x1675)));
evalcond[1]=((((-1.0)*x1672*x1675))+((x1667*x1673))+(((-1.0)*r22*x1676)));
evalcond[2]=(((x1666*x1670))+cj0+(((-1.0)*x1671*x1676))+(((-1.0)*r12*x1675)));
evalcond[3]=(((x1666*x1674))+(((-1.0)*r02*x1675))+(((-1.0)*x1669*x1676))+(((-1.0)*x1668)));
evalcond[4]=((((-1.0)*r02*x1676))+((x1667*x1669))+(((-1.0)*x1674*x1675))+(((-1.0)*cj0)));
evalcond[5]=(((x1667*x1671))+(((-1.0)*r12*x1676))+(((-1.0)*x1668))+(((-1.0)*x1670*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1677=((1.0)*cj5);
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1677))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1677)))),-1);
if(!x1679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1678.value)+(((1.5707963267949)*(x1679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1680=IKsin(j4);
IkReal x1681=IKcos(j4);
IkReal x1682=((1.0)*sj0);
IkReal x1683=(cj5*r00);
IkReal x1684=(r11*sj5);
IkReal x1685=(cj5*r10);
IkReal x1686=(r21*sj5);
IkReal x1687=(cj5*r20);
IkReal x1688=(r01*sj5);
IkReal x1689=((1.0)*x1681);
IkReal x1690=((1.0)*x1680);
evalcond[0]=(((x1680*x1686))+(((-1.0)*x1687*x1690))+(((-1.0)*r22*x1689)));
evalcond[1]=(((x1681*x1687))+(((-1.0)*x1686*x1689))+(((-1.0)*r22*x1690)));
evalcond[2]=((((-1.0)*r12*x1689))+((x1680*x1684))+cj0+(((-1.0)*x1685*x1690)));
evalcond[3]=((((-1.0)*x1682))+((x1680*x1688))+(((-1.0)*x1683*x1690))+(((-1.0)*r02*x1689)));
evalcond[4]=(((x1681*x1683))+(((-1.0)*r02*x1690))+(((-1.0)*cj0))+(((-1.0)*x1688*x1689)));
evalcond[5]=(((x1681*x1685))+(((-1.0)*x1682))+(((-1.0)*r12*x1690))+(((-1.0)*x1684*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1691=((1.0)*cj5);
CheckValue<IkReal> x1692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1691)))),-1);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1691))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1692.value)))+(x1693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=((1.0)*sj0);
IkReal x1697=(cj5*r00);
IkReal x1698=(r11*sj5);
IkReal x1699=(cj5*r10);
IkReal x1700=(r21*sj5);
IkReal x1701=(cj5*r20);
IkReal x1702=(r01*sj5);
IkReal x1703=((1.0)*x1695);
IkReal x1704=((1.0)*x1694);
evalcond[0]=(((x1694*x1700))+(((-1.0)*r22*x1703))+(((-1.0)*x1701*x1704)));
evalcond[1]=((((-1.0)*x1700*x1703))+(((-1.0)*r22*x1704))+((x1695*x1701)));
evalcond[2]=(cj0+(((-1.0)*x1699*x1704))+((x1694*x1698))+(((-1.0)*r12*x1703)));
evalcond[3]=((((-1.0)*x1696))+((x1694*x1702))+(((-1.0)*r02*x1703))+(((-1.0)*x1697*x1704)));
evalcond[4]=((((-1.0)*x1702*x1703))+((x1695*x1697))+(((-1.0)*r02*x1704))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1698*x1703))+(((-1.0)*x1696))+((x1695*x1699))+(((-1.0)*r12*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1705=((1.0)*cj5);
IkReal x1706=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1705)));
j4eval[0]=x1706;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1705))))));
j4eval[2]=IKsign(x1706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1707=cj5*cj5;
IkReal x1708=((1.0)*r21);
IkReal x1709=(cj5*sj5);
IkReal x1710=((1.0)*r20);
IkReal x1711=((((-1.0)*r01*x1707*x1708))+((r01*r21))+((r00*r20*x1707))+(((-1.0)*r00*x1708*x1709))+((r02*r22))+(((-1.0)*r01*x1709*x1710)));
j4eval[0]=x1711;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1710)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1712=cj5*cj5;
IkReal x1713=(r21*sj5);
IkReal x1714=(r11*r21);
IkReal x1715=((1.0)*cj5*r20);
IkReal x1716=(x1714+(((-1.0)*r11*sj5*x1715))+((r10*r20*x1712))+((r12*r22))+(((-1.0)*x1712*x1714))+(((-1.0)*cj5*r10*x1713)));
j4eval[0]=x1716;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1715))+((sj0*x1713))))));
j4eval[2]=IKsign(x1716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1717=cj5*cj5;
IkReal x1718=(r21*sj5);
IkReal x1719=(r11*r21);
IkReal x1720=((1.0)*cj5*r20);
CheckValue<IkReal> x1721=IKPowWithIntegerCheck(IKsign((x1719+((r10*r20*x1717))+((r12*r22))+(((-1.0)*x1717*x1719))+(((-1.0)*r11*sj5*x1720))+(((-1.0)*cj5*r10*x1718)))),-1);
if(!x1721.valid){
continue;
}
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1720))+((sj0*x1718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1721.value)))+(x1722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1723=IKsin(j4);
IkReal x1724=IKcos(j4);
IkReal x1725=(r11*sj5);
IkReal x1726=(cj5*r00);
IkReal x1727=(cj5*r10);
IkReal x1728=(r21*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=(r01*sj5);
IkReal x1731=((1.0)*x1724);
IkReal x1732=((1.0)*x1723);
evalcond[0]=(((x1723*x1728))+(((-1.0)*x1729*x1732))+(((-1.0)*r22*x1731)));
evalcond[1]=(((x1724*x1729))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1732)));
evalcond[2]=(((x1723*x1725))+cj0+(((-1.0)*r12*x1731))+(((-1.0)*x1727*x1732)));
evalcond[3]=(((x1724*x1726))+cj0+(((-1.0)*x1730*x1731))+(((-1.0)*r02*x1732)));
evalcond[4]=(sj0+((x1724*x1727))+(((-1.0)*r12*x1732))+(((-1.0)*x1725*x1731)));
evalcond[5]=(((x1723*x1730))+(((-1.0)*sj0))+(((-1.0)*x1726*x1732))+(((-1.0)*r02*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1733=cj5*cj5;
IkReal x1734=((1.0)*r21);
IkReal x1735=(cj5*sj5);
IkReal x1736=((1.0)*r20);
CheckValue<IkReal> x1737 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1737.valid){
continue;
}
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1734*x1735))+(((-1.0)*r01*x1733*x1734))+((r01*r21))+(((-1.0)*r01*x1735*x1736))+((r02*r22))+((r00*r20*x1733)))),-1);
if(!x1738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1737.value)+(((1.5707963267949)*(x1738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1739=IKsin(j4);
IkReal x1740=IKcos(j4);
IkReal x1741=(r11*sj5);
IkReal x1742=(cj5*r00);
IkReal x1743=(cj5*r10);
IkReal x1744=(r21*sj5);
IkReal x1745=(cj5*r20);
IkReal x1746=(r01*sj5);
IkReal x1747=((1.0)*x1740);
IkReal x1748=((1.0)*x1739);
evalcond[0]=(((x1739*x1744))+(((-1.0)*r22*x1747))+(((-1.0)*x1745*x1748)));
evalcond[1]=((((-1.0)*r22*x1748))+(((-1.0)*x1744*x1747))+((x1740*x1745)));
evalcond[2]=((((-1.0)*r12*x1747))+((x1739*x1741))+cj0+(((-1.0)*x1743*x1748)));
evalcond[3]=(cj0+(((-1.0)*x1746*x1747))+((x1740*x1742))+(((-1.0)*r02*x1748)));
evalcond[4]=((((-1.0)*r12*x1748))+(((-1.0)*x1741*x1747))+sj0+((x1740*x1743)));
evalcond[5]=(((x1739*x1746))+(((-1.0)*sj0))+(((-1.0)*x1742*x1748))+(((-1.0)*r02*x1747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1749=((1.0)*cj5);
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1749)))),-1);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1750.value)))+(x1751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1752=IKsin(j4);
IkReal x1753=IKcos(j4);
IkReal x1754=(r11*sj5);
IkReal x1755=(cj5*r00);
IkReal x1756=(cj5*r10);
IkReal x1757=(r21*sj5);
IkReal x1758=(cj5*r20);
IkReal x1759=(r01*sj5);
IkReal x1760=((1.0)*x1753);
IkReal x1761=((1.0)*x1752);
evalcond[0]=(((x1752*x1757))+(((-1.0)*x1758*x1761))+(((-1.0)*r22*x1760)));
evalcond[1]=(((x1753*x1758))+(((-1.0)*x1757*x1760))+(((-1.0)*r22*x1761)));
evalcond[2]=(((x1752*x1754))+cj0+(((-1.0)*x1756*x1761))+(((-1.0)*r12*x1760)));
evalcond[3]=(((x1753*x1755))+cj0+(((-1.0)*r02*x1761))+(((-1.0)*x1759*x1760)));
evalcond[4]=(sj0+(((-1.0)*x1754*x1760))+((x1753*x1756))+(((-1.0)*r12*x1761)));
evalcond[5]=(((x1752*x1759))+(((-1.0)*sj0))+(((-1.0)*r02*x1760))+(((-1.0)*x1755*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1762=((1.0)*cj5);
IkReal x1763=((((-1.0)*r01*x1762))+(((-1.0)*r00*sj5)));
j4eval[0]=x1763;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1762))))));
j4eval[2]=IKsign(x1763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1764=((1.0)*cj5);
IkReal x1765=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1764)));
j4eval[0]=x1765;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1764))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1766=cj5*cj5;
IkReal x1767=((1.0)*sj5);
IkReal x1768=(cj5*r20);
IkReal x1769=(r11*r21);
IkReal x1770=(x1769+((r12*r22))+(((-1.0)*cj5*r10*r21*x1767))+((r10*r20*x1766))+(((-1.0)*r11*x1767*x1768))+(((-1.0)*x1766*x1769)));
j4eval[0]=x1770;
j4eval[1]=IKsign(x1770);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1767))+((cj0*x1768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1771=cj5*cj5;
IkReal x1772=((1.0)*sj5);
IkReal x1773=(cj5*r20);
IkReal x1774=(r11*r21);
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(IKsign((x1774+((r12*r22))+((r10*r20*x1771))+(((-1.0)*cj5*r10*r21*x1772))+(((-1.0)*x1771*x1774))+(((-1.0)*r11*x1772*x1773)))),-1);
if(!x1775.valid){
continue;
}
CheckValue<IkReal> x1776 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1772))+((cj0*x1773)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1775.value)))+(x1776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1777=IKsin(j4);
IkReal x1778=IKcos(j4);
IkReal x1779=((1.0)*sj0);
IkReal x1780=(cj5*r00);
IkReal x1781=(r11*sj5);
IkReal x1782=(cj5*r10);
IkReal x1783=(r21*sj5);
IkReal x1784=(cj5*r20);
IkReal x1785=(r01*sj5);
IkReal x1786=((1.0)*x1778);
IkReal x1787=((1.0)*x1777);
evalcond[0]=((((-1.0)*r22*x1786))+((x1777*x1783))+(((-1.0)*x1784*x1787)));
evalcond[1]=((((-1.0)*x1783*x1786))+(((-1.0)*r22*x1787))+((x1778*x1784)));
evalcond[2]=(cj0+((x1777*x1781))+(((-1.0)*r12*x1786))+(((-1.0)*x1782*x1787)));
evalcond[3]=(((x1777*x1785))+(((-1.0)*x1779))+(((-1.0)*x1780*x1787))+(((-1.0)*r02*x1786)));
evalcond[4]=(((x1778*x1780))+(((-1.0)*x1785*x1786))+(((-1.0)*r02*x1787))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1787))+((x1778*x1782))+(((-1.0)*x1779))+(((-1.0)*x1781*x1786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1788=((1.0)*cj5);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
CheckValue<IkReal> x1790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1788)))),-1);
if(!x1790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1789.value)+(((1.5707963267949)*(x1790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1791=IKsin(j4);
IkReal x1792=IKcos(j4);
IkReal x1793=((1.0)*sj0);
IkReal x1794=(cj5*r00);
IkReal x1795=(r11*sj5);
IkReal x1796=(cj5*r10);
IkReal x1797=(r21*sj5);
IkReal x1798=(cj5*r20);
IkReal x1799=(r01*sj5);
IkReal x1800=((1.0)*x1792);
IkReal x1801=((1.0)*x1791);
evalcond[0]=((((-1.0)*x1798*x1801))+((x1791*x1797))+(((-1.0)*r22*x1800)));
evalcond[1]=((((-1.0)*x1797*x1800))+((x1792*x1798))+(((-1.0)*r22*x1801)));
evalcond[2]=(cj0+(((-1.0)*x1796*x1801))+((x1791*x1795))+(((-1.0)*r12*x1800)));
evalcond[3]=((((-1.0)*x1793))+(((-1.0)*x1794*x1801))+(((-1.0)*r02*x1800))+((x1791*x1799)));
evalcond[4]=((((-1.0)*x1799*x1800))+(((-1.0)*r02*x1801))+((x1792*x1794))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1793))+(((-1.0)*x1795*x1800))+((x1792*x1796))+(((-1.0)*r12*x1801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1802=((1.0)*cj5);
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1802))+(((-1.0)*r00*sj5)))),-1);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1803.value)))+(x1804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1805=IKsin(j4);
IkReal x1806=IKcos(j4);
IkReal x1807=((1.0)*sj0);
IkReal x1808=(cj5*r00);
IkReal x1809=(r11*sj5);
IkReal x1810=(cj5*r10);
IkReal x1811=(r21*sj5);
IkReal x1812=(cj5*r20);
IkReal x1813=(r01*sj5);
IkReal x1814=((1.0)*x1806);
IkReal x1815=((1.0)*x1805);
evalcond[0]=((((-1.0)*x1812*x1815))+((x1805*x1811))+(((-1.0)*r22*x1814)));
evalcond[1]=((((-1.0)*x1811*x1814))+((x1806*x1812))+(((-1.0)*r22*x1815)));
evalcond[2]=(cj0+(((-1.0)*x1810*x1815))+(((-1.0)*r12*x1814))+((x1805*x1809)));
evalcond[3]=(((x1805*x1813))+(((-1.0)*x1808*x1815))+(((-1.0)*r02*x1814))+(((-1.0)*x1807)));
evalcond[4]=(((x1806*x1808))+(((-1.0)*x1813*x1814))+(((-1.0)*r02*x1815))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1809*x1814))+(((-1.0)*x1807))+(((-1.0)*r12*x1815))+((x1806*x1810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1816=(cj5*r01);
IkReal x1817=((4873.0)*cj1);
IkReal x1818=(r00*sj5);
IkReal x1819=(cj1*cj2);
IkReal x1820=((20000.0)*px);
IkReal x1821=(sj1*sj2);
IkReal x1822=((2558.0)*x1821);
CheckValue<IkReal> x1823=IKPowWithIntegerCheck(((((-2247.0)*x1819))+(((2247.0)*x1821))),-1);
if(!x1823.valid){
continue;
}
CheckValue<IkReal> x1824=IKPowWithIntegerCheck((x1821+(((-1.0)*x1819))),-1);
if(!x1824.valid){
continue;
}
if( IKabs(((x1823.value)*((((x1819*x1820))+((x1818*x1822))+(((-2558.0)*x1818*x1819))+(((-1.0)*x1816*x1817))+(((-1.0)*x1820*x1821))+((x1816*x1822))+(((-1.0)*x1817*x1818))+(((-2558.0)*x1816*x1819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1824.value)*(((((-1.0)*x1816))+(((-1.0)*x1818)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1823.value)*((((x1819*x1820))+((x1818*x1822))+(((-2558.0)*x1818*x1819))+(((-1.0)*x1816*x1817))+(((-1.0)*x1820*x1821))+((x1816*x1822))+(((-1.0)*x1817*x1818))+(((-2558.0)*x1816*x1819))))))+IKsqr(((x1824.value)*(((((-1.0)*x1816))+(((-1.0)*x1818))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1823.value)*((((x1819*x1820))+((x1818*x1822))+(((-2558.0)*x1818*x1819))+(((-1.0)*x1816*x1817))+(((-1.0)*x1820*x1821))+((x1816*x1822))+(((-1.0)*x1817*x1818))+(((-2558.0)*x1816*x1819))))), ((x1824.value)*(((((-1.0)*x1816))+(((-1.0)*x1818))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1825=IKcos(j0);
IkReal x1826=IKsin(j0);
IkReal x1827=(cj5*r01);
IkReal x1828=(r00*sj5);
IkReal x1829=(cj5*r11);
IkReal x1830=((1.0)*cj2);
IkReal x1831=(r10*sj5);
IkReal x1832=((0.21325)*cj1*cj2);
IkReal x1833=(cj1*x1825);
IkReal x1834=(cj1*x1826);
IkReal x1835=(sj1*sj2*x1825);
IkReal x1836=(sj1*sj2*x1826);
evalcond[0]=(x1828+x1827+x1835+(((-1.0)*x1830*x1833)));
evalcond[1]=(x1829+x1831+x1836+(((-1.0)*x1830*x1834)));
evalcond[2]=((((-0.11235)*x1826))+(((0.24365)*x1833))+(((-1.0)*px))+(((-0.21325)*x1835))+((x1825*x1832))+(((-0.08535)*x1828))+(((-0.08535)*x1827)));
evalcond[3]=((((-0.08535)*x1831))+((x1826*x1832))+(((0.11235)*x1825))+(((0.24365)*x1834))+(((-1.0)*py))+(((-0.21325)*x1836))+(((-0.08535)*x1829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1837=((1.0)*cj5);
IkReal x1838=((((-1.0)*r01*x1837))+(((-1.0)*r00*sj5)));
j4eval[0]=x1838;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1837)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1839=((1.0)*cj5);
IkReal x1840=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1839)));
j4eval[0]=x1840;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1839))))));
j4eval[2]=IKsign(x1840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1841=((1.0)*sj0);
IkReal x1842=((1.0)*cj0);
IkReal x1843=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1843;
j4eval[1]=((IKabs(((((-1.0)*r02*x1842))+(((-1.0)*r12*x1841)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1841))+(((-1.0)*r01*sj5*x1842))))));
j4eval[2]=IKsign(x1843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1844=((-1.0)*r20);
IkReal x1846 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1846)==0){
continue;
}
IkReal x1845=pow(x1846,-0.5);
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1844),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1847.value));
IkReal gconst79=(r21*x1845);
IkReal gconst80=(x1844*x1845);
CheckValue<IkReal> x1848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1848.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1848.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1849=((-1.0)*r20);
IkReal x1850=x1845;
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1849),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
IkReal x1851=((-1.0)*(x1852.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1851;
IkReal gconst78=x1851;
IkReal gconst79=(r21*x1850);
IkReal gconst80=(x1849*x1850);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1853=((-1.0)*r20);
IkReal x1854=x1845;
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1853),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal x1855=((-1.0)*(x1856.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1855;
IkReal gconst78=x1855;
IkReal gconst79=(r21*x1854);
IkReal gconst80=(x1853*x1854);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1857=((-1.0)*r20);
IkReal x1858=x1845;
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1857),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
IkReal x1859=((-1.0)*(x1860.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1859;
IkReal gconst78=x1859;
IkReal gconst79=(r21*x1858);
IkReal gconst80=(x1857*x1858);
IkReal x1861=r22*r22;
CheckValue<IkReal> x1864=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1861))),-1);
if(!x1864.valid){
continue;
}
IkReal x1862=x1864.value;
IkReal x1863=(((x1862*(r20*r20*r20*r20)))+((x1862*(r21*r21*r21*r21)))+(((2.0)*x1862*(r20*r20)*(r21*r21)))+x1861);
j4eval[0]=x1863;
j4eval[1]=IKsign(x1863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1865=(sj1*sj2);
IkReal x1866=(gconst80*r20);
IkReal x1867=(gconst79*r21);
IkReal x1868=(cj1*cj2);
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(((x1866*x1866)+(x1867*x1867)+(r22*r22)+(((-2.0)*x1866*x1867)))),-1);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal((((r22*x1865))+(((-1.0)*r22*x1868)))),IkReal(((((-1.0)*x1865*x1866))+(((-1.0)*x1867*x1868))+((x1866*x1868))+((x1865*x1867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1869.value)))+(x1870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1871=IKsin(j4);
IkReal x1872=IKcos(j4);
IkReal x1873=(gconst79*r01);
IkReal x1874=(gconst79*r21);
IkReal x1875=((1.0)*cj2);
IkReal x1876=(gconst79*r11);
IkReal x1877=((1.0)*sj0);
IkReal x1878=(cj1*sj2);
IkReal x1879=((1.0)*x1872);
IkReal x1880=(gconst80*x1872);
IkReal x1881=((1.0)*x1871);
IkReal x1882=(gconst80*x1881);
evalcond[0]=((((-1.0)*r22*x1879))+((x1871*x1874))+(((-1.0)*r20*x1882)));
evalcond[1]=(cj0+((x1871*x1876))+(((-1.0)*r10*x1882))+(((-1.0)*r12*x1879)));
evalcond[2]=((((-1.0)*x1877))+(((-1.0)*r02*x1879))+((x1871*x1873))+(((-1.0)*r00*x1882)));
evalcond[3]=((((-1.0)*x1874*x1879))+((r20*x1880))+(((-1.0)*r22*x1881))+((sj1*sj2))+(((-1.0)*cj1*x1875)));
evalcond[4]=((((-1.0)*x1873*x1879))+(((-1.0)*cj0*x1878))+(((-1.0)*r02*x1881))+(((-1.0)*cj0*sj1*x1875))+((r00*x1880)));
evalcond[5]=((((-1.0)*x1876*x1879))+(((-1.0)*x1877*x1878))+(((-1.0)*r12*x1881))+(((-1.0)*sj0*sj1*x1875))+((r10*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1883=((1.0)*gconst80);
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1883))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1883))+(((-1.0)*gconst79*r10)))),-1);
if(!x1885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1884.value)+(((1.5707963267949)*(x1885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1886=IKsin(j4);
IkReal x1887=IKcos(j4);
IkReal x1888=(gconst79*r01);
IkReal x1889=(gconst79*r21);
IkReal x1890=((1.0)*cj2);
IkReal x1891=(gconst79*r11);
IkReal x1892=((1.0)*sj0);
IkReal x1893=(cj1*sj2);
IkReal x1894=((1.0)*x1887);
IkReal x1895=(gconst80*x1887);
IkReal x1896=((1.0)*x1886);
IkReal x1897=(gconst80*x1896);
evalcond[0]=((((-1.0)*r22*x1894))+(((-1.0)*r20*x1897))+((x1886*x1889)));
evalcond[1]=(((x1886*x1891))+cj0+(((-1.0)*r10*x1897))+(((-1.0)*r12*x1894)));
evalcond[2]=((((-1.0)*r02*x1894))+(((-1.0)*r00*x1897))+(((-1.0)*x1892))+((x1886*x1888)));
evalcond[3]=(((r20*x1895))+(((-1.0)*cj1*x1890))+((sj1*sj2))+(((-1.0)*r22*x1896))+(((-1.0)*x1889*x1894)));
evalcond[4]=((((-1.0)*r02*x1896))+((r00*x1895))+(((-1.0)*cj0*sj1*x1890))+(((-1.0)*x1888*x1894))+(((-1.0)*cj0*x1893)));
evalcond[5]=((((-1.0)*x1892*x1893))+((r10*x1895))+(((-1.0)*x1891*x1894))+(((-1.0)*sj0*sj1*x1890))+(((-1.0)*r12*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1898=((1.0)*gconst80);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1898))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1898)))),-1);
if(!x1900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1899.value)+(((1.5707963267949)*(x1900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1901=IKsin(j4);
IkReal x1902=IKcos(j4);
IkReal x1903=(gconst79*r01);
IkReal x1904=(gconst79*r21);
IkReal x1905=((1.0)*cj2);
IkReal x1906=(gconst79*r11);
IkReal x1907=((1.0)*sj0);
IkReal x1908=(cj1*sj2);
IkReal x1909=((1.0)*x1902);
IkReal x1910=(gconst80*x1902);
IkReal x1911=((1.0)*x1901);
IkReal x1912=(gconst80*x1911);
evalcond[0]=(((x1901*x1904))+(((-1.0)*r22*x1909))+(((-1.0)*r20*x1912)));
evalcond[1]=(((x1901*x1906))+cj0+(((-1.0)*r12*x1909))+(((-1.0)*r10*x1912)));
evalcond[2]=(((x1901*x1903))+(((-1.0)*r00*x1912))+(((-1.0)*r02*x1909))+(((-1.0)*x1907)));
evalcond[3]=((((-1.0)*r22*x1911))+(((-1.0)*cj1*x1905))+((sj1*sj2))+(((-1.0)*x1904*x1909))+((r20*x1910)));
evalcond[4]=((((-1.0)*r02*x1911))+(((-1.0)*x1903*x1909))+((r00*x1910))+(((-1.0)*cj0*x1908))+(((-1.0)*cj0*sj1*x1905)));
evalcond[5]=(((r10*x1910))+(((-1.0)*x1907*x1908))+(((-1.0)*r12*x1911))+(((-1.0)*sj0*sj1*x1905))+(((-1.0)*x1906*x1909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1913=((-1.0)*r21);
IkReal x1915 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1915)==0){
continue;
}
IkReal x1914=pow(x1915,-0.5);
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(x1913),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1916.value))));
IkReal gconst82=(x1913*x1914);
IkReal gconst83=((1.0)*r20*x1914);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1917.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1918=((-1.0)*r21);
CheckValue<IkReal> x1921 = IKatan2WithCheck(IkReal(x1918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1921.valid){
continue;
}
IkReal x1919=((1.0)*(x1921.value));
IkReal x1920=x1914;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1919)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1919)));
IkReal gconst82=(x1918*x1920);
IkReal gconst83=((1.0)*r20*x1920);
IkReal x1922=r22*r22;
IkReal x1923=((1.0)*x1922);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(((-1.0)+x1922),-1);
if(!x1927.valid){
continue;
}
IkReal x1924=x1927.value;
if((((1.0)+(((-1.0)*x1923)))) < -0.00001)
continue;
IkReal x1925=IKsqrt(((1.0)+(((-1.0)*x1923))));
IkReal x1926=(cj0*x1924*x1925);
j4eval[0]=((IKabs((x1926+(((-1.0)*x1923*x1926)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1928=((-1.0)*r21);
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(x1928),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
IkReal x1929=((1.0)*(x1931.value));
IkReal x1930=x1914;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1929)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1929)));
IkReal gconst82=(x1928*x1930);
IkReal gconst83=((1.0)*r20*x1930);
IkReal x1932=r22*r22;
IkReal x1933=((1.0)*x1932);
CheckValue<IkReal> x1937=IKPowWithIntegerCheck(((-1.0)+x1932),-1);
if(!x1937.valid){
continue;
}
IkReal x1934=x1937.value;
if((((1.0)+(((-1.0)*x1933)))) < -0.00001)
continue;
IkReal x1935=IKsqrt(((1.0)+(((-1.0)*x1933))));
IkReal x1936=(sj0*x1934*x1935);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1933*x1936))+x1936))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1938=((-1.0)*r21);
CheckValue<IkReal> x1941 = IKatan2WithCheck(IkReal(x1938),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1941.valid){
continue;
}
IkReal x1939=((1.0)*(x1941.value));
IkReal x1940=x1914;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1939)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1939)));
IkReal gconst82=(x1938*x1940);
IkReal gconst83=((1.0)*r20*x1940);
IkReal x1942=r22*r22;
IkReal x1943=(r12*sj0);
IkReal x1944=(cj0*r02);
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(((-1.0)+x1942),-1);
if(!x1948.valid){
continue;
}
IkReal x1945=x1948.value;
if((((1.0)+(((-1.0)*x1942)))) < -0.00001)
continue;
IkReal x1946=IKsqrt(((1.0)+(((-1.0)*x1942))));
IkReal x1947=(r22*x1945*x1946);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1944))+(((-1.0)*x1943)))))+(IKabs((((x1943*x1947))+((x1944*x1947))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1949=((1.0)*sj0);
IkReal x1950=((1.0)*cj0);
CheckValue<IkReal> x1951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1951.valid){
continue;
}
CheckValue<IkReal> x1952 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1950))+(((-1.0)*r12*x1949)))),IkReal(((((-1.0)*gconst82*r01*x1950))+(((-1.0)*gconst82*r11*x1949))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1951.value)))+(x1952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1953=IKsin(j4);
IkReal x1954=IKcos(j4);
IkReal x1955=(gconst82*r11);
IkReal x1956=((1.0)*cj2);
IkReal x1957=((1.0)*sj0);
IkReal x1958=(cj1*sj2);
IkReal x1959=((1.0)*x1954);
IkReal x1960=(gconst83*x1954);
IkReal x1961=(gconst82*x1953);
IkReal x1962=((1.0)*x1953);
evalcond[0]=((((-1.0)*r22*x1959))+((r21*x1961))+(((-1.0)*gconst83*r20*x1962)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1962))+(((-1.0)*r12*x1959))+((x1953*x1955)));
evalcond[2]=((((-1.0)*x1957))+(((-1.0)*r02*x1959))+((r01*x1961))+(((-1.0)*gconst83*r00*x1962)));
evalcond[3]=(((r20*x1960))+(((-1.0)*r22*x1962))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1959))+(((-1.0)*cj1*x1956)));
evalcond[4]=((((-1.0)*cj0*sj1*x1956))+(((-1.0)*cj0*x1958))+(((-1.0)*r02*x1962))+(((-1.0)*gconst82*r01*x1959))+((r00*x1960)));
evalcond[5]=((((-1.0)*x1957*x1958))+((r10*x1960))+(((-1.0)*r12*x1962))+(((-1.0)*x1955*x1959))+(((-1.0)*sj0*sj1*x1956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1963=((1.0)*gconst83);
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1963)))),-1);
if(!x1964.valid){
continue;
}
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1964.value)))+(x1965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1966=IKsin(j4);
IkReal x1967=IKcos(j4);
IkReal x1968=(gconst82*r11);
IkReal x1969=((1.0)*cj2);
IkReal x1970=((1.0)*sj0);
IkReal x1971=(cj1*sj2);
IkReal x1972=((1.0)*x1967);
IkReal x1973=(gconst83*x1967);
IkReal x1974=(gconst82*x1966);
IkReal x1975=((1.0)*x1966);
evalcond[0]=((((-1.0)*r22*x1972))+((r21*x1974))+(((-1.0)*gconst83*r20*x1975)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1975))+((x1966*x1968))+(((-1.0)*r12*x1972)));
evalcond[2]=((((-1.0)*r02*x1972))+(((-1.0)*x1970))+((r01*x1974))+(((-1.0)*gconst83*r00*x1975)));
evalcond[3]=(((r20*x1973))+(((-1.0)*r22*x1975))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1972))+(((-1.0)*cj1*x1969)));
evalcond[4]=((((-1.0)*cj0*x1971))+(((-1.0)*cj0*sj1*x1969))+(((-1.0)*r02*x1975))+((r00*x1973))+(((-1.0)*gconst82*r01*x1972)));
evalcond[5]=((((-1.0)*sj0*sj1*x1969))+((r10*x1973))+(((-1.0)*x1968*x1972))+(((-1.0)*x1970*x1971))+(((-1.0)*r12*x1975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1976=((1.0)*gconst83);
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1976))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1976))+(((-1.0)*gconst82*r00)))),-1);
if(!x1978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1977.value)+(((1.5707963267949)*(x1978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1979=IKsin(j4);
IkReal x1980=IKcos(j4);
IkReal x1981=(gconst82*r11);
IkReal x1982=((1.0)*cj2);
IkReal x1983=((1.0)*sj0);
IkReal x1984=(cj1*sj2);
IkReal x1985=((1.0)*x1980);
IkReal x1986=(gconst83*x1980);
IkReal x1987=(gconst82*x1979);
IkReal x1988=((1.0)*x1979);
evalcond[0]=(((r21*x1987))+(((-1.0)*gconst83*r20*x1988))+(((-1.0)*r22*x1985)));
evalcond[1]=(cj0+(((-1.0)*r12*x1985))+((x1979*x1981))+(((-1.0)*gconst83*r10*x1988)));
evalcond[2]=((((-1.0)*x1983))+(((-1.0)*r02*x1985))+(((-1.0)*gconst83*r00*x1988))+((r01*x1987)));
evalcond[3]=((((-1.0)*gconst82*r21*x1985))+((sj1*sj2))+(((-1.0)*cj1*x1982))+(((-1.0)*r22*x1988))+((r20*x1986)));
evalcond[4]=((((-1.0)*r02*x1988))+(((-1.0)*gconst82*r01*x1985))+((r00*x1986))+(((-1.0)*cj0*sj1*x1982))+(((-1.0)*cj0*x1984)));
evalcond[5]=((((-1.0)*x1981*x1985))+(((-1.0)*x1983*x1984))+((r10*x1986))+(((-1.0)*r12*x1988))+(((-1.0)*sj0*sj1*x1982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1989=((-1.0)*r10);
IkReal x1991 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1991)==0){
continue;
}
IkReal x1990=pow(x1991,-0.5);
CheckValue<IkReal> x1992 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1989),IKFAST_ATAN2_MAGTHRESH);
if(!x1992.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1992.value));
IkReal gconst85=(r11*x1990);
IkReal gconst86=(x1989*x1990);
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1993.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1994=((-1.0)*r10);
IkReal x1995=x1990;
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1994),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
IkReal x1996=((-1.0)*(x1997.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1996;
IkReal gconst84=x1996;
IkReal gconst85=(r11*x1995);
IkReal gconst86=(x1994*x1995);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1998=((1.0)*sj0);
IkReal x1999=((1.0)*gconst85);
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1998)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1999))+(((-1.0)*gconst85*r11*x1998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1999)))),-1);
if(!x2001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2000.value)+(((1.5707963267949)*(x2001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2002=IKsin(j4);
IkReal x2003=IKcos(j4);
IkReal x2004=(gconst85*r21);
IkReal x2005=(gconst86*r00);
IkReal x2006=(gconst86*r10);
IkReal x2007=((1.0)*cj2);
IkReal x2008=(gconst85*r11);
IkReal x2009=(gconst85*r01);
IkReal x2010=((1.0)*sj0);
IkReal x2011=(gconst86*r20);
IkReal x2012=(cj1*sj2);
IkReal x2013=((1.0)*x2003);
IkReal x2014=((1.0)*x2002);
evalcond[0]=(((x2002*x2004))+(((-1.0)*x2011*x2014))+(((-1.0)*r22*x2013)));
evalcond[1]=(((x2002*x2008))+cj0+(((-1.0)*x2006*x2014))+(((-1.0)*r12*x2013)));
evalcond[2]=(((x2002*x2009))+(((-1.0)*x2010))+(((-1.0)*x2005*x2014))+(((-1.0)*r02*x2013)));
evalcond[3]=((((-1.0)*x2004*x2013))+((sj1*sj2))+(((-1.0)*cj1*x2007))+((x2003*x2011))+(((-1.0)*r22*x2014)));
evalcond[4]=((((-1.0)*x2009*x2013))+(((-1.0)*r02*x2014))+(((-1.0)*cj0*x2012))+(((-1.0)*cj0*sj1*x2007))+((x2003*x2005)));
evalcond[5]=((((-1.0)*x2008*x2013))+(((-1.0)*x2010*x2012))+(((-1.0)*sj0*sj1*x2007))+(((-1.0)*r12*x2014))+((x2003*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2015=((1.0)*gconst86);
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2015))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
CheckValue<IkReal> x2017=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2015)))),-1);
if(!x2017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2016.value)+(((1.5707963267949)*(x2017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2018=IKsin(j4);
IkReal x2019=IKcos(j4);
IkReal x2020=(gconst85*r21);
IkReal x2021=(gconst86*r00);
IkReal x2022=(gconst86*r10);
IkReal x2023=((1.0)*cj2);
IkReal x2024=(gconst85*r11);
IkReal x2025=(gconst85*r01);
IkReal x2026=((1.0)*sj0);
IkReal x2027=(gconst86*r20);
IkReal x2028=(cj1*sj2);
IkReal x2029=((1.0)*x2019);
IkReal x2030=((1.0)*x2018);
evalcond[0]=((((-1.0)*r22*x2029))+((x2018*x2020))+(((-1.0)*x2027*x2030)));
evalcond[1]=(cj0+((x2018*x2024))+(((-1.0)*x2022*x2030))+(((-1.0)*r12*x2029)));
evalcond[2]=(((x2018*x2025))+(((-1.0)*r02*x2029))+(((-1.0)*x2026))+(((-1.0)*x2021*x2030)));
evalcond[3]=((((-1.0)*r22*x2030))+((x2019*x2027))+(((-1.0)*cj1*x2023))+((sj1*sj2))+(((-1.0)*x2020*x2029)));
evalcond[4]=((((-1.0)*cj0*sj1*x2023))+((x2019*x2021))+(((-1.0)*cj0*x2028))+(((-1.0)*x2025*x2029))+(((-1.0)*r02*x2030)));
evalcond[5]=(((x2019*x2022))+(((-1.0)*r12*x2030))+(((-1.0)*x2024*x2029))+(((-1.0)*sj0*sj1*x2023))+(((-1.0)*x2026*x2028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2031=((-1.0)*r11);
IkReal x2033 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2033)==0){
continue;
}
IkReal x2032=pow(x2033,-0.5);
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal(x2031),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2034.value))));
IkReal gconst88=(x2031*x2032);
IkReal gconst89=((1.0)*r10*x2032);
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2035.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2036=((-1.0)*r11);
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal(x2036),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
IkReal x2037=((1.0)*(x2039.value));
IkReal x2038=x2032;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2037)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2037)));
IkReal gconst88=(x2036*x2038);
IkReal gconst89=((1.0)*r10*x2038);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2040=((-1.0)*r11);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(x2040),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
IkReal x2041=((1.0)*(x2043.value));
IkReal x2042=x2032;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2041)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2041)));
IkReal gconst88=(x2040*x2042);
IkReal gconst89=((1.0)*r10*x2042);
IkReal x2044=r12*r12;
IkReal x2045=((1.0)*sj0);
IkReal x2046=(cj0*r02);
IkReal x2047=x2032;
j4eval[0]=((IKabs(((((-1.0)*x2046))+(((-1.0)*r12*x2045)))))+(IKabs((((r12*x2046*x2047))+((sj0*x2044*x2047))+(((-1.0)*x2045*x2047))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2048=((-1.0)*r11);
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal(x2048),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
IkReal x2049=((1.0)*(x2051.value));
IkReal x2050=x2032;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2049)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2049)));
IkReal gconst88=(x2048*x2050);
IkReal gconst89=((1.0)*r10*x2050);
IkReal x2052=r12*r12;
IkReal x2053=(cj1*cj2*r22);
IkReal x2054=(r22*sj1*sj2);
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(((-1.0)+x2052),-1);
if(!x2058.valid){
continue;
}
IkReal x2055=x2058.value;
if((((1.0)+(((-1.0)*x2052)))) < -0.00001)
continue;
IkReal x2056=IKsqrt(((1.0)+(((-1.0)*x2052))));
IkReal x2057=(r12*x2055*x2056);
j4eval[0]=((IKabs((x2054+(((-1.0)*x2053)))))+(IKabs(((((-1.0)*x2054*x2057))+((x2053*x2057))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2059=(cj1*cj2);
IkReal x2060=(gconst89*r20);
IkReal x2061=(gconst88*r21);
IkReal x2062=(sj1*sj2);
CheckValue<IkReal> x2063=IKPowWithIntegerCheck(IKsign(((x2061*x2061)+(r22*r22)+(((-2.0)*x2060*x2061))+(x2060*x2060))),-1);
if(!x2063.valid){
continue;
}
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal((((r22*x2062))+(((-1.0)*r22*x2059)))),IkReal((((x2059*x2060))+(((-1.0)*x2060*x2062))+(((-1.0)*x2059*x2061))+((x2061*x2062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2063.value)))+(x2064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2065=IKsin(j4);
IkReal x2066=IKcos(j4);
IkReal x2067=((1.0)*sj0);
IkReal x2068=((1.0)*cj2);
IkReal x2069=(gconst89*r20);
IkReal x2070=(gconst89*r10);
IkReal x2071=(gconst89*r00);
IkReal x2072=(cj1*sj2);
IkReal x2073=((1.0)*x2066);
IkReal x2074=((1.0)*x2065);
IkReal x2075=(gconst88*x2065);
evalcond[0]=((((-1.0)*r22*x2073))+(((-1.0)*x2069*x2074))+((r21*x2075)));
evalcond[1]=(cj0+(((-1.0)*x2070*x2074))+(((-1.0)*r12*x2073))+((r11*x2075)));
evalcond[2]=((((-1.0)*r02*x2073))+(((-1.0)*x2071*x2074))+(((-1.0)*x2067))+((r01*x2075)));
evalcond[3]=(((x2066*x2069))+(((-1.0)*gconst88*r21*x2073))+(((-1.0)*r22*x2074))+((sj1*sj2))+(((-1.0)*cj1*x2068)));
evalcond[4]=(((x2066*x2071))+(((-1.0)*r02*x2074))+(((-1.0)*cj0*sj1*x2068))+(((-1.0)*gconst88*r01*x2073))+(((-1.0)*cj0*x2072)));
evalcond[5]=(((x2066*x2070))+(((-1.0)*r12*x2074))+(((-1.0)*gconst88*r11*x2073))+(((-1.0)*x2067*x2072))+(((-1.0)*cj2*sj1*x2067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2076=((1.0)*sj0);
IkReal x2077=((1.0)*cj0);
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2077))+(((-1.0)*r12*x2076)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2076))+(((-1.0)*gconst88*r01*x2077))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2078.value)+(((1.5707963267949)*(x2079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2080=IKsin(j4);
IkReal x2081=IKcos(j4);
IkReal x2082=((1.0)*sj0);
IkReal x2083=((1.0)*cj2);
IkReal x2084=(gconst89*r20);
IkReal x2085=(gconst89*r10);
IkReal x2086=(gconst89*r00);
IkReal x2087=(cj1*sj2);
IkReal x2088=((1.0)*x2081);
IkReal x2089=((1.0)*x2080);
IkReal x2090=(gconst88*x2080);
evalcond[0]=((((-1.0)*r22*x2088))+(((-1.0)*x2084*x2089))+((r21*x2090)));
evalcond[1]=(cj0+(((-1.0)*x2085*x2089))+(((-1.0)*r12*x2088))+((r11*x2090)));
evalcond[2]=((((-1.0)*r02*x2088))+(((-1.0)*x2082))+((r01*x2090))+(((-1.0)*x2086*x2089)));
evalcond[3]=((((-1.0)*cj1*x2083))+(((-1.0)*r22*x2089))+((x2081*x2084))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2088)));
evalcond[4]=((((-1.0)*r02*x2089))+(((-1.0)*cj0*sj1*x2083))+((x2081*x2086))+(((-1.0)*gconst88*r01*x2088))+(((-1.0)*cj0*x2087)));
evalcond[5]=((((-1.0)*gconst88*r11*x2088))+((x2081*x2085))+(((-1.0)*cj2*sj1*x2082))+(((-1.0)*x2082*x2087))+(((-1.0)*r12*x2089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2091=((1.0)*gconst89);
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2091))+(((-1.0)*gconst88*r00)))),-1);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2091))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2092.value)))+(x2093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2094=IKsin(j4);
IkReal x2095=IKcos(j4);
IkReal x2096=((1.0)*sj0);
IkReal x2097=((1.0)*cj2);
IkReal x2098=(gconst89*r20);
IkReal x2099=(gconst89*r10);
IkReal x2100=(gconst89*r00);
IkReal x2101=(cj1*sj2);
IkReal x2102=((1.0)*x2095);
IkReal x2103=((1.0)*x2094);
IkReal x2104=(gconst88*x2094);
evalcond[0]=((((-1.0)*r22*x2102))+((r21*x2104))+(((-1.0)*x2098*x2103)));
evalcond[1]=((((-1.0)*r12*x2102))+cj0+((r11*x2104))+(((-1.0)*x2099*x2103)));
evalcond[2]=((((-1.0)*x2096))+(((-1.0)*r02*x2102))+(((-1.0)*x2100*x2103))+((r01*x2104)));
evalcond[3]=((((-1.0)*r22*x2103))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2102))+(((-1.0)*cj1*x2097))+((x2095*x2098)));
evalcond[4]=((((-1.0)*r02*x2103))+(((-1.0)*gconst88*r01*x2102))+(((-1.0)*cj0*x2101))+(((-1.0)*cj0*sj1*x2097))+((x2095*x2100)));
evalcond[5]=((((-1.0)*cj2*sj1*x2096))+(((-1.0)*gconst88*r11*x2102))+(((-1.0)*r12*x2103))+(((-1.0)*x2096*x2101))+((x2095*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2105=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2105;
j4eval[1]=IKsign(x2105);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2106=((1.0)*cj5);
IkReal x2107=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2106)));
j4eval[0]=x2107;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2106)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2108=cj5*cj5;
IkReal x2109=r11*r11;
IkReal x2110=(r11*sj5);
IkReal x2111=(cj5*r10);
IkReal x2112=((r12*r12)+(((-2.0)*x2110*x2111))+x2109+(((-1.0)*x2108*x2109))+((x2108*(r10*r10))));
j4eval[0]=x2112;
j4eval[1]=IKsign(x2112);
j4eval[2]=((IKabs(r12))+(IKabs((x2111+(((-1.0)*x2110))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2113=cj5*cj5;
IkReal x2114=r11*r11;
IkReal x2115=(cj5*r10);
IkReal x2116=(r11*sj5);
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal((x2115+(((-1.0)*x2116)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2113*(r10*r10)))+x2114+(((-1.0)*x2113*x2114))+(((-2.0)*x2115*x2116)))),-1);
if(!x2118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2117.value)+(((1.5707963267949)*(x2118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2119=IKsin(j4);
IkReal x2120=IKcos(j4);
IkReal x2121=(cj5*r10);
IkReal x2122=(r01*sj5);
IkReal x2123=((1.0)*cj2);
IkReal x2124=(cj5*r00);
IkReal x2125=(cj5*r20);
IkReal x2126=((1.0)*x2120);
IkReal x2127=((1.0)*x2119);
IkReal x2128=(sj5*x2119);
evalcond[0]=((((-1.0)*r22*x2126))+(((-1.0)*x2125*x2127))+((r21*x2128)));
evalcond[1]=((((-1.0)*r02*x2126))+((x2119*x2122))+(((-1.0)*x2124*x2127)));
evalcond[2]=(((x2120*x2121))+(((-1.0)*r12*x2127))+(((-1.0)*r11*sj5*x2126)));
evalcond[3]=((1.0)+((r11*x2128))+(((-1.0)*x2121*x2127))+(((-1.0)*r12*x2126)));
evalcond[4]=((((-1.0)*r22*x2127))+((sj1*sj2))+(((-1.0)*cj1*x2123))+((x2120*x2125))+(((-1.0)*r21*sj5*x2126)));
evalcond[5]=((((-1.0)*x2122*x2126))+(((-1.0)*r02*x2127))+(((-1.0)*cj1*sj2))+((x2120*x2124))+(((-1.0)*sj1*x2123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2129=((1.0)*cj5);
CheckValue<IkReal> x2130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2129))+(((-1.0)*r00*sj5)))),-1);
if(!x2130.valid){
continue;
}
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2130.value)))+(x2131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2132=IKsin(j4);
IkReal x2133=IKcos(j4);
IkReal x2134=(cj5*r10);
IkReal x2135=(r01*sj5);
IkReal x2136=((1.0)*cj2);
IkReal x2137=(cj5*r00);
IkReal x2138=(cj5*r20);
IkReal x2139=((1.0)*x2133);
IkReal x2140=((1.0)*x2132);
IkReal x2141=(sj5*x2132);
evalcond[0]=((((-1.0)*x2138*x2140))+(((-1.0)*r22*x2139))+((r21*x2141)));
evalcond[1]=(((x2132*x2135))+(((-1.0)*x2137*x2140))+(((-1.0)*r02*x2139)));
evalcond[2]=((((-1.0)*r12*x2140))+(((-1.0)*r11*sj5*x2139))+((x2133*x2134)));
evalcond[3]=((1.0)+((r11*x2141))+(((-1.0)*r12*x2139))+(((-1.0)*x2134*x2140)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2136))+(((-1.0)*r21*sj5*x2139))+(((-1.0)*r22*x2140))+((x2133*x2138)));
evalcond[5]=((((-1.0)*sj1*x2136))+(((-1.0)*r02*x2140))+(((-1.0)*cj1*sj2))+(((-1.0)*x2135*x2139))+((x2133*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2142.valid){
continue;
}
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2142.value)))+(x2143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2144=IKsin(j4);
IkReal x2145=IKcos(j4);
IkReal x2146=(cj5*r10);
IkReal x2147=(r01*sj5);
IkReal x2148=((1.0)*cj2);
IkReal x2149=(cj5*r00);
IkReal x2150=(cj5*r20);
IkReal x2151=((1.0)*x2145);
IkReal x2152=((1.0)*x2144);
IkReal x2153=(sj5*x2144);
evalcond[0]=((((-1.0)*r22*x2151))+(((-1.0)*x2150*x2152))+((r21*x2153)));
evalcond[1]=((((-1.0)*x2149*x2152))+(((-1.0)*r02*x2151))+((x2144*x2147)));
evalcond[2]=(((x2145*x2146))+(((-1.0)*r11*sj5*x2151))+(((-1.0)*r12*x2152)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2151))+(((-1.0)*x2146*x2152))+((r11*x2153)));
evalcond[4]=(((x2145*x2150))+((sj1*sj2))+(((-1.0)*cj1*x2148))+(((-1.0)*r22*x2152))+(((-1.0)*r21*sj5*x2151)));
evalcond[5]=(((x2145*x2149))+(((-1.0)*r02*x2152))+(((-1.0)*sj1*x2148))+(((-1.0)*cj1*sj2))+(((-1.0)*x2147*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2154=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2154;
j4eval[1]=IKsign(x2154);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2155=((1.0)*cj5);
IkReal x2156=((((-1.0)*r21*x2155))+(((-1.0)*r20*sj5)));
j4eval[0]=x2156;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2155))+((r01*sj5))))));
j4eval[2]=IKsign(x2156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2157=cj5*cj5;
IkReal x2158=r11*r11;
IkReal x2159=(cj5*r10);
IkReal x2160=(r11*sj5);
IkReal x2161=((((-1.0)*x2157*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2159*x2160))+((x2157*x2158))+(((-1.0)*x2158)));
j4eval[0]=x2161;
j4eval[1]=((IKabs(r12))+(IKabs((x2159+(((-1.0)*x2160))))));
j4eval[2]=IKsign(x2161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2162=cj5*cj5;
IkReal x2163=r11*r11;
IkReal x2164=(cj5*r10);
IkReal x2165=(r11*sj5);
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(IKsign(((((2.0)*x2164*x2165))+(((-1.0)*x2162*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2162*x2163))+(((-1.0)*x2163)))),-1);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal((x2164+(((-1.0)*x2165)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2166.value)))+(x2167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2168=IKsin(j4);
IkReal x2169=IKcos(j4);
IkReal x2170=(cj5*r10);
IkReal x2171=(r01*sj5);
IkReal x2172=(cj5*r00);
IkReal x2173=(cj5*r20);
IkReal x2174=((1.0)*x2169);
IkReal x2175=((1.0)*x2168);
IkReal x2176=(sj5*x2168);
evalcond[0]=(((r21*x2176))+(((-1.0)*x2173*x2175))+(((-1.0)*r22*x2174)));
evalcond[1]=((((-1.0)*r02*x2174))+(((-1.0)*x2172*x2175))+((x2168*x2171)));
evalcond[2]=((((-1.0)*r11*sj5*x2174))+((x2169*x2170))+(((-1.0)*r12*x2175)));
evalcond[3]=((-1.0)+(((-1.0)*x2170*x2175))+((r11*x2176))+(((-1.0)*r12*x2174)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2171*x2174))+((cj1*sj2))+(((-1.0)*r02*x2175))+((x2169*x2172)));
evalcond[5]=((((-1.0)*r21*sj5*x2174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2169*x2173))+(((-1.0)*r22*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2177=((1.0)*cj5);
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2177))+(((-1.0)*r20*sj5)))),-1);
if(!x2179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2178.value)+(((1.5707963267949)*(x2179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2180=IKsin(j4);
IkReal x2181=IKcos(j4);
IkReal x2182=(cj5*r10);
IkReal x2183=(r01*sj5);
IkReal x2184=(cj5*r00);
IkReal x2185=(cj5*r20);
IkReal x2186=((1.0)*x2181);
IkReal x2187=((1.0)*x2180);
IkReal x2188=(sj5*x2180);
evalcond[0]=(((r21*x2188))+(((-1.0)*x2185*x2187))+(((-1.0)*r22*x2186)));
evalcond[1]=(((x2180*x2183))+(((-1.0)*r02*x2186))+(((-1.0)*x2184*x2187)));
evalcond[2]=((((-1.0)*r11*sj5*x2186))+((x2181*x2182))+(((-1.0)*r12*x2187)));
evalcond[3]=((-1.0)+((r11*x2188))+(((-1.0)*x2182*x2187))+(((-1.0)*r12*x2186)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2187))+((x2181*x2184))+(((-1.0)*x2183*x2186)));
evalcond[5]=((((-1.0)*r21*sj5*x2186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2187))+((x2181*x2185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2189.value)+(((1.5707963267949)*(x2190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2191=IKsin(j4);
IkReal x2192=IKcos(j4);
IkReal x2193=(cj5*r10);
IkReal x2194=(r01*sj5);
IkReal x2195=(cj5*r00);
IkReal x2196=(cj5*r20);
IkReal x2197=((1.0)*x2192);
IkReal x2198=((1.0)*x2191);
IkReal x2199=(sj5*x2191);
evalcond[0]=((((-1.0)*x2196*x2198))+((r21*x2199))+(((-1.0)*r22*x2197)));
evalcond[1]=(((x2191*x2194))+(((-1.0)*x2195*x2198))+(((-1.0)*r02*x2197)));
evalcond[2]=(((x2192*x2193))+(((-1.0)*r12*x2198))+(((-1.0)*r11*sj5*x2197)));
evalcond[3]=((-1.0)+(((-1.0)*x2193*x2198))+((r11*x2199))+(((-1.0)*r12*x2197)));
evalcond[4]=(((cj2*sj1))+((x2192*x2195))+((cj1*sj2))+(((-1.0)*x2194*x2197))+(((-1.0)*r02*x2198)));
evalcond[5]=(((x2192*x2196))+(((-1.0)*r21*sj5*x2197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2200=((-1.0)*r00);
IkReal x2202 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2202)==0){
continue;
}
IkReal x2201=pow(x2202,-0.5);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2200),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2203.value));
IkReal gconst91=(r01*x2201);
IkReal gconst92=(x2200*x2201);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2204.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2205=((-1.0)*r00);
IkReal x2206=x2201;
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2205),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
IkReal x2207=((-1.0)*(x2208.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2207;
IkReal gconst90=x2207;
IkReal gconst91=(r01*x2206);
IkReal gconst92=(x2205*x2206);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2209=((1.0)*sj0);
IkReal x2210=((1.0)*cj0);
CheckValue<IkReal> x2211=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2211.valid){
continue;
}
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2209))+(((-1.0)*r02*x2210)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2210))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2211.value)))+(x2212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2213=IKsin(j4);
IkReal x2214=IKcos(j4);
IkReal x2215=((1.0)*cj2);
IkReal x2216=(gconst92*r00);
IkReal x2217=(gconst92*r20);
IkReal x2218=((1.0)*sj0);
IkReal x2219=(gconst92*r10);
IkReal x2220=(cj1*sj2);
IkReal x2221=((1.0)*x2214);
IkReal x2222=(gconst91*x2213);
IkReal x2223=((1.0)*x2213);
evalcond[0]=((((-1.0)*x2217*x2223))+((r21*x2222))+(((-1.0)*r22*x2221)));
evalcond[1]=((((-1.0)*x2219*x2223))+cj0+(((-1.0)*r12*x2221))+((r11*x2222)));
evalcond[2]=((((-1.0)*x2218))+(((-1.0)*r02*x2221))+(((-1.0)*x2216*x2223))+((r01*x2222)));
evalcond[3]=((((-1.0)*gconst91*r21*x2221))+(((-1.0)*cj1*x2215))+((sj1*sj2))+((x2214*x2217))+(((-1.0)*r22*x2223)));
evalcond[4]=((((-1.0)*r02*x2223))+((x2214*x2216))+(((-1.0)*gconst91*r01*x2221))+(((-1.0)*cj0*sj1*x2215))+(((-1.0)*cj0*x2220)));
evalcond[5]=(((x2214*x2219))+(((-1.0)*r12*x2223))+(((-1.0)*gconst91*r11*x2221))+(((-1.0)*x2218*x2220))+(((-1.0)*sj0*sj1*x2215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2224=((1.0)*gconst92);
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2224))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2224)))),-1);
if(!x2226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2225.value)+(((1.5707963267949)*(x2226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2227=IKsin(j4);
IkReal x2228=IKcos(j4);
IkReal x2229=((1.0)*cj2);
IkReal x2230=(gconst92*r00);
IkReal x2231=(gconst92*r20);
IkReal x2232=((1.0)*sj0);
IkReal x2233=(gconst92*r10);
IkReal x2234=(cj1*sj2);
IkReal x2235=((1.0)*x2228);
IkReal x2236=(gconst91*x2227);
IkReal x2237=((1.0)*x2227);
evalcond[0]=(((r21*x2236))+(((-1.0)*r22*x2235))+(((-1.0)*x2231*x2237)));
evalcond[1]=(cj0+(((-1.0)*r12*x2235))+(((-1.0)*x2233*x2237))+((r11*x2236)));
evalcond[2]=((((-1.0)*r02*x2235))+(((-1.0)*x2232))+(((-1.0)*x2230*x2237))+((r01*x2236)));
evalcond[3]=(((x2228*x2231))+(((-1.0)*gconst91*r21*x2235))+((sj1*sj2))+(((-1.0)*r22*x2237))+(((-1.0)*cj1*x2229)));
evalcond[4]=(((x2228*x2230))+(((-1.0)*r02*x2237))+(((-1.0)*cj0*x2234))+(((-1.0)*gconst91*r01*x2235))+(((-1.0)*cj0*sj1*x2229)));
evalcond[5]=(((x2228*x2233))+(((-1.0)*sj0*sj1*x2229))+(((-1.0)*x2232*x2234))+(((-1.0)*r12*x2237))+(((-1.0)*gconst91*r11*x2235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2238=((-1.0)*r01);
IkReal x2240 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2240)==0){
continue;
}
IkReal x2239=pow(x2240,-0.5);
CheckValue<IkReal> x2241 = IKatan2WithCheck(IkReal(x2238),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2241.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2241.value))));
IkReal gconst94=(x2238*x2239);
IkReal gconst95=((1.0)*r00*x2239);
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2242.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2243=((-1.0)*r01);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(x2243),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
IkReal x2244=((1.0)*(x2246.value));
IkReal x2245=x2239;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2244)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2244)));
IkReal gconst94=(x2243*x2245);
IkReal gconst95=((1.0)*r00*x2245);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2247=((-1.0)*r01);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(x2247),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
IkReal x2248=((1.0)*(x2250.value));
IkReal x2249=x2239;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2248)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2248)));
IkReal gconst94=(x2247*x2249);
IkReal gconst95=((1.0)*r00*x2249);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2251=((-1.0)*r01);
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal(x2251),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
IkReal x2252=((1.0)*(x2254.value));
IkReal x2253=x2239;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2252)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2252)));
IkReal gconst94=(x2251*x2253);
IkReal gconst95=((1.0)*r00*x2253);
IkReal x2255=r02*r02;
IkReal x2256=(r12*sj0);
IkReal x2257=((1.0)*cj0);
IkReal x2258=x2239;
j4eval[0]=((IKabs((((cj0*x2255*x2258))+(((-1.0)*x2257*x2258))+((r02*x2256*x2258)))))+(IKabs(((((-1.0)*x2256))+(((-1.0)*r02*x2257))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2259=((1.0)*sj0);
IkReal x2260=((1.0)*cj0);
CheckValue<IkReal> x2261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2261.valid){
continue;
}
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2259))+(((-1.0)*r02*x2260)))),IkReal(((((-1.0)*gconst94*r01*x2260))+(((-1.0)*gconst94*r11*x2259))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2261.value)))+(x2262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2263=IKsin(j4);
IkReal x2264=IKcos(j4);
IkReal x2265=(gconst94*r11);
IkReal x2266=((1.0)*cj2);
IkReal x2267=(gconst94*r21);
IkReal x2268=((1.0)*sj0);
IkReal x2269=(gconst94*r01);
IkReal x2270=(cj1*sj2);
IkReal x2271=((1.0)*x2264);
IkReal x2272=(gconst95*x2264);
IkReal x2273=((1.0)*x2263);
IkReal x2274=(gconst95*x2273);
evalcond[0]=(((x2263*x2267))+(((-1.0)*r20*x2274))+(((-1.0)*r22*x2271)));
evalcond[1]=(((x2263*x2265))+cj0+(((-1.0)*r10*x2274))+(((-1.0)*r12*x2271)));
evalcond[2]=(((x2263*x2269))+(((-1.0)*r00*x2274))+(((-1.0)*r02*x2271))+(((-1.0)*x2268)));
evalcond[3]=((((-1.0)*cj1*x2266))+((sj1*sj2))+(((-1.0)*r22*x2273))+((r20*x2272))+(((-1.0)*x2267*x2271)));
evalcond[4]=(((r00*x2272))+(((-1.0)*cj0*sj1*x2266))+(((-1.0)*x2269*x2271))+(((-1.0)*r02*x2273))+(((-1.0)*cj0*x2270)));
evalcond[5]=((((-1.0)*sj0*sj1*x2266))+((r10*x2272))+(((-1.0)*x2268*x2270))+(((-1.0)*x2265*x2271))+(((-1.0)*r12*x2273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2275=((1.0)*gconst95);
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2275)))),-1);
if(!x2276.valid){
continue;
}
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2276.value)))+(x2277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2278=IKsin(j4);
IkReal x2279=IKcos(j4);
IkReal x2280=(gconst94*r11);
IkReal x2281=((1.0)*cj2);
IkReal x2282=(gconst94*r21);
IkReal x2283=((1.0)*sj0);
IkReal x2284=(gconst94*r01);
IkReal x2285=(cj1*sj2);
IkReal x2286=((1.0)*x2279);
IkReal x2287=(gconst95*x2279);
IkReal x2288=((1.0)*x2278);
IkReal x2289=(gconst95*x2288);
evalcond[0]=(((x2278*x2282))+(((-1.0)*r20*x2289))+(((-1.0)*r22*x2286)));
evalcond[1]=(cj0+(((-1.0)*r12*x2286))+(((-1.0)*r10*x2289))+((x2278*x2280)));
evalcond[2]=((((-1.0)*r02*x2286))+(((-1.0)*x2283))+((x2278*x2284))+(((-1.0)*r00*x2289)));
evalcond[3]=((((-1.0)*x2282*x2286))+((r20*x2287))+((sj1*sj2))+(((-1.0)*cj1*x2281))+(((-1.0)*r22*x2288)));
evalcond[4]=((((-1.0)*r02*x2288))+(((-1.0)*x2284*x2286))+(((-1.0)*cj0*x2285))+(((-1.0)*cj0*sj1*x2281))+((r00*x2287)));
evalcond[5]=((((-1.0)*x2280*x2286))+((r10*x2287))+(((-1.0)*r12*x2288))+(((-1.0)*sj0*sj1*x2281))+(((-1.0)*x2283*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2290=((1.0)*gconst95);
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2290))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
CheckValue<IkReal> x2292=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2290)))),-1);
if(!x2292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2291.value)+(((1.5707963267949)*(x2292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2293=IKsin(j4);
IkReal x2294=IKcos(j4);
IkReal x2295=(gconst94*r11);
IkReal x2296=((1.0)*cj2);
IkReal x2297=(gconst94*r21);
IkReal x2298=((1.0)*sj0);
IkReal x2299=(gconst94*r01);
IkReal x2300=(cj1*sj2);
IkReal x2301=((1.0)*x2294);
IkReal x2302=(gconst95*x2294);
IkReal x2303=((1.0)*x2293);
IkReal x2304=(gconst95*x2303);
evalcond[0]=((((-1.0)*r22*x2301))+(((-1.0)*r20*x2304))+((x2293*x2297)));
evalcond[1]=((((-1.0)*r10*x2304))+cj0+((x2293*x2295))+(((-1.0)*r12*x2301)));
evalcond[2]=((((-1.0)*r00*x2304))+(((-1.0)*x2298))+((x2293*x2299))+(((-1.0)*r02*x2301)));
evalcond[3]=((((-1.0)*r22*x2303))+((r20*x2302))+(((-1.0)*x2297*x2301))+((sj1*sj2))+(((-1.0)*cj1*x2296)));
evalcond[4]=((((-1.0)*cj0*x2300))+(((-1.0)*x2299*x2301))+((r00*x2302))+(((-1.0)*cj0*sj1*x2296))+(((-1.0)*r02*x2303)));
evalcond[5]=(((r10*x2302))+(((-1.0)*sj0*sj1*x2296))+(((-1.0)*x2295*x2301))+(((-1.0)*x2298*x2300))+(((-1.0)*r12*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2305=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2305;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2306=((1.0)*cj5);
IkReal x2307=((((-1.0)*r11*x2306))+(((-1.0)*r10*sj5)));
j4eval[0]=x2307;
j4eval[1]=((IKabs(((((-1.0)*r20*x2306))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2308=cj5*cj5;
IkReal x2309=r01*r01;
IkReal x2310=(r01*sj5);
IkReal x2311=(cj5*r00);
IkReal x2312=((((-1.0)*x2309))+((x2308*x2309))+(((-1.0)*(r02*r02)))+(((-1.0)*x2308*(r00*r00)))+(((2.0)*x2310*x2311)));
j4eval[0]=x2312;
j4eval[1]=IKsign(x2312);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2310))+x2311))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2313=cj5*cj5;
IkReal x2314=r01*r01;
IkReal x2315=(r01*sj5);
IkReal x2316=(cj5*r00);
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(((((-1.0)*x2315))+x2316)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2314))+(((-1.0)*x2313*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2315*x2316))+((x2313*x2314)))),-1);
if(!x2318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2317.value)+(((1.5707963267949)*(x2318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2319=IKsin(j4);
IkReal x2320=IKcos(j4);
IkReal x2321=(cj5*r10);
IkReal x2322=(r01*sj5);
IkReal x2323=((1.0)*cj2);
IkReal x2324=(cj5*r00);
IkReal x2325=(cj5*r20);
IkReal x2326=((1.0)*x2320);
IkReal x2327=((1.0)*x2319);
IkReal x2328=(sj5*x2319);
evalcond[0]=((((-1.0)*r22*x2326))+((r21*x2328))+(((-1.0)*x2325*x2327)));
evalcond[1]=((((-1.0)*x2321*x2327))+((r11*x2328))+(((-1.0)*r12*x2326)));
evalcond[2]=((((-1.0)*x2322*x2326))+((x2320*x2324))+(((-1.0)*r02*x2327)));
evalcond[3]=((-1.0)+(((-1.0)*x2324*x2327))+((x2319*x2322))+(((-1.0)*r02*x2326)));
evalcond[4]=((((-1.0)*r22*x2327))+((sj1*sj2))+(((-1.0)*cj1*x2323))+((x2320*x2325))+(((-1.0)*r21*sj5*x2326)));
evalcond[5]=((((-1.0)*r11*sj5*x2326))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2327))+((x2320*x2321))+(((-1.0)*sj1*x2323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2329=((1.0)*cj5);
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2329)))),-1);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2330.value)))+(x2331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2332=IKsin(j4);
IkReal x2333=IKcos(j4);
IkReal x2334=(cj5*r10);
IkReal x2335=(r01*sj5);
IkReal x2336=((1.0)*cj2);
IkReal x2337=(cj5*r00);
IkReal x2338=(cj5*r20);
IkReal x2339=((1.0)*x2333);
IkReal x2340=((1.0)*x2332);
IkReal x2341=(sj5*x2332);
evalcond[0]=((((-1.0)*r22*x2339))+((r21*x2341))+(((-1.0)*x2338*x2340)));
evalcond[1]=((((-1.0)*x2334*x2340))+((r11*x2341))+(((-1.0)*r12*x2339)));
evalcond[2]=(((x2333*x2337))+(((-1.0)*r02*x2340))+(((-1.0)*x2335*x2339)));
evalcond[3]=((-1.0)+(((-1.0)*x2337*x2340))+((x2332*x2335))+(((-1.0)*r02*x2339)));
evalcond[4]=(((x2333*x2338))+((sj1*sj2))+(((-1.0)*cj1*x2336))+(((-1.0)*r22*x2340))+(((-1.0)*r21*sj5*x2339)));
evalcond[5]=(((x2333*x2334))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2339))+(((-1.0)*sj1*x2336))+(((-1.0)*r12*x2340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2342.valid){
continue;
}
CheckValue<IkReal> x2343 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2342.value)))+(x2343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2344=IKsin(j4);
IkReal x2345=IKcos(j4);
IkReal x2346=(cj5*r10);
IkReal x2347=(r01*sj5);
IkReal x2348=((1.0)*cj2);
IkReal x2349=(cj5*r00);
IkReal x2350=(cj5*r20);
IkReal x2351=((1.0)*x2345);
IkReal x2352=((1.0)*x2344);
IkReal x2353=(sj5*x2344);
evalcond[0]=((((-1.0)*r22*x2351))+(((-1.0)*x2350*x2352))+((r21*x2353)));
evalcond[1]=((((-1.0)*x2346*x2352))+((r11*x2353))+(((-1.0)*r12*x2351)));
evalcond[2]=((((-1.0)*x2347*x2351))+((x2345*x2349))+(((-1.0)*r02*x2352)));
evalcond[3]=((-1.0)+((x2344*x2347))+(((-1.0)*r02*x2351))+(((-1.0)*x2349*x2352)));
evalcond[4]=(((sj1*sj2))+((x2345*x2350))+(((-1.0)*cj1*x2348))+(((-1.0)*r22*x2352))+(((-1.0)*r21*sj5*x2351)));
evalcond[5]=((((-1.0)*r11*sj5*x2351))+(((-1.0)*sj1*x2348))+(((-1.0)*cj1*sj2))+((x2345*x2346))+(((-1.0)*r12*x2352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2354=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2354;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2355=((1.0)*cj5);
IkReal x2356=((((-1.0)*r21*x2355))+(((-1.0)*r20*sj5)));
j4eval[0]=x2356;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2355))))));
j4eval[2]=IKsign(x2356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2357=cj5*cj5;
IkReal x2358=r01*r01;
IkReal x2359=(cj5*r00);
IkReal x2360=(r01*sj5);
IkReal x2361=(((x2357*(r00*r00)))+x2358+(((-1.0)*x2357*x2358))+(((-2.0)*x2359*x2360))+(r02*r02));
j4eval[0]=x2361;
j4eval[1]=((IKabs(r02))+(IKabs((x2359+(((-1.0)*x2360))))));
j4eval[2]=IKsign(x2361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2362=cj5*cj5;
IkReal x2363=r01*r01;
IkReal x2364=(r01*sj5);
IkReal x2365=(cj5*r00);
CheckValue<IkReal> x2366 = IKatan2WithCheck(IkReal((x2365+(((-1.0)*x2364)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2366.valid){
continue;
}
CheckValue<IkReal> x2367=IKPowWithIntegerCheck(IKsign((((x2362*(r00*r00)))+(((-1.0)*x2362*x2363))+x2363+(((-2.0)*x2364*x2365))+(r02*r02))),-1);
if(!x2367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2366.value)+(((1.5707963267949)*(x2367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2368=IKsin(j4);
IkReal x2369=IKcos(j4);
IkReal x2370=(cj5*r10);
IkReal x2371=(r01*sj5);
IkReal x2372=(cj5*r00);
IkReal x2373=(cj5*r20);
IkReal x2374=((1.0)*x2369);
IkReal x2375=((1.0)*x2368);
IkReal x2376=(sj5*x2368);
evalcond[0]=((((-1.0)*x2373*x2375))+(((-1.0)*r22*x2374))+((r21*x2376)));
evalcond[1]=((((-1.0)*x2370*x2375))+(((-1.0)*r12*x2374))+((r11*x2376)));
evalcond[2]=((((-1.0)*r02*x2375))+(((-1.0)*x2371*x2374))+((x2369*x2372)));
evalcond[3]=((1.0)+((x2368*x2371))+(((-1.0)*r02*x2374))+(((-1.0)*x2372*x2375)));
evalcond[4]=((((-1.0)*r11*sj5*x2374))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2375))+((x2369*x2370)));
evalcond[5]=((((-1.0)*r21*sj5*x2374))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2375))+((x2369*x2373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2377=((1.0)*cj5);
CheckValue<IkReal> x2378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2377))+(((-1.0)*r20*sj5)))),-1);
if(!x2378.valid){
continue;
}
CheckValue<IkReal> x2379 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2377))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2378.value)))+(x2379.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2380=IKsin(j4);
IkReal x2381=IKcos(j4);
IkReal x2382=(cj5*r10);
IkReal x2383=(r01*sj5);
IkReal x2384=(cj5*r00);
IkReal x2385=(cj5*r20);
IkReal x2386=((1.0)*x2381);
IkReal x2387=((1.0)*x2380);
IkReal x2388=(sj5*x2380);
evalcond[0]=((((-1.0)*r22*x2386))+((r21*x2388))+(((-1.0)*x2385*x2387)));
evalcond[1]=((((-1.0)*r12*x2386))+(((-1.0)*x2382*x2387))+((r11*x2388)));
evalcond[2]=((((-1.0)*r02*x2387))+((x2381*x2384))+(((-1.0)*x2383*x2386)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2386))+((x2380*x2383))+(((-1.0)*x2384*x2387)));
evalcond[4]=((((-1.0)*r12*x2387))+(((-1.0)*r11*sj5*x2386))+((cj2*sj1))+((x2381*x2382))+((cj1*sj2)));
evalcond[5]=(((x2381*x2385))+(((-1.0)*r21*sj5*x2386))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2389 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2389.valid){
continue;
}
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2389.value)+(((1.5707963267949)*(x2390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2391=IKsin(j4);
IkReal x2392=IKcos(j4);
IkReal x2393=(cj5*r10);
IkReal x2394=(r01*sj5);
IkReal x2395=(cj5*r00);
IkReal x2396=(cj5*r20);
IkReal x2397=((1.0)*x2392);
IkReal x2398=((1.0)*x2391);
IkReal x2399=(sj5*x2391);
evalcond[0]=((((-1.0)*x2396*x2398))+(((-1.0)*r22*x2397))+((r21*x2399)));
evalcond[1]=(((r11*x2399))+(((-1.0)*x2393*x2398))+(((-1.0)*r12*x2397)));
evalcond[2]=(((x2392*x2395))+(((-1.0)*r02*x2398))+(((-1.0)*x2394*x2397)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2397))+((x2391*x2394))+(((-1.0)*x2395*x2398)));
evalcond[4]=(((x2392*x2393))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2397))+(((-1.0)*r12*x2398)));
evalcond[5]=(((x2392*x2396))+(((-1.0)*r21*sj5*x2397))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2400=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2400);
rxp1_1=(px*r21);
rxp1_2=(r11*x2400);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2401=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2401);
rxp1_1=(px*r21);
rxp1_2=(r11*x2401);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2402=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2402);
rxp1_1=(px*r21);
rxp1_2=(r11*x2402);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2405=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2405.valid){
continue;
}
IkReal x2403=x2405.value;
IkReal x2404=(sj0*x2403);
cj4array[0]=(((cj1*sj2*x2404))+((cj2*sj1*x2404)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2406=IKsin(j4);
IkReal x2407=IKcos(j4);
IkReal x2408=(cj5*r20);
IkReal x2409=(r21*sj5);
IkReal x2410=((1.0)*x2406);
IkReal x2411=((1.0)*x2407);
evalcond[0]=((-1.0)*r02*x2406);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2411)));
evalcond[2]=((((-1.0)*x2408*x2410))+((x2406*x2409)));
evalcond[3]=(((r11*sj5*x2406))+(((-1.0)*cj5*r10*x2410)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2407*x2408))+(((-1.0)*x2409*x2411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2413=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2413.valid){
continue;
}
IkReal x2412=x2413.value;
cj4array[0]=(((cj1*cj2*x2412))+(((-1.0)*sj1*sj2*x2412)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2414=IKsin(j4);
IkReal x2415=IKcos(j4);
IkReal x2416=(r11*sj5);
IkReal x2417=((1.0)*sj0);
IkReal x2418=((1.0)*x2415);
IkReal x2419=((1.0)*cj5*x2414);
evalcond[0]=((-1.0)*r02*x2414);
evalcond[1]=((((-1.0)*r02*x2418))+(((-1.0)*x2417)));
evalcond[2]=((((-1.0)*r20*x2419))+((r21*sj5*x2414)));
evalcond[3]=(((x2414*x2416))+(((-1.0)*r10*x2419)));
evalcond[4]=((((-1.0)*cj1*sj2*x2417))+(((-1.0)*x2416*x2418))+(((-1.0)*cj2*sj1*x2417))+((cj5*r10*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2420=IKPowWithIntegerCheck(r02,-1);
if(!x2420.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2420.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2421=IKsin(j4);
IkReal x2422=IKcos(j4);
IkReal x2423=((1.0)*sj0);
IkReal x2424=(cj5*x2422);
IkReal x2425=(sj5*x2421);
IkReal x2426=((1.0)*sj5*x2422);
IkReal x2427=((1.0)*cj5*x2421);
evalcond[0]=((-1.0)*r02*x2421);
evalcond[1]=(((r21*x2425))+(((-1.0)*r20*x2427)));
evalcond[2]=((((-1.0)*r10*x2427))+((r11*x2425)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2426))+((r20*x2424)));
evalcond[4]=((((-1.0)*cj1*sj2*x2423))+((r10*x2424))+(((-1.0)*r11*x2426))+(((-1.0)*cj2*sj1*x2423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2428=((1.0)*sj0);
IkReal x2429=((1.0)*cj0);
CheckValue<IkReal> x2430 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2429))+(((-1.0)*r12*x2428)))),IkReal(((((-1.0)*r11*sj5*x2428))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2429))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2430.valid){
continue;
}
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2430.value)+(((1.5707963267949)*(x2431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2432=IKsin(j4);
IkReal x2433=IKcos(j4);
IkReal x2434=(cj5*r10);
IkReal x2435=(r01*sj5);
IkReal x2436=((1.0)*cj2);
IkReal x2437=(cj5*r00);
IkReal x2438=((1.0)*sj0);
IkReal x2439=(cj5*r20);
IkReal x2440=(cj1*sj2);
IkReal x2441=((1.0)*x2433);
IkReal x2442=((1.0)*x2432);
IkReal x2443=(sj5*x2432);
evalcond[0]=((((-1.0)*x2439*x2442))+(((-1.0)*r22*x2441))+((r21*x2443)));
evalcond[1]=(cj0+(((-1.0)*r12*x2441))+(((-1.0)*x2434*x2442))+((r11*x2443)));
evalcond[2]=((((-1.0)*x2438))+(((-1.0)*x2437*x2442))+((x2432*x2435))+(((-1.0)*r02*x2441)));
evalcond[3]=((((-1.0)*r21*sj5*x2441))+((sj1*sj2))+(((-1.0)*cj1*x2436))+((x2433*x2439))+(((-1.0)*r22*x2442)));
evalcond[4]=((((-1.0)*cj0*x2440))+(((-1.0)*x2435*x2441))+((x2433*x2437))+(((-1.0)*cj0*sj1*x2436))+(((-1.0)*r02*x2442)));
evalcond[5]=((((-1.0)*sj0*sj1*x2436))+(((-1.0)*r11*sj5*x2441))+(((-1.0)*r12*x2442))+((x2433*x2434))+(((-1.0)*x2438*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2444=((1.0)*cj5);
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2444)))),-1);
if(!x2445.valid){
continue;
}
CheckValue<IkReal> x2446 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2445.value)))+(x2446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2447=IKsin(j4);
IkReal x2448=IKcos(j4);
IkReal x2449=(cj5*r10);
IkReal x2450=(r01*sj5);
IkReal x2451=((1.0)*cj2);
IkReal x2452=(cj5*r00);
IkReal x2453=((1.0)*sj0);
IkReal x2454=(cj5*r20);
IkReal x2455=(cj1*sj2);
IkReal x2456=((1.0)*x2448);
IkReal x2457=((1.0)*x2447);
IkReal x2458=(sj5*x2447);
evalcond[0]=((((-1.0)*x2454*x2457))+(((-1.0)*r22*x2456))+((r21*x2458)));
evalcond[1]=(cj0+(((-1.0)*x2449*x2457))+(((-1.0)*r12*x2456))+((r11*x2458)));
evalcond[2]=(((x2447*x2450))+(((-1.0)*x2452*x2457))+(((-1.0)*x2453))+(((-1.0)*r02*x2456)));
evalcond[3]=(((sj1*sj2))+((x2448*x2454))+(((-1.0)*r22*x2457))+(((-1.0)*cj1*x2451))+(((-1.0)*r21*sj5*x2456)));
evalcond[4]=((((-1.0)*x2450*x2456))+(((-1.0)*cj0*x2455))+(((-1.0)*cj0*sj1*x2451))+((x2448*x2452))+(((-1.0)*r02*x2457)));
evalcond[5]=((((-1.0)*x2453*x2455))+(((-1.0)*r11*sj5*x2456))+((x2448*x2449))+(((-1.0)*r12*x2457))+(((-1.0)*sj0*sj1*x2451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2459=((1.0)*cj5);
CheckValue<IkReal> x2460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2460.valid){
continue;
}
CheckValue<IkReal> x2461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2459)))),-1);
if(!x2461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2460.value)+(((1.5707963267949)*(x2461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2462=IKsin(j4);
IkReal x2463=IKcos(j4);
IkReal x2464=(cj5*r10);
IkReal x2465=(r01*sj5);
IkReal x2466=((1.0)*cj2);
IkReal x2467=(cj5*r00);
IkReal x2468=((1.0)*sj0);
IkReal x2469=(cj5*r20);
IkReal x2470=(cj1*sj2);
IkReal x2471=((1.0)*x2463);
IkReal x2472=((1.0)*x2462);
IkReal x2473=(sj5*x2462);
evalcond[0]=(((r21*x2473))+(((-1.0)*x2469*x2472))+(((-1.0)*r22*x2471)));
evalcond[1]=((((-1.0)*r12*x2471))+cj0+(((-1.0)*x2464*x2472))+((r11*x2473)));
evalcond[2]=((((-1.0)*x2467*x2472))+((x2462*x2465))+(((-1.0)*r02*x2471))+(((-1.0)*x2468)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2471))+(((-1.0)*cj1*x2466))+(((-1.0)*r22*x2472))+((x2463*x2469)));
evalcond[4]=((((-1.0)*cj0*sj1*x2466))+(((-1.0)*cj0*x2470))+(((-1.0)*r02*x2472))+(((-1.0)*x2465*x2471))+((x2463*x2467)));
evalcond[5]=((((-1.0)*sj0*sj1*x2466))+(((-1.0)*r12*x2472))+(((-1.0)*r11*sj5*x2471))+(((-1.0)*x2468*x2470))+((x2463*x2464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2474=cj5*cj5;
IkReal x2475=r21*r21;
IkReal x2476=(sj1*sj2);
IkReal x2477=(r21*sj5);
IkReal x2478=(cj1*cj2);
IkReal x2479=(cj5*r20);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2478))+((r22*x2476)))),IkReal((((x2478*x2479))+((x2476*x2477))+(((-1.0)*x2477*x2478))+(((-1.0)*x2476*x2479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(IKsign((x2475+((x2474*(r20*r20)))+(r22*r22)+(((-1.0)*x2474*x2475))+(((-2.0)*x2477*x2479)))),-1);
if(!x2481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2480.value)+(((1.5707963267949)*(x2481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2482=IKsin(j4);
IkReal x2483=IKcos(j4);
IkReal x2484=(r21*sj5);
IkReal x2485=(cj5*r20);
IkReal x2486=((1.0)*x2483);
IkReal x2487=((1.0)*x2482);
evalcond[0]=((((-1.0)*r22*x2486))+((x2482*x2484))+(((-1.0)*x2485*x2487)));
evalcond[1]=((((-1.0)*r22*x2487))+((x2483*x2485))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2484*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2488=(cj5*sj4);
IkReal x2489=(sj4*sj5);
if( IKabs((((r01*x2489))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2488))+((cj4*r12))+(((-1.0)*r11*x2489)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2489))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2488))))+IKsqr((((r10*x2488))+((cj4*r12))+(((-1.0)*r11*x2489))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2489))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2488))), (((r10*x2488))+((cj4*r12))+(((-1.0)*r11*x2489))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2490=IKcos(j0);
IkReal x2491=IKsin(j0);
IkReal x2492=(cj4*cj5);
IkReal x2493=((0.21325)*cj2);
IkReal x2494=(cj5*r01);
IkReal x2495=((1.0)*sj2);
IkReal x2496=(r11*sj5);
IkReal x2497=((1.0)*sj4);
IkReal x2498=(r00*sj5);
IkReal x2499=(cj5*r11);
IkReal x2500=((1.0)*cj2);
IkReal x2501=((1.0)*cj4);
IkReal x2502=((0.21325)*sj2);
IkReal x2503=(r01*sj5);
IkReal x2504=(r10*sj5);
IkReal x2505=(cj1*x2491);
IkReal x2506=(cj1*x2490);
IkReal x2507=(sj1*x2490);
IkReal x2508=(sj1*x2491);
evalcond[0]=(x2490+(((-1.0)*r12*x2501))+(((-1.0)*cj5*r10*x2497))+((sj4*x2496)));
evalcond[1]=((((-1.0)*r02*x2501))+((sj4*x2503))+(((-1.0)*x2491))+(((-1.0)*cj5*r00*x2497)));
evalcond[2]=(x2498+x2494+(((-1.0)*x2500*x2506))+((sj2*x2507)));
evalcond[3]=(x2504+x2499+(((-1.0)*x2500*x2505))+((sj2*x2508)));
evalcond[4]=(((r00*x2492))+(((-1.0)*x2495*x2506))+(((-1.0)*r02*x2497))+(((-1.0)*x2500*x2507))+(((-1.0)*x2501*x2503)));
evalcond[5]=((((-1.0)*x2496*x2501))+(((-1.0)*x2495*x2505))+(((-1.0)*x2500*x2508))+(((-1.0)*r12*x2497))+((r10*x2492)));
evalcond[6]=((((-0.11235)*x2491))+((x2493*x2506))+(((-1.0)*x2502*x2507))+(((-1.0)*px))+(((0.24365)*x2506))+(((-0.08535)*x2498))+(((-0.08535)*x2494)));
evalcond[7]=(((x2493*x2505))+(((-1.0)*x2502*x2508))+(((-1.0)*py))+(((0.11235)*x2490))+(((-0.08535)*x2504))+(((0.24365)*x2505))+(((-0.08535)*x2499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2509=((1.0)*cj5);
IkReal x2510=((1.0)*sj5);
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2509))+(((-1.0)*r10*x2510)))),IkReal(((((-1.0)*r00*x2510))+(((-1.0)*r01*x2509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2512.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2511.value)+(((1.5707963267949)*(x2512.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2513=IKcos(j0);
IkReal x2514=IKsin(j0);
IkReal x2515=(cj5*r01);
IkReal x2516=(r00*sj5);
IkReal x2517=(cj5*r11);
IkReal x2518=((1.0)*cj2);
IkReal x2519=(r10*sj5);
IkReal x2520=((0.21325)*cj1*cj2);
IkReal x2521=(cj1*x2513);
IkReal x2522=(cj1*x2514);
IkReal x2523=(sj1*sj2*x2513);
IkReal x2524=(sj1*sj2*x2514);
evalcond[0]=(x2523+x2515+x2516+(((-1.0)*x2518*x2521)));
evalcond[1]=(x2524+x2519+x2517+(((-1.0)*x2518*x2522)));
evalcond[2]=((((-0.21325)*x2523))+(((-1.0)*px))+(((-0.08535)*x2515))+(((-0.08535)*x2516))+(((-0.11235)*x2514))+(((0.24365)*x2521))+((x2513*x2520)));
evalcond[3]=((((-0.21325)*x2524))+((x2514*x2520))+(((0.11235)*x2513))+(((-1.0)*py))+(((-0.08535)*x2519))+(((-0.08535)*x2517))+(((0.24365)*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2525=((1.0)*cj5);
IkReal x2526=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2525)));
j4eval[0]=x2526;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2525)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2527=((1.0)*cj5);
IkReal x2528=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2527)));
j4eval[0]=x2528;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2527))))));
j4eval[2]=IKsign(x2528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2529=((1.0)*sj0);
IkReal x2530=((1.0)*cj0);
IkReal x2531=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2531;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x2530))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2529)))))+(IKabs(((((-1.0)*r12*x2529))+(((-1.0)*r02*x2530))))));
j4eval[2]=IKsign(x2531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2532=((-1.0)*r20);
IkReal x2534 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2534)==0){
continue;
}
IkReal x2533=pow(x2534,-0.5);
CheckValue<IkReal> x2535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2532),IKFAST_ATAN2_MAGTHRESH);
if(!x2535.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2535.value));
IkReal gconst79=(r21*x2533);
IkReal gconst80=(x2532*x2533);
CheckValue<IkReal> x2536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2536.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2536.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2537=((-1.0)*r20);
IkReal x2538=x2533;
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2537),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
IkReal x2539=((-1.0)*(x2540.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2539;
IkReal gconst78=x2539;
IkReal gconst79=(r21*x2538);
IkReal gconst80=(x2537*x2538);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2541=((-1.0)*r20);
IkReal x2542=x2533;
CheckValue<IkReal> x2544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2541),IKFAST_ATAN2_MAGTHRESH);
if(!x2544.valid){
continue;
}
IkReal x2543=((-1.0)*(x2544.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2543;
IkReal gconst78=x2543;
IkReal gconst79=(r21*x2542);
IkReal gconst80=(x2541*x2542);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2545=((-1.0)*r20);
IkReal x2546=x2533;
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2545),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
IkReal x2547=((-1.0)*(x2548.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2547;
IkReal gconst78=x2547;
IkReal gconst79=(r21*x2546);
IkReal gconst80=(x2545*x2546);
IkReal x2549=r22*r22;
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2549))),-1);
if(!x2552.valid){
continue;
}
IkReal x2550=x2552.value;
IkReal x2551=(x2549+(((2.0)*x2550*(r20*r20)*(r21*r21)))+((x2550*(r21*r21*r21*r21)))+((x2550*(r20*r20*r20*r20))));
j4eval[0]=x2551;
j4eval[1]=IKsign(x2551);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2553=(sj1*sj2);
IkReal x2554=(gconst80*r20);
IkReal x2555=(gconst79*r21);
IkReal x2556=(cj1*cj2);
CheckValue<IkReal> x2557 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2556))+((r22*x2553)))),IkReal(((((-1.0)*x2555*x2556))+(((-1.0)*x2553*x2554))+((x2553*x2555))+((x2554*x2556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2557.valid){
continue;
}
CheckValue<IkReal> x2558=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2554*x2555))+(x2555*x2555)+(r22*r22)+(x2554*x2554))),-1);
if(!x2558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2557.value)+(((1.5707963267949)*(x2558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2559=IKsin(j4);
IkReal x2560=IKcos(j4);
IkReal x2561=(gconst79*r01);
IkReal x2562=(gconst79*r21);
IkReal x2563=((1.0)*cj2);
IkReal x2564=(gconst79*r11);
IkReal x2565=((1.0)*sj0);
IkReal x2566=(cj1*sj2);
IkReal x2567=((1.0)*x2560);
IkReal x2568=(gconst80*x2560);
IkReal x2569=((1.0)*x2559);
IkReal x2570=(gconst80*x2569);
evalcond[0]=((((-1.0)*r22*x2567))+((x2559*x2562))+(((-1.0)*r20*x2570)));
evalcond[1]=((((-1.0)*r10*x2570))+cj0+((x2559*x2564))+(((-1.0)*r12*x2567)));
evalcond[2]=((((-1.0)*r02*x2567))+((x2559*x2561))+(((-1.0)*x2565))+(((-1.0)*r00*x2570)));
evalcond[3]=((((-1.0)*cj1*x2563))+(((-1.0)*x2562*x2567))+(((-1.0)*r22*x2569))+((sj1*sj2))+((r20*x2568)));
evalcond[4]=((((-1.0)*cj0*x2566))+((r00*x2568))+(((-1.0)*r02*x2569))+(((-1.0)*x2561*x2567))+(((-1.0)*cj0*sj1*x2563)));
evalcond[5]=(((r10*x2568))+(((-1.0)*sj0*sj1*x2563))+(((-1.0)*x2565*x2566))+(((-1.0)*x2564*x2567))+(((-1.0)*r12*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2571=((1.0)*gconst80);
CheckValue<IkReal> x2572=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2571)))),-1);
if(!x2572.valid){
continue;
}
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2571))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2572.value)))+(x2573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2574=IKsin(j4);
IkReal x2575=IKcos(j4);
IkReal x2576=(gconst79*r01);
IkReal x2577=(gconst79*r21);
IkReal x2578=((1.0)*cj2);
IkReal x2579=(gconst79*r11);
IkReal x2580=((1.0)*sj0);
IkReal x2581=(cj1*sj2);
IkReal x2582=((1.0)*x2575);
IkReal x2583=(gconst80*x2575);
IkReal x2584=((1.0)*x2574);
IkReal x2585=(gconst80*x2584);
evalcond[0]=((((-1.0)*r20*x2585))+((x2574*x2577))+(((-1.0)*r22*x2582)));
evalcond[1]=(cj0+((x2574*x2579))+(((-1.0)*r10*x2585))+(((-1.0)*r12*x2582)));
evalcond[2]=((((-1.0)*r00*x2585))+((x2574*x2576))+(((-1.0)*r02*x2582))+(((-1.0)*x2580)));
evalcond[3]=(((r20*x2583))+((sj1*sj2))+(((-1.0)*cj1*x2578))+(((-1.0)*x2577*x2582))+(((-1.0)*r22*x2584)));
evalcond[4]=((((-1.0)*cj0*x2581))+((r00*x2583))+(((-1.0)*r02*x2584))+(((-1.0)*x2576*x2582))+(((-1.0)*cj0*sj1*x2578)));
evalcond[5]=((((-1.0)*x2579*x2582))+((r10*x2583))+(((-1.0)*sj0*sj1*x2578))+(((-1.0)*x2580*x2581))+(((-1.0)*r12*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2586=((1.0)*gconst80);
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
CheckValue<IkReal> x2588=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2586))+(((-1.0)*gconst79*r00)))),-1);
if(!x2588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2587.value)+(((1.5707963267949)*(x2588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2589=IKsin(j4);
IkReal x2590=IKcos(j4);
IkReal x2591=(gconst79*r01);
IkReal x2592=(gconst79*r21);
IkReal x2593=((1.0)*cj2);
IkReal x2594=(gconst79*r11);
IkReal x2595=((1.0)*sj0);
IkReal x2596=(cj1*sj2);
IkReal x2597=((1.0)*x2590);
IkReal x2598=(gconst80*x2590);
IkReal x2599=((1.0)*x2589);
IkReal x2600=(gconst80*x2599);
evalcond[0]=((((-1.0)*r22*x2597))+((x2589*x2592))+(((-1.0)*r20*x2600)));
evalcond[1]=(cj0+(((-1.0)*r10*x2600))+((x2589*x2594))+(((-1.0)*r12*x2597)));
evalcond[2]=((((-1.0)*r02*x2597))+(((-1.0)*x2595))+((x2589*x2591))+(((-1.0)*r00*x2600)));
evalcond[3]=((((-1.0)*cj1*x2593))+(((-1.0)*r22*x2599))+((sj1*sj2))+((r20*x2598))+(((-1.0)*x2592*x2597)));
evalcond[4]=(((r00*x2598))+(((-1.0)*cj0*x2596))+(((-1.0)*r02*x2599))+(((-1.0)*cj0*sj1*x2593))+(((-1.0)*x2591*x2597)));
evalcond[5]=((((-1.0)*x2594*x2597))+((r10*x2598))+(((-1.0)*x2595*x2596))+(((-1.0)*sj0*sj1*x2593))+(((-1.0)*r12*x2599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2601=((-1.0)*r21);
IkReal x2603 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2603)==0){
continue;
}
IkReal x2602=pow(x2603,-0.5);
CheckValue<IkReal> x2604 = IKatan2WithCheck(IkReal(x2601),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2604.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2604.value))));
IkReal gconst82=(x2601*x2602);
IkReal gconst83=((1.0)*r20*x2602);
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2606=((-1.0)*r21);
CheckValue<IkReal> x2609 = IKatan2WithCheck(IkReal(x2606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2609.valid){
continue;
}
IkReal x2607=((1.0)*(x2609.value));
IkReal x2608=x2602;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2607)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2607)));
IkReal gconst82=(x2606*x2608);
IkReal gconst83=((1.0)*r20*x2608);
IkReal x2610=r22*r22;
IkReal x2611=((1.0)*x2610);
CheckValue<IkReal> x2615=IKPowWithIntegerCheck(((-1.0)+x2610),-1);
if(!x2615.valid){
continue;
}
IkReal x2612=x2615.value;
if((((1.0)+(((-1.0)*x2611)))) < -0.00001)
continue;
IkReal x2613=IKsqrt(((1.0)+(((-1.0)*x2611))));
IkReal x2614=(cj0*x2612*x2613);
j4eval[0]=((IKabs(((((-1.0)*x2611*x2614))+x2614)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2616=((-1.0)*r21);
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal(x2616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
IkReal x2617=((1.0)*(x2619.value));
IkReal x2618=x2602;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2617)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2617)));
IkReal gconst82=(x2616*x2618);
IkReal gconst83=((1.0)*r20*x2618);
IkReal x2620=r22*r22;
IkReal x2621=((1.0)*x2620);
CheckValue<IkReal> x2625=IKPowWithIntegerCheck(((-1.0)+x2620),-1);
if(!x2625.valid){
continue;
}
IkReal x2622=x2625.value;
if((((1.0)+(((-1.0)*x2621)))) < -0.00001)
continue;
IkReal x2623=IKsqrt(((1.0)+(((-1.0)*x2621))));
IkReal x2624=(sj0*x2622*x2623);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2624+(((-1.0)*x2621*x2624))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2626=((-1.0)*r21);
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal(x2626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
IkReal x2627=((1.0)*(x2629.value));
IkReal x2628=x2602;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2627)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2627)));
IkReal gconst82=(x2626*x2628);
IkReal gconst83=((1.0)*r20*x2628);
IkReal x2630=r22*r22;
IkReal x2631=(r12*sj0);
IkReal x2632=(cj0*r02);
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(((-1.0)+x2630),-1);
if(!x2636.valid){
continue;
}
IkReal x2633=x2636.value;
if((((1.0)+(((-1.0)*x2630)))) < -0.00001)
continue;
IkReal x2634=IKsqrt(((1.0)+(((-1.0)*x2630))));
IkReal x2635=(r22*x2633*x2634);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2632))+(((-1.0)*x2631)))))+(IKabs((((x2632*x2635))+((x2631*x2635))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2637=((1.0)*sj0);
IkReal x2638=((1.0)*cj0);
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2639.valid){
continue;
}
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2638))+(((-1.0)*r12*x2637)))),IkReal(((((-1.0)*gconst82*r11*x2637))+(((-1.0)*gconst82*r01*x2638))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2639.value)))+(x2640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2641=IKsin(j4);
IkReal x2642=IKcos(j4);
IkReal x2643=(gconst82*r11);
IkReal x2644=((1.0)*cj2);
IkReal x2645=((1.0)*sj0);
IkReal x2646=(cj1*sj2);
IkReal x2647=((1.0)*x2642);
IkReal x2648=(gconst83*x2642);
IkReal x2649=(gconst82*x2641);
IkReal x2650=((1.0)*x2641);
evalcond[0]=((((-1.0)*gconst83*r20*x2650))+(((-1.0)*r22*x2647))+((r21*x2649)));
evalcond[1]=((((-1.0)*r12*x2647))+cj0+(((-1.0)*gconst83*r10*x2650))+((x2641*x2643)));
evalcond[2]=((((-1.0)*r02*x2647))+((r01*x2649))+(((-1.0)*x2645))+(((-1.0)*gconst83*r00*x2650)));
evalcond[3]=((((-1.0)*r22*x2650))+(((-1.0)*cj1*x2644))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2647))+((r20*x2648)));
evalcond[4]=((((-1.0)*r02*x2650))+(((-1.0)*cj0*sj1*x2644))+(((-1.0)*gconst82*r01*x2647))+((r00*x2648))+(((-1.0)*cj0*x2646)));
evalcond[5]=((((-1.0)*r12*x2650))+(((-1.0)*x2645*x2646))+((r10*x2648))+(((-1.0)*sj0*sj1*x2644))+(((-1.0)*x2643*x2647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2651=((1.0)*gconst83);
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2651))+(((-1.0)*gconst82*r10)))),-1);
if(!x2652.valid){
continue;
}
CheckValue<IkReal> x2653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2652.value)))+(x2653.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2654=IKsin(j4);
IkReal x2655=IKcos(j4);
IkReal x2656=(gconst82*r11);
IkReal x2657=((1.0)*cj2);
IkReal x2658=((1.0)*sj0);
IkReal x2659=(cj1*sj2);
IkReal x2660=((1.0)*x2655);
IkReal x2661=(gconst83*x2655);
IkReal x2662=(gconst82*x2654);
IkReal x2663=((1.0)*x2654);
evalcond[0]=(((r21*x2662))+(((-1.0)*gconst83*r20*x2663))+(((-1.0)*r22*x2660)));
evalcond[1]=((((-1.0)*r12*x2660))+cj0+((x2654*x2656))+(((-1.0)*gconst83*r10*x2663)));
evalcond[2]=((((-1.0)*r02*x2660))+(((-1.0)*x2658))+((r01*x2662))+(((-1.0)*gconst83*r00*x2663)));
evalcond[3]=((((-1.0)*cj1*x2657))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2660))+(((-1.0)*r22*x2663))+((r20*x2661)));
evalcond[4]=((((-1.0)*gconst82*r01*x2660))+(((-1.0)*r02*x2663))+(((-1.0)*cj0*sj1*x2657))+((r00*x2661))+(((-1.0)*cj0*x2659)));
evalcond[5]=((((-1.0)*r12*x2663))+((r10*x2661))+(((-1.0)*x2658*x2659))+(((-1.0)*sj0*sj1*x2657))+(((-1.0)*x2656*x2660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2664=((1.0)*gconst83);
CheckValue<IkReal> x2665 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2665.valid){
continue;
}
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2664))+(((-1.0)*gconst82*r00)))),-1);
if(!x2666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2665.value)+(((1.5707963267949)*(x2666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2667=IKsin(j4);
IkReal x2668=IKcos(j4);
IkReal x2669=(gconst82*r11);
IkReal x2670=((1.0)*cj2);
IkReal x2671=((1.0)*sj0);
IkReal x2672=(cj1*sj2);
IkReal x2673=((1.0)*x2668);
IkReal x2674=(gconst83*x2668);
IkReal x2675=(gconst82*x2667);
IkReal x2676=((1.0)*x2667);
evalcond[0]=(((r21*x2675))+(((-1.0)*r22*x2673))+(((-1.0)*gconst83*r20*x2676)));
evalcond[1]=((((-1.0)*r12*x2673))+cj0+((x2667*x2669))+(((-1.0)*gconst83*r10*x2676)));
evalcond[2]=((((-1.0)*r02*x2673))+(((-1.0)*x2671))+((r01*x2675))+(((-1.0)*gconst83*r00*x2676)));
evalcond[3]=((((-1.0)*cj1*x2670))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2673))+((r20*x2674))+(((-1.0)*r22*x2676)));
evalcond[4]=((((-1.0)*cj0*x2672))+(((-1.0)*cj0*sj1*x2670))+(((-1.0)*gconst82*r01*x2673))+(((-1.0)*r02*x2676))+((r00*x2674)));
evalcond[5]=((((-1.0)*r12*x2676))+(((-1.0)*sj0*sj1*x2670))+((r10*x2674))+(((-1.0)*x2671*x2672))+(((-1.0)*x2669*x2673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2677=((-1.0)*r10);
IkReal x2679 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2679)==0){
continue;
}
IkReal x2678=pow(x2679,-0.5);
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2677),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2680.value));
IkReal gconst85=(r11*x2678);
IkReal gconst86=(x2677*x2678);
CheckValue<IkReal> x2681 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2681.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2681.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2682=((-1.0)*r10);
IkReal x2683=x2678;
CheckValue<IkReal> x2685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2682),IKFAST_ATAN2_MAGTHRESH);
if(!x2685.valid){
continue;
}
IkReal x2684=((-1.0)*(x2685.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2684;
IkReal gconst84=x2684;
IkReal gconst85=(r11*x2683);
IkReal gconst86=(x2682*x2683);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2686=((1.0)*sj0);
IkReal x2687=((1.0)*gconst85);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2686))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2686))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2687))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2687)))),-1);
if(!x2689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2688.value)+(((1.5707963267949)*(x2689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j4);
IkReal x2691=IKcos(j4);
IkReal x2692=(gconst85*r21);
IkReal x2693=(gconst86*r00);
IkReal x2694=(gconst86*r10);
IkReal x2695=((1.0)*cj2);
IkReal x2696=(gconst85*r11);
IkReal x2697=(gconst85*r01);
IkReal x2698=((1.0)*sj0);
IkReal x2699=(gconst86*r20);
IkReal x2700=(cj1*sj2);
IkReal x2701=((1.0)*x2691);
IkReal x2702=((1.0)*x2690);
evalcond[0]=((((-1.0)*r22*x2701))+((x2690*x2692))+(((-1.0)*x2699*x2702)));
evalcond[1]=(cj0+(((-1.0)*r12*x2701))+(((-1.0)*x2694*x2702))+((x2690*x2696)));
evalcond[2]=((((-1.0)*r02*x2701))+(((-1.0)*x2698))+((x2690*x2697))+(((-1.0)*x2693*x2702)));
evalcond[3]=(((x2691*x2699))+(((-1.0)*r22*x2702))+(((-1.0)*cj1*x2695))+((sj1*sj2))+(((-1.0)*x2692*x2701)));
evalcond[4]=(((x2691*x2693))+(((-1.0)*x2697*x2701))+(((-1.0)*cj0*x2700))+(((-1.0)*r02*x2702))+(((-1.0)*cj0*sj1*x2695)));
evalcond[5]=(((x2691*x2694))+(((-1.0)*r12*x2702))+(((-1.0)*x2696*x2701))+(((-1.0)*sj0*sj1*x2695))+(((-1.0)*x2698*x2700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2703=((1.0)*gconst86);
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2703))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
CheckValue<IkReal> x2705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2703))+(((-1.0)*gconst85*r00)))),-1);
if(!x2705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2704.value)+(((1.5707963267949)*(x2705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2706=IKsin(j4);
IkReal x2707=IKcos(j4);
IkReal x2708=(gconst85*r21);
IkReal x2709=(gconst86*r00);
IkReal x2710=(gconst86*r10);
IkReal x2711=((1.0)*cj2);
IkReal x2712=(gconst85*r11);
IkReal x2713=(gconst85*r01);
IkReal x2714=((1.0)*sj0);
IkReal x2715=(gconst86*r20);
IkReal x2716=(cj1*sj2);
IkReal x2717=((1.0)*x2707);
IkReal x2718=((1.0)*x2706);
evalcond[0]=((((-1.0)*x2715*x2718))+(((-1.0)*r22*x2717))+((x2706*x2708)));
evalcond[1]=(cj0+((x2706*x2712))+(((-1.0)*x2710*x2718))+(((-1.0)*r12*x2717)));
evalcond[2]=((((-1.0)*x2714))+((x2706*x2713))+(((-1.0)*r02*x2717))+(((-1.0)*x2709*x2718)));
evalcond[3]=(((x2707*x2715))+(((-1.0)*x2708*x2717))+((sj1*sj2))+(((-1.0)*r22*x2718))+(((-1.0)*cj1*x2711)));
evalcond[4]=((((-1.0)*cj0*sj1*x2711))+(((-1.0)*r02*x2718))+(((-1.0)*x2713*x2717))+((x2707*x2709))+(((-1.0)*cj0*x2716)));
evalcond[5]=((((-1.0)*x2712*x2717))+(((-1.0)*sj0*sj1*x2711))+((x2707*x2710))+(((-1.0)*x2714*x2716))+(((-1.0)*r12*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2719=((-1.0)*r11);
IkReal x2721 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2721)==0){
continue;
}
IkReal x2720=pow(x2721,-0.5);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(x2719),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2722.value))));
IkReal gconst88=(x2719*x2720);
IkReal gconst89=((1.0)*r10*x2720);
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2723.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2724=((-1.0)*r11);
CheckValue<IkReal> x2727 = IKatan2WithCheck(IkReal(x2724),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2727.valid){
continue;
}
IkReal x2725=((1.0)*(x2727.value));
IkReal x2726=x2720;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2725)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2725)));
IkReal gconst88=(x2724*x2726);
IkReal gconst89=((1.0)*r10*x2726);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2728=((-1.0)*r11);
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal(x2728),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
IkReal x2729=((1.0)*(x2731.value));
IkReal x2730=x2720;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2729)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2729)));
IkReal gconst88=(x2728*x2730);
IkReal gconst89=((1.0)*r10*x2730);
IkReal x2732=r12*r12;
IkReal x2733=((1.0)*sj0);
IkReal x2734=(cj0*r02);
IkReal x2735=x2720;
j4eval[0]=((IKabs(((((-1.0)*x2734))+(((-1.0)*r12*x2733)))))+(IKabs(((((-1.0)*x2733*x2735))+((r12*x2734*x2735))+((sj0*x2732*x2735))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2736=((-1.0)*r11);
CheckValue<IkReal> x2739 = IKatan2WithCheck(IkReal(x2736),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2739.valid){
continue;
}
IkReal x2737=((1.0)*(x2739.value));
IkReal x2738=x2720;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2737)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2737)));
IkReal gconst88=(x2736*x2738);
IkReal gconst89=((1.0)*r10*x2738);
IkReal x2740=r12*r12;
IkReal x2741=(cj1*cj2*r22);
IkReal x2742=(r22*sj1*sj2);
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(((-1.0)+x2740),-1);
if(!x2746.valid){
continue;
}
IkReal x2743=x2746.value;
if((((1.0)+(((-1.0)*x2740)))) < -0.00001)
continue;
IkReal x2744=IKsqrt(((1.0)+(((-1.0)*x2740))));
IkReal x2745=(r12*x2743*x2744);
j4eval[0]=((IKabs(((((-1.0)*x2742*x2745))+((x2741*x2745)))))+(IKabs((x2742+(((-1.0)*x2741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2747=(cj1*cj2);
IkReal x2748=(gconst89*r20);
IkReal x2749=(gconst88*r21);
IkReal x2750=(sj1*sj2);
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(IKsign(((x2748*x2748)+(r22*r22)+(x2749*x2749)+(((-2.0)*x2748*x2749)))),-1);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2747))+((r22*x2750)))),IkReal((((x2749*x2750))+(((-1.0)*x2747*x2749))+((x2747*x2748))+(((-1.0)*x2748*x2750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2751.value)))+(x2752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2753=IKsin(j4);
IkReal x2754=IKcos(j4);
IkReal x2755=((1.0)*sj0);
IkReal x2756=((1.0)*cj2);
IkReal x2757=(gconst89*r20);
IkReal x2758=(gconst89*r10);
IkReal x2759=(gconst89*r00);
IkReal x2760=(cj1*sj2);
IkReal x2761=((1.0)*x2754);
IkReal x2762=((1.0)*x2753);
IkReal x2763=(gconst88*x2753);
evalcond[0]=((((-1.0)*x2757*x2762))+((r21*x2763))+(((-1.0)*r22*x2761)));
evalcond[1]=(cj0+(((-1.0)*r12*x2761))+(((-1.0)*x2758*x2762))+((r11*x2763)));
evalcond[2]=(((r01*x2763))+(((-1.0)*x2759*x2762))+(((-1.0)*r02*x2761))+(((-1.0)*x2755)));
evalcond[3]=(((x2754*x2757))+(((-1.0)*gconst88*r21*x2761))+((sj1*sj2))+(((-1.0)*cj1*x2756))+(((-1.0)*r22*x2762)));
evalcond[4]=(((x2754*x2759))+(((-1.0)*cj0*x2760))+(((-1.0)*gconst88*r01*x2761))+(((-1.0)*r02*x2762))+(((-1.0)*cj0*sj1*x2756)));
evalcond[5]=((((-1.0)*x2755*x2760))+(((-1.0)*r12*x2762))+((x2754*x2758))+(((-1.0)*cj2*sj1*x2755))+(((-1.0)*gconst88*r11*x2761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2764=((1.0)*sj0);
IkReal x2765=((1.0)*cj0);
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2764))+(((-1.0)*r02*x2765)))),IkReal(((((-1.0)*gconst88*r01*x2765))+(((-1.0)*gconst88*r11*x2764))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2766.value)+(((1.5707963267949)*(x2767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2768=IKsin(j4);
IkReal x2769=IKcos(j4);
IkReal x2770=((1.0)*sj0);
IkReal x2771=((1.0)*cj2);
IkReal x2772=(gconst89*r20);
IkReal x2773=(gconst89*r10);
IkReal x2774=(gconst89*r00);
IkReal x2775=(cj1*sj2);
IkReal x2776=((1.0)*x2769);
IkReal x2777=((1.0)*x2768);
IkReal x2778=(gconst88*x2768);
evalcond[0]=((((-1.0)*x2772*x2777))+((r21*x2778))+(((-1.0)*r22*x2776)));
evalcond[1]=(((r11*x2778))+cj0+(((-1.0)*r12*x2776))+(((-1.0)*x2773*x2777)));
evalcond[2]=(((r01*x2778))+(((-1.0)*r02*x2776))+(((-1.0)*x2770))+(((-1.0)*x2774*x2777)));
evalcond[3]=(((x2769*x2772))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2776))+(((-1.0)*cj1*x2771))+(((-1.0)*r22*x2777)));
evalcond[4]=(((x2769*x2774))+(((-1.0)*cj0*x2775))+(((-1.0)*r02*x2777))+(((-1.0)*gconst88*r01*x2776))+(((-1.0)*cj0*sj1*x2771)));
evalcond[5]=(((x2769*x2773))+(((-1.0)*gconst88*r11*x2776))+(((-1.0)*cj2*sj1*x2770))+(((-1.0)*x2770*x2775))+(((-1.0)*r12*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2779=((1.0)*gconst89);
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2779))+(((-1.0)*gconst88*r00)))),-1);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2779))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2780.value)))+(x2781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2782=IKsin(j4);
IkReal x2783=IKcos(j4);
IkReal x2784=((1.0)*sj0);
IkReal x2785=((1.0)*cj2);
IkReal x2786=(gconst89*r20);
IkReal x2787=(gconst89*r10);
IkReal x2788=(gconst89*r00);
IkReal x2789=(cj1*sj2);
IkReal x2790=((1.0)*x2783);
IkReal x2791=((1.0)*x2782);
IkReal x2792=(gconst88*x2782);
evalcond[0]=((((-1.0)*x2786*x2791))+((r21*x2792))+(((-1.0)*r22*x2790)));
evalcond[1]=((((-1.0)*x2787*x2791))+cj0+((r11*x2792))+(((-1.0)*r12*x2790)));
evalcond[2]=((((-1.0)*x2784))+((r01*x2792))+(((-1.0)*x2788*x2791))+(((-1.0)*r02*x2790)));
evalcond[3]=((((-1.0)*cj1*x2785))+(((-1.0)*gconst88*r21*x2790))+((sj1*sj2))+((x2783*x2786))+(((-1.0)*r22*x2791)));
evalcond[4]=((((-1.0)*cj0*sj1*x2785))+((x2783*x2788))+(((-1.0)*cj0*x2789))+(((-1.0)*gconst88*r01*x2790))+(((-1.0)*r02*x2791)));
evalcond[5]=((((-1.0)*cj2*sj1*x2784))+(((-1.0)*x2784*x2789))+((x2783*x2787))+(((-1.0)*gconst88*r11*x2790))+(((-1.0)*r12*x2791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2793=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2793;
j4eval[1]=IKsign(x2793);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2794=((1.0)*cj5);
IkReal x2795=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2794)));
j4eval[0]=x2795;
j4eval[1]=((IKabs(((((-1.0)*r20*x2794))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2796=cj5*cj5;
IkReal x2797=r11*r11;
IkReal x2798=(r11*sj5);
IkReal x2799=(cj5*r10);
IkReal x2800=(x2797+(r12*r12)+(((-1.0)*x2796*x2797))+((x2796*(r10*r10)))+(((-2.0)*x2798*x2799)));
j4eval[0]=x2800;
j4eval[1]=IKsign(x2800);
j4eval[2]=((IKabs((x2799+(((-1.0)*x2798)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2801=cj5*cj5;
IkReal x2802=r11*r11;
IkReal x2803=(cj5*r10);
IkReal x2804=(r11*sj5);
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal(((((-1.0)*x2804))+x2803)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
CheckValue<IkReal> x2806=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2803*x2804))+(r12*r12)+((x2801*(r10*r10)))+(((-1.0)*x2801*x2802))+x2802)),-1);
if(!x2806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2805.value)+(((1.5707963267949)*(x2806.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2807=IKsin(j4);
IkReal x2808=IKcos(j4);
IkReal x2809=(cj5*r10);
IkReal x2810=(r01*sj5);
IkReal x2811=((1.0)*cj2);
IkReal x2812=(cj5*r00);
IkReal x2813=(cj5*r20);
IkReal x2814=((1.0)*x2808);
IkReal x2815=((1.0)*x2807);
IkReal x2816=(sj5*x2807);
evalcond[0]=((((-1.0)*x2813*x2815))+((r21*x2816))+(((-1.0)*r22*x2814)));
evalcond[1]=((((-1.0)*r02*x2814))+(((-1.0)*x2812*x2815))+((x2807*x2810)));
evalcond[2]=((((-1.0)*r12*x2815))+((x2808*x2809))+(((-1.0)*r11*sj5*x2814)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2814))+(((-1.0)*x2809*x2815))+((r11*x2816)));
evalcond[4]=((((-1.0)*cj1*x2811))+((sj1*sj2))+(((-1.0)*r22*x2815))+(((-1.0)*r21*sj5*x2814))+((x2808*x2813)));
evalcond[5]=((((-1.0)*x2810*x2814))+(((-1.0)*r02*x2815))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2811))+((x2808*x2812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2817=((1.0)*cj5);
CheckValue<IkReal> x2818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2817)))),-1);
if(!x2818.valid){
continue;
}
CheckValue<IkReal> x2819 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2818.value)))+(x2819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2820=IKsin(j4);
IkReal x2821=IKcos(j4);
IkReal x2822=(cj5*r10);
IkReal x2823=(r01*sj5);
IkReal x2824=((1.0)*cj2);
IkReal x2825=(cj5*r00);
IkReal x2826=(cj5*r20);
IkReal x2827=((1.0)*x2821);
IkReal x2828=((1.0)*x2820);
IkReal x2829=(sj5*x2820);
evalcond[0]=((((-1.0)*x2826*x2828))+((r21*x2829))+(((-1.0)*r22*x2827)));
evalcond[1]=((((-1.0)*r02*x2827))+(((-1.0)*x2825*x2828))+((x2820*x2823)));
evalcond[2]=(((x2821*x2822))+(((-1.0)*r12*x2828))+(((-1.0)*r11*sj5*x2827)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2827))+(((-1.0)*x2822*x2828))+((r11*x2829)));
evalcond[4]=(((x2821*x2826))+(((-1.0)*cj1*x2824))+((sj1*sj2))+(((-1.0)*r22*x2828))+(((-1.0)*r21*sj5*x2827)));
evalcond[5]=(((x2821*x2825))+(((-1.0)*sj1*x2824))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2828))+(((-1.0)*x2823*x2827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2830=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2830.value)))+(x2831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2832=IKsin(j4);
IkReal x2833=IKcos(j4);
IkReal x2834=(cj5*r10);
IkReal x2835=(r01*sj5);
IkReal x2836=((1.0)*cj2);
IkReal x2837=(cj5*r00);
IkReal x2838=(cj5*r20);
IkReal x2839=((1.0)*x2833);
IkReal x2840=((1.0)*x2832);
IkReal x2841=(sj5*x2832);
evalcond[0]=(((r21*x2841))+(((-1.0)*r22*x2839))+(((-1.0)*x2838*x2840)));
evalcond[1]=((((-1.0)*x2837*x2840))+(((-1.0)*r02*x2839))+((x2832*x2835)));
evalcond[2]=((((-1.0)*r12*x2840))+(((-1.0)*r11*sj5*x2839))+((x2833*x2834)));
evalcond[3]=((1.0)+((r11*x2841))+(((-1.0)*r12*x2839))+(((-1.0)*x2834*x2840)));
evalcond[4]=((((-1.0)*cj1*x2836))+(((-1.0)*r21*sj5*x2839))+((sj1*sj2))+(((-1.0)*r22*x2840))+((x2833*x2838)));
evalcond[5]=((((-1.0)*sj1*x2836))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2840))+(((-1.0)*x2835*x2839))+((x2833*x2837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2842=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2842;
j4eval[1]=IKsign(x2842);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2843=((1.0)*cj5);
IkReal x2844=((((-1.0)*r21*x2843))+(((-1.0)*r20*sj5)));
j4eval[0]=x2844;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2843))))));
j4eval[2]=IKsign(x2844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2845=cj5*cj5;
IkReal x2846=r11*r11;
IkReal x2847=(cj5*r10);
IkReal x2848=(r11*sj5);
IkReal x2849=((((-1.0)*x2845*(r10*r10)))+(((2.0)*x2847*x2848))+(((-1.0)*(r12*r12)))+((x2845*x2846))+(((-1.0)*x2846)));
j4eval[0]=x2849;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2848))+x2847))));
j4eval[2]=IKsign(x2849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2850=cj5*cj5;
IkReal x2851=r11*r11;
IkReal x2852=(cj5*r10);
IkReal x2853=(r11*sj5);
CheckValue<IkReal> x2854=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2850*(r10*r10)))+((x2850*x2851))+(((2.0)*x2852*x2853))+(((-1.0)*(r12*r12)))+(((-1.0)*x2851)))),-1);
if(!x2854.valid){
continue;
}
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(((((-1.0)*x2853))+x2852)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2854.value)))+(x2855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2856=IKsin(j4);
IkReal x2857=IKcos(j4);
IkReal x2858=(cj5*r10);
IkReal x2859=(r01*sj5);
IkReal x2860=(cj5*r00);
IkReal x2861=(cj5*r20);
IkReal x2862=((1.0)*x2857);
IkReal x2863=((1.0)*x2856);
IkReal x2864=(sj5*x2856);
evalcond[0]=((((-1.0)*x2861*x2863))+((r21*x2864))+(((-1.0)*r22*x2862)));
evalcond[1]=((((-1.0)*r02*x2862))+(((-1.0)*x2860*x2863))+((x2856*x2859)));
evalcond[2]=((((-1.0)*r12*x2863))+(((-1.0)*r11*sj5*x2862))+((x2857*x2858)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2862))+(((-1.0)*x2858*x2863))+((r11*x2864)));
evalcond[4]=((((-1.0)*r02*x2863))+((cj2*sj1))+((x2857*x2860))+((cj1*sj2))+(((-1.0)*x2859*x2862)));
evalcond[5]=(((x2857*x2861))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2863))+(((-1.0)*r21*sj5*x2862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2865=((1.0)*cj5);
CheckValue<IkReal> x2866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2865))+(((-1.0)*r20*sj5)))),-1);
if(!x2866.valid){
continue;
}
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2866.value)))+(x2867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2868=IKsin(j4);
IkReal x2869=IKcos(j4);
IkReal x2870=(cj5*r10);
IkReal x2871=(r01*sj5);
IkReal x2872=(cj5*r00);
IkReal x2873=(cj5*r20);
IkReal x2874=((1.0)*x2869);
IkReal x2875=((1.0)*x2868);
IkReal x2876=(sj5*x2868);
evalcond[0]=((((-1.0)*r22*x2874))+((r21*x2876))+(((-1.0)*x2873*x2875)));
evalcond[1]=((((-1.0)*r02*x2874))+((x2868*x2871))+(((-1.0)*x2872*x2875)));
evalcond[2]=(((x2869*x2870))+(((-1.0)*r11*sj5*x2874))+(((-1.0)*r12*x2875)));
evalcond[3]=((-1.0)+(((-1.0)*x2870*x2875))+((r11*x2876))+(((-1.0)*r12*x2874)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2875))+((x2869*x2872))+((cj1*sj2))+(((-1.0)*x2871*x2874)));
evalcond[5]=(((x2869*x2873))+(((-1.0)*r22*x2875))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2877.value)+(((1.5707963267949)*(x2878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2879=IKsin(j4);
IkReal x2880=IKcos(j4);
IkReal x2881=(cj5*r10);
IkReal x2882=(r01*sj5);
IkReal x2883=(cj5*r00);
IkReal x2884=(cj5*r20);
IkReal x2885=((1.0)*x2880);
IkReal x2886=((1.0)*x2879);
IkReal x2887=(sj5*x2879);
evalcond[0]=((((-1.0)*r22*x2885))+((r21*x2887))+(((-1.0)*x2884*x2886)));
evalcond[1]=((((-1.0)*x2883*x2886))+(((-1.0)*r02*x2885))+((x2879*x2882)));
evalcond[2]=((((-1.0)*r11*sj5*x2885))+((x2880*x2881))+(((-1.0)*r12*x2886)));
evalcond[3]=((-1.0)+((r11*x2887))+(((-1.0)*r12*x2885))+(((-1.0)*x2881*x2886)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2882*x2885))+((x2880*x2883))+(((-1.0)*r02*x2886))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x2886))+((x2880*x2884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2888=((-1.0)*r00);
IkReal x2890 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2890)==0){
continue;
}
IkReal x2889=pow(x2890,-0.5);
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2888),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2891.value));
IkReal gconst91=(r01*x2889);
IkReal gconst92=(x2888*x2889);
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2892.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2893=((-1.0)*r00);
IkReal x2894=x2889;
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2893),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
IkReal x2895=((-1.0)*(x2896.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2895;
IkReal gconst90=x2895;
IkReal gconst91=(r01*x2894);
IkReal gconst92=(x2893*x2894);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2897=((1.0)*sj0);
IkReal x2898=((1.0)*cj0);
CheckValue<IkReal> x2899=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2899.valid){
continue;
}
CheckValue<IkReal> x2900 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2898))+(((-1.0)*r12*x2897)))),IkReal(((((-1.0)*gconst91*r11*x2897))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2899.value)))+(x2900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2901=IKsin(j4);
IkReal x2902=IKcos(j4);
IkReal x2903=((1.0)*cj2);
IkReal x2904=(gconst92*r00);
IkReal x2905=(gconst92*r20);
IkReal x2906=((1.0)*sj0);
IkReal x2907=(gconst92*r10);
IkReal x2908=(cj1*sj2);
IkReal x2909=((1.0)*x2902);
IkReal x2910=(gconst91*x2901);
IkReal x2911=((1.0)*x2901);
evalcond[0]=((((-1.0)*x2905*x2911))+((r21*x2910))+(((-1.0)*r22*x2909)));
evalcond[1]=(((r11*x2910))+cj0+(((-1.0)*x2907*x2911))+(((-1.0)*r12*x2909)));
evalcond[2]=((((-1.0)*r02*x2909))+((r01*x2910))+(((-1.0)*x2904*x2911))+(((-1.0)*x2906)));
evalcond[3]=(((x2902*x2905))+((sj1*sj2))+(((-1.0)*cj1*x2903))+(((-1.0)*gconst91*r21*x2909))+(((-1.0)*r22*x2911)));
evalcond[4]=(((x2902*x2904))+(((-1.0)*cj0*x2908))+(((-1.0)*cj0*sj1*x2903))+(((-1.0)*r02*x2911))+(((-1.0)*gconst91*r01*x2909)));
evalcond[5]=((((-1.0)*x2906*x2908))+((x2902*x2907))+(((-1.0)*r12*x2911))+(((-1.0)*gconst91*r11*x2909))+(((-1.0)*sj0*sj1*x2903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2912=((1.0)*gconst92);
CheckValue<IkReal> x2913 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2913.valid){
continue;
}
CheckValue<IkReal> x2914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2912)))),-1);
if(!x2914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2913.value)+(((1.5707963267949)*(x2914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2915=IKsin(j4);
IkReal x2916=IKcos(j4);
IkReal x2917=((1.0)*cj2);
IkReal x2918=(gconst92*r00);
IkReal x2919=(gconst92*r20);
IkReal x2920=((1.0)*sj0);
IkReal x2921=(gconst92*r10);
IkReal x2922=(cj1*sj2);
IkReal x2923=((1.0)*x2916);
IkReal x2924=(gconst91*x2915);
IkReal x2925=((1.0)*x2915);
evalcond[0]=((((-1.0)*x2919*x2925))+((r21*x2924))+(((-1.0)*r22*x2923)));
evalcond[1]=(cj0+(((-1.0)*x2921*x2925))+(((-1.0)*r12*x2923))+((r11*x2924)));
evalcond[2]=((((-1.0)*r02*x2923))+(((-1.0)*x2920))+(((-1.0)*x2918*x2925))+((r01*x2924)));
evalcond[3]=((((-1.0)*gconst91*r21*x2923))+((x2916*x2919))+((sj1*sj2))+(((-1.0)*cj1*x2917))+(((-1.0)*r22*x2925)));
evalcond[4]=((((-1.0)*cj0*sj1*x2917))+(((-1.0)*r02*x2925))+(((-1.0)*cj0*x2922))+((x2916*x2918))+(((-1.0)*gconst91*r01*x2923)));
evalcond[5]=(((x2916*x2921))+(((-1.0)*x2920*x2922))+(((-1.0)*r12*x2925))+(((-1.0)*gconst91*r11*x2923))+(((-1.0)*sj0*sj1*x2917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2926=((-1.0)*r01);
IkReal x2928 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2928)==0){
continue;
}
IkReal x2927=pow(x2928,-0.5);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal(x2926),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2929.value))));
IkReal gconst94=(x2926*x2927);
IkReal gconst95=((1.0)*r00*x2927);
CheckValue<IkReal> x2930 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2930.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2930.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2931=((-1.0)*r01);
CheckValue<IkReal> x2934 = IKatan2WithCheck(IkReal(x2931),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2934.valid){
continue;
}
IkReal x2932=((1.0)*(x2934.value));
IkReal x2933=x2927;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2932)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2932)));
IkReal gconst94=(x2931*x2933);
IkReal gconst95=((1.0)*r00*x2933);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2935=((-1.0)*r01);
CheckValue<IkReal> x2938 = IKatan2WithCheck(IkReal(x2935),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2938.valid){
continue;
}
IkReal x2936=((1.0)*(x2938.value));
IkReal x2937=x2927;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2936)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2936)));
IkReal gconst94=(x2935*x2937);
IkReal gconst95=((1.0)*r00*x2937);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2939=((-1.0)*r01);
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal(x2939),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
IkReal x2940=((1.0)*(x2942.value));
IkReal x2941=x2927;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2940)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2940)));
IkReal gconst94=(x2939*x2941);
IkReal gconst95=((1.0)*r00*x2941);
IkReal x2943=r02*r02;
IkReal x2944=(r12*sj0);
IkReal x2945=((1.0)*cj0);
IkReal x2946=x2927;
j4eval[0]=((IKabs((((r02*x2944*x2946))+(((-1.0)*x2945*x2946))+((cj0*x2943*x2946)))))+(IKabs(((((-1.0)*x2944))+(((-1.0)*r02*x2945))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2947=((1.0)*sj0);
IkReal x2948=((1.0)*cj0);
CheckValue<IkReal> x2949=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2949.valid){
continue;
}
CheckValue<IkReal> x2950 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2947))+(((-1.0)*r02*x2948)))),IkReal(((((-1.0)*gconst94*r01*x2948))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2947))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2949.value)))+(x2950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2951=IKsin(j4);
IkReal x2952=IKcos(j4);
IkReal x2953=(gconst94*r11);
IkReal x2954=((1.0)*cj2);
IkReal x2955=(gconst94*r21);
IkReal x2956=((1.0)*sj0);
IkReal x2957=(gconst94*r01);
IkReal x2958=(cj1*sj2);
IkReal x2959=((1.0)*x2952);
IkReal x2960=(gconst95*x2952);
IkReal x2961=((1.0)*x2951);
IkReal x2962=(gconst95*x2961);
evalcond[0]=(((x2951*x2955))+(((-1.0)*r20*x2962))+(((-1.0)*r22*x2959)));
evalcond[1]=(((x2951*x2953))+cj0+(((-1.0)*r12*x2959))+(((-1.0)*r10*x2962)));
evalcond[2]=((((-1.0)*r02*x2959))+((x2951*x2957))+(((-1.0)*x2956))+(((-1.0)*r00*x2962)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2955*x2959))+(((-1.0)*r22*x2961))+((r20*x2960))+(((-1.0)*cj1*x2954)));
evalcond[4]=((((-1.0)*cj0*x2958))+(((-1.0)*cj0*sj1*x2954))+(((-1.0)*r02*x2961))+((r00*x2960))+(((-1.0)*x2957*x2959)));
evalcond[5]=((((-1.0)*x2953*x2959))+(((-1.0)*sj0*sj1*x2954))+((r10*x2960))+(((-1.0)*x2956*x2958))+(((-1.0)*r12*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2963=((1.0)*gconst95);
CheckValue<IkReal> x2964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2963))+(((-1.0)*gconst94*r10)))),-1);
if(!x2964.valid){
continue;
}
CheckValue<IkReal> x2965 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2964.value)))+(x2965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2966=IKsin(j4);
IkReal x2967=IKcos(j4);
IkReal x2968=(gconst94*r11);
IkReal x2969=((1.0)*cj2);
IkReal x2970=(gconst94*r21);
IkReal x2971=((1.0)*sj0);
IkReal x2972=(gconst94*r01);
IkReal x2973=(cj1*sj2);
IkReal x2974=((1.0)*x2967);
IkReal x2975=(gconst95*x2967);
IkReal x2976=((1.0)*x2966);
IkReal x2977=(gconst95*x2976);
evalcond[0]=((((-1.0)*r20*x2977))+((x2966*x2970))+(((-1.0)*r22*x2974)));
evalcond[1]=(cj0+(((-1.0)*r12*x2974))+((x2966*x2968))+(((-1.0)*r10*x2977)));
evalcond[2]=((((-1.0)*r02*x2974))+(((-1.0)*r00*x2977))+(((-1.0)*x2971))+((x2966*x2972)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2976))+(((-1.0)*cj1*x2969))+((r20*x2975))+(((-1.0)*x2970*x2974)));
evalcond[4]=((((-1.0)*x2972*x2974))+(((-1.0)*cj0*x2973))+(((-1.0)*r02*x2976))+((r00*x2975))+(((-1.0)*cj0*sj1*x2969)));
evalcond[5]=((((-1.0)*r12*x2976))+((r10*x2975))+(((-1.0)*x2968*x2974))+(((-1.0)*sj0*sj1*x2969))+(((-1.0)*x2971*x2973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2978=((1.0)*gconst95);
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2978)))),-1);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2979.value)))+(x2980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2981=IKsin(j4);
IkReal x2982=IKcos(j4);
IkReal x2983=(gconst94*r11);
IkReal x2984=((1.0)*cj2);
IkReal x2985=(gconst94*r21);
IkReal x2986=((1.0)*sj0);
IkReal x2987=(gconst94*r01);
IkReal x2988=(cj1*sj2);
IkReal x2989=((1.0)*x2982);
IkReal x2990=(gconst95*x2982);
IkReal x2991=((1.0)*x2981);
IkReal x2992=(gconst95*x2991);
evalcond[0]=(((x2981*x2985))+(((-1.0)*r22*x2989))+(((-1.0)*r20*x2992)));
evalcond[1]=(cj0+(((-1.0)*r12*x2989))+((x2981*x2983))+(((-1.0)*r10*x2992)));
evalcond[2]=((((-1.0)*x2986))+((x2981*x2987))+(((-1.0)*r02*x2989))+(((-1.0)*r00*x2992)));
evalcond[3]=((((-1.0)*r22*x2991))+(((-1.0)*x2985*x2989))+(((-1.0)*cj1*x2984))+((r20*x2990))+((sj1*sj2)));
evalcond[4]=(((r00*x2990))+(((-1.0)*cj0*x2988))+(((-1.0)*x2987*x2989))+(((-1.0)*cj0*sj1*x2984))+(((-1.0)*r02*x2991)));
evalcond[5]=((((-1.0)*r12*x2991))+(((-1.0)*sj0*sj1*x2984))+(((-1.0)*x2983*x2989))+(((-1.0)*x2986*x2988))+((r10*x2990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2993=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2993;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2994=((1.0)*cj5);
IkReal x2995=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2994)));
j4eval[0]=x2995;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2994)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2996=cj5*cj5;
IkReal x2997=r01*r01;
IkReal x2998=(r01*sj5);
IkReal x2999=(cj5*r00);
IkReal x3000=(((x2996*x2997))+(((-1.0)*(r02*r02)))+(((-1.0)*x2997))+(((-1.0)*x2996*(r00*r00)))+(((2.0)*x2998*x2999)));
j4eval[0]=x3000;
j4eval[1]=IKsign(x3000);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2998))+x2999))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3001=cj5*cj5;
IkReal x3002=r01*r01;
IkReal x3003=(r01*sj5);
IkReal x3004=(cj5*r00);
CheckValue<IkReal> x3005 = IKatan2WithCheck(IkReal(((((-1.0)*x3003))+x3004)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3005.valid){
continue;
}
CheckValue<IkReal> x3006=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3002))+(((2.0)*x3003*x3004))+(((-1.0)*(r02*r02)))+((x3001*x3002))+(((-1.0)*x3001*(r00*r00))))),-1);
if(!x3006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3005.value)+(((1.5707963267949)*(x3006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3007=IKsin(j4);
IkReal x3008=IKcos(j4);
IkReal x3009=(cj5*r10);
IkReal x3010=(r01*sj5);
IkReal x3011=((1.0)*cj2);
IkReal x3012=(cj5*r00);
IkReal x3013=(cj5*r20);
IkReal x3014=((1.0)*x3008);
IkReal x3015=((1.0)*x3007);
IkReal x3016=(sj5*x3007);
evalcond[0]=((((-1.0)*r22*x3014))+((r21*x3016))+(((-1.0)*x3013*x3015)));
evalcond[1]=((((-1.0)*r12*x3014))+((r11*x3016))+(((-1.0)*x3009*x3015)));
evalcond[2]=(((x3008*x3012))+(((-1.0)*r02*x3015))+(((-1.0)*x3010*x3014)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3014))+((x3007*x3010))+(((-1.0)*x3012*x3015)));
evalcond[4]=(((x3008*x3013))+(((-1.0)*r22*x3015))+(((-1.0)*r21*sj5*x3014))+((sj1*sj2))+(((-1.0)*cj1*x3011)));
evalcond[5]=(((x3008*x3009))+(((-1.0)*r11*sj5*x3014))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3015))+(((-1.0)*sj1*x3011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3017=((1.0)*cj5);
CheckValue<IkReal> x3018 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3018.valid){
continue;
}
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3017)))),-1);
if(!x3019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3018.value)+(((1.5707963267949)*(x3019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3020=IKsin(j4);
IkReal x3021=IKcos(j4);
IkReal x3022=(cj5*r10);
IkReal x3023=(r01*sj5);
IkReal x3024=((1.0)*cj2);
IkReal x3025=(cj5*r00);
IkReal x3026=(cj5*r20);
IkReal x3027=((1.0)*x3021);
IkReal x3028=((1.0)*x3020);
IkReal x3029=(sj5*x3020);
evalcond[0]=((((-1.0)*x3026*x3028))+((r21*x3029))+(((-1.0)*r22*x3027)));
evalcond[1]=((((-1.0)*r12*x3027))+((r11*x3029))+(((-1.0)*x3022*x3028)));
evalcond[2]=(((x3021*x3025))+(((-1.0)*x3023*x3027))+(((-1.0)*r02*x3028)));
evalcond[3]=((-1.0)+((x3020*x3023))+(((-1.0)*x3025*x3028))+(((-1.0)*r02*x3027)));
evalcond[4]=((((-1.0)*cj1*x3024))+((x3021*x3026))+((sj1*sj2))+(((-1.0)*r22*x3028))+(((-1.0)*r21*sj5*x3027)));
evalcond[5]=((((-1.0)*r12*x3028))+(((-1.0)*r11*sj5*x3027))+(((-1.0)*sj1*x3024))+((x3021*x3022))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3030.valid){
continue;
}
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3030.value)))+(x3031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3032=IKsin(j4);
IkReal x3033=IKcos(j4);
IkReal x3034=(cj5*r10);
IkReal x3035=(r01*sj5);
IkReal x3036=((1.0)*cj2);
IkReal x3037=(cj5*r00);
IkReal x3038=(cj5*r20);
IkReal x3039=((1.0)*x3033);
IkReal x3040=((1.0)*x3032);
IkReal x3041=(sj5*x3032);
evalcond[0]=(((r21*x3041))+(((-1.0)*x3038*x3040))+(((-1.0)*r22*x3039)));
evalcond[1]=((((-1.0)*x3034*x3040))+(((-1.0)*r12*x3039))+((r11*x3041)));
evalcond[2]=((((-1.0)*x3035*x3039))+((x3033*x3037))+(((-1.0)*r02*x3040)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3039))+((x3032*x3035))+(((-1.0)*x3037*x3040)));
evalcond[4]=((((-1.0)*cj1*x3036))+(((-1.0)*r21*sj5*x3039))+(((-1.0)*r22*x3040))+((sj1*sj2))+((x3033*x3038)));
evalcond[5]=((((-1.0)*r12*x3040))+(((-1.0)*cj1*sj2))+((x3033*x3034))+(((-1.0)*r11*sj5*x3039))+(((-1.0)*sj1*x3036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3042=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3042;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3043=((1.0)*cj5);
IkReal x3044=((((-1.0)*r21*x3043))+(((-1.0)*r20*sj5)));
j4eval[0]=x3044;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3043))+((r11*sj5))))));
j4eval[2]=IKsign(x3044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3045=cj5*cj5;
IkReal x3046=r01*r01;
IkReal x3047=(cj5*r00);
IkReal x3048=(r01*sj5);
IkReal x3049=((((-2.0)*x3047*x3048))+(((-1.0)*x3045*x3046))+x3046+((x3045*(r00*r00)))+(r02*r02));
j4eval[0]=x3049;
j4eval[1]=((IKabs(r02))+(IKabs((x3047+(((-1.0)*x3048))))));
j4eval[2]=IKsign(x3049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3050=cj5*cj5;
IkReal x3051=r01*r01;
IkReal x3052=(r01*sj5);
IkReal x3053=(cj5*r00);
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(IKsign((x3051+((x3050*(r00*r00)))+(((-1.0)*x3050*x3051))+(((-2.0)*x3052*x3053))+(r02*r02))),-1);
if(!x3054.valid){
continue;
}
CheckValue<IkReal> x3055 = IKatan2WithCheck(IkReal((x3053+(((-1.0)*x3052)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3054.value)))+(x3055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3056=IKsin(j4);
IkReal x3057=IKcos(j4);
IkReal x3058=(cj5*r10);
IkReal x3059=(r01*sj5);
IkReal x3060=(cj5*r00);
IkReal x3061=(cj5*r20);
IkReal x3062=((1.0)*x3057);
IkReal x3063=((1.0)*x3056);
IkReal x3064=(sj5*x3056);
evalcond[0]=((((-1.0)*r22*x3062))+(((-1.0)*x3061*x3063))+((r21*x3064)));
evalcond[1]=((((-1.0)*x3058*x3063))+(((-1.0)*r12*x3062))+((r11*x3064)));
evalcond[2]=((((-1.0)*r02*x3063))+((x3057*x3060))+(((-1.0)*x3059*x3062)));
evalcond[3]=((1.0)+(((-1.0)*x3060*x3063))+((x3056*x3059))+(((-1.0)*r02*x3062)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3062))+((cj1*sj2))+((x3057*x3058))+(((-1.0)*r12*x3063)));
evalcond[5]=((((-1.0)*r21*sj5*x3062))+(((-1.0)*r22*x3063))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3057*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3065=((1.0)*cj5);
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3065))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
CheckValue<IkReal> x3067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3065))+(((-1.0)*r20*sj5)))),-1);
if(!x3067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3066.value)+(((1.5707963267949)*(x3067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3068=IKsin(j4);
IkReal x3069=IKcos(j4);
IkReal x3070=(cj5*r10);
IkReal x3071=(r01*sj5);
IkReal x3072=(cj5*r00);
IkReal x3073=(cj5*r20);
IkReal x3074=((1.0)*x3069);
IkReal x3075=((1.0)*x3068);
IkReal x3076=(sj5*x3068);
evalcond[0]=((((-1.0)*r22*x3074))+(((-1.0)*x3073*x3075))+((r21*x3076)));
evalcond[1]=((((-1.0)*r12*x3074))+(((-1.0)*x3070*x3075))+((r11*x3076)));
evalcond[2]=((((-1.0)*r02*x3075))+(((-1.0)*x3071*x3074))+((x3069*x3072)));
evalcond[3]=((1.0)+(((-1.0)*x3072*x3075))+(((-1.0)*r02*x3074))+((x3068*x3071)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3074))+(((-1.0)*r12*x3075))+((x3069*x3070)));
evalcond[5]=((((-1.0)*r21*sj5*x3074))+(((-1.0)*r22*x3075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3069*x3073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3077 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3077.valid){
continue;
}
CheckValue<IkReal> x3078=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3077.value)+(((1.5707963267949)*(x3078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3079=IKsin(j4);
IkReal x3080=IKcos(j4);
IkReal x3081=(cj5*r10);
IkReal x3082=(r01*sj5);
IkReal x3083=(cj5*r00);
IkReal x3084=(cj5*r20);
IkReal x3085=((1.0)*x3080);
IkReal x3086=((1.0)*x3079);
IkReal x3087=(sj5*x3079);
evalcond[0]=(((r21*x3087))+(((-1.0)*r22*x3085))+(((-1.0)*x3084*x3086)));
evalcond[1]=(((r11*x3087))+(((-1.0)*r12*x3085))+(((-1.0)*x3081*x3086)));
evalcond[2]=(((x3080*x3083))+(((-1.0)*x3082*x3085))+(((-1.0)*r02*x3086)));
evalcond[3]=((1.0)+(((-1.0)*x3083*x3086))+(((-1.0)*r02*x3085))+((x3079*x3082)));
evalcond[4]=(((cj2*sj1))+((x3080*x3081))+((cj1*sj2))+(((-1.0)*r12*x3086))+(((-1.0)*r11*sj5*x3085)));
evalcond[5]=(((x3080*x3084))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3085))+(((-1.0)*r22*x3086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3088=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3088);
rxp1_1=(px*r21);
rxp1_2=(r11*x3088);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3089=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3089);
rxp1_1=(px*r21);
rxp1_2=(r11*x3089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3090=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3090);
rxp1_1=(px*r21);
rxp1_2=(r11*x3090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3093=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3093.valid){
continue;
}
IkReal x3091=x3093.value;
IkReal x3092=(sj0*x3091);
cj4array[0]=(((cj2*sj1*x3092))+((cj1*sj2*x3092)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3094=IKsin(j4);
IkReal x3095=IKcos(j4);
IkReal x3096=(cj5*r20);
IkReal x3097=(r21*sj5);
IkReal x3098=((1.0)*x3094);
IkReal x3099=((1.0)*x3095);
evalcond[0]=((-1.0)*r02*x3094);
evalcond[1]=((((-1.0)*r02*x3099))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x3096*x3098))+((x3094*x3097)));
evalcond[3]=(((r11*sj5*x3094))+(((-1.0)*cj5*r10*x3098)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3095*x3096))+(((-1.0)*x3097*x3099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3101=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3101.valid){
continue;
}
IkReal x3100=x3101.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3100))+((cj1*cj2*x3100)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3102=IKsin(j4);
IkReal x3103=IKcos(j4);
IkReal x3104=(r11*sj5);
IkReal x3105=((1.0)*sj0);
IkReal x3106=((1.0)*x3103);
IkReal x3107=((1.0)*cj5*x3102);
evalcond[0]=((-1.0)*r02*x3102);
evalcond[1]=((((-1.0)*x3105))+(((-1.0)*r02*x3106)));
evalcond[2]=((((-1.0)*r20*x3107))+((r21*sj5*x3102)));
evalcond[3]=((((-1.0)*r10*x3107))+((x3102*x3104)));
evalcond[4]=((((-1.0)*cj1*sj2*x3105))+(((-1.0)*cj2*sj1*x3105))+((cj5*r10*x3103))+(((-1.0)*x3104*x3106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3108=IKPowWithIntegerCheck(r02,-1);
if(!x3108.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3108.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3109=IKsin(j4);
IkReal x3110=IKcos(j4);
IkReal x3111=((1.0)*sj0);
IkReal x3112=(cj5*x3110);
IkReal x3113=(sj5*x3109);
IkReal x3114=((1.0)*sj5*x3110);
IkReal x3115=((1.0)*cj5*x3109);
evalcond[0]=((-1.0)*r02*x3109);
evalcond[1]=((((-1.0)*r20*x3115))+((r21*x3113)));
evalcond[2]=((((-1.0)*r10*x3115))+((r11*x3113)));
evalcond[3]=((((-1.0)*r21*x3114))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3112)));
evalcond[4]=((((-1.0)*cj1*sj2*x3111))+(((-1.0)*cj2*sj1*x3111))+(((-1.0)*r11*x3114))+((r10*x3112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3116=((1.0)*sj0);
IkReal x3117=((1.0)*cj0);
CheckValue<IkReal> x3118=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3118.valid){
continue;
}
CheckValue<IkReal> x3119 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3117))+(((-1.0)*r12*x3116)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3116))+(((-1.0)*r01*sj5*x3117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3118.value)))+(x3119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3120=IKsin(j4);
IkReal x3121=IKcos(j4);
IkReal x3122=(cj5*r10);
IkReal x3123=(r01*sj5);
IkReal x3124=((1.0)*cj2);
IkReal x3125=(cj5*r00);
IkReal x3126=((1.0)*sj0);
IkReal x3127=(cj5*r20);
IkReal x3128=(cj1*sj2);
IkReal x3129=((1.0)*x3121);
IkReal x3130=((1.0)*x3120);
IkReal x3131=(sj5*x3120);
evalcond[0]=(((r21*x3131))+(((-1.0)*r22*x3129))+(((-1.0)*x3127*x3130)));
evalcond[1]=(cj0+(((-1.0)*x3122*x3130))+(((-1.0)*r12*x3129))+((r11*x3131)));
evalcond[2]=(((x3120*x3123))+(((-1.0)*x3125*x3130))+(((-1.0)*r02*x3129))+(((-1.0)*x3126)));
evalcond[3]=((((-1.0)*r21*sj5*x3129))+((sj1*sj2))+((x3121*x3127))+(((-1.0)*cj1*x3124))+(((-1.0)*r22*x3130)));
evalcond[4]=((((-1.0)*cj0*sj1*x3124))+(((-1.0)*r02*x3130))+(((-1.0)*cj0*x3128))+((x3121*x3125))+(((-1.0)*x3123*x3129)));
evalcond[5]=(((x3121*x3122))+(((-1.0)*r12*x3130))+(((-1.0)*x3126*x3128))+(((-1.0)*r11*sj5*x3129))+(((-1.0)*sj0*sj1*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3132=((1.0)*cj5);
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3132)))),-1);
if(!x3133.valid){
continue;
}
CheckValue<IkReal> x3134 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3132))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3133.value)))+(x3134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3135=IKsin(j4);
IkReal x3136=IKcos(j4);
IkReal x3137=(cj5*r10);
IkReal x3138=(r01*sj5);
IkReal x3139=((1.0)*cj2);
IkReal x3140=(cj5*r00);
IkReal x3141=((1.0)*sj0);
IkReal x3142=(cj5*r20);
IkReal x3143=(cj1*sj2);
IkReal x3144=((1.0)*x3136);
IkReal x3145=((1.0)*x3135);
IkReal x3146=(sj5*x3135);
evalcond[0]=((((-1.0)*r22*x3144))+(((-1.0)*x3142*x3145))+((r21*x3146)));
evalcond[1]=((((-1.0)*r12*x3144))+cj0+((r11*x3146))+(((-1.0)*x3137*x3145)));
evalcond[2]=((((-1.0)*x3141))+(((-1.0)*x3140*x3145))+(((-1.0)*r02*x3144))+((x3135*x3138)));
evalcond[3]=((((-1.0)*r22*x3145))+((sj1*sj2))+(((-1.0)*r21*sj5*x3144))+(((-1.0)*cj1*x3139))+((x3136*x3142)));
evalcond[4]=((((-1.0)*cj0*sj1*x3139))+(((-1.0)*r02*x3145))+(((-1.0)*cj0*x3143))+(((-1.0)*x3138*x3144))+((x3136*x3140)));
evalcond[5]=((((-1.0)*r12*x3145))+(((-1.0)*x3141*x3143))+((x3136*x3137))+(((-1.0)*sj0*sj1*x3139))+(((-1.0)*r11*sj5*x3144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3147=((1.0)*cj5);
CheckValue<IkReal> x3148 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3148.valid){
continue;
}
CheckValue<IkReal> x3149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3147)))),-1);
if(!x3149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3148.value)+(((1.5707963267949)*(x3149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3150=IKsin(j4);
IkReal x3151=IKcos(j4);
IkReal x3152=(cj5*r10);
IkReal x3153=(r01*sj5);
IkReal x3154=((1.0)*cj2);
IkReal x3155=(cj5*r00);
IkReal x3156=((1.0)*sj0);
IkReal x3157=(cj5*r20);
IkReal x3158=(cj1*sj2);
IkReal x3159=((1.0)*x3151);
IkReal x3160=((1.0)*x3150);
IkReal x3161=(sj5*x3150);
evalcond[0]=((((-1.0)*r22*x3159))+(((-1.0)*x3157*x3160))+((r21*x3161)));
evalcond[1]=((((-1.0)*x3152*x3160))+cj0+((r11*x3161))+(((-1.0)*r12*x3159)));
evalcond[2]=((((-1.0)*x3156))+((x3150*x3153))+(((-1.0)*r02*x3159))+(((-1.0)*x3155*x3160)));
evalcond[3]=(((x3151*x3157))+(((-1.0)*cj1*x3154))+((sj1*sj2))+(((-1.0)*r21*sj5*x3159))+(((-1.0)*r22*x3160)));
evalcond[4]=(((x3151*x3155))+(((-1.0)*x3153*x3159))+(((-1.0)*cj0*sj1*x3154))+(((-1.0)*r02*x3160))+(((-1.0)*cj0*x3158)));
evalcond[5]=((((-1.0)*r12*x3160))+((x3151*x3152))+(((-1.0)*sj0*sj1*x3154))+(((-1.0)*x3156*x3158))+(((-1.0)*r11*sj5*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3162=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3162;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3162);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3163=r21*r21;
IkReal x3164=cj5*cj5;
IkReal x3165=(sj1*sj2);
IkReal x3166=(r21*sj5);
IkReal x3167=(cj5*r20);
IkReal x3168=(cj1*cj2);
IkReal x3169=((((-1.0)*x3163))+((x3163*x3164))+(((2.0)*x3166*x3167))+(((-1.0)*(r22*r22)))+(((-1.0)*x3164*(r20*r20))));
j4eval[0]=x3169;
j4eval[1]=((IKabs((((r22*x3165))+(((-1.0)*r22*x3168)))))+(IKabs(((((-1.0)*x3165*x3167))+((x3167*x3168))+(((-1.0)*x3166*x3168))+((x3165*x3166))))));
j4eval[2]=IKsign(x3169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3170=IKcos(j0);
IkReal x3171=IKsin(j0);
evalcond[0]=((((0.24365)*x3170))+(((-0.11235)*x3171))+(((-1.0)*px)));
evalcond[1]=((((0.24365)*x3171))+(((0.11235)*x3170))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3172=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3172;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3173=((1.0)*cj5);
IkReal x3174=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3173)));
j4eval[0]=x3174;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3173)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3175=((1.0)*cj5);
IkReal x3176=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3175)));
j4eval[0]=x3176;
j4eval[1]=IKsign(x3176);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3175))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3177=((1.0)*cj5);
CheckValue<IkReal> x3178 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3177))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3178.valid){
continue;
}
CheckValue<IkReal> x3179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3177)))),-1);
if(!x3179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3178.value)+(((1.5707963267949)*(x3179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3180=IKcos(j4);
IkReal x3181=IKsin(j4);
IkReal x3182=((1.0)*sj0);
IkReal x3183=(cj5*r00);
IkReal x3184=(cj5*r10);
IkReal x3185=(cj5*r20);
IkReal x3186=((1.0)*x3180);
IkReal x3187=((1.0)*x3181);
IkReal x3188=(sj5*x3180);
IkReal x3189=(sj5*x3181);
evalcond[0]=(((r22*x3181))+(((-1.0)*x3185*x3186))+((r21*x3188)));
evalcond[1]=((((-1.0)*r22*x3186))+(((-1.0)*x3185*x3187))+((r21*x3189)));
evalcond[2]=((((-1.0)*x3184*x3187))+cj0+((r11*x3189))+(((-1.0)*r12*x3186)));
evalcond[3]=((((-1.0)*x3183*x3186))+((r01*x3188))+(((-1.0)*cj0))+((r02*x3181)));
evalcond[4]=((((-1.0)*x3184*x3186))+((r12*x3181))+((r11*x3188))+(((-1.0)*x3182)));
evalcond[5]=((((-1.0)*x3183*x3187))+(((-1.0)*r02*x3186))+((r01*x3189))+(((-1.0)*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3190=((1.0)*cj5);
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
CheckValue<IkReal> x3192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3190))+(((-1.0)*r00*sj5)))),-1);
if(!x3192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3191.value)+(((1.5707963267949)*(x3192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3193=IKcos(j4);
IkReal x3194=IKsin(j4);
IkReal x3195=((1.0)*sj0);
IkReal x3196=(cj5*r00);
IkReal x3197=(cj5*r10);
IkReal x3198=(cj5*r20);
IkReal x3199=((1.0)*x3193);
IkReal x3200=((1.0)*x3194);
IkReal x3201=(sj5*x3193);
IkReal x3202=(sj5*x3194);
evalcond[0]=((((-1.0)*x3198*x3199))+((r22*x3194))+((r21*x3201)));
evalcond[1]=((((-1.0)*r22*x3199))+((r21*x3202))+(((-1.0)*x3198*x3200)));
evalcond[2]=(cj0+((r11*x3202))+(((-1.0)*x3197*x3200))+(((-1.0)*r12*x3199)));
evalcond[3]=((((-1.0)*x3196*x3199))+((r01*x3201))+((r02*x3194))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3197*x3199))+((r11*x3201))+((r12*x3194))+(((-1.0)*x3195)));
evalcond[5]=((((-1.0)*x3196*x3200))+((r01*x3202))+(((-1.0)*r02*x3199))+(((-1.0)*x3195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3203.value)+(((1.5707963267949)*(x3204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3205=IKcos(j4);
IkReal x3206=IKsin(j4);
IkReal x3207=((1.0)*sj0);
IkReal x3208=(cj5*r00);
IkReal x3209=(cj5*r10);
IkReal x3210=(cj5*r20);
IkReal x3211=((1.0)*x3205);
IkReal x3212=((1.0)*x3206);
IkReal x3213=(sj5*x3205);
IkReal x3214=(sj5*x3206);
evalcond[0]=(((r22*x3206))+(((-1.0)*x3210*x3211))+((r21*x3213)));
evalcond[1]=((((-1.0)*x3210*x3212))+((r21*x3214))+(((-1.0)*r22*x3211)));
evalcond[2]=(cj0+(((-1.0)*x3209*x3212))+((r11*x3214))+(((-1.0)*r12*x3211)));
evalcond[3]=(((r01*x3213))+(((-1.0)*x3208*x3211))+((r02*x3206))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3209*x3211))+((r12*x3206))+((r11*x3213))+(((-1.0)*x3207)));
evalcond[5]=(((r01*x3214))+(((-1.0)*x3207))+(((-1.0)*x3208*x3212))+(((-1.0)*r02*x3211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3215=IKcos(j0);
IkReal x3216=IKsin(j0);
evalcond[0]=((((-0.11235)*x3216))+(((0.24365)*x3215))+(((-1.0)*px)));
evalcond[1]=((((0.24365)*x3216))+(((-1.0)*py))+(((0.11235)*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3217=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3217;
j4eval[1]=IKsign(x3217);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3218=((1.0)*cj5);
IkReal x3219=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3218)));
j4eval[0]=x3219;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3218)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3220=cj5*cj5;
IkReal x3221=((1.0)*r20);
IkReal x3222=(r01*r21);
IkReal x3223=(r21*sj5);
IkReal x3224=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3223))+((x3220*x3222))+(((-1.0)*x3222))+(((-1.0)*r00*x3220*x3221)));
j4eval[0]=x3224;
j4eval[1]=((IKabs((((cj0*x3223))+(((-1.0)*cj0*cj5*x3221)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3225=cj5*cj5;
IkReal x3226=((1.0)*r20);
IkReal x3227=(r01*r21);
IkReal x3228=(r21*sj5);
CheckValue<IkReal> x3229 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3228))+(((-1.0)*cj0*cj5*x3226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3229.valid){
continue;
}
CheckValue<IkReal> x3230=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3228))+(((-1.0)*x3227))+((x3225*x3227))+(((-1.0)*r00*x3225*x3226)))),-1);
if(!x3230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3229.value)+(((1.5707963267949)*(x3230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3231=IKcos(j4);
IkReal x3232=IKsin(j4);
IkReal x3233=(cj5*r00);
IkReal x3234=(cj5*r10);
IkReal x3235=(cj5*r20);
IkReal x3236=((1.0)*x3231);
IkReal x3237=((1.0)*x3232);
IkReal x3238=(sj5*x3231);
IkReal x3239=(sj5*x3232);
evalcond[0]=(((r22*x3232))+(((-1.0)*x3235*x3236))+((r21*x3238)));
evalcond[1]=((((-1.0)*x3235*x3237))+(((-1.0)*r22*x3236))+((r21*x3239)));
evalcond[2]=(cj0+((r01*x3238))+(((-1.0)*x3233*x3236))+((r02*x3232)));
evalcond[3]=(sj0+((r11*x3238))+((r12*x3232))+(((-1.0)*x3234*x3236)));
evalcond[4]=(cj0+((r11*x3239))+(((-1.0)*r12*x3236))+(((-1.0)*x3234*x3237)));
evalcond[5]=((((-1.0)*r02*x3236))+(((-1.0)*sj0))+((r01*x3239))+(((-1.0)*x3233*x3237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3240=((1.0)*cj5);
CheckValue<IkReal> x3241 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3240)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3241.valid){
continue;
}
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3240)))),-1);
if(!x3242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3241.value)+(((1.5707963267949)*(x3242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3243=IKcos(j4);
IkReal x3244=IKsin(j4);
IkReal x3245=(cj5*r00);
IkReal x3246=(cj5*r10);
IkReal x3247=(cj5*r20);
IkReal x3248=((1.0)*x3243);
IkReal x3249=((1.0)*x3244);
IkReal x3250=(sj5*x3243);
IkReal x3251=(sj5*x3244);
evalcond[0]=(((r22*x3244))+((r21*x3250))+(((-1.0)*x3247*x3248)));
evalcond[1]=(((r21*x3251))+(((-1.0)*x3247*x3249))+(((-1.0)*r22*x3248)));
evalcond[2]=(cj0+((r01*x3250))+(((-1.0)*x3245*x3248))+((r02*x3244)));
evalcond[3]=(sj0+((r11*x3250))+((r12*x3244))+(((-1.0)*x3246*x3248)));
evalcond[4]=(cj0+((r11*x3251))+(((-1.0)*r12*x3248))+(((-1.0)*x3246*x3249)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3251))+(((-1.0)*x3245*x3249))+(((-1.0)*r02*x3248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3252 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3252.valid){
continue;
}
CheckValue<IkReal> x3253=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3252.value)+(((1.5707963267949)*(x3253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3254=IKcos(j4);
IkReal x3255=IKsin(j4);
IkReal x3256=(cj5*r00);
IkReal x3257=(cj5*r10);
IkReal x3258=(cj5*r20);
IkReal x3259=((1.0)*x3254);
IkReal x3260=((1.0)*x3255);
IkReal x3261=(sj5*x3254);
IkReal x3262=(sj5*x3255);
evalcond[0]=(((r21*x3261))+(((-1.0)*x3258*x3259))+((r22*x3255)));
evalcond[1]=(((r21*x3262))+(((-1.0)*r22*x3259))+(((-1.0)*x3258*x3260)));
evalcond[2]=(((r01*x3261))+cj0+((r02*x3255))+(((-1.0)*x3256*x3259)));
evalcond[3]=(((r12*x3255))+sj0+(((-1.0)*x3257*x3259))+((r11*x3261)));
evalcond[4]=((((-1.0)*x3257*x3260))+cj0+((r11*x3262))+(((-1.0)*r12*x3259)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3259))+((r01*x3262))+(((-1.0)*x3256*x3260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3263=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3263;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3264=((1.0)*cj5);
IkReal x3265=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3264)));
j4eval[0]=x3265;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3264))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3266=((1.0)*cj5);
IkReal x3267=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3266)));
j4eval[0]=x3267;
j4eval[1]=IKsign(x3267);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3266)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3268=((1.0)*cj5);
CheckValue<IkReal> x3269 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3268)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3269.valid){
continue;
}
CheckValue<IkReal> x3270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3268)))),-1);
if(!x3270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3269.value)+(((1.5707963267949)*(x3270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3271=IKcos(j4);
IkReal x3272=IKsin(j4);
IkReal x3273=((1.0)*sj0);
IkReal x3274=(cj5*r00);
IkReal x3275=(cj5*r10);
IkReal x3276=(cj5*r20);
IkReal x3277=((1.0)*x3271);
IkReal x3278=((1.0)*x3272);
IkReal x3279=(sj5*x3271);
IkReal x3280=(sj5*x3272);
evalcond[0]=((((-1.0)*x3276*x3277))+((r21*x3279))+((r22*x3272)));
evalcond[1]=((((-1.0)*x3276*x3278))+((r21*x3280))+(((-1.0)*r22*x3277)));
evalcond[2]=((((-1.0)*r12*x3277))+cj0+(((-1.0)*x3275*x3278))+((r11*x3280)));
evalcond[3]=(((r01*x3279))+(((-1.0)*x3274*x3277))+((r02*x3272))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3275*x3277))+(((-1.0)*x3273))+((r11*x3279))+((r12*x3272)));
evalcond[5]=((((-1.0)*x3274*x3278))+(((-1.0)*x3273))+(((-1.0)*r02*x3277))+((r01*x3280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3281=((1.0)*cj5);
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3281)))),-1);
if(!x3282.valid){
continue;
}
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3281))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3282.value)))+(x3283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3284=IKcos(j4);
IkReal x3285=IKsin(j4);
IkReal x3286=((1.0)*sj0);
IkReal x3287=(cj5*r00);
IkReal x3288=(cj5*r10);
IkReal x3289=(cj5*r20);
IkReal x3290=((1.0)*x3284);
IkReal x3291=((1.0)*x3285);
IkReal x3292=(sj5*x3284);
IkReal x3293=(sj5*x3285);
evalcond[0]=(((r22*x3285))+((r21*x3292))+(((-1.0)*x3289*x3290)));
evalcond[1]=((((-1.0)*r22*x3290))+((r21*x3293))+(((-1.0)*x3289*x3291)));
evalcond[2]=((((-1.0)*r12*x3290))+cj0+(((-1.0)*x3288*x3291))+((r11*x3293)));
evalcond[3]=(((r01*x3292))+((r02*x3285))+(((-1.0)*x3287*x3290))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3286))+(((-1.0)*x3288*x3290))+((r11*x3292))+((r12*x3285)));
evalcond[5]=(((r01*x3293))+(((-1.0)*x3286))+(((-1.0)*x3287*x3291))+(((-1.0)*r02*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3294 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3294.valid){
continue;
}
CheckValue<IkReal> x3295=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3294.value)+(((1.5707963267949)*(x3295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3296=IKcos(j4);
IkReal x3297=IKsin(j4);
IkReal x3298=((1.0)*sj0);
IkReal x3299=(cj5*r00);
IkReal x3300=(cj5*r10);
IkReal x3301=(cj5*r20);
IkReal x3302=((1.0)*x3296);
IkReal x3303=((1.0)*x3297);
IkReal x3304=(sj5*x3296);
IkReal x3305=(sj5*x3297);
evalcond[0]=(((r21*x3304))+((r22*x3297))+(((-1.0)*x3301*x3302)));
evalcond[1]=(((r21*x3305))+(((-1.0)*r22*x3302))+(((-1.0)*x3301*x3303)));
evalcond[2]=(cj0+((r11*x3305))+(((-1.0)*r12*x3302))+(((-1.0)*x3300*x3303)));
evalcond[3]=(((r02*x3297))+((r01*x3304))+(((-1.0)*x3299*x3302))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3298))+((r11*x3304))+((r12*x3297))+(((-1.0)*x3300*x3302)));
evalcond[5]=((((-1.0)*x3298))+(((-1.0)*r02*x3302))+((r01*x3305))+(((-1.0)*x3299*x3303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3306=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3306;
j4eval[1]=IKsign(x3306);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3307=((1.0)*cj5);
IkReal x3308=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3307)));
j4eval[0]=x3308;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3307))))));
j4eval[2]=IKsign(x3308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3309=cj5*cj5;
IkReal x3310=((1.0)*r20);
IkReal x3311=(r01*r21);
IkReal x3312=(r21*sj5);
IkReal x3313=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3309*x3310))+(((-1.0)*r02*r22))+((cj5*r00*x3312))+(((-1.0)*x3311))+((x3309*x3311)));
j4eval[0]=x3313;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3312))+(((-1.0)*cj0*cj5*x3310))))));
j4eval[2]=IKsign(x3313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3314=cj5*cj5;
IkReal x3315=((1.0)*r20);
IkReal x3316=(r01*r21);
IkReal x3317=(r21*sj5);
CheckValue<IkReal> x3318 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3317))+(((-1.0)*cj0*cj5*x3315)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3317))+(((-1.0)*r00*x3314*x3315))+(((-1.0)*x3316))+((x3314*x3316)))),-1);
if(!x3319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3318.value)+(((1.5707963267949)*(x3319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3320=IKcos(j4);
IkReal x3321=IKsin(j4);
IkReal x3322=(cj5*r00);
IkReal x3323=(cj5*r10);
IkReal x3324=(cj5*r20);
IkReal x3325=((1.0)*x3320);
IkReal x3326=((1.0)*x3321);
IkReal x3327=(sj5*x3320);
IkReal x3328=(sj5*x3321);
evalcond[0]=(((r22*x3321))+(((-1.0)*x3324*x3325))+((r21*x3327)));
evalcond[1]=((((-1.0)*x3324*x3326))+((r21*x3328))+(((-1.0)*r22*x3325)));
evalcond[2]=(cj0+((r01*x3327))+(((-1.0)*x3322*x3325))+((r02*x3321)));
evalcond[3]=(((r12*x3321))+sj0+((r11*x3327))+(((-1.0)*x3323*x3325)));
evalcond[4]=(cj0+((r11*x3328))+(((-1.0)*x3323*x3326))+(((-1.0)*r12*x3325)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3325))+((r01*x3328))+(((-1.0)*x3322*x3326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3329=((1.0)*cj5);
CheckValue<IkReal> x3330 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3329)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3330.valid){
continue;
}
CheckValue<IkReal> x3331=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3329)))),-1);
if(!x3331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3330.value)+(((1.5707963267949)*(x3331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3332=IKcos(j4);
IkReal x3333=IKsin(j4);
IkReal x3334=(cj5*r00);
IkReal x3335=(cj5*r10);
IkReal x3336=(cj5*r20);
IkReal x3337=((1.0)*x3332);
IkReal x3338=((1.0)*x3333);
IkReal x3339=(sj5*x3332);
IkReal x3340=(sj5*x3333);
evalcond[0]=(((r21*x3339))+((r22*x3333))+(((-1.0)*x3336*x3337)));
evalcond[1]=((((-1.0)*r22*x3337))+((r21*x3340))+(((-1.0)*x3336*x3338)));
evalcond[2]=(cj0+((r02*x3333))+(((-1.0)*x3334*x3337))+((r01*x3339)));
evalcond[3]=(sj0+((r12*x3333))+((r11*x3339))+(((-1.0)*x3335*x3337)));
evalcond[4]=(cj0+(((-1.0)*x3335*x3338))+((r11*x3340))+(((-1.0)*r12*x3337)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3337))+(((-1.0)*x3334*x3338))+((r01*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3341 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3341.valid){
continue;
}
CheckValue<IkReal> x3342=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3341.value)+(((1.5707963267949)*(x3342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3343=IKcos(j4);
IkReal x3344=IKsin(j4);
IkReal x3345=(cj5*r00);
IkReal x3346=(cj5*r10);
IkReal x3347=(cj5*r20);
IkReal x3348=((1.0)*x3343);
IkReal x3349=((1.0)*x3344);
IkReal x3350=(sj5*x3343);
IkReal x3351=(sj5*x3344);
evalcond[0]=((((-1.0)*x3347*x3348))+((r22*x3344))+((r21*x3350)));
evalcond[1]=((((-1.0)*x3347*x3349))+((r21*x3351))+(((-1.0)*r22*x3348)));
evalcond[2]=(cj0+((r01*x3350))+((r02*x3344))+(((-1.0)*x3345*x3348)));
evalcond[3]=(sj0+((r11*x3350))+(((-1.0)*x3346*x3348))+((r12*x3344)));
evalcond[4]=(cj0+((r11*x3351))+(((-1.0)*x3346*x3349))+(((-1.0)*r12*x3348)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3351))+(((-1.0)*r02*x3348))+(((-1.0)*x3345*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3352=IKcos(j0);
IkReal x3353=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.24365)*x3352))+(((-0.11235)*x3353)));
evalcond[1]=((((0.11235)*x3352))+(((-1.0)*py))+(((-0.24365)*x3353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3354=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3354;
j4eval[1]=IKsign(x3354);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3355=((1.0)*cj5);
IkReal x3356=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3355)));
j4eval[0]=x3356;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3355))))));
j4eval[2]=IKsign(x3356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3357=cj5*cj5;
IkReal x3358=((1.0)*r20);
IkReal x3359=(r01*r21);
IkReal x3360=(r21*sj5);
IkReal x3361=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3357*x3358))+(((-1.0)*r02*r22))+((cj5*r00*x3360))+((x3357*x3359))+(((-1.0)*x3359)));
j4eval[0]=x3361;
j4eval[1]=((IKabs((((cj0*x3360))+(((-1.0)*cj0*cj5*x3358)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3361);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3362=cj5*cj5;
IkReal x3363=((1.0)*r20);
IkReal x3364=(r01*r21);
IkReal x3365=(r21*sj5);
CheckValue<IkReal> x3366 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3365))+(((-1.0)*cj0*cj5*x3363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3366.valid){
continue;
}
CheckValue<IkReal> x3367=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3362*x3364))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3362*x3363))+(((-1.0)*x3364))+((cj5*r00*x3365)))),-1);
if(!x3367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3366.value)+(((1.5707963267949)*(x3367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3368=IKcos(j4);
IkReal x3369=IKsin(j4);
IkReal x3370=(cj5*r00);
IkReal x3371=(cj5*r10);
IkReal x3372=(cj5*r20);
IkReal x3373=((1.0)*x3368);
IkReal x3374=((1.0)*x3369);
IkReal x3375=(sj5*x3368);
IkReal x3376=(sj5*x3369);
evalcond[0]=(((r22*x3369))+((r21*x3375))+(((-1.0)*x3372*x3373)));
evalcond[1]=((((-1.0)*r22*x3373))+((r21*x3376))+(((-1.0)*x3372*x3374)));
evalcond[2]=(((r01*x3375))+((r02*x3369))+cj0+(((-1.0)*x3370*x3373)));
evalcond[3]=(sj0+(((-1.0)*x3371*x3373))+((r12*x3369))+((r11*x3375)));
evalcond[4]=(cj0+(((-1.0)*x3371*x3374))+(((-1.0)*r12*x3373))+((r11*x3376)));
evalcond[5]=(((r01*x3376))+(((-1.0)*sj0))+(((-1.0)*x3370*x3374))+(((-1.0)*r02*x3373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3377=((1.0)*cj5);
CheckValue<IkReal> x3378 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3377)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3378.valid){
continue;
}
CheckValue<IkReal> x3379=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3377)))),-1);
if(!x3379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3378.value)+(((1.5707963267949)*(x3379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3380=IKcos(j4);
IkReal x3381=IKsin(j4);
IkReal x3382=(cj5*r00);
IkReal x3383=(cj5*r10);
IkReal x3384=(cj5*r20);
IkReal x3385=((1.0)*x3380);
IkReal x3386=((1.0)*x3381);
IkReal x3387=(sj5*x3380);
IkReal x3388=(sj5*x3381);
evalcond[0]=((((-1.0)*x3384*x3385))+((r21*x3387))+((r22*x3381)));
evalcond[1]=((((-1.0)*r22*x3385))+(((-1.0)*x3384*x3386))+((r21*x3388)));
evalcond[2]=(((r01*x3387))+cj0+(((-1.0)*x3382*x3385))+((r02*x3381)));
evalcond[3]=(sj0+(((-1.0)*x3383*x3385))+((r12*x3381))+((r11*x3387)));
evalcond[4]=(cj0+(((-1.0)*x3383*x3386))+((r11*x3388))+(((-1.0)*r12*x3385)));
evalcond[5]=(((r01*x3388))+(((-1.0)*sj0))+(((-1.0)*x3382*x3386))+(((-1.0)*r02*x3385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3389.value)+(((1.5707963267949)*(x3390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3391=IKcos(j4);
IkReal x3392=IKsin(j4);
IkReal x3393=(cj5*r00);
IkReal x3394=(cj5*r10);
IkReal x3395=(cj5*r20);
IkReal x3396=((1.0)*x3391);
IkReal x3397=((1.0)*x3392);
IkReal x3398=(sj5*x3391);
IkReal x3399=(sj5*x3392);
evalcond[0]=((((-1.0)*x3395*x3396))+((r21*x3398))+((r22*x3392)));
evalcond[1]=((((-1.0)*r22*x3396))+(((-1.0)*x3395*x3397))+((r21*x3399)));
evalcond[2]=(cj0+((r01*x3398))+((r02*x3392))+(((-1.0)*x3393*x3396)));
evalcond[3]=(sj0+(((-1.0)*x3394*x3396))+((r11*x3398))+((r12*x3392)));
evalcond[4]=((((-1.0)*x3394*x3397))+cj0+((r11*x3399))+(((-1.0)*r12*x3396)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3399))+(((-1.0)*r02*x3396))+(((-1.0)*x3393*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3400=IKcos(j0);
IkReal x3401=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x3401))+(((-0.24365)*x3400)));
evalcond[1]=((((0.11235)*x3400))+(((-1.0)*py))+(((-0.24365)*x3401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3402=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3402;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3403=((1.0)*cj5);
IkReal x3404=((((-1.0)*r01*x3403))+(((-1.0)*r00*sj5)));
j4eval[0]=x3404;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3403)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3405=((1.0)*cj5);
IkReal x3406=((((-1.0)*r01*x3405))+(((-1.0)*r00*sj5)));
j4eval[0]=x3406;
j4eval[1]=IKsign(x3406);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3405))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3407=((1.0)*cj5);
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3407))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3407))+(((-1.0)*r00*sj5)))),-1);
if(!x3409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3408.value)+(((1.5707963267949)*(x3409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3410=IKcos(j4);
IkReal x3411=IKsin(j4);
IkReal x3412=((1.0)*sj0);
IkReal x3413=(cj5*r00);
IkReal x3414=(cj5*r10);
IkReal x3415=(cj5*r20);
IkReal x3416=((1.0)*x3410);
IkReal x3417=((1.0)*x3411);
IkReal x3418=(sj5*x3410);
IkReal x3419=(sj5*x3411);
evalcond[0]=((((-1.0)*x3415*x3416))+((r22*x3411))+((r21*x3418)));
evalcond[1]=((((-1.0)*r22*x3416))+(((-1.0)*x3415*x3417))+((r21*x3419)));
evalcond[2]=(cj0+(((-1.0)*x3414*x3417))+((r11*x3419))+(((-1.0)*r12*x3416)));
evalcond[3]=(((r02*x3411))+((r01*x3418))+(((-1.0)*x3413*x3416))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3411))+(((-1.0)*x3414*x3416))+((r11*x3418))+(((-1.0)*x3412)));
evalcond[5]=((((-1.0)*r02*x3416))+((r01*x3419))+(((-1.0)*x3413*x3417))+(((-1.0)*x3412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3420=((1.0)*cj5);
CheckValue<IkReal> x3421 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3421.valid){
continue;
}
CheckValue<IkReal> x3422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3420)))),-1);
if(!x3422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3421.value)+(((1.5707963267949)*(x3422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3423=IKcos(j4);
IkReal x3424=IKsin(j4);
IkReal x3425=((1.0)*sj0);
IkReal x3426=(cj5*r00);
IkReal x3427=(cj5*r10);
IkReal x3428=(cj5*r20);
IkReal x3429=((1.0)*x3423);
IkReal x3430=((1.0)*x3424);
IkReal x3431=(sj5*x3423);
IkReal x3432=(sj5*x3424);
evalcond[0]=(((r21*x3431))+((r22*x3424))+(((-1.0)*x3428*x3429)));
evalcond[1]=((((-1.0)*x3428*x3430))+(((-1.0)*r22*x3429))+((r21*x3432)));
evalcond[2]=((((-1.0)*x3427*x3430))+(((-1.0)*r12*x3429))+cj0+((r11*x3432)));
evalcond[3]=(((r01*x3431))+(((-1.0)*x3426*x3429))+((r02*x3424))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3427*x3429))+(((-1.0)*x3425))+((r12*x3424))+((r11*x3431)));
evalcond[5]=(((r01*x3432))+(((-1.0)*x3426*x3430))+(((-1.0)*x3425))+(((-1.0)*r02*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
CheckValue<IkReal> x3434=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3433.value)+(((1.5707963267949)*(x3434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3435=IKcos(j4);
IkReal x3436=IKsin(j4);
IkReal x3437=((1.0)*sj0);
IkReal x3438=(cj5*r00);
IkReal x3439=(cj5*r10);
IkReal x3440=(cj5*r20);
IkReal x3441=((1.0)*x3435);
IkReal x3442=((1.0)*x3436);
IkReal x3443=(sj5*x3435);
IkReal x3444=(sj5*x3436);
evalcond[0]=(((r21*x3443))+((r22*x3436))+(((-1.0)*x3440*x3441)));
evalcond[1]=(((r21*x3444))+(((-1.0)*r22*x3441))+(((-1.0)*x3440*x3442)));
evalcond[2]=(((r11*x3444))+cj0+(((-1.0)*x3439*x3442))+(((-1.0)*r12*x3441)));
evalcond[3]=((((-1.0)*x3438*x3441))+((r01*x3443))+((r02*x3436))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3443))+(((-1.0)*x3439*x3441))+(((-1.0)*x3437))+((r12*x3436)));
evalcond[5]=((((-1.0)*x3438*x3442))+(((-1.0)*x3437))+(((-1.0)*r02*x3441))+((r01*x3444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3445=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3445;
j4eval[1]=IKsign(x3445);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3446=((1.0)*cj5);
IkReal x3447=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3446)));
j4eval[0]=x3447;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3446))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3448=cj5*cj5;
IkReal x3449=((1.0)*r20);
IkReal x3450=(r01*r21);
IkReal x3451=(r21*sj5);
IkReal x3452=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3448*x3449))+((x3448*x3450))+(((-1.0)*x3450))+((cj5*r00*x3451)));
j4eval[0]=x3452;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3449))+((cj0*x3451)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3453=cj5*cj5;
IkReal x3454=((1.0)*r20);
IkReal x3455=(r01*r21);
IkReal x3456=(r21*sj5);
CheckValue<IkReal> x3457=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3453*x3455))+(((-1.0)*x3455))+(((-1.0)*r00*x3453*x3454))+((cj5*r00*x3456)))),-1);
if(!x3457.valid){
continue;
}
CheckValue<IkReal> x3458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3456))+(((-1.0)*cj0*cj5*x3454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3457.value)))+(x3458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3459=IKcos(j4);
IkReal x3460=IKsin(j4);
IkReal x3461=(cj5*r00);
IkReal x3462=(cj5*r10);
IkReal x3463=(cj5*r20);
IkReal x3464=((1.0)*x3459);
IkReal x3465=((1.0)*x3460);
IkReal x3466=(sj5*x3459);
IkReal x3467=(sj5*x3460);
evalcond[0]=((((-1.0)*x3463*x3464))+((r21*x3466))+((r22*x3460)));
evalcond[1]=((((-1.0)*x3463*x3465))+(((-1.0)*r22*x3464))+((r21*x3467)));
evalcond[2]=(cj0+((r01*x3466))+(((-1.0)*x3461*x3464))+((r02*x3460)));
evalcond[3]=(sj0+(((-1.0)*x3462*x3464))+((r12*x3460))+((r11*x3466)));
evalcond[4]=(cj0+(((-1.0)*x3462*x3465))+(((-1.0)*r12*x3464))+((r11*x3467)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3464))+((r01*x3467))+(((-1.0)*x3461*x3465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3468=((1.0)*cj5);
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3468)))),-1);
if(!x3469.valid){
continue;
}
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3468)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3469.value)))+(x3470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3471=IKcos(j4);
IkReal x3472=IKsin(j4);
IkReal x3473=(cj5*r00);
IkReal x3474=(cj5*r10);
IkReal x3475=(cj5*r20);
IkReal x3476=((1.0)*x3471);
IkReal x3477=((1.0)*x3472);
IkReal x3478=(sj5*x3471);
IkReal x3479=(sj5*x3472);
evalcond[0]=(((r21*x3478))+(((-1.0)*x3475*x3476))+((r22*x3472)));
evalcond[1]=((((-1.0)*r22*x3476))+((r21*x3479))+(((-1.0)*x3475*x3477)));
evalcond[2]=(cj0+((r01*x3478))+(((-1.0)*x3473*x3476))+((r02*x3472)));
evalcond[3]=(sj0+((r12*x3472))+((r11*x3478))+(((-1.0)*x3474*x3476)));
evalcond[4]=(cj0+(((-1.0)*r12*x3476))+((r11*x3479))+(((-1.0)*x3474*x3477)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3476))+((r01*x3479))+(((-1.0)*x3473*x3477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3480 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3480.valid){
continue;
}
CheckValue<IkReal> x3481=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3480.value)+(((1.5707963267949)*(x3481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3482=IKcos(j4);
IkReal x3483=IKsin(j4);
IkReal x3484=(cj5*r00);
IkReal x3485=(cj5*r10);
IkReal x3486=(cj5*r20);
IkReal x3487=((1.0)*x3482);
IkReal x3488=((1.0)*x3483);
IkReal x3489=(sj5*x3482);
IkReal x3490=(sj5*x3483);
evalcond[0]=(((r21*x3489))+((r22*x3483))+(((-1.0)*x3486*x3487)));
evalcond[1]=((((-1.0)*r22*x3487))+((r21*x3490))+(((-1.0)*x3486*x3488)));
evalcond[2]=(cj0+((r01*x3489))+(((-1.0)*x3484*x3487))+((r02*x3483)));
evalcond[3]=(sj0+(((-1.0)*x3485*x3487))+((r12*x3483))+((r11*x3489)));
evalcond[4]=(cj0+(((-1.0)*x3485*x3488))+(((-1.0)*r12*x3487))+((r11*x3490)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3490))+(((-1.0)*r02*x3487))+(((-1.0)*x3484*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11235)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3491=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3491;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3492=((1.0)*cj5);
IkReal x3493=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3492)));
j4eval[0]=x3493;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3492))))));
j4eval[2]=IKsign(x3493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3494=((1.0)*cj5);
IkReal x3495=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3494)));
j4eval[0]=x3495;
j4eval[1]=IKsign(x3495);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3494))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3496=((1.0)*cj5);
CheckValue<IkReal> x3497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3496)))),-1);
if(!x3497.valid){
continue;
}
CheckValue<IkReal> x3498 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3496))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3497.value)))+(x3498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3499=IKcos(j4);
IkReal x3500=IKsin(j4);
IkReal x3501=((1.0)*sj0);
IkReal x3502=(cj5*r00);
IkReal x3503=(cj5*r10);
IkReal x3504=(cj5*r20);
IkReal x3505=((1.0)*x3499);
IkReal x3506=((1.0)*x3500);
IkReal x3507=(sj5*x3499);
IkReal x3508=(sj5*x3500);
evalcond[0]=(((r22*x3500))+(((-1.0)*x3504*x3505))+((r21*x3507)));
evalcond[1]=((((-1.0)*r22*x3505))+(((-1.0)*x3504*x3506))+((r21*x3508)));
evalcond[2]=((((-1.0)*r12*x3505))+cj0+((r11*x3508))+(((-1.0)*x3503*x3506)));
evalcond[3]=(((r01*x3507))+(((-1.0)*x3502*x3505))+((r02*x3500))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3501))+((r12*x3500))+((r11*x3507))+(((-1.0)*x3503*x3505)));
evalcond[5]=(((r01*x3508))+(((-1.0)*x3501))+(((-1.0)*x3502*x3506))+(((-1.0)*r02*x3505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3509=((1.0)*cj5);
CheckValue<IkReal> x3510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3509)))),-1);
if(!x3510.valid){
continue;
}
CheckValue<IkReal> x3511 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3510.value)))+(x3511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3512=IKcos(j4);
IkReal x3513=IKsin(j4);
IkReal x3514=((1.0)*sj0);
IkReal x3515=(cj5*r00);
IkReal x3516=(cj5*r10);
IkReal x3517=(cj5*r20);
IkReal x3518=((1.0)*x3512);
IkReal x3519=((1.0)*x3513);
IkReal x3520=(sj5*x3512);
IkReal x3521=(sj5*x3513);
evalcond[0]=(((r21*x3520))+(((-1.0)*x3517*x3518))+((r22*x3513)));
evalcond[1]=(((r21*x3521))+(((-1.0)*x3517*x3519))+(((-1.0)*r22*x3518)));
evalcond[2]=(cj0+((r11*x3521))+(((-1.0)*r12*x3518))+(((-1.0)*x3516*x3519)));
evalcond[3]=((((-1.0)*x3515*x3518))+((r01*x3520))+((r02*x3513))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3514))+((r11*x3520))+((r12*x3513))+(((-1.0)*x3516*x3518)));
evalcond[5]=((((-1.0)*x3515*x3519))+(((-1.0)*r02*x3518))+((r01*x3521))+(((-1.0)*x3514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3522 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3522.valid){
continue;
}
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3522.value)+(((1.5707963267949)*(x3523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3524=IKcos(j4);
IkReal x3525=IKsin(j4);
IkReal x3526=((1.0)*sj0);
IkReal x3527=(cj5*r00);
IkReal x3528=(cj5*r10);
IkReal x3529=(cj5*r20);
IkReal x3530=((1.0)*x3524);
IkReal x3531=((1.0)*x3525);
IkReal x3532=(sj5*x3524);
IkReal x3533=(sj5*x3525);
evalcond[0]=((((-1.0)*x3529*x3530))+((r21*x3532))+((r22*x3525)));
evalcond[1]=((((-1.0)*x3529*x3531))+((r21*x3533))+(((-1.0)*r22*x3530)));
evalcond[2]=(((r11*x3533))+cj0+(((-1.0)*r12*x3530))+(((-1.0)*x3528*x3531)));
evalcond[3]=(((r02*x3525))+(((-1.0)*x3527*x3530))+((r01*x3532))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3532))+(((-1.0)*x3526))+(((-1.0)*x3528*x3530))+((r12*x3525)));
evalcond[5]=((((-1.0)*x3526))+(((-1.0)*x3527*x3531))+(((-1.0)*r02*x3530))+((r01*x3533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3534=((4873.0)*cj1);
IkReal x3535=(cj5*r01);
IkReal x3536=(r00*sj5);
IkReal x3537=(cj1*cj2);
IkReal x3538=((20000.0)*px);
IkReal x3539=(sj1*sj2);
IkReal x3540=((5972.0)*x3539);
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(((((-2247.0)*x3537))+(((2247.0)*x3539))),-1);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542=IKPowWithIntegerCheck((x3539+(((-1.0)*x3537))),-1);
if(!x3542.valid){
continue;
}
if( IKabs(((x3541.value)*((((x3534*x3536))+((x3534*x3535))+(((5972.0)*x3535*x3537))+(((-1.0)*x3538*x3539))+(((5972.0)*x3536*x3537))+(((-1.0)*x3535*x3540))+(((-1.0)*x3536*x3540))+((x3537*x3538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3542.value)*((x3535+x3536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3541.value)*((((x3534*x3536))+((x3534*x3535))+(((5972.0)*x3535*x3537))+(((-1.0)*x3538*x3539))+(((5972.0)*x3536*x3537))+(((-1.0)*x3535*x3540))+(((-1.0)*x3536*x3540))+((x3537*x3538))))))+IKsqr(((x3542.value)*((x3535+x3536))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3541.value)*((((x3534*x3536))+((x3534*x3535))+(((5972.0)*x3535*x3537))+(((-1.0)*x3538*x3539))+(((5972.0)*x3536*x3537))+(((-1.0)*x3535*x3540))+(((-1.0)*x3536*x3540))+((x3537*x3538))))), ((x3542.value)*((x3535+x3536))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3543=IKcos(j0);
IkReal x3544=IKsin(j0);
IkReal x3545=(cj1*cj2);
IkReal x3546=((1.0)*cj5);
IkReal x3547=(sj1*sj2);
IkReal x3548=(r00*sj5);
IkReal x3549=(r10*sj5);
IkReal x3550=((0.24365)*cj1);
IkReal x3551=((0.08535)*cj5);
IkReal x3552=((0.21325)*x3544);
IkReal x3553=((0.21325)*x3543);
evalcond[0]=(((x3543*x3547))+(((-1.0)*x3543*x3545))+(((-1.0)*r01*x3546))+(((-1.0)*x3548)));
evalcond[1]=((((-1.0)*x3549))+(((-1.0)*r11*x3546))+((x3544*x3547))+(((-1.0)*x3544*x3545)));
evalcond[2]=((((-0.11235)*x3544))+(((-1.0)*r01*x3551))+((x3543*x3550))+(((-1.0)*px))+((x3545*x3553))+(((-1.0)*x3547*x3553))+(((-0.08535)*x3548)));
evalcond[3]=((((0.11235)*x3543))+(((-1.0)*py))+(((-1.0)*r11*x3551))+((x3544*x3550))+((x3545*x3552))+(((-1.0)*x3547*x3552))+(((-0.08535)*x3549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3554=((1.0)*cj5);
IkReal x3555=((((-1.0)*r01*x3554))+(((-1.0)*r00*sj5)));
j4eval[0]=x3555;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3554)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3556=((1.0)*cj5);
IkReal x3557=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3556)));
j4eval[0]=x3557;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3556))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3558=((1.0)*sj0);
IkReal x3559=((1.0)*cj0);
IkReal x3560=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3560;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3559))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3558)))))+(IKabs(((((-1.0)*r12*x3558))+(((-1.0)*r02*x3559))))));
j4eval[2]=IKsign(x3560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3561=((-1.0)*r20);
IkReal x3563 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3563)==0){
continue;
}
IkReal x3562=pow(x3563,-0.5);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3561),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3564.value));
IkReal gconst97=(r21*x3562);
IkReal gconst98=(x3561*x3562);
CheckValue<IkReal> x3565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3565.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3565.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3566=((-1.0)*r20);
IkReal x3567=x3562;
CheckValue<IkReal> x3569 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3566),IKFAST_ATAN2_MAGTHRESH);
if(!x3569.valid){
continue;
}
IkReal x3568=((-1.0)*(x3569.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3568;
IkReal gconst96=x3568;
IkReal gconst97=(r21*x3567);
IkReal gconst98=(x3566*x3567);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3570=((-1.0)*r20);
IkReal x3571=x3562;
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3570),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
IkReal x3572=((-1.0)*(x3573.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3572;
IkReal gconst96=x3572;
IkReal gconst97=(r21*x3571);
IkReal gconst98=(x3570*x3571);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3574=((-1.0)*r20);
IkReal x3575=x3562;
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3574),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
IkReal x3576=((-1.0)*(x3577.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3576;
IkReal gconst96=x3576;
IkReal gconst97=(r21*x3575);
IkReal gconst98=(x3574*x3575);
IkReal x3578=((1.0)*(r22*r22));
CheckValue<IkReal> x3582=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3578))),-1);
if(!x3582.valid){
continue;
}
IkReal x3579=x3582.value;
IkReal x3580=((1.0)*x3579);
IkReal x3581=((((-1.0)*x3580*(r21*r21*r21*r21)))+(((-1.0)*x3578))+(((-2.0)*x3579*(r20*r20)*(r21*r21)))+(((-1.0)*x3580*(r20*r20*r20*r20))));
j4eval[0]=x3581;
j4eval[1]=IKsign(x3581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3583=(cj1*cj2);
IkReal x3584=(gconst98*r20);
IkReal x3585=(sj1*sj2);
IkReal x3586=(gconst97*r21);
CheckValue<IkReal> x3587=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3586*x3586)))+(((-1.0)*(x3584*x3584)))+(((2.0)*x3584*x3586))+(((-1.0)*(r22*r22))))),-1);
if(!x3587.valid){
continue;
}
CheckValue<IkReal> x3588 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3583))+((r22*x3585)))),IkReal((((x3583*x3584))+((x3585*x3586))+(((-1.0)*x3584*x3585))+(((-1.0)*x3583*x3586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3587.value)))+(x3588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3589=IKsin(j4);
IkReal x3590=IKcos(j4);
IkReal x3591=(gconst98*r10);
IkReal x3592=(gconst97*r21);
IkReal x3593=(gconst98*r20);
IkReal x3594=((1.0)*cj2);
IkReal x3595=((1.0)*sj0);
IkReal x3596=(gconst98*r00);
IkReal x3597=(cj1*sj2);
IkReal x3598=((1.0)*x3590);
IkReal x3599=((1.0)*x3589);
IkReal x3600=(gconst97*x3589);
IkReal x3601=(gconst97*x3590);
evalcond[0]=(((x3589*x3592))+(((-1.0)*r22*x3598))+(((-1.0)*x3593*x3599)));
evalcond[1]=(((r11*x3600))+cj0+(((-1.0)*x3591*x3599))+(((-1.0)*r12*x3598)));
evalcond[2]=((((-1.0)*r02*x3598))+((r01*x3600))+(((-1.0)*x3595))+(((-1.0)*x3596*x3599)));
evalcond[3]=((((-1.0)*cj1*x3594))+((x3590*x3592))+((sj1*sj2))+(((-1.0)*x3593*x3598))+((r22*x3589)));
evalcond[4]=(((r02*x3589))+(((-1.0)*cj0*x3597))+((r01*x3601))+(((-1.0)*cj0*sj1*x3594))+(((-1.0)*x3596*x3598)));
evalcond[5]=(((r11*x3601))+((r12*x3589))+(((-1.0)*x3591*x3598))+(((-1.0)*x3595*x3597))+(((-1.0)*sj0*sj1*x3594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3602=((1.0)*gconst98);
CheckValue<IkReal> x3603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3602))+(((-1.0)*gconst97*r10)))),-1);
if(!x3603.valid){
continue;
}
CheckValue<IkReal> x3604 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3603.value)))+(x3604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3605=IKsin(j4);
IkReal x3606=IKcos(j4);
IkReal x3607=(gconst98*r10);
IkReal x3608=(gconst97*r21);
IkReal x3609=(gconst98*r20);
IkReal x3610=((1.0)*cj2);
IkReal x3611=((1.0)*sj0);
IkReal x3612=(gconst98*r00);
IkReal x3613=(cj1*sj2);
IkReal x3614=((1.0)*x3606);
IkReal x3615=((1.0)*x3605);
IkReal x3616=(gconst97*x3605);
IkReal x3617=(gconst97*x3606);
evalcond[0]=((((-1.0)*r22*x3614))+(((-1.0)*x3609*x3615))+((x3605*x3608)));
evalcond[1]=(((r11*x3616))+cj0+(((-1.0)*r12*x3614))+(((-1.0)*x3607*x3615)));
evalcond[2]=((((-1.0)*x3612*x3615))+(((-1.0)*r02*x3614))+((r01*x3616))+(((-1.0)*x3611)));
evalcond[3]=(((x3606*x3608))+((r22*x3605))+((sj1*sj2))+(((-1.0)*x3609*x3614))+(((-1.0)*cj1*x3610)));
evalcond[4]=(((r02*x3605))+(((-1.0)*x3612*x3614))+(((-1.0)*cj0*sj1*x3610))+((r01*x3617))+(((-1.0)*cj0*x3613)));
evalcond[5]=(((r11*x3617))+(((-1.0)*x3611*x3613))+(((-1.0)*x3607*x3614))+(((-1.0)*sj0*sj1*x3610))+((r12*x3605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3618=((1.0)*gconst98);
CheckValue<IkReal> x3619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3618))+(((-1.0)*gconst97*r00)))),-1);
if(!x3619.valid){
continue;
}
CheckValue<IkReal> x3620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3619.value)))+(x3620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3621=IKsin(j4);
IkReal x3622=IKcos(j4);
IkReal x3623=(gconst98*r10);
IkReal x3624=(gconst97*r21);
IkReal x3625=(gconst98*r20);
IkReal x3626=((1.0)*cj2);
IkReal x3627=((1.0)*sj0);
IkReal x3628=(gconst98*r00);
IkReal x3629=(cj1*sj2);
IkReal x3630=((1.0)*x3622);
IkReal x3631=((1.0)*x3621);
IkReal x3632=(gconst97*x3621);
IkReal x3633=(gconst97*x3622);
evalcond[0]=((((-1.0)*r22*x3630))+((x3621*x3624))+(((-1.0)*x3625*x3631)));
evalcond[1]=(((r11*x3632))+cj0+(((-1.0)*r12*x3630))+(((-1.0)*x3623*x3631)));
evalcond[2]=((((-1.0)*x3627))+(((-1.0)*x3628*x3631))+(((-1.0)*r02*x3630))+((r01*x3632)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3626))+((x3622*x3624))+((r22*x3621))+(((-1.0)*x3625*x3630)));
evalcond[4]=((((-1.0)*x3628*x3630))+(((-1.0)*cj0*x3629))+((r02*x3621))+((r01*x3633))+(((-1.0)*cj0*sj1*x3626)));
evalcond[5]=(((r11*x3633))+(((-1.0)*x3627*x3629))+((r12*x3621))+(((-1.0)*sj0*sj1*x3626))+(((-1.0)*x3623*x3630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3634=((-1.0)*r21);
IkReal x3636 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3636)==0){
continue;
}
IkReal x3635=pow(x3636,-0.5);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(x3634),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3637.value))));
IkReal gconst100=(x3634*x3635);
IkReal gconst101=((1.0)*r20*x3635);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3638.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3639=((-1.0)*r21);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(x3639),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
IkReal x3640=((1.0)*(x3642.value));
IkReal x3641=x3635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3640)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3640)));
IkReal gconst100=(x3639*x3641);
IkReal gconst101=((1.0)*r20*x3641);
IkReal x3643=r22*r22;
IkReal x3644=((1.0)*x3643);
CheckValue<IkReal> x3648=IKPowWithIntegerCheck(((-1.0)+x3643),-1);
if(!x3648.valid){
continue;
}
IkReal x3645=x3648.value;
if((((1.0)+(((-1.0)*x3644)))) < -0.00001)
continue;
IkReal x3646=IKsqrt(((1.0)+(((-1.0)*x3644))));
IkReal x3647=(cj0*x3645*x3646);
j4eval[0]=((IKabs(((((-1.0)*x3644*x3647))+x3647)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3649=((-1.0)*r21);
CheckValue<IkReal> x3652 = IKatan2WithCheck(IkReal(x3649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3652.valid){
continue;
}
IkReal x3650=((1.0)*(x3652.value));
IkReal x3651=x3635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3650)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3650)));
IkReal gconst100=(x3649*x3651);
IkReal gconst101=((1.0)*r20*x3651);
IkReal x3653=r22*r22;
IkReal x3654=((1.0)*x3653);
CheckValue<IkReal> x3658=IKPowWithIntegerCheck(((-1.0)+x3653),-1);
if(!x3658.valid){
continue;
}
IkReal x3655=x3658.value;
if((((1.0)+(((-1.0)*x3654)))) < -0.00001)
continue;
IkReal x3656=IKsqrt(((1.0)+(((-1.0)*x3654))));
IkReal x3657=(sj0*x3655*x3656);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3657+(((-1.0)*x3654*x3657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3659=((-1.0)*r21);
CheckValue<IkReal> x3662 = IKatan2WithCheck(IkReal(x3659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3662.valid){
continue;
}
IkReal x3660=((1.0)*(x3662.value));
IkReal x3661=x3635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3660)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3660)));
IkReal gconst100=(x3659*x3661);
IkReal gconst101=((1.0)*r20*x3661);
IkReal x3663=r22*r22;
IkReal x3664=(r12*sj0);
IkReal x3665=(cj0*r02);
CheckValue<IkReal> x3669=IKPowWithIntegerCheck(((-1.0)+x3663),-1);
if(!x3669.valid){
continue;
}
IkReal x3666=x3669.value;
if((((1.0)+(((-1.0)*x3663)))) < -0.00001)
continue;
IkReal x3667=IKsqrt(((1.0)+(((-1.0)*x3663))));
IkReal x3668=(r22*x3666*x3667);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3664*x3668))+((x3665*x3668)))))+(IKabs(((((-1.0)*x3665))+(((-1.0)*x3664))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3670=((1.0)*sj0);
IkReal x3671=((1.0)*gconst100);
CheckValue<IkReal> x3672 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3670))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3670))+((gconst101*r10*sj0))+(((-1.0)*cj0*r01*x3671))+((cj0*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3672.valid){
continue;
}
CheckValue<IkReal> x3673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3671))+(((-1.0)*gconst101*r21)))),-1);
if(!x3673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3672.value)+(((1.5707963267949)*(x3673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3674=IKsin(j4);
IkReal x3675=IKcos(j4);
IkReal x3676=(gconst101*r20);
IkReal x3677=(gconst101*r10);
IkReal x3678=((1.0)*cj2);
IkReal x3679=(gconst101*r00);
IkReal x3680=((1.0)*sj0);
IkReal x3681=(cj1*sj2);
IkReal x3682=((1.0)*x3675);
IkReal x3683=((1.0)*x3674);
IkReal x3684=(gconst100*x3674);
IkReal x3685=(gconst100*x3675);
evalcond[0]=((((-1.0)*r22*x3682))+((r21*x3684))+(((-1.0)*x3676*x3683)));
evalcond[1]=(cj0+(((-1.0)*x3677*x3683))+(((-1.0)*r12*x3682))+((r11*x3684)));
evalcond[2]=(((r01*x3684))+(((-1.0)*x3680))+(((-1.0)*x3679*x3683))+(((-1.0)*r02*x3682)));
evalcond[3]=(((r21*x3685))+((sj1*sj2))+(((-1.0)*x3676*x3682))+((r22*x3674))+(((-1.0)*cj1*x3678)));
evalcond[4]=(((r01*x3685))+(((-1.0)*cj0*x3681))+((r02*x3674))+(((-1.0)*x3679*x3682))+(((-1.0)*cj0*sj1*x3678)));
evalcond[5]=(((r12*x3674))+(((-1.0)*x3677*x3682))+(((-1.0)*x3680*x3681))+((r11*x3685))+(((-1.0)*sj0*sj1*x3678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3686=((1.0)*gconst101);
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3686))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3686)))),-1);
if(!x3688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3687.value)+(((1.5707963267949)*(x3688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3689=IKsin(j4);
IkReal x3690=IKcos(j4);
IkReal x3691=(gconst101*r20);
IkReal x3692=(gconst101*r10);
IkReal x3693=((1.0)*cj2);
IkReal x3694=(gconst101*r00);
IkReal x3695=((1.0)*sj0);
IkReal x3696=(cj1*sj2);
IkReal x3697=((1.0)*x3690);
IkReal x3698=((1.0)*x3689);
IkReal x3699=(gconst100*x3689);
IkReal x3700=(gconst100*x3690);
evalcond[0]=((((-1.0)*r22*x3697))+((r21*x3699))+(((-1.0)*x3691*x3698)));
evalcond[1]=(cj0+(((-1.0)*r12*x3697))+((r11*x3699))+(((-1.0)*x3692*x3698)));
evalcond[2]=(((r01*x3699))+(((-1.0)*r02*x3697))+(((-1.0)*x3695))+(((-1.0)*x3694*x3698)));
evalcond[3]=((((-1.0)*cj1*x3693))+((sj1*sj2))+((r21*x3700))+((r22*x3689))+(((-1.0)*x3691*x3697)));
evalcond[4]=((((-1.0)*cj0*x3696))+((r01*x3700))+(((-1.0)*cj0*sj1*x3693))+((r02*x3689))+(((-1.0)*x3694*x3697)));
evalcond[5]=(((r11*x3700))+((r12*x3689))+(((-1.0)*sj0*sj1*x3693))+(((-1.0)*x3695*x3696))+(((-1.0)*x3692*x3697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3701=((1.0)*gconst101);
CheckValue<IkReal> x3702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3701))+(((-1.0)*gconst100*r00)))),-1);
if(!x3702.valid){
continue;
}
CheckValue<IkReal> x3703 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3702.value)))+(x3703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3704=IKsin(j4);
IkReal x3705=IKcos(j4);
IkReal x3706=(gconst101*r20);
IkReal x3707=(gconst101*r10);
IkReal x3708=((1.0)*cj2);
IkReal x3709=(gconst101*r00);
IkReal x3710=((1.0)*sj0);
IkReal x3711=(cj1*sj2);
IkReal x3712=((1.0)*x3705);
IkReal x3713=((1.0)*x3704);
IkReal x3714=(gconst100*x3704);
IkReal x3715=(gconst100*x3705);
evalcond[0]=((((-1.0)*x3706*x3713))+((r21*x3714))+(((-1.0)*r22*x3712)));
evalcond[1]=(((r11*x3714))+cj0+(((-1.0)*x3707*x3713))+(((-1.0)*r12*x3712)));
evalcond[2]=((((-1.0)*r02*x3712))+(((-1.0)*x3710))+((r01*x3714))+(((-1.0)*x3709*x3713)));
evalcond[3]=((((-1.0)*cj1*x3708))+((sj1*sj2))+(((-1.0)*x3706*x3712))+((r21*x3715))+((r22*x3704)));
evalcond[4]=((((-1.0)*cj0*sj1*x3708))+(((-1.0)*cj0*x3711))+((r01*x3715))+(((-1.0)*x3709*x3712))+((r02*x3704)));
evalcond[5]=(((r11*x3715))+((r12*x3704))+(((-1.0)*x3707*x3712))+(((-1.0)*x3710*x3711))+(((-1.0)*sj0*sj1*x3708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3716=((-1.0)*r10);
IkReal x3718 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3718)==0){
continue;
}
IkReal x3717=pow(x3718,-0.5);
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3716),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3719.value));
IkReal gconst103=(r11*x3717);
IkReal gconst104=(x3716*x3717);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3720.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3721=((-1.0)*r10);
IkReal x3722=x3717;
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3721),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal x3723=((-1.0)*(x3724.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3723;
IkReal gconst102=x3723;
IkReal gconst103=(r11*x3722);
IkReal gconst104=(x3721*x3722);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3725=((1.0)*sj0);
IkReal x3726=((1.0)*gconst103);
CheckValue<IkReal> x3727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3726)))),-1);
if(!x3727.valid){
continue;
}
CheckValue<IkReal> x3728 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3725))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3726))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3725))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3727.value)))+(x3728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3729=IKsin(j4);
IkReal x3730=IKcos(j4);
IkReal x3731=(gconst103*r11);
IkReal x3732=((1.0)*cj2);
IkReal x3733=((1.0)*sj0);
IkReal x3734=(cj1*sj2);
IkReal x3735=((1.0)*x3730);
IkReal x3736=(gconst103*x3730);
IkReal x3737=(gconst103*x3729);
IkReal x3738=((1.0)*gconst104*x3729);
evalcond[0]=((((-1.0)*r20*x3738))+(((-1.0)*r22*x3735))+((r21*x3737)));
evalcond[1]=(cj0+((x3729*x3731))+(((-1.0)*r12*x3735))+(((-1.0)*r10*x3738)));
evalcond[2]=((((-1.0)*x3733))+((r01*x3737))+(((-1.0)*r00*x3738))+(((-1.0)*r02*x3735)));
evalcond[3]=((((-1.0)*cj1*x3732))+((r22*x3729))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3735))+((r21*x3736)));
evalcond[4]=((((-1.0)*gconst104*r00*x3735))+((r01*x3736))+(((-1.0)*cj0*x3734))+((r02*x3729))+(((-1.0)*cj0*sj1*x3732)));
evalcond[5]=((((-1.0)*sj0*sj1*x3732))+((x3730*x3731))+((r12*x3729))+(((-1.0)*x3733*x3734))+(((-1.0)*gconst104*r10*x3735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3739=((1.0)*gconst104);
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3739))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
CheckValue<IkReal> x3741=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3739)))),-1);
if(!x3741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3740.value)+(((1.5707963267949)*(x3741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3742=IKsin(j4);
IkReal x3743=IKcos(j4);
IkReal x3744=(gconst103*r11);
IkReal x3745=((1.0)*cj2);
IkReal x3746=((1.0)*sj0);
IkReal x3747=(cj1*sj2);
IkReal x3748=((1.0)*x3743);
IkReal x3749=(gconst103*x3743);
IkReal x3750=(gconst103*x3742);
IkReal x3751=((1.0)*gconst104*x3742);
evalcond[0]=((((-1.0)*r22*x3748))+(((-1.0)*r20*x3751))+((r21*x3750)));
evalcond[1]=(((x3742*x3744))+cj0+(((-1.0)*r12*x3748))+(((-1.0)*r10*x3751)));
evalcond[2]=(((r01*x3750))+(((-1.0)*r00*x3751))+(((-1.0)*x3746))+(((-1.0)*r02*x3748)));
evalcond[3]=((((-1.0)*gconst104*r20*x3748))+((sj1*sj2))+((r22*x3742))+((r21*x3749))+(((-1.0)*cj1*x3745)));
evalcond[4]=((((-1.0)*gconst104*r00*x3748))+((r01*x3749))+(((-1.0)*cj0*x3747))+((r02*x3742))+(((-1.0)*cj0*sj1*x3745)));
evalcond[5]=(((x3743*x3744))+(((-1.0)*sj0*sj1*x3745))+((r12*x3742))+(((-1.0)*x3746*x3747))+(((-1.0)*gconst104*r10*x3748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3752=((-1.0)*r11);
IkReal x3754 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3754)==0){
continue;
}
IkReal x3753=pow(x3754,-0.5);
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(x3752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3755.value))));
IkReal gconst106=(x3752*x3753);
IkReal gconst107=((1.0)*r10*x3753);
CheckValue<IkReal> x3756 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3756.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3756.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3757=((-1.0)*r11);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(x3757),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
IkReal x3758=((1.0)*(x3760.value));
IkReal x3759=x3753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3758)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3758)));
IkReal gconst106=(x3757*x3759);
IkReal gconst107=((1.0)*r10*x3759);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3761=((-1.0)*r11);
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal(x3761),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
IkReal x3762=((1.0)*(x3764.value));
IkReal x3763=x3753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3762)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3762)));
IkReal gconst106=(x3761*x3763);
IkReal gconst107=((1.0)*r10*x3763);
IkReal x3765=r12*r12;
IkReal x3766=((1.0)*sj0);
IkReal x3767=(cj0*r02);
IkReal x3768=x3753;
j4eval[0]=((IKabs(((((-1.0)*x3767))+(((-1.0)*r12*x3766)))))+(IKabs((((r12*x3767*x3768))+((sj0*x3765*x3768))+(((-1.0)*x3766*x3768))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3769=((-1.0)*r11);
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(x3769),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
IkReal x3770=((1.0)*(x3772.value));
IkReal x3771=x3753;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3770)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3770)));
IkReal gconst106=(x3769*x3771);
IkReal gconst107=((1.0)*r10*x3771);
IkReal x3773=r12*r12;
IkReal x3774=((1.0)+(((-1.0)*x3773)));
IkReal x3775=(r22*sj1*sj2);
IkReal x3776=(cj1*cj2*r22);
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(x3774,-1);
if(!x3783.valid){
continue;
}
IkReal x3777=x3783.value;
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(((-1.0)+x3773),-1);
if(!x3784.valid){
continue;
}
IkReal x3778=x3784.value;
IkReal x3779=((1.0)*x3777);
if((x3774) < -0.00001)
continue;
IkReal x3780=IKsqrt(x3774);
IkReal x3781=(r12*x3778*x3780);
IkReal x3782=((((-2.0)*r10*r11*r20*r21*x3777))+(((-1.0)*x3779*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3779*(r11*r11)*(r21*r21))));
j4eval[0]=x3782;
j4eval[1]=((IKabs(((((-1.0)*x3775*x3781))+((x3776*x3781)))))+(IKabs(((((-1.0)*x3776))+x3775))));
j4eval[2]=IKsign(x3782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=(sj1*sj2);
IkReal x3786=(gconst106*r21);
IkReal x3787=(gconst107*r20);
IkReal x3788=(cj1*cj2);
CheckValue<IkReal> x3789 = IKatan2WithCheck(IkReal((((r22*x3785))+(((-1.0)*r22*x3788)))),IkReal((((x3785*x3786))+((x3787*x3788))+(((-1.0)*x3785*x3787))+(((-1.0)*x3786*x3788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3789.valid){
continue;
}
CheckValue<IkReal> x3790=IKPowWithIntegerCheck(IKsign(((((2.0)*x3786*x3787))+(((-1.0)*(x3786*x3786)))+(((-1.0)*(x3787*x3787)))+(((-1.0)*(r22*r22))))),-1);
if(!x3790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3789.value)+(((1.5707963267949)*(x3790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3791=IKsin(j4);
IkReal x3792=IKcos(j4);
IkReal x3793=(gconst107*r10);
IkReal x3794=(gconst107*r00);
IkReal x3795=((1.0)*cj2);
IkReal x3796=(gconst107*r20);
IkReal x3797=((1.0)*sj0);
IkReal x3798=(cj1*sj2);
IkReal x3799=((1.0)*x3792);
IkReal x3800=(gconst106*x3792);
IkReal x3801=(gconst106*x3791);
IkReal x3802=((1.0)*x3791);
evalcond[0]=(((r21*x3801))+(((-1.0)*x3796*x3802))+(((-1.0)*r22*x3799)));
evalcond[1]=((((-1.0)*r12*x3799))+((r11*x3801))+cj0+(((-1.0)*x3793*x3802)));
evalcond[2]=((((-1.0)*x3797))+((r01*x3801))+(((-1.0)*x3794*x3802))+(((-1.0)*r02*x3799)));
evalcond[3]=((((-1.0)*x3796*x3799))+((r22*x3791))+((r21*x3800))+((sj1*sj2))+(((-1.0)*cj1*x3795)));
evalcond[4]=(((r01*x3800))+((r02*x3791))+(((-1.0)*cj0*sj1*x3795))+(((-1.0)*cj0*x3798))+(((-1.0)*x3794*x3799)));
evalcond[5]=((((-1.0)*sj0*sj1*x3795))+((r11*x3800))+(((-1.0)*x3797*x3798))+((r12*x3791))+(((-1.0)*x3793*x3799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3803=((1.0)*sj0);
IkReal x3804=((1.0)*gconst106);
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3804)))),-1);
if(!x3805.valid){
continue;
}
CheckValue<IkReal> x3806 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3803)))),IkReal(((((-1.0)*gconst106*r11*x3803))+(((-1.0)*cj0*r01*x3804))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3805.value)))+(x3806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3807=IKsin(j4);
IkReal x3808=IKcos(j4);
IkReal x3809=(gconst107*r10);
IkReal x3810=(gconst107*r00);
IkReal x3811=((1.0)*cj2);
IkReal x3812=(gconst107*r20);
IkReal x3813=((1.0)*sj0);
IkReal x3814=(cj1*sj2);
IkReal x3815=((1.0)*x3808);
IkReal x3816=(gconst106*x3808);
IkReal x3817=(gconst106*x3807);
IkReal x3818=((1.0)*x3807);
evalcond[0]=((((-1.0)*r22*x3815))+((r21*x3817))+(((-1.0)*x3812*x3818)));
evalcond[1]=((((-1.0)*r12*x3815))+cj0+((r11*x3817))+(((-1.0)*x3809*x3818)));
evalcond[2]=((((-1.0)*r02*x3815))+(((-1.0)*x3810*x3818))+(((-1.0)*x3813))+((r01*x3817)));
evalcond[3]=(((r21*x3816))+((r22*x3807))+(((-1.0)*cj1*x3811))+((sj1*sj2))+(((-1.0)*x3812*x3815)));
evalcond[4]=((((-1.0)*cj0*x3814))+(((-1.0)*x3810*x3815))+((r02*x3807))+(((-1.0)*cj0*sj1*x3811))+((r01*x3816)));
evalcond[5]=((((-1.0)*sj0*sj1*x3811))+((r11*x3816))+((r12*x3807))+(((-1.0)*x3813*x3814))+(((-1.0)*x3809*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3819=((1.0)*gconst107);
CheckValue<IkReal> x3820 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3820.valid){
continue;
}
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3819))+(((-1.0)*gconst106*r00)))),-1);
if(!x3821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3820.value)+(((1.5707963267949)*(x3821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3822=IKsin(j4);
IkReal x3823=IKcos(j4);
IkReal x3824=(gconst107*r10);
IkReal x3825=(gconst107*r00);
IkReal x3826=((1.0)*cj2);
IkReal x3827=(gconst107*r20);
IkReal x3828=((1.0)*sj0);
IkReal x3829=(cj1*sj2);
IkReal x3830=((1.0)*x3823);
IkReal x3831=(gconst106*x3823);
IkReal x3832=(gconst106*x3822);
IkReal x3833=((1.0)*x3822);
evalcond[0]=(((r21*x3832))+(((-1.0)*r22*x3830))+(((-1.0)*x3827*x3833)));
evalcond[1]=(cj0+(((-1.0)*r12*x3830))+((r11*x3832))+(((-1.0)*x3824*x3833)));
evalcond[2]=(((r01*x3832))+(((-1.0)*x3828))+(((-1.0)*r02*x3830))+(((-1.0)*x3825*x3833)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3826))+((r22*x3822))+((r21*x3831))+(((-1.0)*x3827*x3830)));
evalcond[4]=((((-1.0)*cj0*x3829))+((r01*x3831))+((r02*x3822))+(((-1.0)*cj0*sj1*x3826))+(((-1.0)*x3825*x3830)));
evalcond[5]=(((r12*x3822))+(((-1.0)*sj0*sj1*x3826))+((r11*x3831))+(((-1.0)*x3828*x3829))+(((-1.0)*x3824*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3834=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3834;
j4eval[1]=IKsign(x3834);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3835=((1.0)*cj5);
IkReal x3836=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3835)));
j4eval[0]=x3836;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3835))+((r21*sj5))))));
j4eval[2]=IKsign(x3836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3837=(sj1*sj2);
IkReal x3838=(cj5*r10);
IkReal x3839=(r11*sj5);
IkReal x3840=(cj1*cj2);
IkReal x3841=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3841;
j4eval[1]=((IKabs(((((-1.0)*x3837*x3838))+(((-1.0)*x3839*x3840))+((x3838*x3840))+((x3837*x3839)))))+(IKabs((((r12*x3840))+(((-1.0)*r12*x3837))))));
j4eval[2]=IKsign(x3841);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3842=(sj1*sj2);
IkReal x3843=(cj5*r10);
IkReal x3844=(r11*sj5);
IkReal x3845=(cj1*cj2);
CheckValue<IkReal> x3846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3846.valid){
continue;
}
CheckValue<IkReal> x3847 = IKatan2WithCheck(IkReal(((((-1.0)*x3844*x3845))+((x3842*x3844))+((x3843*x3845))+(((-1.0)*x3842*x3843)))),IkReal((((r12*x3845))+(((-1.0)*r12*x3842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3846.value)))+(x3847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3848=IKcos(j4);
IkReal x3849=IKsin(j4);
IkReal x3850=(cj5*r00);
IkReal x3851=(cj5*r10);
IkReal x3852=(r21*sj5);
IkReal x3853=((1.0)*cj2);
IkReal x3854=(cj5*r20);
IkReal x3855=((1.0)*x3848);
IkReal x3856=((1.0)*x3849);
IkReal x3857=(sj5*x3849);
IkReal x3858=(sj5*x3848);
evalcond[0]=(((r12*x3849))+((r11*x3858))+(((-1.0)*x3851*x3855)));
evalcond[1]=(((x3849*x3852))+(((-1.0)*x3854*x3856))+(((-1.0)*r22*x3855)));
evalcond[2]=((((-1.0)*x3850*x3856))+((r01*x3857))+(((-1.0)*r02*x3855)));
evalcond[3]=((1.0)+((r11*x3857))+(((-1.0)*r12*x3855))+(((-1.0)*x3851*x3856)));
evalcond[4]=(((x3848*x3852))+(((-1.0)*x3854*x3855))+((sj1*sj2))+(((-1.0)*cj1*x3853))+((r22*x3849)));
evalcond[5]=((((-1.0)*x3850*x3855))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3853))+((r01*x3858))+((r02*x3849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3859=((1.0)*cj5);
CheckValue<IkReal> x3860 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3859))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3860.valid){
continue;
}
CheckValue<IkReal> x3861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3859)))),-1);
if(!x3861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3860.value)+(((1.5707963267949)*(x3861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3862=IKcos(j4);
IkReal x3863=IKsin(j4);
IkReal x3864=(cj5*r00);
IkReal x3865=(cj5*r10);
IkReal x3866=(r21*sj5);
IkReal x3867=((1.0)*cj2);
IkReal x3868=(cj5*r20);
IkReal x3869=((1.0)*x3862);
IkReal x3870=((1.0)*x3863);
IkReal x3871=(sj5*x3863);
IkReal x3872=(sj5*x3862);
evalcond[0]=((((-1.0)*x3865*x3869))+((r11*x3872))+((r12*x3863)));
evalcond[1]=(((x3863*x3866))+(((-1.0)*x3868*x3870))+(((-1.0)*r22*x3869)));
evalcond[2]=((((-1.0)*r02*x3869))+((r01*x3871))+(((-1.0)*x3864*x3870)));
evalcond[3]=((1.0)+(((-1.0)*x3865*x3870))+(((-1.0)*r12*x3869))+((r11*x3871)));
evalcond[4]=((((-1.0)*x3868*x3869))+((sj1*sj2))+(((-1.0)*cj1*x3867))+((x3862*x3866))+((r22*x3863)));
evalcond[5]=(((r02*x3863))+((r01*x3872))+(((-1.0)*x3864*x3869))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3873.valid){
continue;
}
CheckValue<IkReal> x3874 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3873.value)))+(x3874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3875=IKcos(j4);
IkReal x3876=IKsin(j4);
IkReal x3877=(cj5*r00);
IkReal x3878=(cj5*r10);
IkReal x3879=(r21*sj5);
IkReal x3880=((1.0)*cj2);
IkReal x3881=(cj5*r20);
IkReal x3882=((1.0)*x3875);
IkReal x3883=((1.0)*x3876);
IkReal x3884=(sj5*x3876);
IkReal x3885=(sj5*x3875);
evalcond[0]=(((r11*x3885))+(((-1.0)*x3878*x3882))+((r12*x3876)));
evalcond[1]=((((-1.0)*r22*x3882))+((x3876*x3879))+(((-1.0)*x3881*x3883)));
evalcond[2]=((((-1.0)*r02*x3882))+(((-1.0)*x3877*x3883))+((r01*x3884)));
evalcond[3]=((1.0)+((r11*x3884))+(((-1.0)*x3878*x3883))+(((-1.0)*r12*x3882)));
evalcond[4]=((((-1.0)*cj1*x3880))+((sj1*sj2))+((x3875*x3879))+((r22*x3876))+(((-1.0)*x3881*x3882)));
evalcond[5]=((((-1.0)*sj1*x3880))+(((-1.0)*cj1*sj2))+(((-1.0)*x3877*x3882))+((r01*x3885))+((r02*x3876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3886=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3886;
j4eval[1]=IKsign(x3886);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3887=((1.0)*cj5);
IkReal x3888=((((-1.0)*r21*x3887))+(((-1.0)*r20*sj5)));
j4eval[0]=x3888;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3887))))));
j4eval[2]=IKsign(x3888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3889=cj5*cj5;
IkReal x3890=r11*r11;
IkReal x3891=(r11*sj5);
IkReal x3892=(cj5*r10);
IkReal x3893=((r12*r12)+((x3889*(r10*r10)))+(((-1.0)*x3889*x3890))+x3890+(((-2.0)*x3891*x3892)));
j4eval[0]=x3893;
j4eval[1]=IKsign(x3893);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3892))+x3891))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3894=cj5*cj5;
IkReal x3895=r11*r11;
IkReal x3896=(cj5*r10);
IkReal x3897=(r11*sj5);
CheckValue<IkReal> x3898 = IKatan2WithCheck(IkReal(((((-1.0)*x3896))+x3897)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3894*(r10*r10)))+(((-1.0)*x3894*x3895))+x3895+(((-2.0)*x3896*x3897)))),-1);
if(!x3899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3898.value)+(((1.5707963267949)*(x3899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3900=IKcos(j4);
IkReal x3901=IKsin(j4);
IkReal x3902=(cj5*r00);
IkReal x3903=(cj5*r10);
IkReal x3904=(r21*sj5);
IkReal x3905=(cj5*r20);
IkReal x3906=((1.0)*x3900);
IkReal x3907=((1.0)*x3901);
IkReal x3908=(sj5*x3901);
IkReal x3909=(sj5*x3900);
evalcond[0]=((((-1.0)*x3903*x3906))+((r12*x3901))+((r11*x3909)));
evalcond[1]=(((x3901*x3904))+(((-1.0)*x3905*x3907))+(((-1.0)*r22*x3906)));
evalcond[2]=((((-1.0)*x3902*x3907))+((r01*x3908))+(((-1.0)*r02*x3906)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3906))+(((-1.0)*x3903*x3907))+((r11*x3908)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3902*x3906))+((r01*x3909))+((r02*x3901)));
evalcond[5]=(((x3900*x3904))+((r22*x3901))+(((-1.0)*x3905*x3906))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3910=((1.0)*cj5);
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
CheckValue<IkReal> x3912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3910))+(((-1.0)*r20*sj5)))),-1);
if(!x3912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3911.value)+(((1.5707963267949)*(x3912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3913=IKcos(j4);
IkReal x3914=IKsin(j4);
IkReal x3915=(cj5*r00);
IkReal x3916=(cj5*r10);
IkReal x3917=(r21*sj5);
IkReal x3918=(cj5*r20);
IkReal x3919=((1.0)*x3913);
IkReal x3920=((1.0)*x3914);
IkReal x3921=(sj5*x3914);
IkReal x3922=(sj5*x3913);
evalcond[0]=(((r11*x3922))+(((-1.0)*x3916*x3919))+((r12*x3914)));
evalcond[1]=(((x3914*x3917))+(((-1.0)*r22*x3919))+(((-1.0)*x3918*x3920)));
evalcond[2]=((((-1.0)*r02*x3919))+(((-1.0)*x3915*x3920))+((r01*x3921)));
evalcond[3]=((-1.0)+((r11*x3921))+(((-1.0)*x3916*x3920))+(((-1.0)*r12*x3919)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3915*x3919))+((cj1*sj2))+((r02*x3914))+((r01*x3922)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3913*x3917))+(((-1.0)*x3918*x3919))+((r22*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3923 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3923.value)+(((1.5707963267949)*(x3924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3925=IKcos(j4);
IkReal x3926=IKsin(j4);
IkReal x3927=(cj5*r00);
IkReal x3928=(cj5*r10);
IkReal x3929=(r21*sj5);
IkReal x3930=(cj5*r20);
IkReal x3931=((1.0)*x3925);
IkReal x3932=((1.0)*x3926);
IkReal x3933=(sj5*x3926);
IkReal x3934=(sj5*x3925);
evalcond[0]=(((r12*x3926))+(((-1.0)*x3928*x3931))+((r11*x3934)));
evalcond[1]=((((-1.0)*r22*x3931))+(((-1.0)*x3930*x3932))+((x3926*x3929)));
evalcond[2]=(((r01*x3933))+(((-1.0)*r02*x3931))+(((-1.0)*x3927*x3932)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3931))+(((-1.0)*x3928*x3932))+((r11*x3933)));
evalcond[4]=(((cj2*sj1))+((r01*x3934))+((cj1*sj2))+((r02*x3926))+(((-1.0)*x3927*x3931)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3930*x3931))+((r22*x3926))+((x3925*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3935=((-1.0)*r00);
IkReal x3937 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3937)==0){
continue;
}
IkReal x3936=pow(x3937,-0.5);
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3935),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3938.value));
IkReal gconst109=(r01*x3936);
IkReal gconst110=(x3935*x3936);
CheckValue<IkReal> x3939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3939.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3940=((-1.0)*r00);
IkReal x3941=x3936;
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3940),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
IkReal x3942=((-1.0)*(x3943.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3942;
IkReal gconst108=x3942;
IkReal gconst109=(r01*x3941);
IkReal gconst110=(x3940*x3941);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3944=((1.0)*sj0);
IkReal x3945=((1.0)*gconst109);
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3944)))),IkReal(((((-1.0)*cj0*r01*x3945))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
CheckValue<IkReal> x3947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3945))+(((-1.0)*gconst110*r21)))),-1);
if(!x3947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3946.value)+(((1.5707963267949)*(x3947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3948=IKsin(j4);
IkReal x3949=IKcos(j4);
IkReal x3950=(gconst109*r21);
IkReal x3951=((1.0)*cj2);
IkReal x3952=((1.0)*sj0);
IkReal x3953=(cj1*sj2);
IkReal x3954=((1.0)*x3949);
IkReal x3955=(gconst109*x3948);
IkReal x3956=(gconst109*x3949);
IkReal x3957=((1.0)*gconst110*x3948);
evalcond[0]=((((-1.0)*r22*x3954))+((x3948*x3950))+(((-1.0)*r20*x3957)));
evalcond[1]=(cj0+(((-1.0)*r12*x3954))+((r11*x3955))+(((-1.0)*r10*x3957)));
evalcond[2]=(((r01*x3955))+(((-1.0)*r00*x3957))+(((-1.0)*x3952))+(((-1.0)*r02*x3954)));
evalcond[3]=(((r22*x3948))+((sj1*sj2))+(((-1.0)*cj1*x3951))+((x3949*x3950))+(((-1.0)*gconst110*r20*x3954)));
evalcond[4]=((((-1.0)*cj0*sj1*x3951))+((r01*x3956))+(((-1.0)*cj0*x3953))+(((-1.0)*gconst110*r00*x3954))+((r02*x3948)));
evalcond[5]=((((-1.0)*x3952*x3953))+(((-1.0)*sj0*sj1*x3951))+((r11*x3956))+((r12*x3948))+(((-1.0)*gconst110*r10*x3954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3958=((1.0)*gconst110);
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3958))+(((-1.0)*gconst109*r10)))),-1);
if(!x3959.valid){
continue;
}
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3958))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3959.value)))+(x3960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3961=IKsin(j4);
IkReal x3962=IKcos(j4);
IkReal x3963=(gconst109*r21);
IkReal x3964=((1.0)*cj2);
IkReal x3965=((1.0)*sj0);
IkReal x3966=(cj1*sj2);
IkReal x3967=((1.0)*x3962);
IkReal x3968=(gconst109*x3961);
IkReal x3969=(gconst109*x3962);
IkReal x3970=((1.0)*gconst110*x3961);
evalcond[0]=((((-1.0)*r20*x3970))+((x3961*x3963))+(((-1.0)*r22*x3967)));
evalcond[1]=(cj0+((r11*x3968))+(((-1.0)*r10*x3970))+(((-1.0)*r12*x3967)));
evalcond[2]=((((-1.0)*x3965))+(((-1.0)*r02*x3967))+((r01*x3968))+(((-1.0)*r00*x3970)));
evalcond[3]=(((x3962*x3963))+(((-1.0)*gconst110*r20*x3967))+((r22*x3961))+((sj1*sj2))+(((-1.0)*cj1*x3964)));
evalcond[4]=((((-1.0)*cj0*x3966))+(((-1.0)*gconst110*r00*x3967))+((r02*x3961))+(((-1.0)*cj0*sj1*x3964))+((r01*x3969)));
evalcond[5]=((((-1.0)*gconst110*r10*x3967))+((r11*x3969))+(((-1.0)*x3965*x3966))+((r12*x3961))+(((-1.0)*sj0*sj1*x3964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3971=((-1.0)*r01);
IkReal x3973 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3973)==0){
continue;
}
IkReal x3972=pow(x3973,-0.5);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(x3971),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3974.value))));
IkReal gconst112=(x3971*x3972);
IkReal gconst113=((1.0)*r00*x3972);
CheckValue<IkReal> x3975 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3976=((-1.0)*r01);
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal(x3976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
IkReal x3977=((1.0)*(x3979.value));
IkReal x3978=x3972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3977)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3977)));
IkReal gconst112=(x3976*x3978);
IkReal gconst113=((1.0)*r00*x3978);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3980=((-1.0)*r01);
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(x3980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
IkReal x3981=((1.0)*(x3983.value));
IkReal x3982=x3972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3981)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3981)));
IkReal gconst112=(x3980*x3982);
IkReal gconst113=((1.0)*r00*x3982);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3984=((-1.0)*r01);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal(x3984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
IkReal x3985=((1.0)*(x3987.value));
IkReal x3986=x3972;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3985)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3985)));
IkReal gconst112=(x3984*x3986);
IkReal gconst113=((1.0)*r00*x3986);
IkReal x3988=r02*r02;
IkReal x3989=(r12*sj0);
IkReal x3990=((1.0)*cj0);
IkReal x3991=x3972;
j4eval[0]=((IKabs((((cj0*x3988*x3991))+(((-1.0)*x3990*x3991))+((r02*x3989*x3991)))))+(IKabs(((((-1.0)*r02*x3990))+(((-1.0)*x3989))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3992=((1.0)*sj0);
IkReal x3993=((1.0)*gconst112);
CheckValue<IkReal> x3994=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3993)))),-1);
if(!x3994.valid){
continue;
}
CheckValue<IkReal> x3995 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3992))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3993))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3994.value)))+(x3995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3996=IKsin(j4);
IkReal x3997=IKcos(j4);
IkReal x3998=(gconst113*r20);
IkReal x3999=(gconst112*r21);
IkReal x4000=((1.0)*cj2);
IkReal x4001=(gconst113*r00);
IkReal x4002=(gconst113*r10);
IkReal x4003=((1.0)*sj0);
IkReal x4004=(cj1*sj2);
IkReal x4005=((1.0)*x3997);
IkReal x4006=((1.0)*x3996);
IkReal x4007=(gconst112*x3997);
IkReal x4008=(gconst112*x3996);
evalcond[0]=((((-1.0)*r22*x4005))+(((-1.0)*x3998*x4006))+((x3996*x3999)));
evalcond[1]=(cj0+(((-1.0)*x4002*x4006))+(((-1.0)*r12*x4005))+((r11*x4008)));
evalcond[2]=((((-1.0)*r02*x4005))+(((-1.0)*x4003))+((r01*x4008))+(((-1.0)*x4001*x4006)));
evalcond[3]=((((-1.0)*x3998*x4005))+((sj1*sj2))+(((-1.0)*cj1*x4000))+((r22*x3996))+((x3997*x3999)));
evalcond[4]=((((-1.0)*cj0*x4004))+((r01*x4007))+(((-1.0)*x4001*x4005))+((r02*x3996))+(((-1.0)*cj0*sj1*x4000)));
evalcond[5]=((((-1.0)*x4002*x4005))+((r12*x3996))+(((-1.0)*sj0*sj1*x4000))+(((-1.0)*x4003*x4004))+((r11*x4007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4009=((1.0)*gconst113);
CheckValue<IkReal> x4010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4009))+(((-1.0)*gconst112*r10)))),-1);
if(!x4010.valid){
continue;
}
CheckValue<IkReal> x4011 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4010.value)))+(x4011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4012=IKsin(j4);
IkReal x4013=IKcos(j4);
IkReal x4014=(gconst113*r20);
IkReal x4015=(gconst112*r21);
IkReal x4016=((1.0)*cj2);
IkReal x4017=(gconst113*r00);
IkReal x4018=(gconst113*r10);
IkReal x4019=((1.0)*sj0);
IkReal x4020=(cj1*sj2);
IkReal x4021=((1.0)*x4013);
IkReal x4022=((1.0)*x4012);
IkReal x4023=(gconst112*x4013);
IkReal x4024=(gconst112*x4012);
evalcond[0]=((((-1.0)*r22*x4021))+((x4012*x4015))+(((-1.0)*x4014*x4022)));
evalcond[1]=((((-1.0)*r12*x4021))+cj0+(((-1.0)*x4018*x4022))+((r11*x4024)));
evalcond[2]=((((-1.0)*r02*x4021))+((r01*x4024))+(((-1.0)*x4019))+(((-1.0)*x4017*x4022)));
evalcond[3]=((((-1.0)*cj1*x4016))+((sj1*sj2))+((x4013*x4015))+(((-1.0)*x4014*x4021))+((r22*x4012)));
evalcond[4]=(((r02*x4012))+(((-1.0)*cj0*x4020))+(((-1.0)*cj0*sj1*x4016))+((r01*x4023))+(((-1.0)*x4017*x4021)));
evalcond[5]=((((-1.0)*sj0*sj1*x4016))+(((-1.0)*x4018*x4021))+((r12*x4012))+((r11*x4023))+(((-1.0)*x4019*x4020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4025=((1.0)*gconst113);
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4025))+(((-1.0)*gconst112*r00)))),-1);
if(!x4026.valid){
continue;
}
CheckValue<IkReal> x4027 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4026.value)))+(x4027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4028=IKsin(j4);
IkReal x4029=IKcos(j4);
IkReal x4030=(gconst113*r20);
IkReal x4031=(gconst112*r21);
IkReal x4032=((1.0)*cj2);
IkReal x4033=(gconst113*r00);
IkReal x4034=(gconst113*r10);
IkReal x4035=((1.0)*sj0);
IkReal x4036=(cj1*sj2);
IkReal x4037=((1.0)*x4029);
IkReal x4038=((1.0)*x4028);
IkReal x4039=(gconst112*x4029);
IkReal x4040=(gconst112*x4028);
evalcond[0]=((((-1.0)*x4030*x4038))+((x4028*x4031))+(((-1.0)*r22*x4037)));
evalcond[1]=((((-1.0)*x4034*x4038))+cj0+(((-1.0)*r12*x4037))+((r11*x4040)));
evalcond[2]=((((-1.0)*x4035))+((r01*x4040))+(((-1.0)*x4033*x4038))+(((-1.0)*r02*x4037)));
evalcond[3]=((((-1.0)*x4030*x4037))+((x4029*x4031))+(((-1.0)*cj1*x4032))+((sj1*sj2))+((r22*x4028)));
evalcond[4]=((((-1.0)*cj0*x4036))+((r01*x4039))+(((-1.0)*x4033*x4037))+(((-1.0)*cj0*sj1*x4032))+((r02*x4028)));
evalcond[5]=((((-1.0)*x4034*x4037))+(((-1.0)*x4035*x4036))+((r12*x4028))+((r11*x4039))+(((-1.0)*sj0*sj1*x4032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4041=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4041;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4042=((1.0)*cj5);
IkReal x4043=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4042)));
j4eval[0]=x4043;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4042))+((r21*sj5))))));
j4eval[2]=IKsign(x4043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4044=cj5*cj5;
IkReal x4045=r01*r01;
IkReal x4046=(cj5*r00);
IkReal x4047=(r01*sj5);
IkReal x4048=(((x4044*(r00*r00)))+x4045+(((-2.0)*x4046*x4047))+(((-1.0)*x4044*x4045))+(r02*r02));
j4eval[0]=x4048;
j4eval[1]=IKsign(x4048);
j4eval[2]=((IKabs(r02))+(IKabs((x4047+(((-1.0)*x4046))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4049=cj5*cj5;
IkReal x4050=r01*r01;
IkReal x4051=(r01*sj5);
IkReal x4052=(cj5*r00);
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4051*x4052))+((x4049*(r00*r00)))+x4050+(r02*r02)+(((-1.0)*x4049*x4050)))),-1);
if(!x4053.valid){
continue;
}
CheckValue<IkReal> x4054 = IKatan2WithCheck(IkReal((x4051+(((-1.0)*x4052)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4053.value)))+(x4054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4055=IKcos(j4);
IkReal x4056=IKsin(j4);
IkReal x4057=(cj5*r00);
IkReal x4058=(cj5*r10);
IkReal x4059=(r21*sj5);
IkReal x4060=((1.0)*cj2);
IkReal x4061=(cj5*r20);
IkReal x4062=((1.0)*x4055);
IkReal x4063=((1.0)*x4056);
IkReal x4064=(sj5*x4056);
IkReal x4065=(sj5*x4055);
evalcond[0]=(((r02*x4056))+(((-1.0)*x4057*x4062))+((r01*x4065)));
evalcond[1]=((((-1.0)*x4061*x4063))+(((-1.0)*r22*x4062))+((x4056*x4059)));
evalcond[2]=((((-1.0)*r12*x4062))+((r11*x4064))+(((-1.0)*x4058*x4063)));
evalcond[3]=((-1.0)+(((-1.0)*x4057*x4063))+(((-1.0)*r02*x4062))+((r01*x4064)));
evalcond[4]=((((-1.0)*x4061*x4062))+((sj1*sj2))+((x4055*x4059))+(((-1.0)*cj1*x4060))+((r22*x4056)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4065))+((r12*x4056))+(((-1.0)*x4058*x4062))+(((-1.0)*sj1*x4060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4066=((1.0)*cj5);
CheckValue<IkReal> x4067 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4066))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4067.valid){
continue;
}
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4066)))),-1);
if(!x4068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4067.value)+(((1.5707963267949)*(x4068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4069=IKcos(j4);
IkReal x4070=IKsin(j4);
IkReal x4071=(cj5*r00);
IkReal x4072=(cj5*r10);
IkReal x4073=(r21*sj5);
IkReal x4074=((1.0)*cj2);
IkReal x4075=(cj5*r20);
IkReal x4076=((1.0)*x4069);
IkReal x4077=((1.0)*x4070);
IkReal x4078=(sj5*x4070);
IkReal x4079=(sj5*x4069);
evalcond[0]=((((-1.0)*x4071*x4076))+((r01*x4079))+((r02*x4070)));
evalcond[1]=((((-1.0)*x4075*x4077))+(((-1.0)*r22*x4076))+((x4070*x4073)));
evalcond[2]=((((-1.0)*r12*x4076))+(((-1.0)*x4072*x4077))+((r11*x4078)));
evalcond[3]=((-1.0)+(((-1.0)*x4071*x4077))+(((-1.0)*r02*x4076))+((r01*x4078)));
evalcond[4]=((((-1.0)*x4075*x4076))+((r22*x4070))+((sj1*sj2))+(((-1.0)*cj1*x4074))+((x4069*x4073)));
evalcond[5]=(((r12*x4070))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4074))+(((-1.0)*x4072*x4076))+((r11*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4080.valid){
continue;
}
CheckValue<IkReal> x4081 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4080.value)))+(x4081.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4082=IKcos(j4);
IkReal x4083=IKsin(j4);
IkReal x4084=(cj5*r00);
IkReal x4085=(cj5*r10);
IkReal x4086=(r21*sj5);
IkReal x4087=((1.0)*cj2);
IkReal x4088=(cj5*r20);
IkReal x4089=((1.0)*x4082);
IkReal x4090=((1.0)*x4083);
IkReal x4091=(sj5*x4083);
IkReal x4092=(sj5*x4082);
evalcond[0]=(((r01*x4092))+(((-1.0)*x4084*x4089))+((r02*x4083)));
evalcond[1]=(((x4083*x4086))+(((-1.0)*r22*x4089))+(((-1.0)*x4088*x4090)));
evalcond[2]=((((-1.0)*r12*x4089))+((r11*x4091))+(((-1.0)*x4085*x4090)));
evalcond[3]=((-1.0)+((r01*x4091))+(((-1.0)*r02*x4089))+(((-1.0)*x4084*x4090)));
evalcond[4]=(((x4082*x4086))+((sj1*sj2))+(((-1.0)*cj1*x4087))+(((-1.0)*x4088*x4089))+((r22*x4083)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4092))+(((-1.0)*sj1*x4087))+((r12*x4083))+(((-1.0)*x4085*x4089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4093=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4093;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4094=((1.0)*cj5);
IkReal x4095=((((-1.0)*r21*x4094))+(((-1.0)*r20*sj5)));
j4eval[0]=x4095;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4094))+((r11*sj5))))));
j4eval[2]=IKsign(x4095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4096=cj5*cj5;
IkReal x4097=r01*r01;
IkReal x4098=(r01*sj5);
IkReal x4099=(cj5*r00);
IkReal x4100=((((-1.0)*x4096*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4098*x4099))+(((-1.0)*x4097))+((x4096*x4097)));
j4eval[0]=x4100;
j4eval[1]=IKsign(x4100);
j4eval[2]=((IKabs(r02))+(IKabs((x4098+(((-1.0)*x4099))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4101=cj5*cj5;
IkReal x4102=r01*r01;
IkReal x4103=(r01*sj5);
IkReal x4104=(cj5*r00);
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal(((((-1.0)*x4104))+x4103)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
CheckValue<IkReal> x4106=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4102))+(((-1.0)*x4101*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4101*x4102))+(((2.0)*x4103*x4104)))),-1);
if(!x4106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4105.value)+(((1.5707963267949)*(x4106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4107=IKcos(j4);
IkReal x4108=IKsin(j4);
IkReal x4109=(cj5*r00);
IkReal x4110=(cj5*r10);
IkReal x4111=(r21*sj5);
IkReal x4112=(cj5*r20);
IkReal x4113=((1.0)*x4107);
IkReal x4114=((1.0)*x4108);
IkReal x4115=(sj5*x4108);
IkReal x4116=(sj5*x4107);
evalcond[0]=((((-1.0)*x4109*x4113))+((r02*x4108))+((r01*x4116)));
evalcond[1]=(((x4108*x4111))+(((-1.0)*r22*x4113))+(((-1.0)*x4112*x4114)));
evalcond[2]=((((-1.0)*r12*x4113))+(((-1.0)*x4110*x4114))+((r11*x4115)));
evalcond[3]=((1.0)+(((-1.0)*x4109*x4114))+(((-1.0)*r02*x4113))+((r01*x4115)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4110*x4113))+((r12*x4108))+((r11*x4116)));
evalcond[5]=(((r22*x4108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4112*x4113))+((x4107*x4111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4117=((1.0)*cj5);
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
CheckValue<IkReal> x4119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4117))+(((-1.0)*r20*sj5)))),-1);
if(!x4119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4118.value)+(((1.5707963267949)*(x4119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4120=IKcos(j4);
IkReal x4121=IKsin(j4);
IkReal x4122=(cj5*r00);
IkReal x4123=(cj5*r10);
IkReal x4124=(r21*sj5);
IkReal x4125=(cj5*r20);
IkReal x4126=((1.0)*x4120);
IkReal x4127=((1.0)*x4121);
IkReal x4128=(sj5*x4121);
IkReal x4129=(sj5*x4120);
evalcond[0]=(((r02*x4121))+(((-1.0)*x4122*x4126))+((r01*x4129)));
evalcond[1]=((((-1.0)*r22*x4126))+((x4121*x4124))+(((-1.0)*x4125*x4127)));
evalcond[2]=((((-1.0)*r12*x4126))+(((-1.0)*x4123*x4127))+((r11*x4128)));
evalcond[3]=((1.0)+(((-1.0)*x4122*x4127))+(((-1.0)*r02*x4126))+((r01*x4128)));
evalcond[4]=(((r12*x4121))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4123*x4126))+((r11*x4129)));
evalcond[5]=(((x4120*x4124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4121))+(((-1.0)*x4125*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4130 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4130.valid){
continue;
}
CheckValue<IkReal> x4131=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4130.value)+(((1.5707963267949)*(x4131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4132=IKcos(j4);
IkReal x4133=IKsin(j4);
IkReal x4134=(cj5*r00);
IkReal x4135=(cj5*r10);
IkReal x4136=(r21*sj5);
IkReal x4137=(cj5*r20);
IkReal x4138=((1.0)*x4132);
IkReal x4139=((1.0)*x4133);
IkReal x4140=(sj5*x4133);
IkReal x4141=(sj5*x4132);
evalcond[0]=(((r01*x4141))+(((-1.0)*x4134*x4138))+((r02*x4133)));
evalcond[1]=((((-1.0)*x4137*x4139))+(((-1.0)*r22*x4138))+((x4133*x4136)));
evalcond[2]=((((-1.0)*x4135*x4139))+((r11*x4140))+(((-1.0)*r12*x4138)));
evalcond[3]=((1.0)+((r01*x4140))+(((-1.0)*x4134*x4139))+(((-1.0)*r02*x4138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4135*x4138))+((r11*x4141))+((r12*x4133)));
evalcond[5]=(((r22*x4133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4132*x4136))+(((-1.0)*x4137*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4142=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4142);
rxp1_1=(px*r21);
rxp1_2=(r11*x4142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4143=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4143);
rxp1_1=(px*r21);
rxp1_2=(r11*x4143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4144=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4144);
rxp1_1=(px*r21);
rxp1_2=(r11*x4144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4147=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4147.valid){
continue;
}
IkReal x4145=x4147.value;
IkReal x4146=(sj0*x4145);
cj4array[0]=(((cj1*sj2*x4146))+((cj2*sj1*x4146)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4148=IKsin(j4);
IkReal x4149=IKcos(j4);
IkReal x4150=(r21*sj5);
IkReal x4151=((1.0)*cj5*r20);
evalcond[0]=(r02*x4148);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4149)));
evalcond[2]=((((-1.0)*x4148*x4151))+((x4148*x4150)));
evalcond[3]=((((-1.0)*cj5*r10*x4148))+((r11*sj5*x4148)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4149*x4150))+(((-1.0)*x4149*x4151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4153=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4153.valid){
continue;
}
IkReal x4152=x4153.value;
cj4array[0]=(((cj1*cj2*x4152))+(((-1.0)*sj1*sj2*x4152)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4154=IKsin(j4);
IkReal x4155=IKcos(j4);
IkReal x4156=((1.0)*sj0);
IkReal x4157=((1.0)*cj5);
IkReal x4158=(sj5*x4154);
evalcond[0]=(r02*x4154);
evalcond[1]=((((-1.0)*x4156))+(((-1.0)*r02*x4155)));
evalcond[2]=((((-1.0)*r20*x4154*x4157))+((r21*x4158)));
evalcond[3]=(((r11*x4158))+(((-1.0)*r10*x4154*x4157)));
evalcond[4]=((((-1.0)*r10*x4155*x4157))+((r11*sj5*x4155))+(((-1.0)*cj1*sj2*x4156))+(((-1.0)*cj2*sj1*x4156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(r02,-1);
if(!x4159.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4159.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4160=IKsin(j4);
IkReal x4161=IKcos(j4);
IkReal x4162=((1.0)*cj1);
IkReal x4163=(r21*sj5);
IkReal x4164=((1.0)*cj5);
IkReal x4165=(r11*sj5);
evalcond[0]=(r02*x4160);
evalcond[1]=((((-1.0)*r20*x4160*x4164))+((x4160*x4163)));
evalcond[2]=(((x4160*x4165))+(((-1.0)*r10*x4160*x4164)));
evalcond[3]=((((-1.0)*cj2*x4162))+((sj1*sj2))+(((-1.0)*r20*x4161*x4164))+((x4161*x4163)));
evalcond[4]=((((-1.0)*sj0*sj2*x4162))+(((-1.0)*r10*x4161*x4164))+(((-1.0)*cj2*sj0*sj1))+((x4161*x4165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4166=((1.0)*sj0);
IkReal x4167=((1.0)*cj0);
CheckValue<IkReal> x4168 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4167))+(((-1.0)*r12*x4166)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4167))+(((-1.0)*r11*sj5*x4166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4168.valid){
continue;
}
CheckValue<IkReal> x4169=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4168.value)+(((1.5707963267949)*(x4169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4170=IKsin(j4);
IkReal x4171=IKcos(j4);
IkReal x4172=(cj5*r00);
IkReal x4173=(cj5*r10);
IkReal x4174=(r21*sj5);
IkReal x4175=((1.0)*cj2);
IkReal x4176=((1.0)*sj0);
IkReal x4177=(cj1*sj2);
IkReal x4178=(cj5*r20);
IkReal x4179=((1.0)*x4171);
IkReal x4180=((1.0)*x4170);
IkReal x4181=(sj5*x4170);
IkReal x4182=(sj5*x4171);
evalcond[0]=(((x4170*x4174))+(((-1.0)*r22*x4179))+(((-1.0)*x4178*x4180)));
evalcond[1]=(cj0+((r11*x4181))+(((-1.0)*x4173*x4180))+(((-1.0)*r12*x4179)));
evalcond[2]=((((-1.0)*x4172*x4180))+(((-1.0)*x4176))+((r01*x4181))+(((-1.0)*r02*x4179)));
evalcond[3]=((((-1.0)*cj1*x4175))+((r22*x4170))+((sj1*sj2))+(((-1.0)*x4178*x4179))+((x4171*x4174)));
evalcond[4]=((((-1.0)*x4172*x4179))+(((-1.0)*cj0*x4177))+((r01*x4182))+((r02*x4170))+(((-1.0)*cj0*sj1*x4175)));
evalcond[5]=(((r12*x4170))+((r11*x4182))+(((-1.0)*x4176*x4177))+(((-1.0)*sj0*sj1*x4175))+(((-1.0)*x4173*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4183=((1.0)*cj5);
CheckValue<IkReal> x4184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4183))+(((-1.0)*r10*sj5)))),-1);
if(!x4184.valid){
continue;
}
CheckValue<IkReal> x4185 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4183))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4184.value)))+(x4185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4186=IKsin(j4);
IkReal x4187=IKcos(j4);
IkReal x4188=(cj5*r00);
IkReal x4189=(cj5*r10);
IkReal x4190=(r21*sj5);
IkReal x4191=((1.0)*cj2);
IkReal x4192=((1.0)*sj0);
IkReal x4193=(cj1*sj2);
IkReal x4194=(cj5*r20);
IkReal x4195=((1.0)*x4187);
IkReal x4196=((1.0)*x4186);
IkReal x4197=(sj5*x4186);
IkReal x4198=(sj5*x4187);
evalcond[0]=((((-1.0)*x4194*x4196))+((x4186*x4190))+(((-1.0)*r22*x4195)));
evalcond[1]=((((-1.0)*r12*x4195))+((r11*x4197))+cj0+(((-1.0)*x4189*x4196)));
evalcond[2]=((((-1.0)*x4192))+(((-1.0)*r02*x4195))+((r01*x4197))+(((-1.0)*x4188*x4196)));
evalcond[3]=((((-1.0)*x4194*x4195))+((x4187*x4190))+((sj1*sj2))+((r22*x4186))+(((-1.0)*cj1*x4191)));
evalcond[4]=(((r02*x4186))+(((-1.0)*cj0*sj1*x4191))+(((-1.0)*cj0*x4193))+((r01*x4198))+(((-1.0)*x4188*x4195)));
evalcond[5]=(((r12*x4186))+((r11*x4198))+(((-1.0)*x4189*x4195))+(((-1.0)*sj0*sj1*x4191))+(((-1.0)*x4192*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4199=((1.0)*cj5);
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4199))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
CheckValue<IkReal> x4201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4199))+(((-1.0)*r00*sj5)))),-1);
if(!x4201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4200.value)+(((1.5707963267949)*(x4201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4202=IKsin(j4);
IkReal x4203=IKcos(j4);
IkReal x4204=(cj5*r00);
IkReal x4205=(cj5*r10);
IkReal x4206=(r21*sj5);
IkReal x4207=((1.0)*cj2);
IkReal x4208=((1.0)*sj0);
IkReal x4209=(cj1*sj2);
IkReal x4210=(cj5*r20);
IkReal x4211=((1.0)*x4203);
IkReal x4212=((1.0)*x4202);
IkReal x4213=(sj5*x4202);
IkReal x4214=(sj5*x4203);
evalcond[0]=((((-1.0)*x4210*x4212))+(((-1.0)*r22*x4211))+((x4202*x4206)));
evalcond[1]=(cj0+((r11*x4213))+(((-1.0)*r12*x4211))+(((-1.0)*x4205*x4212)));
evalcond[2]=((((-1.0)*x4204*x4212))+(((-1.0)*r02*x4211))+(((-1.0)*x4208))+((r01*x4213)));
evalcond[3]=(((r22*x4202))+(((-1.0)*x4210*x4211))+((sj1*sj2))+(((-1.0)*cj1*x4207))+((x4203*x4206)));
evalcond[4]=(((r02*x4202))+(((-1.0)*x4204*x4211))+(((-1.0)*cj0*x4209))+(((-1.0)*cj0*sj1*x4207))+((r01*x4214)));
evalcond[5]=((((-1.0)*x4208*x4209))+((r11*x4214))+(((-1.0)*x4205*x4211))+(((-1.0)*sj0*sj1*x4207))+((r12*x4202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4215=r21*r21;
IkReal x4216=cj5*cj5;
IkReal x4217=(sj1*sj2);
IkReal x4218=(r21*sj5);
IkReal x4219=(cj1*cj2);
IkReal x4220=(cj5*r20);
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(IKsign((((x4215*x4216))+(((2.0)*x4218*x4220))+(((-1.0)*(r22*r22)))+(((-1.0)*x4215))+(((-1.0)*x4216*(r20*r20))))),-1);
if(!x4221.valid){
continue;
}
CheckValue<IkReal> x4222 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4219))+((r22*x4217)))),IkReal((((x4217*x4218))+(((-1.0)*x4218*x4219))+(((-1.0)*x4217*x4220))+((x4219*x4220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4221.value)))+(x4222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4223=IKsin(j4);
IkReal x4224=IKcos(j4);
IkReal x4225=(r21*sj5);
IkReal x4226=(cj5*r20);
IkReal x4227=((1.0)*x4224);
evalcond[0]=((((-1.0)*x4223*x4226))+(((-1.0)*r22*x4227))+((x4223*x4225)));
evalcond[1]=(((x4224*x4225))+(((-1.0)*x4226*x4227))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4228=(cj5*sj4);
IkReal x4229=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4229))+(((-1.0)*r00*x4228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4228))+(((-1.0)*r11*x4229))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4229))+(((-1.0)*r00*x4228))))+IKsqr((((r10*x4228))+(((-1.0)*r11*x4229))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4229))+(((-1.0)*r00*x4228))), (((r10*x4228))+(((-1.0)*r11*x4229))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4230=IKcos(j0);
IkReal x4231=IKsin(j0);
IkReal x4232=((0.21325)*cj2);
IkReal x4233=((1.0)*sj2);
IkReal x4234=(r11*sj5);
IkReal x4235=(r00*sj5);
IkReal x4236=(cj5*r11);
IkReal x4237=((0.21325)*sj2);
IkReal x4238=((1.0)*r10);
IkReal x4239=((1.0)*cj2);
IkReal x4240=(cj5*r01);
IkReal x4241=(cj5*sj4);
IkReal x4242=((1.0)*cj4);
IkReal x4243=(r01*sj5);
IkReal x4244=(cj1*x4231);
IkReal x4245=(cj1*x4230);
IkReal x4246=(cj5*x4242);
IkReal x4247=(sj1*x4230);
IkReal x4248=(sj1*x4231);
evalcond[0]=(((sj4*x4234))+(((-1.0)*r12*x4242))+(((-1.0)*x4238*x4241))+x4230);
evalcond[1]=(((sj4*x4243))+(((-1.0)*x4231))+(((-1.0)*r00*x4241))+(((-1.0)*r02*x4242)));
evalcond[2]=((((-1.0)*x4235))+(((-1.0)*x4239*x4245))+((sj2*x4247))+(((-1.0)*x4240)));
evalcond[3]=((((-1.0)*sj5*x4238))+(((-1.0)*x4236))+(((-1.0)*x4239*x4244))+((sj2*x4248)));
evalcond[4]=(((cj4*x4243))+(((-1.0)*x4233*x4245))+((r02*sj4))+(((-1.0)*x4239*x4247))+(((-1.0)*r00*x4246)));
evalcond[5]=(((cj4*x4234))+(((-1.0)*x4233*x4244))+(((-1.0)*cj4*cj5*x4238))+((r12*sj4))+(((-1.0)*x4239*x4248)));
evalcond[6]=(((x4232*x4245))+(((-0.11235)*x4231))+(((-0.08535)*x4235))+(((-1.0)*px))+(((-1.0)*x4237*x4247))+(((0.24365)*x4245))+(((-0.08535)*x4240)));
evalcond[7]=(((x4232*x4244))+(((-0.08535)*x4236))+(((0.11235)*x4230))+(((-1.0)*py))+(((-1.0)*x4237*x4248))+(((-0.08535)*r10*sj5))+(((0.24365)*x4244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4250.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4249.value)+(((1.5707963267949)*(x4250.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4251=IKcos(j0);
IkReal x4252=IKsin(j0);
IkReal x4253=(cj1*cj2);
IkReal x4254=((1.0)*cj5);
IkReal x4255=(sj1*sj2);
IkReal x4256=(r00*sj5);
IkReal x4257=(r10*sj5);
IkReal x4258=((0.24365)*cj1);
IkReal x4259=((0.08535)*cj5);
IkReal x4260=((0.21325)*x4252);
IkReal x4261=((0.21325)*x4251);
evalcond[0]=(((x4251*x4255))+(((-1.0)*x4256))+(((-1.0)*r01*x4254))+(((-1.0)*x4251*x4253)));
evalcond[1]=((((-1.0)*x4252*x4253))+(((-1.0)*x4257))+((x4252*x4255))+(((-1.0)*r11*x4254)));
evalcond[2]=(((x4253*x4261))+(((-0.08535)*x4256))+(((-1.0)*px))+(((-1.0)*x4255*x4261))+((x4251*x4258))+(((-1.0)*r01*x4259))+(((-0.11235)*x4252)));
evalcond[3]=(((x4253*x4260))+(((-0.08535)*x4257))+(((-1.0)*py))+(((-1.0)*x4255*x4260))+((x4252*x4258))+(((0.11235)*x4251))+(((-1.0)*r11*x4259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4262=((1.0)*cj5);
IkReal x4263=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4262)));
j4eval[0]=x4263;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4262)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4264=((1.0)*cj5);
IkReal x4265=((((-1.0)*r11*x4264))+(((-1.0)*r10*sj5)));
j4eval[0]=x4265;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x4264))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x4265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4266=((1.0)*sj0);
IkReal x4267=((1.0)*cj0);
IkReal x4268=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4268;
j4eval[1]=((IKabs(((((-1.0)*r12*x4266))+(((-1.0)*r02*x4267)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4267))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4266))))));
j4eval[2]=IKsign(x4268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4269=((-1.0)*r20);
IkReal x4271 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4271)==0){
continue;
}
IkReal x4270=pow(x4271,-0.5);
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4269),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4272.value));
IkReal gconst97=(r21*x4270);
IkReal gconst98=(x4269*x4270);
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4274=((-1.0)*r20);
IkReal x4275=x4270;
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4274),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
IkReal x4276=((-1.0)*(x4277.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4276;
IkReal gconst96=x4276;
IkReal gconst97=(r21*x4275);
IkReal gconst98=(x4274*x4275);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4278=((-1.0)*r20);
IkReal x4279=x4270;
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4278),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
IkReal x4280=((-1.0)*(x4281.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4280;
IkReal gconst96=x4280;
IkReal gconst97=(r21*x4279);
IkReal gconst98=(x4278*x4279);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4282=((-1.0)*r20);
IkReal x4283=x4270;
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4282),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
IkReal x4284=((-1.0)*(x4285.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4284;
IkReal gconst96=x4284;
IkReal gconst97=(r21*x4283);
IkReal gconst98=(x4282*x4283);
IkReal x4286=((1.0)*(r22*r22));
CheckValue<IkReal> x4290=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4286))),-1);
if(!x4290.valid){
continue;
}
IkReal x4287=x4290.value;
IkReal x4288=((1.0)*x4287);
IkReal x4289=((((-1.0)*x4286))+(((-1.0)*x4288*(r20*r20*r20*r20)))+(((-2.0)*x4287*(r20*r20)*(r21*r21)))+(((-1.0)*x4288*(r21*r21*r21*r21))));
j4eval[0]=x4289;
j4eval[1]=IKsign(x4289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4291=(cj1*cj2);
IkReal x4292=(gconst98*r20);
IkReal x4293=(sj1*sj2);
IkReal x4294=(gconst97*r21);
CheckValue<IkReal> x4295=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4294*x4294)))+(((-1.0)*(r22*r22)))+(((2.0)*x4292*x4294))+(((-1.0)*(x4292*x4292))))),-1);
if(!x4295.valid){
continue;
}
CheckValue<IkReal> x4296 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4291))+((r22*x4293)))),IkReal((((x4293*x4294))+(((-1.0)*x4291*x4294))+((x4291*x4292))+(((-1.0)*x4292*x4293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4295.value)))+(x4296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4297=IKsin(j4);
IkReal x4298=IKcos(j4);
IkReal x4299=(gconst98*r10);
IkReal x4300=(gconst97*r21);
IkReal x4301=(gconst98*r20);
IkReal x4302=((1.0)*cj2);
IkReal x4303=((1.0)*sj0);
IkReal x4304=(gconst98*r00);
IkReal x4305=(cj1*sj2);
IkReal x4306=((1.0)*x4298);
IkReal x4307=((1.0)*x4297);
IkReal x4308=(gconst97*x4297);
IkReal x4309=(gconst97*x4298);
evalcond[0]=((((-1.0)*r22*x4306))+(((-1.0)*x4301*x4307))+((x4297*x4300)));
evalcond[1]=((((-1.0)*r12*x4306))+((r11*x4308))+cj0+(((-1.0)*x4299*x4307)));
evalcond[2]=(((r01*x4308))+(((-1.0)*r02*x4306))+(((-1.0)*x4304*x4307))+(((-1.0)*x4303)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4302))+((x4298*x4300))+((r22*x4297))+(((-1.0)*x4301*x4306)));
evalcond[4]=((((-1.0)*cj0*sj1*x4302))+(((-1.0)*cj0*x4305))+((r01*x4309))+(((-1.0)*x4304*x4306))+((r02*x4297)));
evalcond[5]=(((r11*x4309))+(((-1.0)*sj0*sj1*x4302))+(((-1.0)*x4303*x4305))+((r12*x4297))+(((-1.0)*x4299*x4306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4310=((1.0)*gconst98);
CheckValue<IkReal> x4311 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4311.valid){
continue;
}
CheckValue<IkReal> x4312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4310))+(((-1.0)*gconst97*r10)))),-1);
if(!x4312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4311.value)+(((1.5707963267949)*(x4312.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4313=IKsin(j4);
IkReal x4314=IKcos(j4);
IkReal x4315=(gconst98*r10);
IkReal x4316=(gconst97*r21);
IkReal x4317=(gconst98*r20);
IkReal x4318=((1.0)*cj2);
IkReal x4319=((1.0)*sj0);
IkReal x4320=(gconst98*r00);
IkReal x4321=(cj1*sj2);
IkReal x4322=((1.0)*x4314);
IkReal x4323=((1.0)*x4313);
IkReal x4324=(gconst97*x4313);
IkReal x4325=(gconst97*x4314);
evalcond[0]=((((-1.0)*x4317*x4323))+(((-1.0)*r22*x4322))+((x4313*x4316)));
evalcond[1]=(cj0+(((-1.0)*x4315*x4323))+(((-1.0)*r12*x4322))+((r11*x4324)));
evalcond[2]=((((-1.0)*r02*x4322))+(((-1.0)*x4319))+(((-1.0)*x4320*x4323))+((r01*x4324)));
evalcond[3]=((((-1.0)*cj1*x4318))+(((-1.0)*x4317*x4322))+((sj1*sj2))+((x4314*x4316))+((r22*x4313)));
evalcond[4]=((((-1.0)*x4320*x4322))+(((-1.0)*cj0*x4321))+(((-1.0)*cj0*sj1*x4318))+((r02*x4313))+((r01*x4325)));
evalcond[5]=((((-1.0)*x4315*x4322))+((r12*x4313))+(((-1.0)*sj0*sj1*x4318))+((r11*x4325))+(((-1.0)*x4319*x4321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4326=((1.0)*gconst98);
CheckValue<IkReal> x4327 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4326))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4327.valid){
continue;
}
CheckValue<IkReal> x4328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4326))+(((-1.0)*gconst97*r00)))),-1);
if(!x4328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4327.value)+(((1.5707963267949)*(x4328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4329=IKsin(j4);
IkReal x4330=IKcos(j4);
IkReal x4331=(gconst98*r10);
IkReal x4332=(gconst97*r21);
IkReal x4333=(gconst98*r20);
IkReal x4334=((1.0)*cj2);
IkReal x4335=((1.0)*sj0);
IkReal x4336=(gconst98*r00);
IkReal x4337=(cj1*sj2);
IkReal x4338=((1.0)*x4330);
IkReal x4339=((1.0)*x4329);
IkReal x4340=(gconst97*x4329);
IkReal x4341=(gconst97*x4330);
evalcond[0]=((((-1.0)*x4333*x4339))+(((-1.0)*r22*x4338))+((x4329*x4332)));
evalcond[1]=(cj0+(((-1.0)*x4331*x4339))+(((-1.0)*r12*x4338))+((r11*x4340)));
evalcond[2]=((((-1.0)*r02*x4338))+(((-1.0)*x4335))+(((-1.0)*x4336*x4339))+((r01*x4340)));
evalcond[3]=((((-1.0)*x4333*x4338))+((sj1*sj2))+(((-1.0)*cj1*x4334))+((r22*x4329))+((x4330*x4332)));
evalcond[4]=((((-1.0)*cj0*sj1*x4334))+((r02*x4329))+(((-1.0)*cj0*x4337))+(((-1.0)*x4336*x4338))+((r01*x4341)));
evalcond[5]=((((-1.0)*x4331*x4338))+(((-1.0)*sj0*sj1*x4334))+((r12*x4329))+((r11*x4341))+(((-1.0)*x4335*x4337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4342=((-1.0)*r21);
IkReal x4344 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4344)==0){
continue;
}
IkReal x4343=pow(x4344,-0.5);
CheckValue<IkReal> x4345 = IKatan2WithCheck(IkReal(x4342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4345.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4345.value))));
IkReal gconst100=(x4342*x4343);
IkReal gconst101=((1.0)*r20*x4343);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4346.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4347=((-1.0)*r21);
CheckValue<IkReal> x4350 = IKatan2WithCheck(IkReal(x4347),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4350.valid){
continue;
}
IkReal x4348=((1.0)*(x4350.value));
IkReal x4349=x4343;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4348)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4348)));
IkReal gconst100=(x4347*x4349);
IkReal gconst101=((1.0)*r20*x4349);
IkReal x4351=r22*r22;
IkReal x4352=((1.0)*x4351);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(((-1.0)+x4351),-1);
if(!x4356.valid){
continue;
}
IkReal x4353=x4356.value;
if((((1.0)+(((-1.0)*x4352)))) < -0.00001)
continue;
IkReal x4354=IKsqrt(((1.0)+(((-1.0)*x4352))));
IkReal x4355=(cj0*x4353*x4354);
j4eval[0]=((IKabs(((((-1.0)*x4352*x4355))+x4355)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4357=((-1.0)*r21);
CheckValue<IkReal> x4360 = IKatan2WithCheck(IkReal(x4357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4360.valid){
continue;
}
IkReal x4358=((1.0)*(x4360.value));
IkReal x4359=x4343;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4358)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4358)));
IkReal gconst100=(x4357*x4359);
IkReal gconst101=((1.0)*r20*x4359);
IkReal x4361=r22*r22;
IkReal x4362=((1.0)*x4361);
CheckValue<IkReal> x4366=IKPowWithIntegerCheck(((-1.0)+x4361),-1);
if(!x4366.valid){
continue;
}
IkReal x4363=x4366.value;
if((((1.0)+(((-1.0)*x4362)))) < -0.00001)
continue;
IkReal x4364=IKsqrt(((1.0)+(((-1.0)*x4362))));
IkReal x4365=(sj0*x4363*x4364);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4362*x4365))+x4365))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4367=((-1.0)*r21);
CheckValue<IkReal> x4370 = IKatan2WithCheck(IkReal(x4367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4370.valid){
continue;
}
IkReal x4368=((1.0)*(x4370.value));
IkReal x4369=x4343;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4368)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4368)));
IkReal gconst100=(x4367*x4369);
IkReal gconst101=((1.0)*r20*x4369);
IkReal x4371=r22*r22;
IkReal x4372=(r12*sj0);
IkReal x4373=(cj0*r02);
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(((-1.0)+x4371),-1);
if(!x4377.valid){
continue;
}
IkReal x4374=x4377.value;
if((((1.0)+(((-1.0)*x4371)))) < -0.00001)
continue;
IkReal x4375=IKsqrt(((1.0)+(((-1.0)*x4371))));
IkReal x4376=(r22*x4374*x4375);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4372))+(((-1.0)*x4373)))))+(IKabs((((x4372*x4376))+((x4373*x4376))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4378=((1.0)*sj0);
IkReal x4379=((1.0)*gconst100);
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4379))+(((-1.0)*gconst101*r21)))),-1);
if(!x4380.valid){
continue;
}
CheckValue<IkReal> x4381 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4378)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4379))+(((-1.0)*gconst100*r11*x4378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4380.value)))+(x4381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4382=IKsin(j4);
IkReal x4383=IKcos(j4);
IkReal x4384=(gconst101*r20);
IkReal x4385=(gconst101*r10);
IkReal x4386=((1.0)*cj2);
IkReal x4387=(gconst101*r00);
IkReal x4388=((1.0)*sj0);
IkReal x4389=(cj1*sj2);
IkReal x4390=((1.0)*x4383);
IkReal x4391=((1.0)*x4382);
IkReal x4392=(gconst100*x4382);
IkReal x4393=(gconst100*x4383);
evalcond[0]=((((-1.0)*r22*x4390))+((r21*x4392))+(((-1.0)*x4384*x4391)));
evalcond[1]=((((-1.0)*r12*x4390))+cj0+((r11*x4392))+(((-1.0)*x4385*x4391)));
evalcond[2]=(((r01*x4392))+(((-1.0)*r02*x4390))+(((-1.0)*x4387*x4391))+(((-1.0)*x4388)));
evalcond[3]=(((r22*x4382))+((sj1*sj2))+((r21*x4393))+(((-1.0)*cj1*x4386))+(((-1.0)*x4384*x4390)));
evalcond[4]=(((r01*x4393))+(((-1.0)*x4387*x4390))+(((-1.0)*cj0*sj1*x4386))+((r02*x4382))+(((-1.0)*cj0*x4389)));
evalcond[5]=((((-1.0)*x4388*x4389))+((r11*x4393))+((r12*x4382))+(((-1.0)*x4385*x4390))+(((-1.0)*sj0*sj1*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4394=((1.0)*gconst101);
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4394))+(((-1.0)*gconst100*r10)))),-1);
if(!x4395.valid){
continue;
}
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4394))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4395.value)))+(x4396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4397=IKsin(j4);
IkReal x4398=IKcos(j4);
IkReal x4399=(gconst101*r20);
IkReal x4400=(gconst101*r10);
IkReal x4401=((1.0)*cj2);
IkReal x4402=(gconst101*r00);
IkReal x4403=((1.0)*sj0);
IkReal x4404=(cj1*sj2);
IkReal x4405=((1.0)*x4398);
IkReal x4406=((1.0)*x4397);
IkReal x4407=(gconst100*x4397);
IkReal x4408=(gconst100*x4398);
evalcond[0]=(((r21*x4407))+(((-1.0)*x4399*x4406))+(((-1.0)*r22*x4405)));
evalcond[1]=(((r11*x4407))+cj0+(((-1.0)*x4400*x4406))+(((-1.0)*r12*x4405)));
evalcond[2]=(((r01*x4407))+(((-1.0)*r02*x4405))+(((-1.0)*x4403))+(((-1.0)*x4402*x4406)));
evalcond[3]=(((r21*x4408))+((r22*x4397))+((sj1*sj2))+(((-1.0)*x4399*x4405))+(((-1.0)*cj1*x4401)));
evalcond[4]=((((-1.0)*cj0*x4404))+((r02*x4397))+((r01*x4408))+(((-1.0)*x4402*x4405))+(((-1.0)*cj0*sj1*x4401)));
evalcond[5]=(((r11*x4408))+(((-1.0)*x4403*x4404))+(((-1.0)*x4400*x4405))+(((-1.0)*sj0*sj1*x4401))+((r12*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4409=((1.0)*gconst101);
CheckValue<IkReal> x4410 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4409))+((cj0*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4410.valid){
continue;
}
CheckValue<IkReal> x4411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4409)))),-1);
if(!x4411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4410.value)+(((1.5707963267949)*(x4411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4412=IKsin(j4);
IkReal x4413=IKcos(j4);
IkReal x4414=(gconst101*r20);
IkReal x4415=(gconst101*r10);
IkReal x4416=((1.0)*cj2);
IkReal x4417=(gconst101*r00);
IkReal x4418=((1.0)*sj0);
IkReal x4419=(cj1*sj2);
IkReal x4420=((1.0)*x4413);
IkReal x4421=((1.0)*x4412);
IkReal x4422=(gconst100*x4412);
IkReal x4423=(gconst100*x4413);
evalcond[0]=((((-1.0)*x4414*x4421))+(((-1.0)*r22*x4420))+((r21*x4422)));
evalcond[1]=((((-1.0)*x4415*x4421))+cj0+(((-1.0)*r12*x4420))+((r11*x4422)));
evalcond[2]=((((-1.0)*x4417*x4421))+(((-1.0)*x4418))+((r01*x4422))+(((-1.0)*r02*x4420)));
evalcond[3]=((((-1.0)*x4414*x4420))+((r22*x4412))+((sj1*sj2))+((r21*x4423))+(((-1.0)*cj1*x4416)));
evalcond[4]=((((-1.0)*cj0*sj1*x4416))+(((-1.0)*cj0*x4419))+(((-1.0)*x4417*x4420))+((r01*x4423))+((r02*x4412)));
evalcond[5]=((((-1.0)*x4415*x4420))+(((-1.0)*x4418*x4419))+((r12*x4412))+(((-1.0)*sj0*sj1*x4416))+((r11*x4423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4424=((-1.0)*r10);
IkReal x4426 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4426)==0){
continue;
}
IkReal x4425=pow(x4426,-0.5);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4424),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4427.value));
IkReal gconst103=(r11*x4425);
IkReal gconst104=(x4424*x4425);
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4429=((-1.0)*r10);
IkReal x4430=x4425;
CheckValue<IkReal> x4432 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4429),IKFAST_ATAN2_MAGTHRESH);
if(!x4432.valid){
continue;
}
IkReal x4431=((-1.0)*(x4432.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4431;
IkReal gconst102=x4431;
IkReal gconst103=(r11*x4430);
IkReal gconst104=(x4429*x4430);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4433=((1.0)*sj0);
IkReal x4434=((1.0)*gconst103);
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4433)))),IkReal(((((-1.0)*gconst103*r11*x4433))+(((-1.0)*cj0*r01*x4434))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
CheckValue<IkReal> x4436=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4434)))),-1);
if(!x4436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4435.value)+(((1.5707963267949)*(x4436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4437=IKsin(j4);
IkReal x4438=IKcos(j4);
IkReal x4439=(gconst103*r11);
IkReal x4440=((1.0)*cj2);
IkReal x4441=((1.0)*sj0);
IkReal x4442=(cj1*sj2);
IkReal x4443=((1.0)*x4438);
IkReal x4444=(gconst103*x4438);
IkReal x4445=(gconst103*x4437);
IkReal x4446=((1.0)*gconst104*x4437);
evalcond[0]=(((r21*x4445))+(((-1.0)*r22*x4443))+(((-1.0)*r20*x4446)));
evalcond[1]=(cj0+(((-1.0)*r12*x4443))+((x4437*x4439))+(((-1.0)*r10*x4446)));
evalcond[2]=((((-1.0)*x4441))+((r01*x4445))+(((-1.0)*r02*x4443))+(((-1.0)*r00*x4446)));
evalcond[3]=(((r22*x4437))+((r21*x4444))+((sj1*sj2))+(((-1.0)*cj1*x4440))+(((-1.0)*gconst104*r20*x4443)));
evalcond[4]=((((-1.0)*gconst104*r00*x4443))+((r01*x4444))+(((-1.0)*cj0*sj1*x4440))+(((-1.0)*cj0*x4442))+((r02*x4437)));
evalcond[5]=(((r12*x4437))+((x4438*x4439))+(((-1.0)*gconst104*r10*x4443))+(((-1.0)*x4441*x4442))+(((-1.0)*sj0*sj1*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4447=((1.0)*gconst104);
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4447))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
CheckValue<IkReal> x4449=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4447)))),-1);
if(!x4449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4448.value)+(((1.5707963267949)*(x4449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4450=IKsin(j4);
IkReal x4451=IKcos(j4);
IkReal x4452=(gconst103*r11);
IkReal x4453=((1.0)*cj2);
IkReal x4454=((1.0)*sj0);
IkReal x4455=(cj1*sj2);
IkReal x4456=((1.0)*x4451);
IkReal x4457=(gconst103*x4451);
IkReal x4458=(gconst103*x4450);
IkReal x4459=((1.0)*gconst104*x4450);
evalcond[0]=(((r21*x4458))+(((-1.0)*r22*x4456))+(((-1.0)*r20*x4459)));
evalcond[1]=(cj0+((x4450*x4452))+(((-1.0)*r12*x4456))+(((-1.0)*r10*x4459)));
evalcond[2]=((((-1.0)*x4454))+((r01*x4458))+(((-1.0)*r02*x4456))+(((-1.0)*r00*x4459)));
evalcond[3]=((((-1.0)*gconst104*r20*x4456))+((r21*x4457))+((sj1*sj2))+(((-1.0)*cj1*x4453))+((r22*x4450)));
evalcond[4]=((((-1.0)*gconst104*r00*x4456))+((r01*x4457))+(((-1.0)*cj0*sj1*x4453))+(((-1.0)*cj0*x4455))+((r02*x4450)));
evalcond[5]=(((x4451*x4452))+(((-1.0)*x4454*x4455))+(((-1.0)*gconst104*r10*x4456))+((r12*x4450))+(((-1.0)*sj0*sj1*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4460=((-1.0)*r11);
IkReal x4462 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4462)==0){
continue;
}
IkReal x4461=pow(x4462,-0.5);
CheckValue<IkReal> x4463 = IKatan2WithCheck(IkReal(x4460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4463.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4463.value))));
IkReal gconst106=(x4460*x4461);
IkReal gconst107=((1.0)*r10*x4461);
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4464.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4465=((-1.0)*r11);
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(x4465),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
IkReal x4466=((1.0)*(x4468.value));
IkReal x4467=x4461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4466)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4466)));
IkReal gconst106=(x4465*x4467);
IkReal gconst107=((1.0)*r10*x4467);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4469=((-1.0)*r11);
CheckValue<IkReal> x4472 = IKatan2WithCheck(IkReal(x4469),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4472.valid){
continue;
}
IkReal x4470=((1.0)*(x4472.value));
IkReal x4471=x4461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4470)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4470)));
IkReal gconst106=(x4469*x4471);
IkReal gconst107=((1.0)*r10*x4471);
IkReal x4473=r12*r12;
IkReal x4474=((1.0)*sj0);
IkReal x4475=(cj0*r02);
IkReal x4476=x4461;
j4eval[0]=((IKabs(((((-1.0)*r12*x4474))+(((-1.0)*x4475)))))+(IKabs(((((-1.0)*x4474*x4476))+((r12*x4475*x4476))+((sj0*x4473*x4476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4477=((-1.0)*r11);
CheckValue<IkReal> x4480 = IKatan2WithCheck(IkReal(x4477),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4480.valid){
continue;
}
IkReal x4478=((1.0)*(x4480.value));
IkReal x4479=x4461;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4478)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4478)));
IkReal gconst106=(x4477*x4479);
IkReal gconst107=((1.0)*r10*x4479);
IkReal x4481=r12*r12;
IkReal x4482=((1.0)+(((-1.0)*x4481)));
IkReal x4483=(r22*sj1*sj2);
IkReal x4484=(cj1*cj2*r22);
CheckValue<IkReal> x4491=IKPowWithIntegerCheck(x4482,-1);
if(!x4491.valid){
continue;
}
IkReal x4485=x4491.value;
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(((-1.0)+x4481),-1);
if(!x4492.valid){
continue;
}
IkReal x4486=x4492.value;
IkReal x4487=((1.0)*x4485);
if((x4482) < -0.00001)
continue;
IkReal x4488=IKsqrt(x4482);
IkReal x4489=(r12*x4486*x4488);
IkReal x4490=((((-2.0)*r10*r11*r20*r21*x4485))+(((-1.0)*(r22*r22)))+(((-1.0)*x4487*(r11*r11)*(r21*r21)))+(((-1.0)*x4487*(r10*r10)*(r20*r20))));
j4eval[0]=x4490;
j4eval[1]=((IKabs((((x4484*x4489))+(((-1.0)*x4483*x4489)))))+(IKabs(((((-1.0)*x4484))+x4483))));
j4eval[2]=IKsign(x4490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4493=(sj1*sj2);
IkReal x4494=(gconst106*r21);
IkReal x4495=(gconst107*r20);
IkReal x4496=(cj1*cj2);
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4496))+((r22*x4493)))),IkReal(((((-1.0)*x4494*x4496))+(((-1.0)*x4493*x4495))+((x4493*x4494))+((x4495*x4496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4495*x4495)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4494*x4494)))+(((2.0)*x4494*x4495)))),-1);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4497.value)+(((1.5707963267949)*(x4498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKsin(j4);
IkReal x4500=IKcos(j4);
IkReal x4501=(gconst107*r10);
IkReal x4502=(gconst107*r00);
IkReal x4503=((1.0)*cj2);
IkReal x4504=(gconst107*r20);
IkReal x4505=((1.0)*sj0);
IkReal x4506=(cj1*sj2);
IkReal x4507=((1.0)*x4500);
IkReal x4508=(gconst106*x4500);
IkReal x4509=(gconst106*x4499);
IkReal x4510=((1.0)*x4499);
evalcond[0]=((((-1.0)*x4504*x4510))+((r21*x4509))+(((-1.0)*r22*x4507)));
evalcond[1]=(cj0+((r11*x4509))+(((-1.0)*x4501*x4510))+(((-1.0)*r12*x4507)));
evalcond[2]=((((-1.0)*x4505))+(((-1.0)*r02*x4507))+(((-1.0)*x4502*x4510))+((r01*x4509)));
evalcond[3]=((((-1.0)*cj1*x4503))+((r21*x4508))+((sj1*sj2))+((r22*x4499))+(((-1.0)*x4504*x4507)));
evalcond[4]=(((r02*x4499))+(((-1.0)*cj0*x4506))+((r01*x4508))+(((-1.0)*cj0*sj1*x4503))+(((-1.0)*x4502*x4507)));
evalcond[5]=(((r12*x4499))+((r11*x4508))+(((-1.0)*x4501*x4507))+(((-1.0)*sj0*sj1*x4503))+(((-1.0)*x4505*x4506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4511=((1.0)*sj0);
IkReal x4512=((1.0)*gconst106);
CheckValue<IkReal> x4513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4512)))),-1);
if(!x4513.valid){
continue;
}
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4511))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4512))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4511))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4513.value)))+(x4514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4515=IKsin(j4);
IkReal x4516=IKcos(j4);
IkReal x4517=(gconst107*r10);
IkReal x4518=(gconst107*r00);
IkReal x4519=((1.0)*cj2);
IkReal x4520=(gconst107*r20);
IkReal x4521=((1.0)*sj0);
IkReal x4522=(cj1*sj2);
IkReal x4523=((1.0)*x4516);
IkReal x4524=(gconst106*x4516);
IkReal x4525=(gconst106*x4515);
IkReal x4526=((1.0)*x4515);
evalcond[0]=(((r21*x4525))+(((-1.0)*x4520*x4526))+(((-1.0)*r22*x4523)));
evalcond[1]=((((-1.0)*r12*x4523))+((r11*x4525))+cj0+(((-1.0)*x4517*x4526)));
evalcond[2]=(((r01*x4525))+(((-1.0)*x4521))+(((-1.0)*r02*x4523))+(((-1.0)*x4518*x4526)));
evalcond[3]=((((-1.0)*cj1*x4519))+((r21*x4524))+(((-1.0)*x4520*x4523))+((sj1*sj2))+((r22*x4515)));
evalcond[4]=(((r02*x4515))+((r01*x4524))+(((-1.0)*cj0*sj1*x4519))+(((-1.0)*cj0*x4522))+(((-1.0)*x4518*x4523)));
evalcond[5]=(((r11*x4524))+(((-1.0)*sj0*sj1*x4519))+(((-1.0)*x4521*x4522))+(((-1.0)*x4517*x4523))+((r12*x4515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4527=((1.0)*gconst107);
CheckValue<IkReal> x4528 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4527))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4528.valid){
continue;
}
CheckValue<IkReal> x4529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4527)))),-1);
if(!x4529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4528.value)+(((1.5707963267949)*(x4529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4530=IKsin(j4);
IkReal x4531=IKcos(j4);
IkReal x4532=(gconst107*r10);
IkReal x4533=(gconst107*r00);
IkReal x4534=((1.0)*cj2);
IkReal x4535=(gconst107*r20);
IkReal x4536=((1.0)*sj0);
IkReal x4537=(cj1*sj2);
IkReal x4538=((1.0)*x4531);
IkReal x4539=(gconst106*x4531);
IkReal x4540=(gconst106*x4530);
IkReal x4541=((1.0)*x4530);
evalcond[0]=((((-1.0)*x4535*x4541))+(((-1.0)*r22*x4538))+((r21*x4540)));
evalcond[1]=((((-1.0)*x4532*x4541))+cj0+((r11*x4540))+(((-1.0)*r12*x4538)));
evalcond[2]=((((-1.0)*x4536))+(((-1.0)*x4533*x4541))+((r01*x4540))+(((-1.0)*r02*x4538)));
evalcond[3]=(((r21*x4539))+(((-1.0)*cj1*x4534))+((sj1*sj2))+((r22*x4530))+(((-1.0)*x4535*x4538)));
evalcond[4]=(((r01*x4539))+((r02*x4530))+(((-1.0)*x4533*x4538))+(((-1.0)*cj0*x4537))+(((-1.0)*cj0*sj1*x4534)));
evalcond[5]=(((r12*x4530))+(((-1.0)*x4536*x4537))+(((-1.0)*x4532*x4538))+((r11*x4539))+(((-1.0)*sj0*sj1*x4534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4542=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4542;
j4eval[1]=IKsign(x4542);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4543=((1.0)*cj5);
IkReal x4544=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4543)));
j4eval[0]=x4544;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4543))))));
j4eval[2]=IKsign(x4544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4545=(sj1*sj2);
IkReal x4546=(cj5*r10);
IkReal x4547=(r11*sj5);
IkReal x4548=(cj1*cj2);
IkReal x4549=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4549;
j4eval[1]=((IKabs((((x4546*x4548))+(((-1.0)*x4545*x4546))+((x4545*x4547))+(((-1.0)*x4547*x4548)))))+(IKabs((((r12*x4548))+(((-1.0)*r12*x4545))))));
j4eval[2]=IKsign(x4549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4550=(sj1*sj2);
IkReal x4551=(cj5*r10);
IkReal x4552=(r11*sj5);
IkReal x4553=(cj1*cj2);
CheckValue<IkReal> x4554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4554.valid){
continue;
}
CheckValue<IkReal> x4555 = IKatan2WithCheck(IkReal((((x4550*x4552))+((x4551*x4553))+(((-1.0)*x4552*x4553))+(((-1.0)*x4550*x4551)))),IkReal((((r12*x4553))+(((-1.0)*r12*x4550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4554.value)))+(x4555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4556=IKcos(j4);
IkReal x4557=IKsin(j4);
IkReal x4558=(cj5*r00);
IkReal x4559=(cj5*r10);
IkReal x4560=(r21*sj5);
IkReal x4561=((1.0)*cj2);
IkReal x4562=(cj5*r20);
IkReal x4563=((1.0)*x4556);
IkReal x4564=((1.0)*x4557);
IkReal x4565=(sj5*x4557);
IkReal x4566=(sj5*x4556);
evalcond[0]=(((r11*x4566))+((r12*x4557))+(((-1.0)*x4559*x4563)));
evalcond[1]=(((x4557*x4560))+(((-1.0)*r22*x4563))+(((-1.0)*x4562*x4564)));
evalcond[2]=((((-1.0)*r02*x4563))+(((-1.0)*x4558*x4564))+((r01*x4565)));
evalcond[3]=((1.0)+((r11*x4565))+(((-1.0)*x4559*x4564))+(((-1.0)*r12*x4563)));
evalcond[4]=((((-1.0)*cj1*x4561))+((x4556*x4560))+((sj1*sj2))+((r22*x4557))+(((-1.0)*x4562*x4563)));
evalcond[5]=((((-1.0)*sj1*x4561))+(((-1.0)*cj1*sj2))+((r02*x4557))+(((-1.0)*x4558*x4563))+((r01*x4566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4567=((1.0)*cj5);
CheckValue<IkReal> x4568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4567))+(((-1.0)*r00*sj5)))),-1);
if(!x4568.valid){
continue;
}
CheckValue<IkReal> x4569 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4567))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4568.value)))+(x4569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4570=IKcos(j4);
IkReal x4571=IKsin(j4);
IkReal x4572=(cj5*r00);
IkReal x4573=(cj5*r10);
IkReal x4574=(r21*sj5);
IkReal x4575=((1.0)*cj2);
IkReal x4576=(cj5*r20);
IkReal x4577=((1.0)*x4570);
IkReal x4578=((1.0)*x4571);
IkReal x4579=(sj5*x4571);
IkReal x4580=(sj5*x4570);
evalcond[0]=(((r12*x4571))+((r11*x4580))+(((-1.0)*x4573*x4577)));
evalcond[1]=((((-1.0)*x4576*x4578))+((x4571*x4574))+(((-1.0)*r22*x4577)));
evalcond[2]=((((-1.0)*r02*x4577))+(((-1.0)*x4572*x4578))+((r01*x4579)));
evalcond[3]=((1.0)+((r11*x4579))+(((-1.0)*x4573*x4578))+(((-1.0)*r12*x4577)));
evalcond[4]=((((-1.0)*cj1*x4575))+(((-1.0)*x4576*x4577))+((r22*x4571))+((sj1*sj2))+((x4570*x4574)));
evalcond[5]=((((-1.0)*sj1*x4575))+((r02*x4571))+(((-1.0)*cj1*sj2))+(((-1.0)*x4572*x4577))+((r01*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4581=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4581.valid){
continue;
}
CheckValue<IkReal> x4582 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4581.value)))+(x4582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4583=IKcos(j4);
IkReal x4584=IKsin(j4);
IkReal x4585=(cj5*r00);
IkReal x4586=(cj5*r10);
IkReal x4587=(r21*sj5);
IkReal x4588=((1.0)*cj2);
IkReal x4589=(cj5*r20);
IkReal x4590=((1.0)*x4583);
IkReal x4591=((1.0)*x4584);
IkReal x4592=(sj5*x4584);
IkReal x4593=(sj5*x4583);
evalcond[0]=((((-1.0)*x4586*x4590))+((r11*x4593))+((r12*x4584)));
evalcond[1]=((((-1.0)*r22*x4590))+(((-1.0)*x4589*x4591))+((x4584*x4587)));
evalcond[2]=((((-1.0)*x4585*x4591))+(((-1.0)*r02*x4590))+((r01*x4592)));
evalcond[3]=((1.0)+(((-1.0)*x4586*x4591))+((r11*x4592))+(((-1.0)*r12*x4590)));
evalcond[4]=(((r22*x4584))+(((-1.0)*x4589*x4590))+((sj1*sj2))+((x4583*x4587))+(((-1.0)*cj1*x4588)));
evalcond[5]=((((-1.0)*x4585*x4590))+((r02*x4584))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4588))+((r01*x4593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4594=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4594;
j4eval[1]=IKsign(x4594);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4595=((1.0)*cj5);
IkReal x4596=((((-1.0)*r21*x4595))+(((-1.0)*r20*sj5)));
j4eval[0]=x4596;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4595))))));
j4eval[2]=IKsign(x4596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4597=cj5*cj5;
IkReal x4598=r11*r11;
IkReal x4599=(r11*sj5);
IkReal x4600=(cj5*r10);
IkReal x4601=((r12*r12)+x4598+((x4597*(r10*r10)))+(((-2.0)*x4599*x4600))+(((-1.0)*x4597*x4598)));
j4eval[0]=x4601;
j4eval[1]=IKsign(x4601);
j4eval[2]=((IKabs(((((-1.0)*x4600))+x4599)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4602=cj5*cj5;
IkReal x4603=r11*r11;
IkReal x4604=(cj5*r10);
IkReal x4605=(r11*sj5);
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x4602*(r10*r10)))+x4603+(((-2.0)*x4604*x4605))+(((-1.0)*x4602*x4603)))),-1);
if(!x4606.valid){
continue;
}
CheckValue<IkReal> x4607 = IKatan2WithCheck(IkReal(((((-1.0)*x4604))+x4605)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4606.value)))+(x4607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4608=IKcos(j4);
IkReal x4609=IKsin(j4);
IkReal x4610=(cj5*r00);
IkReal x4611=(cj5*r10);
IkReal x4612=(r21*sj5);
IkReal x4613=(cj5*r20);
IkReal x4614=((1.0)*x4608);
IkReal x4615=((1.0)*x4609);
IkReal x4616=(sj5*x4609);
IkReal x4617=(sj5*x4608);
evalcond[0]=(((r12*x4609))+((r11*x4617))+(((-1.0)*x4611*x4614)));
evalcond[1]=(((x4609*x4612))+(((-1.0)*r22*x4614))+(((-1.0)*x4613*x4615)));
evalcond[2]=((((-1.0)*r02*x4614))+((r01*x4616))+(((-1.0)*x4610*x4615)));
evalcond[3]=((-1.0)+((r11*x4616))+(((-1.0)*r12*x4614))+(((-1.0)*x4611*x4615)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4617))+((r02*x4609))+(((-1.0)*x4610*x4614)));
evalcond[5]=(((x4608*x4612))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4609))+(((-1.0)*x4613*x4614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4618=((1.0)*cj5);
CheckValue<IkReal> x4619 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4618))+(((-1.0)*r20*sj5)))),-1);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4619.value)+(((1.5707963267949)*(x4620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKcos(j4);
IkReal x4622=IKsin(j4);
IkReal x4623=(cj5*r00);
IkReal x4624=(cj5*r10);
IkReal x4625=(r21*sj5);
IkReal x4626=(cj5*r20);
IkReal x4627=((1.0)*x4621);
IkReal x4628=((1.0)*x4622);
IkReal x4629=(sj5*x4622);
IkReal x4630=(sj5*x4621);
evalcond[0]=(((r12*x4622))+((r11*x4630))+(((-1.0)*x4624*x4627)));
evalcond[1]=((((-1.0)*x4626*x4628))+(((-1.0)*r22*x4627))+((x4622*x4625)));
evalcond[2]=((((-1.0)*r02*x4627))+(((-1.0)*x4623*x4628))+((r01*x4629)));
evalcond[3]=((-1.0)+((r11*x4629))+(((-1.0)*r12*x4627))+(((-1.0)*x4624*x4628)));
evalcond[4]=(((cj2*sj1))+((r01*x4630))+((cj1*sj2))+((r02*x4622))+(((-1.0)*x4623*x4627)));
evalcond[5]=((((-1.0)*x4626*x4627))+((x4621*x4625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4631.value)+(((1.5707963267949)*(x4632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4633=IKcos(j4);
IkReal x4634=IKsin(j4);
IkReal x4635=(cj5*r00);
IkReal x4636=(cj5*r10);
IkReal x4637=(r21*sj5);
IkReal x4638=(cj5*r20);
IkReal x4639=((1.0)*x4633);
IkReal x4640=((1.0)*x4634);
IkReal x4641=(sj5*x4634);
IkReal x4642=(sj5*x4633);
evalcond[0]=(((r12*x4634))+((r11*x4642))+(((-1.0)*x4636*x4639)));
evalcond[1]=(((x4634*x4637))+(((-1.0)*x4638*x4640))+(((-1.0)*r22*x4639)));
evalcond[2]=((((-1.0)*r02*x4639))+((r01*x4641))+(((-1.0)*x4635*x4640)));
evalcond[3]=((-1.0)+(((-1.0)*x4636*x4640))+((r11*x4641))+(((-1.0)*r12*x4639)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4635*x4639))+((cj1*sj2))+((r01*x4642))+((r02*x4634)));
evalcond[5]=(((x4633*x4637))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4634))+(((-1.0)*x4638*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4643=((-1.0)*r00);
IkReal x4645 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4645)==0){
continue;
}
IkReal x4644=pow(x4645,-0.5);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4643),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4646.value));
IkReal gconst109=(r01*x4644);
IkReal gconst110=(x4643*x4644);
CheckValue<IkReal> x4647 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4648=((-1.0)*r00);
IkReal x4649=x4644;
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4648),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
IkReal x4650=((-1.0)*(x4651.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4650;
IkReal gconst108=x4650;
IkReal gconst109=(r01*x4649);
IkReal gconst110=(x4648*x4649);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4652=((1.0)*sj0);
IkReal x4653=((1.0)*gconst109);
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4653))+(((-1.0)*gconst110*r21)))),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4652)))),IkReal(((((-1.0)*cj0*r01*x4653))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4656=IKsin(j4);
IkReal x4657=IKcos(j4);
IkReal x4658=(gconst109*r21);
IkReal x4659=((1.0)*cj2);
IkReal x4660=((1.0)*sj0);
IkReal x4661=(cj1*sj2);
IkReal x4662=((1.0)*x4657);
IkReal x4663=(gconst109*x4656);
IkReal x4664=(gconst109*x4657);
IkReal x4665=((1.0)*gconst110*x4656);
evalcond[0]=((((-1.0)*r20*x4665))+((x4656*x4658))+(((-1.0)*r22*x4662)));
evalcond[1]=(cj0+(((-1.0)*r10*x4665))+((r11*x4663))+(((-1.0)*r12*x4662)));
evalcond[2]=(((r01*x4663))+(((-1.0)*r00*x4665))+(((-1.0)*x4660))+(((-1.0)*r02*x4662)));
evalcond[3]=((((-1.0)*cj1*x4659))+(((-1.0)*gconst110*r20*x4662))+((sj1*sj2))+((x4657*x4658))+((r22*x4656)));
evalcond[4]=((((-1.0)*cj0*x4661))+((r01*x4664))+((r02*x4656))+(((-1.0)*gconst110*r00*x4662))+(((-1.0)*cj0*sj1*x4659)));
evalcond[5]=(((r12*x4656))+(((-1.0)*gconst110*r10*x4662))+(((-1.0)*x4660*x4661))+((r11*x4664))+(((-1.0)*sj0*sj1*x4659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4666=((1.0)*gconst110);
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4666))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
CheckValue<IkReal> x4668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4666))+(((-1.0)*gconst109*r10)))),-1);
if(!x4668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4667.value)+(((1.5707963267949)*(x4668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4669=IKsin(j4);
IkReal x4670=IKcos(j4);
IkReal x4671=(gconst109*r21);
IkReal x4672=((1.0)*cj2);
IkReal x4673=((1.0)*sj0);
IkReal x4674=(cj1*sj2);
IkReal x4675=((1.0)*x4670);
IkReal x4676=(gconst109*x4669);
IkReal x4677=(gconst109*x4670);
IkReal x4678=((1.0)*gconst110*x4669);
evalcond[0]=(((x4669*x4671))+(((-1.0)*r20*x4678))+(((-1.0)*r22*x4675)));
evalcond[1]=(cj0+((r11*x4676))+(((-1.0)*r12*x4675))+(((-1.0)*r10*x4678)));
evalcond[2]=((((-1.0)*r02*x4675))+(((-1.0)*x4673))+((r01*x4676))+(((-1.0)*r00*x4678)));
evalcond[3]=((((-1.0)*cj1*x4672))+((x4670*x4671))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4675))+((r22*x4669)));
evalcond[4]=((((-1.0)*cj0*x4674))+((r02*x4669))+(((-1.0)*cj0*sj1*x4672))+((r01*x4677))+(((-1.0)*gconst110*r00*x4675)));
evalcond[5]=((((-1.0)*gconst110*r10*x4675))+((r12*x4669))+((r11*x4677))+(((-1.0)*sj0*sj1*x4672))+(((-1.0)*x4673*x4674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4679=((-1.0)*r01);
IkReal x4681 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4681)==0){
continue;
}
IkReal x4680=pow(x4681,-0.5);
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal(x4679),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4682.value))));
IkReal gconst112=(x4679*x4680);
IkReal gconst113=((1.0)*r00*x4680);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4683.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4684=((-1.0)*r01);
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal(x4684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
IkReal x4685=((1.0)*(x4687.value));
IkReal x4686=x4680;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4685)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4685)));
IkReal gconst112=(x4684*x4686);
IkReal gconst113=((1.0)*r00*x4686);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4688=((-1.0)*r01);
CheckValue<IkReal> x4691 = IKatan2WithCheck(IkReal(x4688),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4691.valid){
continue;
}
IkReal x4689=((1.0)*(x4691.value));
IkReal x4690=x4680;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4689)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4689)));
IkReal gconst112=(x4688*x4690);
IkReal gconst113=((1.0)*r00*x4690);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4692=((-1.0)*r01);
CheckValue<IkReal> x4695 = IKatan2WithCheck(IkReal(x4692),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4695.valid){
continue;
}
IkReal x4693=((1.0)*(x4695.value));
IkReal x4694=x4680;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4693)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4693)));
IkReal gconst112=(x4692*x4694);
IkReal gconst113=((1.0)*r00*x4694);
IkReal x4696=r02*r02;
IkReal x4697=(r12*sj0);
IkReal x4698=((1.0)*cj0);
IkReal x4699=x4680;
j4eval[0]=((IKabs(((((-1.0)*r02*x4698))+(((-1.0)*x4697)))))+(IKabs(((((-1.0)*x4698*x4699))+((r02*x4697*x4699))+((cj0*x4696*x4699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4700=((1.0)*sj0);
IkReal x4701=((1.0)*gconst112);
CheckValue<IkReal> x4702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4701)))),-1);
if(!x4702.valid){
continue;
}
CheckValue<IkReal> x4703 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4700))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4701))+(((-1.0)*gconst112*r11*x4700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4702.value)))+(x4703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4704=IKsin(j4);
IkReal x4705=IKcos(j4);
IkReal x4706=(gconst113*r20);
IkReal x4707=(gconst112*r21);
IkReal x4708=((1.0)*cj2);
IkReal x4709=(gconst113*r00);
IkReal x4710=(gconst113*r10);
IkReal x4711=((1.0)*sj0);
IkReal x4712=(cj1*sj2);
IkReal x4713=((1.0)*x4705);
IkReal x4714=((1.0)*x4704);
IkReal x4715=(gconst112*x4705);
IkReal x4716=(gconst112*x4704);
evalcond[0]=((((-1.0)*r22*x4713))+((x4704*x4707))+(((-1.0)*x4706*x4714)));
evalcond[1]=(cj0+(((-1.0)*x4710*x4714))+(((-1.0)*r12*x4713))+((r11*x4716)));
evalcond[2]=((((-1.0)*r02*x4713))+(((-1.0)*x4709*x4714))+((r01*x4716))+(((-1.0)*x4711)));
evalcond[3]=(((x4705*x4707))+((sj1*sj2))+(((-1.0)*cj1*x4708))+(((-1.0)*x4706*x4713))+((r22*x4704)));
evalcond[4]=((((-1.0)*x4709*x4713))+(((-1.0)*cj0*x4712))+(((-1.0)*cj0*sj1*x4708))+((r01*x4715))+((r02*x4704)));
evalcond[5]=((((-1.0)*sj0*sj1*x4708))+(((-1.0)*x4710*x4713))+(((-1.0)*x4711*x4712))+((r11*x4715))+((r12*x4704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4717=((1.0)*gconst113);
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4717))+(((-1.0)*gconst112*r10)))),-1);
if(!x4718.valid){
continue;
}
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4718.value)))+(x4719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4720=IKsin(j4);
IkReal x4721=IKcos(j4);
IkReal x4722=(gconst113*r20);
IkReal x4723=(gconst112*r21);
IkReal x4724=((1.0)*cj2);
IkReal x4725=(gconst113*r00);
IkReal x4726=(gconst113*r10);
IkReal x4727=((1.0)*sj0);
IkReal x4728=(cj1*sj2);
IkReal x4729=((1.0)*x4721);
IkReal x4730=((1.0)*x4720);
IkReal x4731=(gconst112*x4721);
IkReal x4732=(gconst112*x4720);
evalcond[0]=(((x4720*x4723))+(((-1.0)*x4722*x4730))+(((-1.0)*r22*x4729)));
evalcond[1]=(((r11*x4732))+cj0+(((-1.0)*r12*x4729))+(((-1.0)*x4726*x4730)));
evalcond[2]=((((-1.0)*x4727))+(((-1.0)*x4725*x4730))+(((-1.0)*r02*x4729))+((r01*x4732)));
evalcond[3]=((((-1.0)*x4722*x4729))+((x4721*x4723))+(((-1.0)*cj1*x4724))+((sj1*sj2))+((r22*x4720)));
evalcond[4]=((((-1.0)*x4725*x4729))+((r02*x4720))+(((-1.0)*cj0*sj1*x4724))+(((-1.0)*cj0*x4728))+((r01*x4731)));
evalcond[5]=(((r11*x4731))+(((-1.0)*x4727*x4728))+(((-1.0)*sj0*sj1*x4724))+(((-1.0)*x4726*x4729))+((r12*x4720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4733=((1.0)*gconst113);
CheckValue<IkReal> x4734 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4733))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4733))+(((-1.0)*gconst112*r00)))),-1);
if(!x4735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4734.value)+(((1.5707963267949)*(x4735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4736=IKsin(j4);
IkReal x4737=IKcos(j4);
IkReal x4738=(gconst113*r20);
IkReal x4739=(gconst112*r21);
IkReal x4740=((1.0)*cj2);
IkReal x4741=(gconst113*r00);
IkReal x4742=(gconst113*r10);
IkReal x4743=((1.0)*sj0);
IkReal x4744=(cj1*sj2);
IkReal x4745=((1.0)*x4737);
IkReal x4746=((1.0)*x4736);
IkReal x4747=(gconst112*x4737);
IkReal x4748=(gconst112*x4736);
evalcond[0]=(((x4736*x4739))+(((-1.0)*r22*x4745))+(((-1.0)*x4738*x4746)));
evalcond[1]=(((r11*x4748))+(((-1.0)*r12*x4745))+cj0+(((-1.0)*x4742*x4746)));
evalcond[2]=(((r01*x4748))+(((-1.0)*x4743))+(((-1.0)*x4741*x4746))+(((-1.0)*r02*x4745)));
evalcond[3]=((((-1.0)*cj1*x4740))+((x4737*x4739))+((sj1*sj2))+((r22*x4736))+(((-1.0)*x4738*x4745)));
evalcond[4]=((((-1.0)*cj0*x4744))+((r01*x4747))+((r02*x4736))+(((-1.0)*x4741*x4745))+(((-1.0)*cj0*sj1*x4740)));
evalcond[5]=(((r11*x4747))+(((-1.0)*x4742*x4745))+(((-1.0)*sj0*sj1*x4740))+(((-1.0)*x4743*x4744))+((r12*x4736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4749=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4749;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4750=((1.0)*cj5);
IkReal x4751=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4750)));
j4eval[0]=x4751;
j4eval[1]=((IKabs(((((-1.0)*r20*x4750))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4752=cj5*cj5;
IkReal x4753=r01*r01;
IkReal x4754=(cj5*r00);
IkReal x4755=(r01*sj5);
IkReal x4756=((((-1.0)*x4752*x4753))+((x4752*(r00*r00)))+x4753+(((-2.0)*x4754*x4755))+(r02*r02));
j4eval[0]=x4756;
j4eval[1]=IKsign(x4756);
j4eval[2]=((IKabs(r02))+(IKabs((x4755+(((-1.0)*x4754))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4757=cj5*cj5;
IkReal x4758=r01*r01;
IkReal x4759=(r01*sj5);
IkReal x4760=(cj5*r00);
CheckValue<IkReal> x4761 = IKatan2WithCheck(IkReal(((((-1.0)*x4760))+x4759)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4761.valid){
continue;
}
CheckValue<IkReal> x4762=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4759*x4760))+((x4757*(r00*r00)))+x4758+(r02*r02)+(((-1.0)*x4757*x4758)))),-1);
if(!x4762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4761.value)+(((1.5707963267949)*(x4762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4763=IKcos(j4);
IkReal x4764=IKsin(j4);
IkReal x4765=(cj5*r00);
IkReal x4766=(cj5*r10);
IkReal x4767=(r21*sj5);
IkReal x4768=((1.0)*cj2);
IkReal x4769=(cj5*r20);
IkReal x4770=((1.0)*x4763);
IkReal x4771=((1.0)*x4764);
IkReal x4772=(sj5*x4764);
IkReal x4773=(sj5*x4763);
evalcond[0]=(((r02*x4764))+((r01*x4773))+(((-1.0)*x4765*x4770)));
evalcond[1]=((((-1.0)*x4769*x4771))+(((-1.0)*r22*x4770))+((x4764*x4767)));
evalcond[2]=(((r11*x4772))+(((-1.0)*r12*x4770))+(((-1.0)*x4766*x4771)));
evalcond[3]=((-1.0)+((r01*x4772))+(((-1.0)*x4765*x4771))+(((-1.0)*r02*x4770)));
evalcond[4]=(((r22*x4764))+(((-1.0)*x4769*x4770))+((sj1*sj2))+(((-1.0)*cj1*x4768))+((x4763*x4767)));
evalcond[5]=(((r11*x4773))+(((-1.0)*x4766*x4770))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4768))+((r12*x4764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4774=((1.0)*cj5);
CheckValue<IkReal> x4775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4774))+(((-1.0)*r10*sj5)))),-1);
if(!x4775.valid){
continue;
}
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4775.value)))+(x4776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4777=IKcos(j4);
IkReal x4778=IKsin(j4);
IkReal x4779=(cj5*r00);
IkReal x4780=(cj5*r10);
IkReal x4781=(r21*sj5);
IkReal x4782=((1.0)*cj2);
IkReal x4783=(cj5*r20);
IkReal x4784=((1.0)*x4777);
IkReal x4785=((1.0)*x4778);
IkReal x4786=(sj5*x4778);
IkReal x4787=(sj5*x4777);
evalcond[0]=((((-1.0)*x4779*x4784))+((r01*x4787))+((r02*x4778)));
evalcond[1]=(((x4778*x4781))+(((-1.0)*x4783*x4785))+(((-1.0)*r22*x4784)));
evalcond[2]=(((r11*x4786))+(((-1.0)*x4780*x4785))+(((-1.0)*r12*x4784)));
evalcond[3]=((-1.0)+(((-1.0)*x4779*x4785))+((r01*x4786))+(((-1.0)*r02*x4784)));
evalcond[4]=(((x4777*x4781))+(((-1.0)*x4783*x4784))+((sj1*sj2))+(((-1.0)*cj1*x4782))+((r22*x4778)));
evalcond[5]=(((r12*x4778))+(((-1.0)*cj1*sj2))+((r11*x4787))+(((-1.0)*sj1*x4782))+(((-1.0)*x4780*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4788=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4788.value)))+(x4789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4790=IKcos(j4);
IkReal x4791=IKsin(j4);
IkReal x4792=(cj5*r00);
IkReal x4793=(cj5*r10);
IkReal x4794=(r21*sj5);
IkReal x4795=((1.0)*cj2);
IkReal x4796=(cj5*r20);
IkReal x4797=((1.0)*x4790);
IkReal x4798=((1.0)*x4791);
IkReal x4799=(sj5*x4791);
IkReal x4800=(sj5*x4790);
evalcond[0]=(((r01*x4800))+((r02*x4791))+(((-1.0)*x4792*x4797)));
evalcond[1]=((((-1.0)*r22*x4797))+((x4791*x4794))+(((-1.0)*x4796*x4798)));
evalcond[2]=((((-1.0)*r12*x4797))+((r11*x4799))+(((-1.0)*x4793*x4798)));
evalcond[3]=((-1.0)+((r01*x4799))+(((-1.0)*r02*x4797))+(((-1.0)*x4792*x4798)));
evalcond[4]=(((x4790*x4794))+((sj1*sj2))+(((-1.0)*x4796*x4797))+(((-1.0)*cj1*x4795))+((r22*x4791)));
evalcond[5]=((((-1.0)*sj1*x4795))+(((-1.0)*cj1*sj2))+((r12*x4791))+(((-1.0)*x4793*x4797))+((r11*x4800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4801=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4801;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4802=((1.0)*cj5);
IkReal x4803=((((-1.0)*r21*x4802))+(((-1.0)*r20*sj5)));
j4eval[0]=x4803;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4802))))));
j4eval[2]=IKsign(x4803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4804=cj5*cj5;
IkReal x4805=r01*r01;
IkReal x4806=(r01*sj5);
IkReal x4807=(cj5*r00);
IkReal x4808=((((-1.0)*x4804*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4804*x4805))+(((2.0)*x4806*x4807))+(((-1.0)*x4805)));
j4eval[0]=x4808;
j4eval[1]=IKsign(x4808);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4807))+x4806))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4809=cj5*cj5;
IkReal x4810=r01*r01;
IkReal x4811=(r01*sj5);
IkReal x4812=(cj5*r00);
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(IKsign((((x4809*x4810))+(((-1.0)*x4810))+(((-1.0)*(r02*r02)))+(((2.0)*x4811*x4812))+(((-1.0)*x4809*(r00*r00))))),-1);
if(!x4813.valid){
continue;
}
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(((((-1.0)*x4812))+x4811)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4813.value)))+(x4814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4815=IKcos(j4);
IkReal x4816=IKsin(j4);
IkReal x4817=(cj5*r00);
IkReal x4818=(cj5*r10);
IkReal x4819=(r21*sj5);
IkReal x4820=(cj5*r20);
IkReal x4821=((1.0)*x4815);
IkReal x4822=((1.0)*x4816);
IkReal x4823=(sj5*x4816);
IkReal x4824=(sj5*x4815);
evalcond[0]=((((-1.0)*x4817*x4821))+((r02*x4816))+((r01*x4824)));
evalcond[1]=(((x4816*x4819))+(((-1.0)*r22*x4821))+(((-1.0)*x4820*x4822)));
evalcond[2]=(((r11*x4823))+(((-1.0)*x4818*x4822))+(((-1.0)*r12*x4821)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4821))+(((-1.0)*x4817*x4822))+((r01*x4823)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4824))+((r12*x4816))+(((-1.0)*x4818*x4821)));
evalcond[5]=(((x4815*x4819))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4820*x4821))+((r22*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4825=((1.0)*cj5);
CheckValue<IkReal> x4826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4825))+(((-1.0)*r20*sj5)))),-1);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4825))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4826.value)))+(x4827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4828=IKcos(j4);
IkReal x4829=IKsin(j4);
IkReal x4830=(cj5*r00);
IkReal x4831=(cj5*r10);
IkReal x4832=(r21*sj5);
IkReal x4833=(cj5*r20);
IkReal x4834=((1.0)*x4828);
IkReal x4835=((1.0)*x4829);
IkReal x4836=(sj5*x4829);
IkReal x4837=(sj5*x4828);
evalcond[0]=(((r01*x4837))+(((-1.0)*x4830*x4834))+((r02*x4829)));
evalcond[1]=((((-1.0)*x4833*x4835))+(((-1.0)*r22*x4834))+((x4829*x4832)));
evalcond[2]=(((r11*x4836))+(((-1.0)*x4831*x4835))+(((-1.0)*r12*x4834)));
evalcond[3]=((1.0)+((r01*x4836))+(((-1.0)*x4830*x4835))+(((-1.0)*r02*x4834)));
evalcond[4]=(((cj2*sj1))+((r11*x4837))+(((-1.0)*x4831*x4834))+((cj1*sj2))+((r12*x4829)));
evalcond[5]=(((r22*x4829))+(((-1.0)*x4833*x4834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4828*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
CheckValue<IkReal> x4839=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4838.value)+(((1.5707963267949)*(x4839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4840=IKcos(j4);
IkReal x4841=IKsin(j4);
IkReal x4842=(cj5*r00);
IkReal x4843=(cj5*r10);
IkReal x4844=(r21*sj5);
IkReal x4845=(cj5*r20);
IkReal x4846=((1.0)*x4840);
IkReal x4847=((1.0)*x4841);
IkReal x4848=(sj5*x4841);
IkReal x4849=(sj5*x4840);
evalcond[0]=(((r02*x4841))+(((-1.0)*x4842*x4846))+((r01*x4849)));
evalcond[1]=(((x4841*x4844))+(((-1.0)*x4845*x4847))+(((-1.0)*r22*x4846)));
evalcond[2]=(((r11*x4848))+(((-1.0)*r12*x4846))+(((-1.0)*x4843*x4847)));
evalcond[3]=((1.0)+(((-1.0)*x4842*x4847))+(((-1.0)*r02*x4846))+((r01*x4848)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4849))+((r12*x4841))+(((-1.0)*x4843*x4846)));
evalcond[5]=((((-1.0)*cj1*cj2))+((x4840*x4844))+((sj1*sj2))+((r22*x4841))+(((-1.0)*x4845*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4850=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4850);
rxp1_1=(px*r21);
rxp1_2=(r11*x4850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4851=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4851);
rxp1_1=(px*r21);
rxp1_2=(r11*x4851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4852=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4852);
rxp1_1=(px*r21);
rxp1_2=(r11*x4852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4855=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4855.valid){
continue;
}
IkReal x4853=x4855.value;
IkReal x4854=(sj0*x4853);
cj4array[0]=(((cj1*sj2*x4854))+((cj2*sj1*x4854)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4856=IKsin(j4);
IkReal x4857=IKcos(j4);
IkReal x4858=(r21*sj5);
IkReal x4859=((1.0)*cj5*r20);
evalcond[0]=(r02*x4856);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4857)));
evalcond[2]=((((-1.0)*x4856*x4859))+((x4856*x4858)));
evalcond[3]=(((r11*sj5*x4856))+(((-1.0)*cj5*r10*x4856)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4857*x4859))+((x4857*x4858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4861=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4861.valid){
continue;
}
IkReal x4860=x4861.value;
cj4array[0]=(((cj1*cj2*x4860))+(((-1.0)*sj1*sj2*x4860)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4862=IKsin(j4);
IkReal x4863=IKcos(j4);
IkReal x4864=((1.0)*sj0);
IkReal x4865=((1.0)*cj5);
IkReal x4866=(sj5*x4862);
evalcond[0]=(r02*x4862);
evalcond[1]=((((-1.0)*r02*x4863))+(((-1.0)*x4864)));
evalcond[2]=((((-1.0)*r20*x4862*x4865))+((r21*x4866)));
evalcond[3]=(((r11*x4866))+(((-1.0)*r10*x4862*x4865)));
evalcond[4]=((((-1.0)*r10*x4863*x4865))+(((-1.0)*cj2*sj1*x4864))+((r11*sj5*x4863))+(((-1.0)*cj1*sj2*x4864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4867=IKPowWithIntegerCheck(r02,-1);
if(!x4867.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4867.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4868=IKsin(j4);
IkReal x4869=IKcos(j4);
IkReal x4870=((1.0)*cj1);
IkReal x4871=(r21*sj5);
IkReal x4872=((1.0)*cj5);
IkReal x4873=(r11*sj5);
evalcond[0]=(r02*x4868);
evalcond[1]=(((x4868*x4871))+(((-1.0)*r20*x4868*x4872)));
evalcond[2]=(((x4868*x4873))+(((-1.0)*r10*x4868*x4872)));
evalcond[3]=(((x4869*x4871))+(((-1.0)*cj2*x4870))+((sj1*sj2))+(((-1.0)*r20*x4869*x4872)));
evalcond[4]=(((x4869*x4873))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4870))+(((-1.0)*r10*x4869*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4874=((1.0)*sj0);
IkReal x4875=((1.0)*cj0);
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4874))+(((-1.0)*r02*x4875)))),IkReal(((((-1.0)*r01*sj5*x4875))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4876.value)+(((1.5707963267949)*(x4877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4878=IKsin(j4);
IkReal x4879=IKcos(j4);
IkReal x4880=(cj5*r00);
IkReal x4881=(cj5*r10);
IkReal x4882=(r21*sj5);
IkReal x4883=((1.0)*cj2);
IkReal x4884=((1.0)*sj0);
IkReal x4885=(cj1*sj2);
IkReal x4886=(cj5*r20);
IkReal x4887=((1.0)*x4879);
IkReal x4888=((1.0)*x4878);
IkReal x4889=(sj5*x4878);
IkReal x4890=(sj5*x4879);
evalcond[0]=(((x4878*x4882))+(((-1.0)*x4886*x4888))+(((-1.0)*r22*x4887)));
evalcond[1]=(((r11*x4889))+cj0+(((-1.0)*r12*x4887))+(((-1.0)*x4881*x4888)));
evalcond[2]=((((-1.0)*x4884))+(((-1.0)*x4880*x4888))+(((-1.0)*r02*x4887))+((r01*x4889)));
evalcond[3]=((((-1.0)*cj1*x4883))+((sj1*sj2))+((x4879*x4882))+(((-1.0)*x4886*x4887))+((r22*x4878)));
evalcond[4]=((((-1.0)*cj0*x4885))+((r02*x4878))+(((-1.0)*x4880*x4887))+(((-1.0)*cj0*sj1*x4883))+((r01*x4890)));
evalcond[5]=(((r11*x4890))+(((-1.0)*x4881*x4887))+(((-1.0)*x4884*x4885))+(((-1.0)*sj0*sj1*x4883))+((r12*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4891=((1.0)*cj5);
CheckValue<IkReal> x4892 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4891))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4892.valid){
continue;
}
CheckValue<IkReal> x4893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4891))+(((-1.0)*r10*sj5)))),-1);
if(!x4893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4892.value)+(((1.5707963267949)*(x4893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4894=IKsin(j4);
IkReal x4895=IKcos(j4);
IkReal x4896=(cj5*r00);
IkReal x4897=(cj5*r10);
IkReal x4898=(r21*sj5);
IkReal x4899=((1.0)*cj2);
IkReal x4900=((1.0)*sj0);
IkReal x4901=(cj1*sj2);
IkReal x4902=(cj5*r20);
IkReal x4903=((1.0)*x4895);
IkReal x4904=((1.0)*x4894);
IkReal x4905=(sj5*x4894);
IkReal x4906=(sj5*x4895);
evalcond[0]=((((-1.0)*x4902*x4904))+(((-1.0)*r22*x4903))+((x4894*x4898)));
evalcond[1]=((((-1.0)*r12*x4903))+cj0+(((-1.0)*x4897*x4904))+((r11*x4905)));
evalcond[2]=((((-1.0)*x4900))+(((-1.0)*r02*x4903))+(((-1.0)*x4896*x4904))+((r01*x4905)));
evalcond[3]=((((-1.0)*cj1*x4899))+(((-1.0)*x4902*x4903))+((sj1*sj2))+((x4895*x4898))+((r22*x4894)));
evalcond[4]=((((-1.0)*cj0*x4901))+((r02*x4894))+(((-1.0)*cj0*sj1*x4899))+(((-1.0)*x4896*x4903))+((r01*x4906)));
evalcond[5]=(((r12*x4894))+(((-1.0)*x4897*x4903))+(((-1.0)*sj0*sj1*x4899))+((r11*x4906))+(((-1.0)*x4900*x4901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4907=((1.0)*cj5);
CheckValue<IkReal> x4908 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4908.valid){
continue;
}
CheckValue<IkReal> x4909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4907))+(((-1.0)*r00*sj5)))),-1);
if(!x4909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4908.value)+(((1.5707963267949)*(x4909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4910=IKsin(j4);
IkReal x4911=IKcos(j4);
IkReal x4912=(cj5*r00);
IkReal x4913=(cj5*r10);
IkReal x4914=(r21*sj5);
IkReal x4915=((1.0)*cj2);
IkReal x4916=((1.0)*sj0);
IkReal x4917=(cj1*sj2);
IkReal x4918=(cj5*r20);
IkReal x4919=((1.0)*x4911);
IkReal x4920=((1.0)*x4910);
IkReal x4921=(sj5*x4910);
IkReal x4922=(sj5*x4911);
evalcond[0]=((((-1.0)*x4918*x4920))+((x4910*x4914))+(((-1.0)*r22*x4919)));
evalcond[1]=(cj0+(((-1.0)*r12*x4919))+(((-1.0)*x4913*x4920))+((r11*x4921)));
evalcond[2]=((((-1.0)*r02*x4919))+(((-1.0)*x4916))+(((-1.0)*x4912*x4920))+((r01*x4921)));
evalcond[3]=(((x4911*x4914))+(((-1.0)*x4918*x4919))+((sj1*sj2))+(((-1.0)*cj1*x4915))+((r22*x4910)));
evalcond[4]=((((-1.0)*x4912*x4919))+(((-1.0)*cj0*sj1*x4915))+((r02*x4910))+((r01*x4922))+(((-1.0)*cj0*x4917)));
evalcond[5]=((((-1.0)*sj0*sj1*x4915))+(((-1.0)*x4913*x4919))+((r12*x4910))+(((-1.0)*x4916*x4917))+((r11*x4922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4923=((1.0)*cj5);
IkReal x4924=((1.0)*sj5);
IkReal x4925=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4925;
j0eval[1]=((IKabs(((((-1.0)*r01*x4923))+(((-1.0)*r00*x4924)))))+(IKabs(((((-1.0)*r11*x4923))+(((-1.0)*r10*x4924))))));
j0eval[2]=IKsign(x4925);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4926=r21*r21;
IkReal x4927=cj5*cj5;
IkReal x4928=(cj2*sj1);
IkReal x4929=(cj1*sj2);
IkReal x4930=(r21*sj5);
IkReal x4931=((1.0)*cj5*r20);
IkReal x4932=((((2.0)*cj5*r20*x4930))+(((-1.0)*x4926))+((x4926*x4927))+(((-1.0)*x4927*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4932;
j4eval[1]=((IKabs((((r22*x4929))+((r22*x4928)))))+(IKabs((((x4929*x4930))+(((-1.0)*x4929*x4931))+((x4928*x4930))+(((-1.0)*x4928*x4931))))));
j4eval[2]=IKsign(x4932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4933=cj1*cj1;
IkReal x4934=(cj2*sj2);
IkReal x4935=(cj2*sj1);
IkReal x4936=(cj1*sj1);
j0eval[0]=((((-1.14255568581477)*cj1*x4935))+x4934+x4936+(((-1.14255568581477)*sj2*x4933))+(((-2.0)*cj1*cj2*x4935))+(((-2.0)*x4933*x4934)));
j0eval[1]=((((-1.0)*x4935))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4937=IKsin(j0);
IkReal x4938=IKcos(j0);
evalcond[0]=((((-0.11235)*x4937))+(((-1.0)*px))+(((0.4569)*x4938)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x4938))+(((0.4569)*x4937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4939=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4939;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4940=((1.0)*cj5);
IkReal x4941=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4940)));
j4eval[0]=x4941;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4940))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4942=((1.0)*cj5);
IkReal x4943=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4942)));
j4eval[0]=x4943;
j4eval[1]=IKsign(x4943);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4942))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4944=((1.0)*cj5);
CheckValue<IkReal> x4945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4944)))),-1);
if(!x4945.valid){
continue;
}
CheckValue<IkReal> x4946 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4944))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4945.value)))+(x4946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4947=IKcos(j4);
IkReal x4948=IKsin(j4);
IkReal x4949=((1.0)*sj0);
IkReal x4950=(cj5*r00);
IkReal x4951=(cj5*r10);
IkReal x4952=(cj5*r20);
IkReal x4953=((1.0)*x4947);
IkReal x4954=((1.0)*x4948);
IkReal x4955=(sj5*x4947);
IkReal x4956=(sj5*x4948);
evalcond[0]=((((-1.0)*x4952*x4953))+((r21*x4955))+((r22*x4948)));
evalcond[1]=((((-1.0)*r22*x4953))+(((-1.0)*x4952*x4954))+((r21*x4956)));
evalcond[2]=(cj0+((r11*x4956))+(((-1.0)*r12*x4953))+(((-1.0)*x4951*x4954)));
evalcond[3]=(((r02*x4948))+(((-1.0)*x4950*x4953))+((r01*x4955))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4949))+((r12*x4948))+((r11*x4955))+(((-1.0)*x4951*x4953)));
evalcond[5]=((((-1.0)*x4949))+(((-1.0)*r02*x4953))+(((-1.0)*x4950*x4954))+((r01*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4957=((1.0)*cj5);
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4957)))),-1);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4958.value)))+(x4959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKcos(j4);
IkReal x4961=IKsin(j4);
IkReal x4962=((1.0)*sj0);
IkReal x4963=(cj5*r00);
IkReal x4964=(cj5*r10);
IkReal x4965=(cj5*r20);
IkReal x4966=((1.0)*x4960);
IkReal x4967=((1.0)*x4961);
IkReal x4968=(sj5*x4960);
IkReal x4969=(sj5*x4961);
evalcond[0]=(((r22*x4961))+(((-1.0)*x4965*x4966))+((r21*x4968)));
evalcond[1]=((((-1.0)*r22*x4966))+(((-1.0)*x4965*x4967))+((r21*x4969)));
evalcond[2]=(cj0+((r11*x4969))+(((-1.0)*r12*x4966))+(((-1.0)*x4964*x4967)));
evalcond[3]=((((-1.0)*x4963*x4966))+((r02*x4961))+((r01*x4968))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4961))+(((-1.0)*x4962))+((r11*x4968))+(((-1.0)*x4964*x4966)));
evalcond[5]=((((-1.0)*x4962))+(((-1.0)*x4963*x4967))+(((-1.0)*r02*x4966))+((r01*x4969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4970 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4970.valid){
continue;
}
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4970.value)+(((1.5707963267949)*(x4971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4972=IKcos(j4);
IkReal x4973=IKsin(j4);
IkReal x4974=((1.0)*sj0);
IkReal x4975=(cj5*r00);
IkReal x4976=(cj5*r10);
IkReal x4977=(cj5*r20);
IkReal x4978=((1.0)*x4972);
IkReal x4979=((1.0)*x4973);
IkReal x4980=(sj5*x4972);
IkReal x4981=(sj5*x4973);
evalcond[0]=(((r22*x4973))+((r21*x4980))+(((-1.0)*x4977*x4978)));
evalcond[1]=(((r21*x4981))+(((-1.0)*r22*x4978))+(((-1.0)*x4977*x4979)));
evalcond[2]=(cj0+((r11*x4981))+(((-1.0)*r12*x4978))+(((-1.0)*x4976*x4979)));
evalcond[3]=(((r01*x4980))+(((-1.0)*x4975*x4978))+((r02*x4973))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4980))+((r12*x4973))+(((-1.0)*x4974))+(((-1.0)*x4976*x4978)));
evalcond[5]=(((r01*x4981))+(((-1.0)*x4975*x4979))+(((-1.0)*x4974))+(((-1.0)*r02*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4982=IKsin(j0);
IkReal x4983=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x4982))+(((0.0304)*x4983)));
evalcond[1]=((((0.11235)*x4983))+(((-1.0)*py))+(((0.0304)*x4982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4984=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4984;
j4eval[1]=IKsign(x4984);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4985=((1.0)*cj5);
IkReal x4986=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4985)));
j4eval[0]=x4986;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4985))))));
j4eval[2]=IKsign(x4986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4987=cj5*cj5;
IkReal x4988=((1.0)*r20);
IkReal x4989=(r01*r21);
IkReal x4990=(r21*sj5);
IkReal x4991=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4987*x4988))+((x4987*x4989))+(((-1.0)*x4989))+((cj5*r00*x4990)));
j4eval[0]=x4991;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4988))+((cj0*x4990)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4992=cj5*cj5;
IkReal x4993=((1.0)*r20);
IkReal x4994=(r01*r21);
IkReal x4995=(r21*sj5);
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4992*x4994))+(((-1.0)*r00*x4992*x4993))+(((-1.0)*x4994))+((cj5*r00*x4995)))),-1);
if(!x4996.valid){
continue;
}
CheckValue<IkReal> x4997 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4993))+((cj0*x4995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4996.value)))+(x4997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4998=IKcos(j4);
IkReal x4999=IKsin(j4);
IkReal x5000=(cj5*r00);
IkReal x5001=(cj5*r10);
IkReal x5002=(cj5*r20);
IkReal x5003=((1.0)*x4998);
IkReal x5004=((1.0)*x4999);
IkReal x5005=(sj5*x4998);
IkReal x5006=(sj5*x4999);
evalcond[0]=(((r22*x4999))+(((-1.0)*x5002*x5003))+((r21*x5005)));
evalcond[1]=((((-1.0)*x5002*x5004))+((r21*x5006))+(((-1.0)*r22*x5003)));
evalcond[2]=(cj0+((r02*x4999))+(((-1.0)*x5000*x5003))+((r01*x5005)));
evalcond[3]=(sj0+((r11*x5005))+(((-1.0)*x5001*x5003))+((r12*x4999)));
evalcond[4]=(((r11*x5006))+cj0+(((-1.0)*x5001*x5004))+(((-1.0)*r12*x5003)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5000*x5004))+((r01*x5006))+(((-1.0)*r02*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5007=((1.0)*cj5);
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5007)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5007)))),-1);
if(!x5009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5008.value)+(((1.5707963267949)*(x5009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5010=IKcos(j4);
IkReal x5011=IKsin(j4);
IkReal x5012=(cj5*r00);
IkReal x5013=(cj5*r10);
IkReal x5014=(cj5*r20);
IkReal x5015=((1.0)*x5010);
IkReal x5016=((1.0)*x5011);
IkReal x5017=(sj5*x5010);
IkReal x5018=(sj5*x5011);
evalcond[0]=((((-1.0)*x5014*x5015))+((r21*x5017))+((r22*x5011)));
evalcond[1]=((((-1.0)*x5014*x5016))+(((-1.0)*r22*x5015))+((r21*x5018)));
evalcond[2]=(cj0+((r02*x5011))+(((-1.0)*x5012*x5015))+((r01*x5017)));
evalcond[3]=(sj0+(((-1.0)*x5013*x5015))+((r11*x5017))+((r12*x5011)));
evalcond[4]=(cj0+(((-1.0)*x5013*x5016))+(((-1.0)*r12*x5015))+((r11*x5018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5015))+(((-1.0)*x5012*x5016))+((r01*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
CheckValue<IkReal> x5020=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5019.value)+(((1.5707963267949)*(x5020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5021=IKcos(j4);
IkReal x5022=IKsin(j4);
IkReal x5023=(cj5*r00);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5021);
IkReal x5027=((1.0)*x5022);
IkReal x5028=(sj5*x5021);
IkReal x5029=(sj5*x5022);
evalcond[0]=((((-1.0)*x5025*x5026))+((r22*x5022))+((r21*x5028)));
evalcond[1]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5029)));
evalcond[2]=(((r02*x5022))+cj0+(((-1.0)*x5023*x5026))+((r01*x5028)));
evalcond[3]=(((r11*x5028))+sj0+((r12*x5022))+(((-1.0)*x5024*x5026)));
evalcond[4]=(((r11*x5029))+cj0+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027)));
evalcond[5]=((((-1.0)*r02*x5026))+(((-1.0)*sj0))+(((-1.0)*x5023*x5027))+((r01*x5029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5030=IKsin(j0);
IkReal x5031=IKcos(j0);
IkReal x5032=(r00*sj5);
IkReal x5033=(r10*sj5);
IkReal x5034=(cj5*r11);
IkReal x5035=(cj5*r01);
evalcond[0]=((((-1.0)*x5031))+x5035+x5032);
evalcond[1]=((((-1.0)*x5030))+x5034+x5033);
evalcond[2]=((((-0.11235)*x5030))+(((-0.08535)*x5035))+(((-0.08535)*x5032))+(((-1.0)*px)));
evalcond[3]=((((-0.08535)*x5034))+(((-0.08535)*x5033))+(((-1.0)*py))+(((0.11235)*x5031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5036;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5037=((1.0)*cj5);
IkReal x5038=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5037)));
j4eval[0]=x5038;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5037))))));
j4eval[2]=IKsign(x5038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5039=cj5*cj5;
IkReal x5040=(r01*r11);
IkReal x5041=((1.0)*r00);
IkReal x5042=(r01*sj5);
IkReal x5043=((((-1.0)*r02*r12))+((x5039*x5040))+(((-1.0)*x5040))+(((-1.0)*r10*x5039*x5041))+((cj5*r10*x5042))+((cj5*r00*r11*sj5)));
j4eval[0]=x5043;
j4eval[1]=IKsign(x5043);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5042))+(((-1.0)*cj0*cj5*x5041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5044=cj5*cj5;
IkReal x5045=(r01*r11);
IkReal x5046=(cj5*r00);
IkReal x5047=(r01*sj5);
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x5045))+(((-1.0)*r00*r10*x5044))+((x5044*x5045))+((cj5*r10*x5047))+((r11*sj5*x5046)))),-1);
if(!x5048.valid){
continue;
}
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal((((cj0*x5047))+(((-1.0)*cj0*x5046)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5048.value)))+(x5049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5050=IKcos(j4);
IkReal x5051=IKsin(j4);
IkReal x5052=(cj5*r00);
IkReal x5053=(r01*sj5);
IkReal x5054=(cj5*r10);
IkReal x5055=(cj5*r20);
IkReal x5056=((1.0)*x5050);
IkReal x5057=((1.0)*x5051);
IkReal x5058=(sj5*x5051);
IkReal x5059=(sj5*x5050);
evalcond[0]=(((x5050*x5053))+(((-1.0)*x5052*x5056))+((r02*x5051)));
evalcond[1]=((((-1.0)*x5054*x5056))+((r12*x5051))+((r11*x5059)));
evalcond[2]=(((r21*x5058))+(((-1.0)*x5055*x5057))+(((-1.0)*r22*x5056)));
evalcond[3]=((1.0)+((r21*x5059))+((r22*x5051))+(((-1.0)*x5055*x5056)));
evalcond[4]=(cj0+(((-1.0)*x5054*x5057))+(((-1.0)*r12*x5056))+((r11*x5058)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5052*x5057))+((x5051*x5053))+(((-1.0)*r02*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5060=((1.0)*cj5);
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5060)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5060)))),-1);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5061.value)+(((1.5707963267949)*(x5062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKcos(j4);
IkReal x5064=IKsin(j4);
IkReal x5065=(cj5*r00);
IkReal x5066=(r01*sj5);
IkReal x5067=(cj5*r10);
IkReal x5068=(cj5*r20);
IkReal x5069=((1.0)*x5063);
IkReal x5070=((1.0)*x5064);
IkReal x5071=(sj5*x5064);
IkReal x5072=(sj5*x5063);
evalcond[0]=(((x5063*x5066))+((r02*x5064))+(((-1.0)*x5065*x5069)));
evalcond[1]=(((r12*x5064))+((r11*x5072))+(((-1.0)*x5067*x5069)));
evalcond[2]=(((r21*x5071))+(((-1.0)*r22*x5069))+(((-1.0)*x5068*x5070)));
evalcond[3]=((1.0)+((r21*x5072))+((r22*x5064))+(((-1.0)*x5068*x5069)));
evalcond[4]=((((-1.0)*x5067*x5070))+cj0+(((-1.0)*r12*x5069))+((r11*x5071)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5069))+((x5064*x5066))+(((-1.0)*x5065*x5070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5073 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5073.value)+(((1.5707963267949)*(x5074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5075=IKcos(j4);
IkReal x5076=IKsin(j4);
IkReal x5077=(cj5*r00);
IkReal x5078=(r01*sj5);
IkReal x5079=(cj5*r10);
IkReal x5080=(cj5*r20);
IkReal x5081=((1.0)*x5075);
IkReal x5082=((1.0)*x5076);
IkReal x5083=(sj5*x5076);
IkReal x5084=(sj5*x5075);
evalcond[0]=((((-1.0)*x5077*x5081))+((r02*x5076))+((x5075*x5078)));
evalcond[1]=(((r11*x5084))+(((-1.0)*x5079*x5081))+((r12*x5076)));
evalcond[2]=(((r21*x5083))+(((-1.0)*x5080*x5082))+(((-1.0)*r22*x5081)));
evalcond[3]=((1.0)+((r21*x5084))+(((-1.0)*x5080*x5081))+((r22*x5076)));
evalcond[4]=((((-1.0)*r12*x5081))+cj0+((r11*x5083))+(((-1.0)*x5079*x5082)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5077*x5082))+((x5076*x5078))+(((-1.0)*r02*x5081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5085=IKcos(j0);
IkReal x5086=IKsin(j0);
evalcond[0]=((((-0.11235)*x5086))+(((-1.0)*px))+(((-0.21325)*x5085)));
evalcond[1]=((((0.11235)*x5085))+(((-1.0)*py))+(((-0.21325)*x5086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5087=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5087;
j4eval[1]=IKsign(x5087);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5088=((1.0)*cj5);
IkReal x5089=((((-1.0)*r11*x5088))+(((-1.0)*r10*sj5)));
j4eval[0]=x5089;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5088)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5090=cj5*cj5;
IkReal x5091=((1.0)*r20);
IkReal x5092=(r01*r21);
IkReal x5093=(r21*sj5);
IkReal x5094=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5092))+((cj5*r00*x5093))+((x5090*x5092))+(((-1.0)*r00*x5090*x5091)));
j4eval[0]=x5094;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5093))+(((-1.0)*cj0*cj5*x5091))))));
j4eval[2]=IKsign(x5094);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5095=cj5*cj5;
IkReal x5096=((1.0)*r20);
IkReal x5097=(r01*r21);
IkReal x5098=(r21*sj5);
CheckValue<IkReal> x5099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5098))+(((-1.0)*cj0*cj5*x5096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5099.valid){
continue;
}
CheckValue<IkReal> x5100=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5097))+((x5095*x5097))+((cj5*r00*x5098))+(((-1.0)*r00*x5095*x5096)))),-1);
if(!x5100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5099.value)+(((1.5707963267949)*(x5100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5101=IKcos(j4);
IkReal x5102=IKsin(j4);
IkReal x5103=(cj5*r00);
IkReal x5104=(cj5*r10);
IkReal x5105=(cj5*r20);
IkReal x5106=((1.0)*x5101);
IkReal x5107=((1.0)*x5102);
IkReal x5108=(sj5*x5101);
IkReal x5109=(sj5*x5102);
evalcond[0]=(((r22*x5102))+((r21*x5108))+(((-1.0)*x5105*x5106)));
evalcond[1]=((((-1.0)*r22*x5106))+((r21*x5109))+(((-1.0)*x5105*x5107)));
evalcond[2]=(((r01*x5108))+cj0+((r02*x5102))+(((-1.0)*x5103*x5106)));
evalcond[3]=(((r12*x5102))+sj0+(((-1.0)*x5104*x5106))+((r11*x5108)));
evalcond[4]=(cj0+(((-1.0)*x5104*x5107))+((r11*x5109))+(((-1.0)*r12*x5106)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5109))+(((-1.0)*r02*x5106))+(((-1.0)*x5103*x5107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5110=((1.0)*cj5);
CheckValue<IkReal> x5111 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5110)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5111.valid){
continue;
}
CheckValue<IkReal> x5112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5110)))),-1);
if(!x5112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5111.value)+(((1.5707963267949)*(x5112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5113=IKcos(j4);
IkReal x5114=IKsin(j4);
IkReal x5115=(cj5*r00);
IkReal x5116=(cj5*r10);
IkReal x5117=(cj5*r20);
IkReal x5118=((1.0)*x5113);
IkReal x5119=((1.0)*x5114);
IkReal x5120=(sj5*x5113);
IkReal x5121=(sj5*x5114);
evalcond[0]=((((-1.0)*x5117*x5118))+((r22*x5114))+((r21*x5120)));
evalcond[1]=((((-1.0)*r22*x5118))+(((-1.0)*x5117*x5119))+((r21*x5121)));
evalcond[2]=(cj0+((r02*x5114))+(((-1.0)*x5115*x5118))+((r01*x5120)));
evalcond[3]=(sj0+(((-1.0)*x5116*x5118))+((r11*x5120))+((r12*x5114)));
evalcond[4]=(cj0+(((-1.0)*x5116*x5119))+((r11*x5121))+(((-1.0)*r12*x5118)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5118))+(((-1.0)*x5115*x5119))+((r01*x5121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5122 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5122.valid){
continue;
}
CheckValue<IkReal> x5123=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5122.value)+(((1.5707963267949)*(x5123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5124=IKcos(j4);
IkReal x5125=IKsin(j4);
IkReal x5126=(cj5*r00);
IkReal x5127=(cj5*r10);
IkReal x5128=(cj5*r20);
IkReal x5129=((1.0)*x5124);
IkReal x5130=((1.0)*x5125);
IkReal x5131=(sj5*x5124);
IkReal x5132=(sj5*x5125);
evalcond[0]=(((r22*x5125))+(((-1.0)*x5128*x5129))+((r21*x5131)));
evalcond[1]=((((-1.0)*x5128*x5130))+((r21*x5132))+(((-1.0)*r22*x5129)));
evalcond[2]=(cj0+(((-1.0)*x5126*x5129))+((r01*x5131))+((r02*x5125)));
evalcond[3]=(sj0+((r12*x5125))+((r11*x5131))+(((-1.0)*x5127*x5129)));
evalcond[4]=(cj0+((r11*x5132))+(((-1.0)*r12*x5129))+(((-1.0)*x5127*x5130)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5126*x5130))+((r01*x5132))+(((-1.0)*r02*x5129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5133=((1.0)*sj5);
IkReal x5134=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5133))+(((-1.0)*r11*x5134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5134))+(((-1.0)*r00*x5133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5133))+(((-1.0)*r11*x5134))))+IKsqr(((((-1.0)*r01*x5134))+(((-1.0)*r00*x5133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5133))+(((-1.0)*r11*x5134))), ((((-1.0)*r01*x5134))+(((-1.0)*r00*x5133))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5135=IKsin(j0);
IkReal x5136=IKcos(j0);
IkReal x5137=(r00*sj5);
IkReal x5138=(r10*sj5);
IkReal x5139=(cj5*r11);
IkReal x5140=(cj5*r01);
evalcond[0]=(x5140+x5137+x5136);
evalcond[1]=(x5139+x5138+x5135);
evalcond[2]=((((-0.11235)*x5135))+(((-1.0)*px))+(((-0.08535)*x5140))+(((-0.08535)*x5137)));
evalcond[3]=((((0.11235)*x5136))+(((-1.0)*py))+(((-0.08535)*x5139))+(((-0.08535)*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5141=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5141;
j4eval[1]=IKsign(x5141);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5142=((1.0)*cj5);
IkReal x5143=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5142)));
j4eval[0]=x5143;
j4eval[1]=IKsign(x5143);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5142))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5144=cj5*cj5;
IkReal x5145=(r01*r11);
IkReal x5146=((1.0)*r00);
IkReal x5147=(r01*sj5);
IkReal x5148=(((x5144*x5145))+(((-1.0)*r02*r12))+(((-1.0)*x5145))+(((-1.0)*r10*x5144*x5146))+((cj5*r10*x5147))+((cj5*r00*r11*sj5)));
j4eval[0]=x5148;
j4eval[1]=IKsign(x5148);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5147))+(((-1.0)*cj0*cj5*x5146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5149=cj5*cj5;
IkReal x5150=(r01*r11);
IkReal x5151=(cj5*r00);
IkReal x5152=(r01*sj5);
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5152))+(((-1.0)*r02*r12))+((x5149*x5150))+(((-1.0)*x5150))+(((-1.0)*r00*r10*x5149))+((r11*sj5*x5151)))),-1);
if(!x5153.valid){
continue;
}
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5151))+((cj0*x5152)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5153.value)))+(x5154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5155=IKcos(j4);
IkReal x5156=IKsin(j4);
IkReal x5157=(cj5*r00);
IkReal x5158=(r01*sj5);
IkReal x5159=(cj5*r10);
IkReal x5160=(cj5*r20);
IkReal x5161=((1.0)*x5155);
IkReal x5162=((1.0)*x5156);
IkReal x5163=(sj5*x5156);
IkReal x5164=(sj5*x5155);
evalcond[0]=((((-1.0)*x5157*x5161))+((x5155*x5158))+((r02*x5156)));
evalcond[1]=(((r12*x5156))+(((-1.0)*x5159*x5161))+((r11*x5164)));
evalcond[2]=((((-1.0)*r22*x5161))+((r21*x5163))+(((-1.0)*x5160*x5162)));
evalcond[3]=((-1.0)+((r21*x5164))+(((-1.0)*x5160*x5161))+((r22*x5156)));
evalcond[4]=(cj0+(((-1.0)*r12*x5161))+(((-1.0)*x5159*x5162))+((r11*x5163)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5157*x5162))+(((-1.0)*r02*x5161))+((x5156*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5165=((1.0)*cj5);
CheckValue<IkReal> x5166 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5165)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5166.valid){
continue;
}
CheckValue<IkReal> x5167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5165)))),-1);
if(!x5167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5166.value)+(((1.5707963267949)*(x5167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5168=IKcos(j4);
IkReal x5169=IKsin(j4);
IkReal x5170=(cj5*r00);
IkReal x5171=(r01*sj5);
IkReal x5172=(cj5*r10);
IkReal x5173=(cj5*r20);
IkReal x5174=((1.0)*x5168);
IkReal x5175=((1.0)*x5169);
IkReal x5176=(sj5*x5169);
IkReal x5177=(sj5*x5168);
evalcond[0]=((((-1.0)*x5170*x5174))+((r02*x5169))+((x5168*x5171)));
evalcond[1]=((((-1.0)*x5172*x5174))+((r12*x5169))+((r11*x5177)));
evalcond[2]=((((-1.0)*x5173*x5175))+(((-1.0)*r22*x5174))+((r21*x5176)));
evalcond[3]=((-1.0)+(((-1.0)*x5173*x5174))+((r22*x5169))+((r21*x5177)));
evalcond[4]=(cj0+(((-1.0)*x5172*x5175))+(((-1.0)*r12*x5174))+((r11*x5176)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5170*x5175))+(((-1.0)*r02*x5174))+((x5169*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5178.valid){
continue;
}
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5178.value)))+(x5179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5180=IKcos(j4);
IkReal x5181=IKsin(j4);
IkReal x5182=(cj5*r00);
IkReal x5183=(r01*sj5);
IkReal x5184=(cj5*r10);
IkReal x5185=(cj5*r20);
IkReal x5186=((1.0)*x5180);
IkReal x5187=((1.0)*x5181);
IkReal x5188=(sj5*x5181);
IkReal x5189=(sj5*x5180);
evalcond[0]=((((-1.0)*x5182*x5186))+((x5180*x5183))+((r02*x5181)));
evalcond[1]=((((-1.0)*x5184*x5186))+((r11*x5189))+((r12*x5181)));
evalcond[2]=((((-1.0)*r22*x5186))+(((-1.0)*x5185*x5187))+((r21*x5188)));
evalcond[3]=((-1.0)+((r22*x5181))+(((-1.0)*x5185*x5186))+((r21*x5189)));
evalcond[4]=(cj0+(((-1.0)*x5184*x5187))+(((-1.0)*r12*x5186))+((r11*x5188)));
evalcond[5]=((((-1.0)*sj0))+((x5181*x5183))+(((-1.0)*r02*x5186))+(((-1.0)*x5182*x5187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5190=IKcos(j0);
IkReal x5191=IKsin(j0);
evalcond[0]=((((-0.11235)*x5191))+(((-1.0)*px))+(((0.21325)*x5190)));
evalcond[1]=((((0.11235)*x5190))+(((-1.0)*py))+(((0.21325)*x5191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5192=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5192;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5193=((1.0)*cj5);
IkReal x5194=((((-1.0)*r01*x5193))+(((-1.0)*r00*sj5)));
j4eval[0]=x5194;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5193)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5195=((1.0)*cj5);
IkReal x5196=((((-1.0)*r01*x5195))+(((-1.0)*r00*sj5)));
j4eval[0]=x5196;
j4eval[1]=IKsign(x5196);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5197=((1.0)*cj5);
CheckValue<IkReal> x5198 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5197)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
CheckValue<IkReal> x5199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5197))+(((-1.0)*r00*sj5)))),-1);
if(!x5199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5198.value)+(((1.5707963267949)*(x5199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5200=IKcos(j4);
IkReal x5201=IKsin(j4);
IkReal x5202=((1.0)*sj0);
IkReal x5203=(cj5*r00);
IkReal x5204=(cj5*r10);
IkReal x5205=(cj5*r20);
IkReal x5206=((1.0)*x5200);
IkReal x5207=((1.0)*x5201);
IkReal x5208=(sj5*x5200);
IkReal x5209=(sj5*x5201);
evalcond[0]=(((r22*x5201))+(((-1.0)*x5205*x5206))+((r21*x5208)));
evalcond[1]=((((-1.0)*r22*x5206))+(((-1.0)*x5205*x5207))+((r21*x5209)));
evalcond[2]=(cj0+((r11*x5209))+(((-1.0)*x5204*x5207))+(((-1.0)*r12*x5206)));
evalcond[3]=((((-1.0)*x5203*x5206))+((r01*x5208))+((r02*x5201))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5202))+((r11*x5208))+((r12*x5201))+(((-1.0)*x5204*x5206)));
evalcond[5]=((((-1.0)*x5202))+(((-1.0)*x5203*x5207))+(((-1.0)*r02*x5206))+((r01*x5209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5210=((1.0)*cj5);
CheckValue<IkReal> x5211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5211.valid){
continue;
}
CheckValue<IkReal> x5212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5210)))),-1);
if(!x5212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5211.value)+(((1.5707963267949)*(x5212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5213=IKcos(j4);
IkReal x5214=IKsin(j4);
IkReal x5215=((1.0)*sj0);
IkReal x5216=(cj5*r00);
IkReal x5217=(cj5*r10);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*x5213);
IkReal x5220=((1.0)*x5214);
IkReal x5221=(sj5*x5213);
IkReal x5222=(sj5*x5214);
evalcond[0]=(((r21*x5221))+(((-1.0)*x5218*x5219))+((r22*x5214)));
evalcond[1]=(((r21*x5222))+(((-1.0)*x5218*x5220))+(((-1.0)*r22*x5219)));
evalcond[2]=(cj0+(((-1.0)*x5217*x5220))+((r11*x5222))+(((-1.0)*r12*x5219)));
evalcond[3]=(((r02*x5214))+((r01*x5221))+(((-1.0)*cj0))+(((-1.0)*x5216*x5219)));
evalcond[4]=((((-1.0)*x5217*x5219))+(((-1.0)*x5215))+((r12*x5214))+((r11*x5221)));
evalcond[5]=((((-1.0)*x5215))+(((-1.0)*x5216*x5220))+((r01*x5222))+(((-1.0)*r02*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5223 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5223.valid){
continue;
}
CheckValue<IkReal> x5224=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5223.value)+(((1.5707963267949)*(x5224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5225=IKcos(j4);
IkReal x5226=IKsin(j4);
IkReal x5227=((1.0)*sj0);
IkReal x5228=(cj5*r00);
IkReal x5229=(cj5*r10);
IkReal x5230=(cj5*r20);
IkReal x5231=((1.0)*x5225);
IkReal x5232=((1.0)*x5226);
IkReal x5233=(sj5*x5225);
IkReal x5234=(sj5*x5226);
evalcond[0]=(((r22*x5226))+((r21*x5233))+(((-1.0)*x5230*x5231)));
evalcond[1]=((((-1.0)*r22*x5231))+((r21*x5234))+(((-1.0)*x5230*x5232)));
evalcond[2]=(cj0+((r11*x5234))+(((-1.0)*r12*x5231))+(((-1.0)*x5229*x5232)));
evalcond[3]=(((r02*x5226))+((r01*x5233))+(((-1.0)*x5228*x5231))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5233))+(((-1.0)*x5229*x5231))+(((-1.0)*x5227))+((r12*x5226)));
evalcond[5]=((((-1.0)*r02*x5231))+((r01*x5234))+(((-1.0)*x5228*x5232))+(((-1.0)*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5235=IKcos(j0);
IkReal x5236=IKsin(j0);
evalcond[0]=((((-0.4569)*x5235))+(((-0.11235)*x5236))+(((-1.0)*px)));
evalcond[1]=((((-0.4569)*x5236))+(((-1.0)*py))+(((0.11235)*x5235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5237=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5237;
j4eval[1]=IKsign(x5237);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5238=((1.0)*cj5);
IkReal x5239=((((-1.0)*r11*x5238))+(((-1.0)*r10*sj5)));
j4eval[0]=x5239;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5238))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5240=cj5*cj5;
IkReal x5241=((1.0)*r20);
IkReal x5242=(r01*r21);
IkReal x5243=(r21*sj5);
IkReal x5244=(((cj5*r01*r20*sj5))+((x5240*x5242))+(((-1.0)*r02*r22))+(((-1.0)*x5242))+(((-1.0)*r00*x5240*x5241))+((cj5*r00*x5243)));
j4eval[0]=x5244;
j4eval[1]=((IKabs((((cj0*x5243))+(((-1.0)*cj0*cj5*x5241)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5245=cj5*cj5;
IkReal x5246=((1.0)*r20);
IkReal x5247=(r01*r21);
IkReal x5248=(r21*sj5);
CheckValue<IkReal> x5249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5248))+(((-1.0)*cj0*cj5*x5246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5249.valid){
continue;
}
CheckValue<IkReal> x5250=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5245*x5247))+(((-1.0)*r02*r22))+(((-1.0)*x5247))+((cj5*r00*x5248))+(((-1.0)*r00*x5245*x5246)))),-1);
if(!x5250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5249.value)+(((1.5707963267949)*(x5250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5251=IKcos(j4);
IkReal x5252=IKsin(j4);
IkReal x5253=(cj5*r00);
IkReal x5254=(cj5*r10);
IkReal x5255=(cj5*r20);
IkReal x5256=((1.0)*x5251);
IkReal x5257=((1.0)*x5252);
IkReal x5258=(sj5*x5251);
IkReal x5259=(sj5*x5252);
evalcond[0]=(((r22*x5252))+(((-1.0)*x5255*x5256))+((r21*x5258)));
evalcond[1]=((((-1.0)*x5255*x5257))+((r21*x5259))+(((-1.0)*r22*x5256)));
evalcond[2]=(((r01*x5258))+cj0+(((-1.0)*x5253*x5256))+((r02*x5252)));
evalcond[3]=(sj0+((r12*x5252))+(((-1.0)*x5254*x5256))+((r11*x5258)));
evalcond[4]=(cj0+(((-1.0)*x5254*x5257))+(((-1.0)*r12*x5256))+((r11*x5259)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5256))+((r01*x5259))+(((-1.0)*x5253*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5260=((1.0)*cj5);
CheckValue<IkReal> x5261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5260)))),-1);
if(!x5261.valid){
continue;
}
CheckValue<IkReal> x5262 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5260)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5261.value)))+(x5262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5263=IKcos(j4);
IkReal x5264=IKsin(j4);
IkReal x5265=(cj5*r00);
IkReal x5266=(cj5*r10);
IkReal x5267=(cj5*r20);
IkReal x5268=((1.0)*x5263);
IkReal x5269=((1.0)*x5264);
IkReal x5270=(sj5*x5263);
IkReal x5271=(sj5*x5264);
evalcond[0]=(((r21*x5270))+(((-1.0)*x5267*x5268))+((r22*x5264)));
evalcond[1]=(((r21*x5271))+(((-1.0)*x5267*x5269))+(((-1.0)*r22*x5268)));
evalcond[2]=(((r02*x5264))+cj0+((r01*x5270))+(((-1.0)*x5265*x5268)));
evalcond[3]=(sj0+((r12*x5264))+(((-1.0)*x5266*x5268))+((r11*x5270)));
evalcond[4]=(cj0+(((-1.0)*r12*x5268))+(((-1.0)*x5266*x5269))+((r11*x5271)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5268))+((r01*x5271))+(((-1.0)*x5265*x5269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5272.value)+(((1.5707963267949)*(x5273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5274=IKcos(j4);
IkReal x5275=IKsin(j4);
IkReal x5276=(cj5*r00);
IkReal x5277=(cj5*r10);
IkReal x5278=(cj5*r20);
IkReal x5279=((1.0)*x5274);
IkReal x5280=((1.0)*x5275);
IkReal x5281=(sj5*x5274);
IkReal x5282=(sj5*x5275);
evalcond[0]=(((r22*x5275))+(((-1.0)*x5278*x5279))+((r21*x5281)));
evalcond[1]=((((-1.0)*x5278*x5280))+((r21*x5282))+(((-1.0)*r22*x5279)));
evalcond[2]=(((r02*x5275))+cj0+(((-1.0)*x5276*x5279))+((r01*x5281)));
evalcond[3]=(sj0+(((-1.0)*x5277*x5279))+((r11*x5281))+((r12*x5275)));
evalcond[4]=(cj0+(((-1.0)*r12*x5279))+(((-1.0)*x5277*x5280))+((r11*x5282)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5276*x5280))+((r01*x5282))+(((-1.0)*r02*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5283=IKcos(j0);
IkReal x5284=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.0304)*x5283))+(((-0.11235)*x5284)));
evalcond[1]=((((0.11235)*x5283))+(((-1.0)*py))+(((-0.0304)*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5285=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5285;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5286=((1.0)*cj5);
IkReal x5287=((((-1.0)*r01*x5286))+(((-1.0)*r00*sj5)));
j4eval[0]=x5287;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5286))))));
j4eval[2]=IKsign(x5287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5288=((1.0)*cj5);
IkReal x5289=((((-1.0)*r01*x5288))+(((-1.0)*r00*sj5)));
j4eval[0]=x5289;
j4eval[1]=IKsign(x5289);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5288))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5290=((1.0)*cj5);
CheckValue<IkReal> x5291 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5290)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5291.valid){
continue;
}
CheckValue<IkReal> x5292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5290))+(((-1.0)*r00*sj5)))),-1);
if(!x5292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5291.value)+(((1.5707963267949)*(x5292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5293=IKcos(j4);
IkReal x5294=IKsin(j4);
IkReal x5295=((1.0)*sj0);
IkReal x5296=(cj5*r00);
IkReal x5297=(cj5*r10);
IkReal x5298=(cj5*r20);
IkReal x5299=((1.0)*x5293);
IkReal x5300=((1.0)*x5294);
IkReal x5301=(sj5*x5293);
IkReal x5302=(sj5*x5294);
evalcond[0]=(((r21*x5301))+((r22*x5294))+(((-1.0)*x5298*x5299)));
evalcond[1]=(((r21*x5302))+(((-1.0)*r22*x5299))+(((-1.0)*x5298*x5300)));
evalcond[2]=((((-1.0)*x5297*x5300))+cj0+(((-1.0)*r12*x5299))+((r11*x5302)));
evalcond[3]=(((r02*x5294))+(((-1.0)*x5296*x5299))+((r01*x5301))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5294))+(((-1.0)*x5295))+(((-1.0)*x5297*x5299))+((r11*x5301)));
evalcond[5]=((((-1.0)*x5296*x5300))+(((-1.0)*x5295))+(((-1.0)*r02*x5299))+((r01*x5302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5303=((1.0)*cj5);
CheckValue<IkReal> x5304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5304.valid){
continue;
}
CheckValue<IkReal> x5305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5303)))),-1);
if(!x5305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5304.value)+(((1.5707963267949)*(x5305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5306=IKcos(j4);
IkReal x5307=IKsin(j4);
IkReal x5308=((1.0)*sj0);
IkReal x5309=(cj5*r00);
IkReal x5310=(cj5*r10);
IkReal x5311=(cj5*r20);
IkReal x5312=((1.0)*x5306);
IkReal x5313=((1.0)*x5307);
IkReal x5314=(sj5*x5306);
IkReal x5315=(sj5*x5307);
evalcond[0]=(((r21*x5314))+((r22*x5307))+(((-1.0)*x5311*x5312)));
evalcond[1]=(((r21*x5315))+(((-1.0)*r22*x5312))+(((-1.0)*x5311*x5313)));
evalcond[2]=((((-1.0)*x5310*x5313))+(((-1.0)*r12*x5312))+cj0+((r11*x5315)));
evalcond[3]=(((r01*x5314))+((r02*x5307))+(((-1.0)*x5309*x5312))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5310*x5312))+(((-1.0)*x5308))+((r12*x5307))+((r11*x5314)));
evalcond[5]=(((r01*x5315))+(((-1.0)*x5308))+(((-1.0)*x5309*x5313))+(((-1.0)*r02*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
CheckValue<IkReal> x5317=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5316.value)+(((1.5707963267949)*(x5317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5318=IKcos(j4);
IkReal x5319=IKsin(j4);
IkReal x5320=((1.0)*sj0);
IkReal x5321=(cj5*r00);
IkReal x5322=(cj5*r10);
IkReal x5323=(cj5*r20);
IkReal x5324=((1.0)*x5318);
IkReal x5325=((1.0)*x5319);
IkReal x5326=(sj5*x5318);
IkReal x5327=(sj5*x5319);
evalcond[0]=(((r22*x5319))+(((-1.0)*x5323*x5324))+((r21*x5326)));
evalcond[1]=((((-1.0)*x5323*x5325))+(((-1.0)*r22*x5324))+((r21*x5327)));
evalcond[2]=(((r11*x5327))+cj0+(((-1.0)*x5322*x5325))+(((-1.0)*r12*x5324)));
evalcond[3]=((((-1.0)*x5321*x5324))+((r02*x5319))+((r01*x5326))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5326))+(((-1.0)*x5322*x5324))+(((-1.0)*x5320))+((r12*x5319)));
evalcond[5]=((((-1.0)*x5321*x5325))+(((-1.0)*r02*x5324))+((r01*x5327))+(((-1.0)*x5320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5328=((1.0)*sj5);
IkReal x5329=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5329))+(((-1.0)*r10*x5328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5328))+(((-1.0)*r01*x5329)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5329))+(((-1.0)*r10*x5328))))+IKsqr(((((-1.0)*r00*x5328))+(((-1.0)*r01*x5329))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5329))+(((-1.0)*r10*x5328))), ((((-1.0)*r00*x5328))+(((-1.0)*r01*x5329))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5330=IKsin(j0);
IkReal x5331=IKcos(j0);
IkReal x5332=(r00*sj5);
IkReal x5333=(r10*sj5);
IkReal x5334=(cj5*r11);
IkReal x5335=(cj5*r01);
evalcond[0]=(x5331+x5332+x5335);
evalcond[1]=(x5330+x5333+x5334);
evalcond[2]=((((-0.08535)*x5332))+(((-0.08535)*x5335))+(((-1.0)*px))+(((-0.11235)*x5330)));
evalcond[3]=((((0.11235)*x5331))+(((-0.08535)*x5333))+(((-0.08535)*x5334))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5336=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5336;
j4eval[1]=IKsign(x5336);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5337=((1.0)*cj5);
IkReal x5338=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5337)));
j4eval[0]=x5338;
j4eval[1]=IKsign(x5338);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5337))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5339=cj5*cj5;
IkReal x5340=(r01*r11);
IkReal x5341=((1.0)*r00);
IkReal x5342=(r01*sj5);
IkReal x5343=(((cj5*r10*x5342))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5339*x5341))+((x5339*x5340))+(((-1.0)*x5340))+((cj5*r00*r11*sj5)));
j4eval[0]=x5343;
j4eval[1]=IKsign(x5343);
j4eval[2]=((IKabs((((cj0*x5342))+(((-1.0)*cj0*cj5*x5341)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5344=cj5*cj5;
IkReal x5345=(r01*r11);
IkReal x5346=(cj5*r00);
IkReal x5347=(r01*sj5);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal((((cj0*x5347))+(((-1.0)*cj0*x5346)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5347))+(((-1.0)*r00*r10*x5344))+(((-1.0)*r02*r12))+((r11*sj5*x5346))+((x5344*x5345))+(((-1.0)*x5345)))),-1);
if(!x5349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5348.value)+(((1.5707963267949)*(x5349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5350=IKcos(j4);
IkReal x5351=IKsin(j4);
IkReal x5352=(cj5*r00);
IkReal x5353=(r01*sj5);
IkReal x5354=(cj5*r10);
IkReal x5355=(cj5*r20);
IkReal x5356=((1.0)*x5350);
IkReal x5357=((1.0)*x5351);
IkReal x5358=(sj5*x5351);
IkReal x5359=(sj5*x5350);
evalcond[0]=((((-1.0)*x5352*x5356))+((r02*x5351))+((x5350*x5353)));
evalcond[1]=(((r11*x5359))+(((-1.0)*x5354*x5356))+((r12*x5351)));
evalcond[2]=((((-1.0)*x5355*x5357))+(((-1.0)*r22*x5356))+((r21*x5358)));
evalcond[3]=((-1.0)+(((-1.0)*x5355*x5356))+((r22*x5351))+((r21*x5359)));
evalcond[4]=(cj0+((r11*x5358))+(((-1.0)*r12*x5356))+(((-1.0)*x5354*x5357)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5356))+(((-1.0)*x5352*x5357))+((x5351*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5360=((1.0)*cj5);
CheckValue<IkReal> x5361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5360)))),-1);
if(!x5361.valid){
continue;
}
CheckValue<IkReal> x5362 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5360)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5361.value)))+(x5362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5363=IKcos(j4);
IkReal x5364=IKsin(j4);
IkReal x5365=(cj5*r00);
IkReal x5366=(r01*sj5);
IkReal x5367=(cj5*r10);
IkReal x5368=(cj5*r20);
IkReal x5369=((1.0)*x5363);
IkReal x5370=((1.0)*x5364);
IkReal x5371=(sj5*x5364);
IkReal x5372=(sj5*x5363);
evalcond[0]=(((r02*x5364))+(((-1.0)*x5365*x5369))+((x5363*x5366)));
evalcond[1]=(((r12*x5364))+(((-1.0)*x5367*x5369))+((r11*x5372)));
evalcond[2]=((((-1.0)*r22*x5369))+((r21*x5371))+(((-1.0)*x5368*x5370)));
evalcond[3]=((-1.0)+((r22*x5364))+((r21*x5372))+(((-1.0)*x5368*x5369)));
evalcond[4]=(cj0+(((-1.0)*x5367*x5370))+((r11*x5371))+(((-1.0)*r12*x5369)));
evalcond[5]=((((-1.0)*sj0))+((x5364*x5366))+(((-1.0)*r02*x5369))+(((-1.0)*x5365*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5373=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5373.valid){
continue;
}
CheckValue<IkReal> x5374 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5373.value)))+(x5374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5375=IKcos(j4);
IkReal x5376=IKsin(j4);
IkReal x5377=(cj5*r00);
IkReal x5378=(r01*sj5);
IkReal x5379=(cj5*r10);
IkReal x5380=(cj5*r20);
IkReal x5381=((1.0)*x5375);
IkReal x5382=((1.0)*x5376);
IkReal x5383=(sj5*x5376);
IkReal x5384=(sj5*x5375);
evalcond[0]=(((r02*x5376))+(((-1.0)*x5377*x5381))+((x5375*x5378)));
evalcond[1]=(((r11*x5384))+(((-1.0)*x5379*x5381))+((r12*x5376)));
evalcond[2]=((((-1.0)*x5380*x5382))+(((-1.0)*r22*x5381))+((r21*x5383)));
evalcond[3]=((-1.0)+((r22*x5376))+(((-1.0)*x5380*x5381))+((r21*x5384)));
evalcond[4]=(cj0+((r11*x5383))+(((-1.0)*x5379*x5382))+(((-1.0)*r12*x5381)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5381))+((x5376*x5378))+(((-1.0)*x5377*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5385=IKcos(j0);
IkReal x5386=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((0.21325)*x5385))+(((-0.11235)*x5386)));
evalcond[1]=((((-1.0)*py))+(((0.21325)*x5386))+(((0.11235)*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5387=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5387;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5388=((1.0)*cj5);
IkReal x5389=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5388)));
j4eval[0]=x5389;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5388))))));
j4eval[2]=IKsign(x5389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5390=((1.0)*cj5);
IkReal x5391=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5390)));
j4eval[0]=x5391;
j4eval[1]=IKsign(x5391);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5390))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5392=((1.0)*cj5);
CheckValue<IkReal> x5393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5392)))),-1);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5392))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5393.value)))+(x5394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5395=IKcos(j4);
IkReal x5396=IKsin(j4);
IkReal x5397=((1.0)*sj0);
IkReal x5398=(cj5*r00);
IkReal x5399=(cj5*r10);
IkReal x5400=(cj5*r20);
IkReal x5401=((1.0)*x5395);
IkReal x5402=((1.0)*x5396);
IkReal x5403=(sj5*x5395);
IkReal x5404=(sj5*x5396);
evalcond[0]=(((r21*x5403))+((r22*x5396))+(((-1.0)*x5400*x5401)));
evalcond[1]=(((r21*x5404))+(((-1.0)*x5400*x5402))+(((-1.0)*r22*x5401)));
evalcond[2]=(cj0+(((-1.0)*x5399*x5402))+(((-1.0)*r12*x5401))+((r11*x5404)));
evalcond[3]=(((r02*x5396))+(((-1.0)*x5398*x5401))+((r01*x5403))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5399*x5401))+((r12*x5396))+(((-1.0)*x5397))+((r11*x5403)));
evalcond[5]=((((-1.0)*x5398*x5402))+(((-1.0)*r02*x5401))+(((-1.0)*x5397))+((r01*x5404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5405=((1.0)*cj5);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5405))+(((-1.0)*r00*sj5)))),-1);
if(!x5406.valid){
continue;
}
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5405))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5406.value)))+(x5407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5408=IKcos(j4);
IkReal x5409=IKsin(j4);
IkReal x5410=((1.0)*sj0);
IkReal x5411=(cj5*r00);
IkReal x5412=(cj5*r10);
IkReal x5413=(cj5*r20);
IkReal x5414=((1.0)*x5408);
IkReal x5415=((1.0)*x5409);
IkReal x5416=(sj5*x5408);
IkReal x5417=(sj5*x5409);
evalcond[0]=(((r22*x5409))+((r21*x5416))+(((-1.0)*x5413*x5414)));
evalcond[1]=((((-1.0)*r22*x5414))+((r21*x5417))+(((-1.0)*x5413*x5415)));
evalcond[2]=((((-1.0)*x5412*x5415))+((r11*x5417))+cj0+(((-1.0)*r12*x5414)));
evalcond[3]=(((r02*x5409))+((r01*x5416))+(((-1.0)*x5411*x5414))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5409))+(((-1.0)*x5412*x5414))+((r11*x5416))+(((-1.0)*x5410)));
evalcond[5]=((((-1.0)*r02*x5414))+(((-1.0)*x5410))+((r01*x5417))+(((-1.0)*x5411*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5418 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5418.valid){
continue;
}
CheckValue<IkReal> x5419=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5418.value)+(((1.5707963267949)*(x5419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5420=IKcos(j4);
IkReal x5421=IKsin(j4);
IkReal x5422=((1.0)*sj0);
IkReal x5423=(cj5*r00);
IkReal x5424=(cj5*r10);
IkReal x5425=(cj5*r20);
IkReal x5426=((1.0)*x5420);
IkReal x5427=((1.0)*x5421);
IkReal x5428=(sj5*x5420);
IkReal x5429=(sj5*x5421);
evalcond[0]=(((r22*x5421))+((r21*x5428))+(((-1.0)*x5425*x5426)));
evalcond[1]=(((r21*x5429))+(((-1.0)*x5425*x5427))+(((-1.0)*r22*x5426)));
evalcond[2]=(cj0+(((-1.0)*x5424*x5427))+((r11*x5429))+(((-1.0)*r12*x5426)));
evalcond[3]=(((r01*x5428))+((r02*x5421))+(((-1.0)*cj0))+(((-1.0)*x5423*x5426)));
evalcond[4]=((((-1.0)*x5422))+((r12*x5421))+(((-1.0)*x5424*x5426))+((r11*x5428)));
evalcond[5]=((((-1.0)*x5422))+((r01*x5429))+(((-1.0)*r02*x5426))+(((-1.0)*x5423*x5427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5430=IKsin(j0);
IkReal x5431=IKcos(j0);
IkReal x5432=(r00*sj5);
IkReal x5433=(r10*sj5);
IkReal x5434=(cj5*r11);
IkReal x5435=(cj5*r01);
evalcond[0]=(x5432+x5435+(((-1.0)*x5431)));
evalcond[1]=(x5433+x5434+(((-1.0)*x5430)));
evalcond[2]=((((-0.11235)*x5430))+(((-0.08535)*x5432))+(((-0.08535)*x5435))+(((-1.0)*px)));
evalcond[3]=((((0.11235)*x5431))+(((-0.08535)*x5434))+(((-0.08535)*x5433))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5436=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5436;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5436);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5437=((1.0)*cj5);
IkReal x5438=((((-1.0)*r01*x5437))+(((-1.0)*r00*sj5)));
j4eval[0]=x5438;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5437))))));
j4eval[2]=IKsign(x5438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5439=cj5*cj5;
IkReal x5440=(r01*r11);
IkReal x5441=((1.0)*r00);
IkReal x5442=(r01*sj5);
IkReal x5443=((((-1.0)*x5440))+(((-1.0)*r02*r12))+((cj5*r10*x5442))+((x5439*x5440))+(((-1.0)*r10*x5439*x5441))+((cj5*r00*r11*sj5)));
j4eval[0]=x5443;
j4eval[1]=IKsign(x5443);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5441))+((cj0*x5442))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5444=cj5*cj5;
IkReal x5445=(r01*r11);
IkReal x5446=(cj5*r00);
IkReal x5447=(r01*sj5);
CheckValue<IkReal> x5448 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5446))+((cj0*x5447)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5448.valid){
continue;
}
CheckValue<IkReal> x5449=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5445))+(((-1.0)*r02*r12))+((x5444*x5445))+((cj5*r10*x5447))+(((-1.0)*r00*r10*x5444))+((r11*sj5*x5446)))),-1);
if(!x5449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5448.value)+(((1.5707963267949)*(x5449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5450=IKcos(j4);
IkReal x5451=IKsin(j4);
IkReal x5452=(cj5*r00);
IkReal x5453=(r01*sj5);
IkReal x5454=(cj5*r10);
IkReal x5455=(cj5*r20);
IkReal x5456=((1.0)*x5450);
IkReal x5457=((1.0)*x5451);
IkReal x5458=(sj5*x5451);
IkReal x5459=(sj5*x5450);
evalcond[0]=((((-1.0)*x5452*x5456))+((r02*x5451))+((x5450*x5453)));
evalcond[1]=(((r12*x5451))+(((-1.0)*x5454*x5456))+((r11*x5459)));
evalcond[2]=((((-1.0)*x5455*x5457))+((r21*x5458))+(((-1.0)*r22*x5456)));
evalcond[3]=((1.0)+(((-1.0)*x5455*x5456))+((r21*x5459))+((r22*x5451)));
evalcond[4]=((((-1.0)*r12*x5456))+(((-1.0)*x5454*x5457))+cj0+((r11*x5458)));
evalcond[5]=((((-1.0)*x5452*x5457))+(((-1.0)*sj0))+(((-1.0)*r02*x5456))+((x5451*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5460=((1.0)*cj5);
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5460))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
CheckValue<IkReal> x5462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5460))+(((-1.0)*r00*sj5)))),-1);
if(!x5462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5461.value)+(((1.5707963267949)*(x5462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5463=IKcos(j4);
IkReal x5464=IKsin(j4);
IkReal x5465=(cj5*r00);
IkReal x5466=(r01*sj5);
IkReal x5467=(cj5*r10);
IkReal x5468=(cj5*r20);
IkReal x5469=((1.0)*x5463);
IkReal x5470=((1.0)*x5464);
IkReal x5471=(sj5*x5464);
IkReal x5472=(sj5*x5463);
evalcond[0]=(((r02*x5464))+((x5463*x5466))+(((-1.0)*x5465*x5469)));
evalcond[1]=((((-1.0)*x5467*x5469))+((r12*x5464))+((r11*x5472)));
evalcond[2]=((((-1.0)*x5468*x5470))+((r21*x5471))+(((-1.0)*r22*x5469)));
evalcond[3]=((1.0)+((r22*x5464))+(((-1.0)*x5468*x5469))+((r21*x5472)));
evalcond[4]=(cj0+(((-1.0)*x5467*x5470))+(((-1.0)*r12*x5469))+((r11*x5471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5469))+(((-1.0)*x5465*x5470))+((x5464*x5466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5473 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5473.valid){
continue;
}
CheckValue<IkReal> x5474=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5473.value)+(((1.5707963267949)*(x5474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5475=IKcos(j4);
IkReal x5476=IKsin(j4);
IkReal x5477=(cj5*r00);
IkReal x5478=(r01*sj5);
IkReal x5479=(cj5*r10);
IkReal x5480=(cj5*r20);
IkReal x5481=((1.0)*x5475);
IkReal x5482=((1.0)*x5476);
IkReal x5483=(sj5*x5476);
IkReal x5484=(sj5*x5475);
evalcond[0]=(((x5475*x5478))+(((-1.0)*x5477*x5481))+((r02*x5476)));
evalcond[1]=((((-1.0)*x5479*x5481))+((r11*x5484))+((r12*x5476)));
evalcond[2]=((((-1.0)*r22*x5481))+((r21*x5483))+(((-1.0)*x5480*x5482)));
evalcond[3]=((1.0)+((r21*x5484))+((r22*x5476))+(((-1.0)*x5480*x5481)));
evalcond[4]=((((-1.0)*x5479*x5482))+(((-1.0)*r12*x5481))+cj0+((r11*x5483)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5477*x5482))+(((-1.0)*r02*x5481))+((x5476*x5478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5485=IKcos(j0);
IkReal x5486=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x5486))+(((-0.21325)*x5485)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x5485))+(((-0.21325)*x5486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5487=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5487;
j4eval[1]=IKsign(x5487);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5488=((1.0)*cj5);
IkReal x5489=((((-1.0)*r11*x5488))+(((-1.0)*r10*sj5)));
j4eval[0]=x5489;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5488)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5490=cj5*cj5;
IkReal x5491=((1.0)*r20);
IkReal x5492=(r01*r21);
IkReal x5493=(r21*sj5);
IkReal x5494=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5490*x5491))+((cj5*r00*x5493))+(((-1.0)*x5492))+((x5490*x5492)));
j4eval[0]=x5494;
j4eval[1]=((IKabs((((cj0*x5493))+(((-1.0)*cj0*cj5*x5491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5495=cj5*cj5;
IkReal x5496=((1.0)*r20);
IkReal x5497=(r01*r21);
IkReal x5498=(r21*sj5);
CheckValue<IkReal> x5499 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5498))+(((-1.0)*cj0*cj5*x5496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5499.valid){
continue;
}
CheckValue<IkReal> x5500=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5495*x5497))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5495*x5496))+((cj5*r00*x5498))+(((-1.0)*x5497)))),-1);
if(!x5500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5499.value)+(((1.5707963267949)*(x5500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5501=IKcos(j4);
IkReal x5502=IKsin(j4);
IkReal x5503=(cj5*r00);
IkReal x5504=(cj5*r10);
IkReal x5505=(cj5*r20);
IkReal x5506=((1.0)*x5501);
IkReal x5507=((1.0)*x5502);
IkReal x5508=(sj5*x5501);
IkReal x5509=(sj5*x5502);
evalcond[0]=(((r21*x5508))+((r22*x5502))+(((-1.0)*x5505*x5506)));
evalcond[1]=((((-1.0)*r22*x5506))+((r21*x5509))+(((-1.0)*x5505*x5507)));
evalcond[2]=((((-1.0)*x5503*x5506))+cj0+((r02*x5502))+((r01*x5508)));
evalcond[3]=(sj0+((r12*x5502))+(((-1.0)*x5504*x5506))+((r11*x5508)));
evalcond[4]=(cj0+(((-1.0)*r12*x5506))+(((-1.0)*x5504*x5507))+((r11*x5509)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5503*x5507))+(((-1.0)*r02*x5506))+((r01*x5509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5510=((1.0)*cj5);
CheckValue<IkReal> x5511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5510)))),-1);
if(!x5511.valid){
continue;
}
CheckValue<IkReal> x5512 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5510)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5511.value)))+(x5512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5513=IKcos(j4);
IkReal x5514=IKsin(j4);
IkReal x5515=(cj5*r00);
IkReal x5516=(cj5*r10);
IkReal x5517=(cj5*r20);
IkReal x5518=((1.0)*x5513);
IkReal x5519=((1.0)*x5514);
IkReal x5520=(sj5*x5513);
IkReal x5521=(sj5*x5514);
evalcond[0]=(((r21*x5520))+((r22*x5514))+(((-1.0)*x5517*x5518)));
evalcond[1]=((((-1.0)*r22*x5518))+((r21*x5521))+(((-1.0)*x5517*x5519)));
evalcond[2]=(cj0+((r02*x5514))+(((-1.0)*x5515*x5518))+((r01*x5520)));
evalcond[3]=(sj0+((r12*x5514))+((r11*x5520))+(((-1.0)*x5516*x5518)));
evalcond[4]=(cj0+(((-1.0)*r12*x5518))+((r11*x5521))+(((-1.0)*x5516*x5519)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5518))+(((-1.0)*x5515*x5519))+((r01*x5521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
CheckValue<IkReal> x5523=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5522.value)+(((1.5707963267949)*(x5523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5524=IKcos(j4);
IkReal x5525=IKsin(j4);
IkReal x5526=(cj5*r00);
IkReal x5527=(cj5*r10);
IkReal x5528=(cj5*r20);
IkReal x5529=((1.0)*x5524);
IkReal x5530=((1.0)*x5525);
IkReal x5531=(sj5*x5524);
IkReal x5532=(sj5*x5525);
evalcond[0]=((((-1.0)*x5528*x5529))+((r22*x5525))+((r21*x5531)));
evalcond[1]=((((-1.0)*r22*x5529))+(((-1.0)*x5528*x5530))+((r21*x5532)));
evalcond[2]=(((r02*x5525))+cj0+(((-1.0)*x5526*x5529))+((r01*x5531)));
evalcond[3]=((((-1.0)*x5527*x5529))+sj0+((r11*x5531))+((r12*x5525)));
evalcond[4]=(cj0+(((-1.0)*x5527*x5530))+((r11*x5532))+(((-1.0)*r12*x5529)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5529))+(((-1.0)*x5526*x5530))+((r01*x5532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5533=cj1*cj1;
IkReal x5534=(cj2*sj1);
IkReal x5535=(cj1*sj1);
IkReal x5536=(cj5*r01);
IkReal x5537=(cj1*sj2);
IkReal x5538=((20000.0)*py);
IkReal x5539=(r00*sj5);
IkReal x5540=((1707.0)*cj5*r11);
IkReal x5541=(sj2*x5533);
IkReal x5542=((1707.0)*r10*sj5);
CheckValue<IkReal> x5543=IKPowWithIntegerCheck(((((4265.0)*x5535))+(((-4873.0)*cj1*x5534))+(((4265.0)*cj2*sj2))+(((-8530.0)*cj1*cj2*x5534))+(((-4873.0)*x5541))+(((-8530.0)*cj2*x5541))),-1);
if(!x5543.valid){
continue;
}
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(((((-1.0)*x5534))+(((-1.0)*x5537))),-1);
if(!x5544.valid){
continue;
}
if( IKabs(((x5543.value)*(((((2247.0)*x5539))+(((2247.0)*x5536))+(((-1.0)*x5534*x5538))+(((-1.0)*x5537*x5538))+(((-1.0)*x5537*x5542))+(((-1.0)*x5537*x5540))+(((-1.0)*x5534*x5540))+(((-1.0)*x5534*x5542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5544.value)*(((((-1.0)*x5539))+(((-1.0)*x5536)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5543.value)*(((((2247.0)*x5539))+(((2247.0)*x5536))+(((-1.0)*x5534*x5538))+(((-1.0)*x5537*x5538))+(((-1.0)*x5537*x5542))+(((-1.0)*x5537*x5540))+(((-1.0)*x5534*x5540))+(((-1.0)*x5534*x5542))))))+IKsqr(((x5544.value)*(((((-1.0)*x5539))+(((-1.0)*x5536))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5543.value)*(((((2247.0)*x5539))+(((2247.0)*x5536))+(((-1.0)*x5534*x5538))+(((-1.0)*x5537*x5538))+(((-1.0)*x5537*x5542))+(((-1.0)*x5537*x5540))+(((-1.0)*x5534*x5540))+(((-1.0)*x5534*x5542))))), ((x5544.value)*(((((-1.0)*x5539))+(((-1.0)*x5536))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5545=IKcos(j0);
IkReal x5546=IKsin(j0);
IkReal x5547=((0.21325)*cj2);
IkReal x5548=(cj5*r01);
IkReal x5549=((1.0)*sj2);
IkReal x5550=(r00*sj5);
IkReal x5551=(cj5*r11);
IkReal x5552=(r10*sj5);
IkReal x5553=(cj1*x5546);
IkReal x5554=(cj1*x5545);
IkReal x5555=((0.21325)*sj1*sj2);
IkReal x5556=((1.0)*cj2*sj1);
evalcond[0]=(x5548+x5550+(((-1.0)*x5545*x5556))+(((-1.0)*x5549*x5554)));
evalcond[1]=(x5551+x5552+(((-1.0)*x5549*x5553))+(((-1.0)*x5546*x5556)));
evalcond[2]=((((-1.0)*x5545*x5555))+(((-0.11235)*x5546))+((x5547*x5554))+(((-0.08535)*x5548))+(((-1.0)*px))+(((-0.08535)*x5550))+(((0.24365)*x5554)));
evalcond[3]=((((0.11235)*x5545))+((x5547*x5553))+(((-1.0)*py))+(((-0.08535)*x5551))+(((-0.08535)*x5552))+(((-1.0)*x5546*x5555))+(((0.24365)*x5553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5557=((1.0)*cj5);
IkReal x5558=((((-1.0)*r01*x5557))+(((-1.0)*r00*sj5)));
j4eval[0]=x5558;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5557)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5559=((1.0)*cj5);
IkReal x5560=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5559)));
j4eval[0]=x5560;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5559))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x5560);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5561=((1.0)*sj0);
IkReal x5562=((1.0)*cj0);
IkReal x5563=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5563;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5562))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5561)))))+(IKabs(((((-1.0)*r12*x5561))+(((-1.0)*r02*x5562))))));
j4eval[2]=IKsign(x5563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5564=((-1.0)*r20);
IkReal x5566 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5566)==0){
continue;
}
IkReal x5565=pow(x5566,-0.5);
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5564),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5567.value));
IkReal gconst115=(r21*x5565);
IkReal gconst116=(x5564*x5565);
CheckValue<IkReal> x5568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5569=((-1.0)*r20);
IkReal x5570=x5565;
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5569),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
IkReal x5571=((-1.0)*(x5572.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5571;
IkReal gconst114=x5571;
IkReal gconst115=(r21*x5570);
IkReal gconst116=(x5569*x5570);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5573=((-1.0)*r20);
IkReal x5574=x5565;
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5573),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5575=((-1.0)*(x5576.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5575;
IkReal gconst114=x5575;
IkReal gconst115=(r21*x5574);
IkReal gconst116=(x5573*x5574);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5577=((-1.0)*r20);
IkReal x5578=x5565;
CheckValue<IkReal> x5580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5577),IKFAST_ATAN2_MAGTHRESH);
if(!x5580.valid){
continue;
}
IkReal x5579=((-1.0)*(x5580.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5579;
IkReal gconst114=x5579;
IkReal gconst115=(r21*x5578);
IkReal gconst116=(x5577*x5578);
IkReal x5581=((1.0)*(r22*r22));
CheckValue<IkReal> x5585=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5581))),-1);
if(!x5585.valid){
continue;
}
IkReal x5582=x5585.value;
IkReal x5583=((1.0)*x5582);
IkReal x5584=((((-1.0)*x5583*(r20*r20*r20*r20)))+(((-2.0)*x5582*(r20*r20)*(r21*r21)))+(((-1.0)*x5583*(r21*r21*r21*r21)))+(((-1.0)*x5581)));
j4eval[0]=x5584;
j4eval[1]=IKsign(x5584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5586=(cj2*sj1);
IkReal x5587=(gconst115*r21);
IkReal x5588=(cj1*sj2);
IkReal x5589=((1.0)*gconst116*r20);
CheckValue<IkReal> x5590=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5587))+(((-1.0)*(x5587*x5587)))+(((-1.0)*gconst116*r20*x5589))+(((-1.0)*(r22*r22))))),-1);
if(!x5590.valid){
continue;
}
CheckValue<IkReal> x5591 = IKatan2WithCheck(IkReal((((r22*x5588))+((r22*x5586)))),IkReal(((((-1.0)*x5586*x5589))+(((-1.0)*x5588*x5589))+((x5586*x5587))+((x5587*x5588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5590.value)))+(x5591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5592=IKsin(j4);
IkReal x5593=IKcos(j4);
IkReal x5594=(sj1*sj2);
IkReal x5595=((1.0)*x5593);
IkReal x5596=((1.0)*cj1*cj2);
IkReal x5597=(gconst115*x5592);
IkReal x5598=(gconst115*x5593);
IkReal x5599=((1.0)*gconst116*x5592);
evalcond[0]=(((r21*x5597))+(((-1.0)*r20*x5599))+(((-1.0)*r22*x5595)));
evalcond[1]=((((-1.0)*r12*x5595))+cj0+((r11*x5597))+(((-1.0)*r10*x5599)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5595))+(((-1.0)*r00*x5599))+((r01*x5597)));
evalcond[3]=(((r21*x5598))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5595))+((r22*x5592)));
evalcond[4]=((((-1.0)*cj0*x5596))+((cj0*x5594))+((r02*x5592))+(((-1.0)*gconst116*r00*x5595))+((r01*x5598)));
evalcond[5]=(((sj0*x5594))+((r11*x5598))+((r12*x5592))+(((-1.0)*gconst116*r10*x5595))+(((-1.0)*sj0*x5596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5600=((1.0)*gconst116);
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
CheckValue<IkReal> x5602=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5600)))),-1);
if(!x5602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5601.value)+(((1.5707963267949)*(x5602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5603=IKsin(j4);
IkReal x5604=IKcos(j4);
IkReal x5605=(sj1*sj2);
IkReal x5606=((1.0)*x5604);
IkReal x5607=((1.0)*cj1*cj2);
IkReal x5608=(gconst115*x5603);
IkReal x5609=(gconst115*x5604);
IkReal x5610=((1.0)*gconst116*x5603);
evalcond[0]=((((-1.0)*r22*x5606))+((r21*x5608))+(((-1.0)*r20*x5610)));
evalcond[1]=(cj0+(((-1.0)*r10*x5610))+(((-1.0)*r12*x5606))+((r11*x5608)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5610))+((r01*x5608))+(((-1.0)*r02*x5606)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5606))+((r21*x5609))+((r22*x5603)));
evalcond[4]=(((r02*x5603))+(((-1.0)*cj0*x5607))+((r01*x5609))+(((-1.0)*gconst116*r00*x5606))+((cj0*x5605)));
evalcond[5]=(((sj0*x5605))+((r12*x5603))+(((-1.0)*gconst116*r10*x5606))+(((-1.0)*sj0*x5607))+((r11*x5609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5611=((1.0)*gconst116);
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5611))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
CheckValue<IkReal> x5613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5611))+(((-1.0)*gconst115*r00)))),-1);
if(!x5613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5612.value)+(((1.5707963267949)*(x5613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5614=IKsin(j4);
IkReal x5615=IKcos(j4);
IkReal x5616=(sj1*sj2);
IkReal x5617=((1.0)*x5615);
IkReal x5618=((1.0)*cj1*cj2);
IkReal x5619=(gconst115*x5614);
IkReal x5620=(gconst115*x5615);
IkReal x5621=((1.0)*gconst116*x5614);
evalcond[0]=((((-1.0)*r22*x5617))+((r21*x5619))+(((-1.0)*r20*x5621)));
evalcond[1]=(cj0+(((-1.0)*r10*x5621))+(((-1.0)*r12*x5617))+((r11*x5619)));
evalcond[2]=((((-1.0)*r00*x5621))+(((-1.0)*sj0))+((r01*x5619))+(((-1.0)*r02*x5617)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5617))+((cj1*sj2))+((r21*x5620))+((r22*x5614)));
evalcond[4]=(((cj0*x5616))+(((-1.0)*cj0*x5618))+((r02*x5614))+((r01*x5620))+(((-1.0)*gconst116*r00*x5617)));
evalcond[5]=(((sj0*x5616))+(((-1.0)*gconst116*r10*x5617))+((r12*x5614))+(((-1.0)*sj0*x5618))+((r11*x5620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5622=((-1.0)*r21);
IkReal x5624 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5624)==0){
continue;
}
IkReal x5623=pow(x5624,-0.5);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(x5622),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5625.value))));
IkReal gconst118=(x5622*x5623);
IkReal gconst119=((1.0)*r20*x5623);
CheckValue<IkReal> x5626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5627=((-1.0)*r21);
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(x5627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
IkReal x5628=((1.0)*(x5630.value));
IkReal x5629=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5628)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5628)));
IkReal gconst118=(x5627*x5629);
IkReal gconst119=((1.0)*r20*x5629);
IkReal x5631=r22*r22;
IkReal x5632=((1.0)*x5631);
CheckValue<IkReal> x5636=IKPowWithIntegerCheck(((-1.0)+x5631),-1);
if(!x5636.valid){
continue;
}
IkReal x5633=x5636.value;
if((((1.0)+(((-1.0)*x5632)))) < -0.00001)
continue;
IkReal x5634=IKsqrt(((1.0)+(((-1.0)*x5632))));
IkReal x5635=(cj0*x5633*x5634);
j4eval[0]=((IKabs(((((-1.0)*x5632*x5635))+x5635)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5637=((-1.0)*r21);
CheckValue<IkReal> x5640 = IKatan2WithCheck(IkReal(x5637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5640.valid){
continue;
}
IkReal x5638=((1.0)*(x5640.value));
IkReal x5639=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5638)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5638)));
IkReal gconst118=(x5637*x5639);
IkReal gconst119=((1.0)*r20*x5639);
IkReal x5641=r22*r22;
IkReal x5642=((1.0)*x5641);
CheckValue<IkReal> x5646=IKPowWithIntegerCheck(((-1.0)+x5641),-1);
if(!x5646.valid){
continue;
}
IkReal x5643=x5646.value;
if((((1.0)+(((-1.0)*x5642)))) < -0.00001)
continue;
IkReal x5644=IKsqrt(((1.0)+(((-1.0)*x5642))));
IkReal x5645=(sj0*x5643*x5644);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5645+(((-1.0)*x5642*x5645))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5647=((-1.0)*r21);
CheckValue<IkReal> x5650 = IKatan2WithCheck(IkReal(x5647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
IkReal x5648=((1.0)*(x5650.value));
IkReal x5649=x5623;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5648)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5648)));
IkReal gconst118=(x5647*x5649);
IkReal gconst119=((1.0)*r20*x5649);
IkReal x5651=r22*r22;
IkReal x5652=(r12*sj0);
IkReal x5653=(cj0*r02);
CheckValue<IkReal> x5657=IKPowWithIntegerCheck(((-1.0)+x5651),-1);
if(!x5657.valid){
continue;
}
IkReal x5654=x5657.value;
if((((1.0)+(((-1.0)*x5651)))) < -0.00001)
continue;
IkReal x5655=IKsqrt(((1.0)+(((-1.0)*x5651))));
IkReal x5656=(r22*x5654*x5655);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5652))+(((-1.0)*x5653)))))+(IKabs((((x5652*x5656))+((x5653*x5656))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5658=((1.0)*sj0);
IkReal x5659=((1.0)*gconst118);
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5658))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5659))+(((-1.0)*gconst118*r11*x5658))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5659)))),-1);
if(!x5661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5660.value)+(((1.5707963267949)*(x5661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5662=IKsin(j4);
IkReal x5663=IKcos(j4);
IkReal x5664=(gconst118*r01);
IkReal x5665=(sj1*sj2);
IkReal x5666=(gconst119*r20);
IkReal x5667=(gconst119*r10);
IkReal x5668=(gconst119*r00);
IkReal x5669=(gconst118*r21);
IkReal x5670=(gconst118*r11);
IkReal x5671=((1.0)*x5663);
IkReal x5672=((1.0)*cj1*cj2);
IkReal x5673=((1.0)*x5662);
evalcond[0]=((((-1.0)*x5666*x5673))+(((-1.0)*r22*x5671))+((x5662*x5669)));
evalcond[1]=(cj0+(((-1.0)*x5667*x5673))+(((-1.0)*r12*x5671))+((x5662*x5670)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5668*x5673))+((x5662*x5664))+(((-1.0)*r02*x5671)));
evalcond[3]=(((cj2*sj1))+((r22*x5662))+(((-1.0)*x5666*x5671))+((cj1*sj2))+((x5663*x5669)));
evalcond[4]=(((r02*x5662))+(((-1.0)*cj0*x5672))+(((-1.0)*x5668*x5671))+((x5663*x5664))+((cj0*x5665)));
evalcond[5]=((((-1.0)*x5667*x5671))+((sj0*x5665))+((r12*x5662))+(((-1.0)*sj0*x5672))+((x5663*x5670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5674=((1.0)*gconst119);
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5674))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5674)))),-1);
if(!x5676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5675.value)+(((1.5707963267949)*(x5676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5677=IKsin(j4);
IkReal x5678=IKcos(j4);
IkReal x5679=(gconst118*r01);
IkReal x5680=(sj1*sj2);
IkReal x5681=(gconst119*r20);
IkReal x5682=(gconst119*r10);
IkReal x5683=(gconst119*r00);
IkReal x5684=(gconst118*r21);
IkReal x5685=(gconst118*r11);
IkReal x5686=((1.0)*x5678);
IkReal x5687=((1.0)*cj1*cj2);
IkReal x5688=((1.0)*x5677);
evalcond[0]=((((-1.0)*x5681*x5688))+(((-1.0)*r22*x5686))+((x5677*x5684)));
evalcond[1]=(cj0+(((-1.0)*x5682*x5688))+(((-1.0)*r12*x5686))+((x5677*x5685)));
evalcond[2]=((((-1.0)*r02*x5686))+(((-1.0)*sj0))+((x5677*x5679))+(((-1.0)*x5683*x5688)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5681*x5686))+((cj1*sj2))+((x5678*x5684))+((r22*x5677)));
evalcond[4]=(((r02*x5677))+(((-1.0)*cj0*x5687))+(((-1.0)*x5683*x5686))+((x5678*x5679))+((cj0*x5680)));
evalcond[5]=((((-1.0)*sj0*x5687))+((sj0*x5680))+((x5678*x5685))+((r12*x5677))+(((-1.0)*x5682*x5686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5689=((1.0)*gconst119);
CheckValue<IkReal> x5690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5689)))),-1);
if(!x5690.valid){
continue;
}
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5690.value)))+(x5691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5692=IKsin(j4);
IkReal x5693=IKcos(j4);
IkReal x5694=(gconst118*r01);
IkReal x5695=(sj1*sj2);
IkReal x5696=(gconst119*r20);
IkReal x5697=(gconst119*r10);
IkReal x5698=(gconst119*r00);
IkReal x5699=(gconst118*r21);
IkReal x5700=(gconst118*r11);
IkReal x5701=((1.0)*x5693);
IkReal x5702=((1.0)*cj1*cj2);
IkReal x5703=((1.0)*x5692);
evalcond[0]=(((x5692*x5699))+(((-1.0)*r22*x5701))+(((-1.0)*x5696*x5703)));
evalcond[1]=((((-1.0)*r12*x5701))+(((-1.0)*x5697*x5703))+cj0+((x5692*x5700)));
evalcond[2]=((((-1.0)*sj0))+((x5692*x5694))+(((-1.0)*x5698*x5703))+(((-1.0)*r02*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5692))+((x5693*x5699))+((cj1*sj2))+(((-1.0)*x5696*x5701)));
evalcond[4]=(((x5693*x5694))+((r02*x5692))+(((-1.0)*x5698*x5701))+(((-1.0)*cj0*x5702))+((cj0*x5695)));
evalcond[5]=((((-1.0)*x5697*x5701))+((x5693*x5700))+((sj0*x5695))+(((-1.0)*sj0*x5702))+((r12*x5692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5704=((-1.0)*r10);
IkReal x5706 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5706)==0){
continue;
}
IkReal x5705=pow(x5706,-0.5);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5704),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5707.value));
IkReal gconst121=(r11*x5705);
IkReal gconst122=(x5704*x5705);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5708.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5709=((-1.0)*r10);
IkReal x5710=x5705;
CheckValue<IkReal> x5712 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5709),IKFAST_ATAN2_MAGTHRESH);
if(!x5712.valid){
continue;
}
IkReal x5711=((-1.0)*(x5712.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5711;
IkReal gconst120=x5711;
IkReal gconst121=(r11*x5710);
IkReal gconst122=(x5709*x5710);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5713=((1.0)*sj0);
IkReal x5714=((1.0)*gconst121);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5713)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5713))+(((-1.0)*cj0*r01*x5714))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5714)))),-1);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5715.value)+(((1.5707963267949)*(x5716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=IKcos(j4);
IkReal x5719=(gconst121*r11);
IkReal x5720=(sj1*sj2);
IkReal x5721=(gconst122*r00);
IkReal x5722=(gconst122*r10);
IkReal x5723=(gconst122*r20);
IkReal x5724=((1.0)*x5718);
IkReal x5725=((1.0)*cj1*cj2);
IkReal x5726=((1.0)*x5717);
IkReal x5727=(gconst121*x5717);
IkReal x5728=(gconst121*x5718);
evalcond[0]=((((-1.0)*x5723*x5726))+((r21*x5727))+(((-1.0)*r22*x5724)));
evalcond[1]=(cj0+(((-1.0)*r12*x5724))+(((-1.0)*x5722*x5726))+((x5717*x5719)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5727))+(((-1.0)*r02*x5724))+(((-1.0)*x5721*x5726)));
evalcond[3]=((((-1.0)*x5723*x5724))+((cj2*sj1))+((r21*x5728))+((r22*x5717))+((cj1*sj2)));
evalcond[4]=(((r02*x5717))+((r01*x5728))+(((-1.0)*cj0*x5725))+((cj0*x5720))+(((-1.0)*x5721*x5724)));
evalcond[5]=(((sj0*x5720))+(((-1.0)*x5722*x5724))+(((-1.0)*sj0*x5725))+((r12*x5717))+((x5718*x5719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5729=((1.0)*gconst122);
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5729)))),-1);
if(!x5730.valid){
continue;
}
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5729))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5730.value)))+(x5731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5732=IKsin(j4);
IkReal x5733=IKcos(j4);
IkReal x5734=(gconst121*r11);
IkReal x5735=(sj1*sj2);
IkReal x5736=(gconst122*r00);
IkReal x5737=(gconst122*r10);
IkReal x5738=(gconst122*r20);
IkReal x5739=((1.0)*x5733);
IkReal x5740=((1.0)*cj1*cj2);
IkReal x5741=((1.0)*x5732);
IkReal x5742=(gconst121*x5732);
IkReal x5743=(gconst121*x5733);
evalcond[0]=((((-1.0)*r22*x5739))+(((-1.0)*x5738*x5741))+((r21*x5742)));
evalcond[1]=(((x5732*x5734))+cj0+(((-1.0)*x5737*x5741))+(((-1.0)*r12*x5739)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5739))+((r01*x5742))+(((-1.0)*x5736*x5741)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5738*x5739))+((r21*x5743))+((r22*x5732)));
evalcond[4]=(((r01*x5743))+(((-1.0)*cj0*x5740))+((cj0*x5735))+((r02*x5732))+(((-1.0)*x5736*x5739)));
evalcond[5]=((((-1.0)*x5737*x5739))+((r12*x5732))+((x5733*x5734))+((sj0*x5735))+(((-1.0)*sj0*x5740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5744=((-1.0)*r11);
IkReal x5746 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5746)==0){
continue;
}
IkReal x5745=pow(x5746,-0.5);
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal(x5744),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5747.value))));
IkReal gconst124=(x5744*x5745);
IkReal gconst125=((1.0)*r10*x5745);
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5748.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5749=((-1.0)*r11);
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal(x5749),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
IkReal x5750=((1.0)*(x5752.value));
IkReal x5751=x5745;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5750)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5750)));
IkReal gconst124=(x5749*x5751);
IkReal gconst125=((1.0)*r10*x5751);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5753=((-1.0)*r11);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal(x5753),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
IkReal x5754=((1.0)*(x5756.value));
IkReal x5755=x5745;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5754)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5754)));
IkReal gconst124=(x5753*x5755);
IkReal gconst125=((1.0)*r10*x5755);
IkReal x5757=r12*r12;
IkReal x5758=((1.0)*sj0);
IkReal x5759=(cj0*r02);
IkReal x5760=x5745;
j4eval[0]=((IKabs(((((-1.0)*r12*x5758))+(((-1.0)*x5759)))))+(IKabs(((((-1.0)*x5758*x5760))+((sj0*x5757*x5760))+((r12*x5759*x5760))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5761=((-1.0)*r11);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal(x5761),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
IkReal x5762=((1.0)*(x5764.value));
IkReal x5763=x5745;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5762)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5762)));
IkReal gconst124=(x5761*x5763);
IkReal gconst125=((1.0)*r10*x5763);
IkReal x5765=r12*r12;
IkReal x5766=((1.0)+(((-1.0)*x5765)));
IkReal x5767=(cj2*r22*sj1);
IkReal x5768=(cj1*r22*sj2);
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(x5766,-1);
if(!x5775.valid){
continue;
}
IkReal x5769=x5775.value;
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(((-1.0)+x5765),-1);
if(!x5776.valid){
continue;
}
IkReal x5770=x5776.value;
IkReal x5771=((1.0)*x5769);
if((x5766) < -0.00001)
continue;
IkReal x5772=IKsqrt(x5766);
IkReal x5773=((1.0)*r12*x5770*x5772);
IkReal x5774=((((-1.0)*x5771*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5769))+(((-1.0)*x5771*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5774;
j4eval[1]=IKsign(x5774);
j4eval[2]=((IKabs(((((-1.0)*x5767*x5773))+(((-1.0)*x5768*x5773)))))+(IKabs((x5768+x5767))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5777=(gconst124*r21);
IkReal x5778=(cj1*sj2);
IkReal x5779=(cj2*sj1);
IkReal x5780=(gconst125*r20);
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal((((r22*x5779))+((r22*x5778)))),IkReal((((x5777*x5778))+((x5777*x5779))+(((-1.0)*x5779*x5780))+(((-1.0)*x5778*x5780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
CheckValue<IkReal> x5782=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5777*x5777)))+(((2.0)*x5777*x5780))+(((-1.0)*(x5780*x5780)))+(((-1.0)*(r22*r22))))),-1);
if(!x5782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5781.value)+(((1.5707963267949)*(x5782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5783=IKsin(j4);
IkReal x5784=IKcos(j4);
IkReal x5785=(sj1*sj2);
IkReal x5786=(gconst125*r20);
IkReal x5787=(gconst124*r01);
IkReal x5788=(gconst125*r00);
IkReal x5789=(gconst125*r10);
IkReal x5790=((1.0)*x5784);
IkReal x5791=((1.0)*cj1*cj2);
IkReal x5792=((1.0)*x5783);
IkReal x5793=(gconst124*x5783);
IkReal x5794=(gconst124*x5784);
evalcond[0]=(((r21*x5793))+(((-1.0)*x5786*x5792))+(((-1.0)*r22*x5790)));
evalcond[1]=(cj0+((r11*x5793))+(((-1.0)*x5789*x5792))+(((-1.0)*r12*x5790)));
evalcond[2]=((((-1.0)*sj0))+((x5783*x5787))+(((-1.0)*x5788*x5792))+(((-1.0)*r02*x5790)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5794))+(((-1.0)*x5786*x5790))+((r22*x5783)));
evalcond[4]=(((x5784*x5787))+(((-1.0)*cj0*x5791))+(((-1.0)*x5788*x5790))+((r02*x5783))+((cj0*x5785)));
evalcond[5]=(((r12*x5783))+((r11*x5794))+(((-1.0)*x5789*x5790))+((sj0*x5785))+(((-1.0)*sj0*x5791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5795=((1.0)*sj0);
IkReal x5796=((1.0)*cj0);
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5795))+(((-1.0)*r02*x5796)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5796))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5797.value)+(((1.5707963267949)*(x5798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKsin(j4);
IkReal x5800=IKcos(j4);
IkReal x5801=(sj1*sj2);
IkReal x5802=(gconst125*r20);
IkReal x5803=(gconst124*r01);
IkReal x5804=(gconst125*r00);
IkReal x5805=(gconst125*r10);
IkReal x5806=((1.0)*x5800);
IkReal x5807=((1.0)*cj1*cj2);
IkReal x5808=((1.0)*x5799);
IkReal x5809=(gconst124*x5799);
IkReal x5810=(gconst124*x5800);
evalcond[0]=((((-1.0)*r22*x5806))+((r21*x5809))+(((-1.0)*x5802*x5808)));
evalcond[1]=(cj0+(((-1.0)*x5805*x5808))+(((-1.0)*r12*x5806))+((r11*x5809)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5804*x5808))+((x5799*x5803))+(((-1.0)*r02*x5806)));
evalcond[3]=(((r21*x5810))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5802*x5806))+((r22*x5799)));
evalcond[4]=(((x5800*x5803))+(((-1.0)*x5804*x5806))+((cj0*x5801))+(((-1.0)*cj0*x5807))+((r02*x5799)));
evalcond[5]=(((r12*x5799))+(((-1.0)*x5805*x5806))+((r11*x5810))+((sj0*x5801))+(((-1.0)*sj0*x5807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*gconst125);
CheckValue<IkReal> x5812 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5811))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5812.valid){
continue;
}
CheckValue<IkReal> x5813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5811)))),-1);
if(!x5813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5812.value)+(((1.5707963267949)*(x5813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5814=IKsin(j4);
IkReal x5815=IKcos(j4);
IkReal x5816=(sj1*sj2);
IkReal x5817=(gconst125*r20);
IkReal x5818=(gconst124*r01);
IkReal x5819=(gconst125*r00);
IkReal x5820=(gconst125*r10);
IkReal x5821=((1.0)*x5815);
IkReal x5822=((1.0)*cj1*cj2);
IkReal x5823=((1.0)*x5814);
IkReal x5824=(gconst124*x5814);
IkReal x5825=(gconst124*x5815);
evalcond[0]=((((-1.0)*r22*x5821))+((r21*x5824))+(((-1.0)*x5817*x5823)));
evalcond[1]=(cj0+(((-1.0)*x5820*x5823))+((r11*x5824))+(((-1.0)*r12*x5821)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5821))+((x5814*x5818))+(((-1.0)*x5819*x5823)));
evalcond[3]=(((r21*x5825))+((cj2*sj1))+((r22*x5814))+((cj1*sj2))+(((-1.0)*x5817*x5821)));
evalcond[4]=(((x5815*x5818))+((r02*x5814))+((cj0*x5816))+(((-1.0)*cj0*x5822))+(((-1.0)*x5819*x5821)));
evalcond[5]=(((sj0*x5816))+(((-1.0)*x5820*x5821))+((r11*x5825))+((r12*x5814))+(((-1.0)*sj0*x5822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5826=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5826;
j4eval[1]=IKsign(x5826);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5827=((1.0)*cj5);
IkReal x5828=((((-1.0)*r01*x5827))+(((-1.0)*r00*sj5)));
j4eval[0]=x5828;
j4eval[1]=((IKabs(((((-1.0)*r20*x5827))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5829=cj5*cj5;
IkReal x5830=r11*r11;
IkReal x5831=(cj5*r10);
IkReal x5832=(r11*sj5);
IkReal x5833=((((-1.0)*x5829*(r10*r10)))+((x5829*x5830))+(((-1.0)*(r12*r12)))+(((2.0)*x5831*x5832))+(((-1.0)*x5830)));
j4eval[0]=x5833;
j4eval[1]=IKsign(x5833);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5831))+x5832))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5834=cj5*cj5;
IkReal x5835=r11*r11;
IkReal x5836=(cj5*r10);
IkReal x5837=(r11*sj5);
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign((((x5834*x5835))+(((-1.0)*x5834*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5836*x5837))+(((-1.0)*x5835)))),-1);
if(!x5838.valid){
continue;
}
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal(((((-1.0)*x5836))+x5837)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5838.value)))+(x5839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5840=IKcos(j4);
IkReal x5841=IKsin(j4);
IkReal x5842=(cj5*r00);
IkReal x5843=(cj5*r10);
IkReal x5844=(r21*sj5);
IkReal x5845=(cj5*r20);
IkReal x5846=((1.0)*x5840);
IkReal x5847=((1.0)*x5841);
IkReal x5848=(sj5*x5841);
IkReal x5849=(sj5*x5840);
evalcond[0]=(((r11*x5849))+((r12*x5841))+(((-1.0)*x5843*x5846)));
evalcond[1]=(((x5841*x5844))+(((-1.0)*x5845*x5847))+(((-1.0)*r22*x5846)));
evalcond[2]=((((-1.0)*r02*x5846))+((r01*x5848))+(((-1.0)*x5842*x5847)));
evalcond[3]=((1.0)+((r11*x5848))+(((-1.0)*x5843*x5847))+(((-1.0)*r12*x5846)));
evalcond[4]=(((cj2*sj1))+((x5840*x5844))+((cj1*sj2))+(((-1.0)*x5845*x5846))+((r22*x5841)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5849))+(((-1.0)*x5842*x5846))+((r02*x5841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5850=((1.0)*cj5);
CheckValue<IkReal> x5851 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5850))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5851.valid){
continue;
}
CheckValue<IkReal> x5852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5850)))),-1);
if(!x5852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5851.value)+(((1.5707963267949)*(x5852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5853=IKcos(j4);
IkReal x5854=IKsin(j4);
IkReal x5855=(cj5*r00);
IkReal x5856=(cj5*r10);
IkReal x5857=(r21*sj5);
IkReal x5858=(cj5*r20);
IkReal x5859=((1.0)*x5853);
IkReal x5860=((1.0)*x5854);
IkReal x5861=(sj5*x5854);
IkReal x5862=(sj5*x5853);
evalcond[0]=(((r12*x5854))+((r11*x5862))+(((-1.0)*x5856*x5859)));
evalcond[1]=(((x5854*x5857))+(((-1.0)*x5858*x5860))+(((-1.0)*r22*x5859)));
evalcond[2]=((((-1.0)*x5855*x5860))+(((-1.0)*r02*x5859))+((r01*x5861)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5859))+((r11*x5861))+(((-1.0)*x5856*x5860)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5858*x5859))+((cj1*sj2))+((r22*x5854))+((x5853*x5857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5855*x5859))+((r02*x5854))+((r01*x5862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5863=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5863.value)))+(x5864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5865=IKcos(j4);
IkReal x5866=IKsin(j4);
IkReal x5867=(cj5*r00);
IkReal x5868=(cj5*r10);
IkReal x5869=(r21*sj5);
IkReal x5870=(cj5*r20);
IkReal x5871=((1.0)*x5865);
IkReal x5872=((1.0)*x5866);
IkReal x5873=(sj5*x5866);
IkReal x5874=(sj5*x5865);
evalcond[0]=(((r11*x5874))+((r12*x5866))+(((-1.0)*x5868*x5871)));
evalcond[1]=((((-1.0)*r22*x5871))+((x5866*x5869))+(((-1.0)*x5870*x5872)));
evalcond[2]=((((-1.0)*r02*x5871))+((r01*x5873))+(((-1.0)*x5867*x5872)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5871))+((r11*x5873))+(((-1.0)*x5868*x5872)));
evalcond[4]=(((cj2*sj1))+((r22*x5866))+((cj1*sj2))+(((-1.0)*x5870*x5871))+((x5865*x5869)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5866))+((r01*x5874))+(((-1.0)*x5867*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5875=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5875;
j4eval[1]=IKsign(x5875);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5876=((1.0)*cj5);
IkReal x5877=((((-1.0)*r21*x5876))+(((-1.0)*r20*sj5)));
j4eval[0]=x5877;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5876))))));
j4eval[2]=IKsign(x5877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5878=cj5*cj5;
IkReal x5879=r11*r11;
IkReal x5880=(r11*sj5);
IkReal x5881=(cj5*r10);
IkReal x5882=((r12*r12)+(((-2.0)*x5880*x5881))+(((-1.0)*x5878*x5879))+((x5878*(r10*r10)))+x5879);
j4eval[0]=x5882;
j4eval[1]=IKsign(x5882);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5881))+x5880))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5883=cj5*cj5;
IkReal x5884=r11*r11;
IkReal x5885=(cj5*r10);
IkReal x5886=(r11*sj5);
CheckValue<IkReal> x5887 = IKatan2WithCheck(IkReal(((((-1.0)*x5885))+x5886)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5887.valid){
continue;
}
CheckValue<IkReal> x5888=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5885*x5886))+(((-1.0)*x5883*x5884))+((x5883*(r10*r10)))+x5884)),-1);
if(!x5888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5887.value)+(((1.5707963267949)*(x5888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5889=IKcos(j4);
IkReal x5890=IKsin(j4);
IkReal x5891=(cj5*r00);
IkReal x5892=(cj5*r10);
IkReal x5893=(r21*sj5);
IkReal x5894=(cj5*r20);
IkReal x5895=((1.0)*x5889);
IkReal x5896=((1.0)*x5890);
IkReal x5897=(sj5*x5890);
IkReal x5898=(sj5*x5889);
evalcond[0]=((((-1.0)*x5892*x5895))+((r12*x5890))+((r11*x5898)));
evalcond[1]=((((-1.0)*r22*x5895))+(((-1.0)*x5894*x5896))+((x5890*x5893)));
evalcond[2]=((((-1.0)*r02*x5895))+(((-1.0)*x5891*x5896))+((r01*x5897)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5895))+(((-1.0)*x5892*x5896))+((r11*x5897)));
evalcond[4]=(((r22*x5890))+((cj2*sj1))+((cj1*sj2))+((x5889*x5893))+(((-1.0)*x5894*x5895)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5890))+(((-1.0)*x5891*x5895))+((r01*x5898))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5899=((1.0)*cj5);
CheckValue<IkReal> x5900 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5900.valid){
continue;
}
CheckValue<IkReal> x5901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5899))+(((-1.0)*r20*sj5)))),-1);
if(!x5901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5900.value)+(((1.5707963267949)*(x5901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5902=IKcos(j4);
IkReal x5903=IKsin(j4);
IkReal x5904=(cj5*r00);
IkReal x5905=(cj5*r10);
IkReal x5906=(r21*sj5);
IkReal x5907=(cj5*r20);
IkReal x5908=((1.0)*x5902);
IkReal x5909=((1.0)*x5903);
IkReal x5910=(sj5*x5903);
IkReal x5911=(sj5*x5902);
evalcond[0]=(((r12*x5903))+(((-1.0)*x5905*x5908))+((r11*x5911)));
evalcond[1]=(((x5903*x5906))+(((-1.0)*x5907*x5909))+(((-1.0)*r22*x5908)));
evalcond[2]=(((r01*x5910))+(((-1.0)*x5904*x5909))+(((-1.0)*r02*x5908)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5908))+(((-1.0)*x5905*x5909))+((r11*x5910)));
evalcond[4]=(((cj2*sj1))+((r22*x5903))+(((-1.0)*x5907*x5908))+((cj1*sj2))+((x5902*x5906)));
evalcond[5]=(((r01*x5911))+(((-1.0)*x5904*x5908))+(((-1.0)*sj1*sj2))+((r02*x5903))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5912 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5912.valid){
continue;
}
CheckValue<IkReal> x5913=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5912.value)+(((1.5707963267949)*(x5913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5914=IKcos(j4);
IkReal x5915=IKsin(j4);
IkReal x5916=(cj5*r00);
IkReal x5917=(cj5*r10);
IkReal x5918=(r21*sj5);
IkReal x5919=(cj5*r20);
IkReal x5920=((1.0)*x5914);
IkReal x5921=((1.0)*x5915);
IkReal x5922=(sj5*x5915);
IkReal x5923=(sj5*x5914);
evalcond[0]=(((r12*x5915))+((r11*x5923))+(((-1.0)*x5917*x5920)));
evalcond[1]=((((-1.0)*r22*x5920))+((x5915*x5918))+(((-1.0)*x5919*x5921)));
evalcond[2]=((((-1.0)*x5916*x5921))+(((-1.0)*r02*x5920))+((r01*x5922)));
evalcond[3]=((-1.0)+((r11*x5922))+(((-1.0)*x5917*x5921))+(((-1.0)*r12*x5920)));
evalcond[4]=(((cj2*sj1))+((r22*x5915))+((cj1*sj2))+(((-1.0)*x5919*x5920))+((x5914*x5918)));
evalcond[5]=((((-1.0)*x5916*x5920))+(((-1.0)*sj1*sj2))+((r02*x5915))+((cj1*cj2))+((r01*x5923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5924=((-1.0)*r00);
IkReal x5926 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5926)==0){
continue;
}
IkReal x5925=pow(x5926,-0.5);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5924),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5927.value));
IkReal gconst127=(r01*x5925);
IkReal gconst128=(x5924*x5925);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5928.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5929=((-1.0)*r00);
IkReal x5930=x5925;
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5929),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5931=((-1.0)*(x5932.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5931;
IkReal gconst126=x5931;
IkReal gconst127=(r01*x5930);
IkReal gconst128=(x5929*x5930);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5933=((1.0)*sj0);
IkReal x5934=((1.0)*gconst127);
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5933)))),IkReal(((((-1.0)*cj0*r01*x5934))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
CheckValue<IkReal> x5936=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5934)))),-1);
if(!x5936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5935.value)+(((1.5707963267949)*(x5936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5937=IKsin(j4);
IkReal x5938=IKcos(j4);
IkReal x5939=(gconst127*r01);
IkReal x5940=(sj1*sj2);
IkReal x5941=(gconst128*r10);
IkReal x5942=(gconst128*r00);
IkReal x5943=(gconst128*r20);
IkReal x5944=((1.0)*x5938);
IkReal x5945=((1.0)*cj1*cj2);
IkReal x5946=((1.0)*x5937);
IkReal x5947=(gconst127*x5938);
IkReal x5948=(gconst127*x5937);
evalcond[0]=((((-1.0)*r22*x5944))+((r21*x5948))+(((-1.0)*x5943*x5946)));
evalcond[1]=(cj0+(((-1.0)*r12*x5944))+(((-1.0)*x5941*x5946))+((r11*x5948)));
evalcond[2]=((((-1.0)*x5942*x5946))+(((-1.0)*sj0))+((x5937*x5939))+(((-1.0)*r02*x5944)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5937))+((r21*x5947))+(((-1.0)*x5943*x5944)));
evalcond[4]=((((-1.0)*x5942*x5944))+((cj0*x5940))+(((-1.0)*cj0*x5945))+((x5938*x5939))+((r02*x5937)));
evalcond[5]=((((-1.0)*sj0*x5945))+(((-1.0)*x5941*x5944))+((r12*x5937))+((r11*x5947))+((sj0*x5940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5949=((1.0)*gconst128);
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5949))+(((-1.0)*gconst127*r10)))),-1);
if(!x5950.valid){
continue;
}
CheckValue<IkReal> x5951 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5950.value)))+(x5951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5952=IKsin(j4);
IkReal x5953=IKcos(j4);
IkReal x5954=(gconst127*r01);
IkReal x5955=(sj1*sj2);
IkReal x5956=(gconst128*r10);
IkReal x5957=(gconst128*r00);
IkReal x5958=(gconst128*r20);
IkReal x5959=((1.0)*x5953);
IkReal x5960=((1.0)*cj1*cj2);
IkReal x5961=((1.0)*x5952);
IkReal x5962=(gconst127*x5953);
IkReal x5963=(gconst127*x5952);
evalcond[0]=(((r21*x5963))+(((-1.0)*r22*x5959))+(((-1.0)*x5958*x5961)));
evalcond[1]=(cj0+(((-1.0)*x5956*x5961))+((r11*x5963))+(((-1.0)*r12*x5959)));
evalcond[2]=((((-1.0)*sj0))+((x5952*x5954))+(((-1.0)*x5957*x5961))+(((-1.0)*r02*x5959)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5958*x5959))+((cj1*sj2))+((r21*x5962))+((r22*x5952)));
evalcond[4]=(((x5953*x5954))+((r02*x5952))+(((-1.0)*cj0*x5960))+(((-1.0)*x5957*x5959))+((cj0*x5955)));
evalcond[5]=(((sj0*x5955))+(((-1.0)*sj0*x5960))+((r12*x5952))+(((-1.0)*x5956*x5959))+((r11*x5962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5964=((-1.0)*r01);
IkReal x5966 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5966)==0){
continue;
}
IkReal x5965=pow(x5966,-0.5);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal(x5964),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5967.value))));
IkReal gconst130=(x5964*x5965);
IkReal gconst131=((1.0)*r00*x5965);
CheckValue<IkReal> x5968 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5968.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5968.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5969=((-1.0)*r01);
CheckValue<IkReal> x5972 = IKatan2WithCheck(IkReal(x5969),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5972.valid){
continue;
}
IkReal x5970=((1.0)*(x5972.value));
IkReal x5971=x5965;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5970)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5970)));
IkReal gconst130=(x5969*x5971);
IkReal gconst131=((1.0)*r00*x5971);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5973=((-1.0)*r01);
CheckValue<IkReal> x5976 = IKatan2WithCheck(IkReal(x5973),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5976.valid){
continue;
}
IkReal x5974=((1.0)*(x5976.value));
IkReal x5975=x5965;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5974)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5974)));
IkReal gconst130=(x5973*x5975);
IkReal gconst131=((1.0)*r00*x5975);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5977=((-1.0)*r01);
CheckValue<IkReal> x5980 = IKatan2WithCheck(IkReal(x5977),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5980.valid){
continue;
}
IkReal x5978=((1.0)*(x5980.value));
IkReal x5979=x5965;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5978)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5978)));
IkReal gconst130=(x5977*x5979);
IkReal gconst131=((1.0)*r00*x5979);
IkReal x5981=r02*r02;
IkReal x5982=(r12*sj0);
IkReal x5983=((1.0)*cj0);
IkReal x5984=x5965;
j4eval[0]=((IKabs((((cj0*x5981*x5984))+((r02*x5982*x5984))+(((-1.0)*x5983*x5984)))))+(IKabs(((((-1.0)*x5982))+(((-1.0)*r02*x5983))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5985=((1.0)*sj0);
IkReal x5986=((1.0)*gconst130);
CheckValue<IkReal> x5987 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5985))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5985))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x5986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5987.valid){
continue;
}
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5986)))),-1);
if(!x5988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5987.value)+(((1.5707963267949)*(x5988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5989=IKsin(j4);
IkReal x5990=IKcos(j4);
IkReal x5991=(gconst131*r10);
IkReal x5992=(sj1*sj2);
IkReal x5993=(gconst131*r20);
IkReal x5994=(gconst131*r00);
IkReal x5995=((1.0)*x5990);
IkReal x5996=((1.0)*cj1*cj2);
IkReal x5997=(gconst130*x5989);
IkReal x5998=((1.0)*x5989);
IkReal x5999=(gconst130*x5990);
evalcond[0]=(((r21*x5997))+(((-1.0)*r22*x5995))+(((-1.0)*x5993*x5998)));
evalcond[1]=((((-1.0)*r12*x5995))+cj0+((r11*x5997))+(((-1.0)*x5991*x5998)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5995))+(((-1.0)*x5994*x5998))+((r01*x5997)));
evalcond[3]=(((r21*x5999))+((cj2*sj1))+((cj1*sj2))+((r22*x5989))+(((-1.0)*x5993*x5995)));
evalcond[4]=(((r02*x5989))+(((-1.0)*x5994*x5995))+((cj0*x5992))+(((-1.0)*cj0*x5996))+((r01*x5999)));
evalcond[5]=(((r12*x5989))+((sj0*x5992))+((r11*x5999))+(((-1.0)*sj0*x5996))+(((-1.0)*x5991*x5995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6000=((1.0)*gconst131);
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6000))+(((-1.0)*gconst130*r10)))),-1);
if(!x6001.valid){
continue;
}
CheckValue<IkReal> x6002 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6001.value)))+(x6002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6003=IKsin(j4);
IkReal x6004=IKcos(j4);
IkReal x6005=(gconst131*r10);
IkReal x6006=(sj1*sj2);
IkReal x6007=(gconst131*r20);
IkReal x6008=(gconst131*r00);
IkReal x6009=((1.0)*x6004);
IkReal x6010=((1.0)*cj1*cj2);
IkReal x6011=(gconst130*x6003);
IkReal x6012=((1.0)*x6003);
IkReal x6013=(gconst130*x6004);
evalcond[0]=(((r21*x6011))+(((-1.0)*r22*x6009))+(((-1.0)*x6007*x6012)));
evalcond[1]=(((r11*x6011))+cj0+(((-1.0)*r12*x6009))+(((-1.0)*x6005*x6012)));
evalcond[2]=(((r01*x6011))+(((-1.0)*sj0))+(((-1.0)*x6008*x6012))+(((-1.0)*r02*x6009)));
evalcond[3]=(((cj2*sj1))+((r22*x6003))+((r21*x6013))+((cj1*sj2))+(((-1.0)*x6007*x6009)));
evalcond[4]=(((r01*x6013))+((cj0*x6006))+((r02*x6003))+(((-1.0)*cj0*x6010))+(((-1.0)*x6008*x6009)));
evalcond[5]=(((r12*x6003))+((r11*x6013))+(((-1.0)*sj0*x6010))+((sj0*x6006))+(((-1.0)*x6005*x6009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6014=((1.0)*gconst131);
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6014))+(((-1.0)*gconst130*r00)))),-1);
if(!x6015.valid){
continue;
}
CheckValue<IkReal> x6016 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6015.value)))+(x6016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6017=IKsin(j4);
IkReal x6018=IKcos(j4);
IkReal x6019=(gconst131*r10);
IkReal x6020=(sj1*sj2);
IkReal x6021=(gconst131*r20);
IkReal x6022=(gconst131*r00);
IkReal x6023=((1.0)*x6018);
IkReal x6024=((1.0)*cj1*cj2);
IkReal x6025=(gconst130*x6017);
IkReal x6026=((1.0)*x6017);
IkReal x6027=(gconst130*x6018);
evalcond[0]=((((-1.0)*x6021*x6026))+(((-1.0)*r22*x6023))+((r21*x6025)));
evalcond[1]=(cj0+(((-1.0)*x6019*x6026))+((r11*x6025))+(((-1.0)*r12*x6023)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6025))+(((-1.0)*r02*x6023))+(((-1.0)*x6022*x6026)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6021*x6023))+((r21*x6027))+((r22*x6017)));
evalcond[4]=((((-1.0)*cj0*x6024))+((r01*x6027))+((r02*x6017))+((cj0*x6020))+(((-1.0)*x6022*x6023)));
evalcond[5]=(((sj0*x6020))+((r12*x6017))+(((-1.0)*sj0*x6024))+(((-1.0)*x6019*x6023))+((r11*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6028=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6028;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6029=((1.0)*cj5);
IkReal x6030=((((-1.0)*r11*x6029))+(((-1.0)*r10*sj5)));
j4eval[0]=x6030;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6029)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6031=cj5*cj5;
IkReal x6032=r01*r01;
IkReal x6033=(cj5*r00);
IkReal x6034=(r01*sj5);
IkReal x6035=(x6032+((x6031*(r00*r00)))+(r02*r02)+(((-2.0)*x6033*x6034))+(((-1.0)*x6031*x6032)));
j4eval[0]=x6035;
j4eval[1]=IKsign(x6035);
j4eval[2]=((IKabs(r02))+(IKabs((x6034+(((-1.0)*x6033))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6036=cj5*cj5;
IkReal x6037=r01*r01;
IkReal x6038=(r01*sj5);
IkReal x6039=(cj5*r00);
CheckValue<IkReal> x6040=IKPowWithIntegerCheck(IKsign((x6037+(((-1.0)*x6036*x6037))+((x6036*(r00*r00)))+(((-2.0)*x6038*x6039))+(r02*r02))),-1);
if(!x6040.valid){
continue;
}
CheckValue<IkReal> x6041 = IKatan2WithCheck(IkReal((x6038+(((-1.0)*x6039)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6040.value)))+(x6041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6042=IKcos(j4);
IkReal x6043=IKsin(j4);
IkReal x6044=(cj5*r00);
IkReal x6045=(cj5*r10);
IkReal x6046=(r21*sj5);
IkReal x6047=(cj5*r20);
IkReal x6048=((1.0)*x6042);
IkReal x6049=((1.0)*x6043);
IkReal x6050=(sj5*x6043);
IkReal x6051=(sj5*x6042);
evalcond[0]=(((r01*x6051))+(((-1.0)*x6044*x6048))+((r02*x6043)));
evalcond[1]=(((x6043*x6046))+(((-1.0)*r22*x6048))+(((-1.0)*x6047*x6049)));
evalcond[2]=((((-1.0)*x6045*x6049))+(((-1.0)*r12*x6048))+((r11*x6050)));
evalcond[3]=((-1.0)+((r01*x6050))+(((-1.0)*r02*x6048))+(((-1.0)*x6044*x6049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6043))+((x6042*x6046))+(((-1.0)*x6047*x6048)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6045*x6048))+((r12*x6043))+((r11*x6051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6052=((1.0)*cj5);
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6052)))),-1);
if(!x6053.valid){
continue;
}
CheckValue<IkReal> x6054 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6053.value)))+(x6054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6055=IKcos(j4);
IkReal x6056=IKsin(j4);
IkReal x6057=(cj5*r00);
IkReal x6058=(cj5*r10);
IkReal x6059=(r21*sj5);
IkReal x6060=(cj5*r20);
IkReal x6061=((1.0)*x6055);
IkReal x6062=((1.0)*x6056);
IkReal x6063=(sj5*x6056);
IkReal x6064=(sj5*x6055);
evalcond[0]=((((-1.0)*x6057*x6061))+((r01*x6064))+((r02*x6056)));
evalcond[1]=((((-1.0)*r22*x6061))+((x6056*x6059))+(((-1.0)*x6060*x6062)));
evalcond[2]=(((r11*x6063))+(((-1.0)*x6058*x6062))+(((-1.0)*r12*x6061)));
evalcond[3]=((-1.0)+(((-1.0)*x6057*x6062))+((r01*x6063))+(((-1.0)*r02*x6061)));
evalcond[4]=(((cj2*sj1))+((r22*x6056))+((x6055*x6059))+((cj1*sj2))+(((-1.0)*x6060*x6061)));
evalcond[5]=(((r12*x6056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6064))+(((-1.0)*x6058*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6065=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6065.valid){
continue;
}
CheckValue<IkReal> x6066 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6065.value)))+(x6066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6067=IKcos(j4);
IkReal x6068=IKsin(j4);
IkReal x6069=(cj5*r00);
IkReal x6070=(cj5*r10);
IkReal x6071=(r21*sj5);
IkReal x6072=(cj5*r20);
IkReal x6073=((1.0)*x6067);
IkReal x6074=((1.0)*x6068);
IkReal x6075=(sj5*x6068);
IkReal x6076=(sj5*x6067);
evalcond[0]=(((r01*x6076))+((r02*x6068))+(((-1.0)*x6069*x6073)));
evalcond[1]=(((x6068*x6071))+(((-1.0)*x6072*x6074))+(((-1.0)*r22*x6073)));
evalcond[2]=(((r11*x6075))+(((-1.0)*r12*x6073))+(((-1.0)*x6070*x6074)));
evalcond[3]=((-1.0)+((r01*x6075))+(((-1.0)*r02*x6073))+(((-1.0)*x6069*x6074)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6072*x6073))+((r22*x6068))+((x6067*x6071)));
evalcond[5]=(((r11*x6076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6068))+(((-1.0)*x6070*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6077=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6077;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6078=((1.0)*cj5);
IkReal x6079=((((-1.0)*r21*x6078))+(((-1.0)*r20*sj5)));
j4eval[0]=x6079;
j4eval[1]=((IKabs(((((-1.0)*r10*x6078))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6080=(r01*sj5);
IkReal x6081=(cj1*sj2);
IkReal x6082=(cj2*sj1);
IkReal x6083=((1.0)*r02);
IkReal x6084=((1.0)*cj5*r00);
IkReal x6085=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6085;
j4eval[1]=((IKabs(((((-1.0)*x6082*x6084))+((x6080*x6081))+((x6080*x6082))+(((-1.0)*x6081*x6084)))))+(IKabs(((((-1.0)*x6082*x6083))+(((-1.0)*x6081*x6083))))));
j4eval[2]=IKsign(x6085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6086=(r01*sj5);
IkReal x6087=(cj1*sj2);
IkReal x6088=(cj2*sj1);
IkReal x6089=((1.0)*r02);
IkReal x6090=((1.0)*cj5*r00);
CheckValue<IkReal> x6091=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6091.valid){
continue;
}
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(((((-1.0)*x6087*x6090))+((x6086*x6087))+((x6086*x6088))+(((-1.0)*x6088*x6090)))),IkReal(((((-1.0)*x6088*x6089))+(((-1.0)*x6087*x6089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6091.value)))+(x6092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6093=IKcos(j4);
IkReal x6094=IKsin(j4);
IkReal x6095=(cj5*r00);
IkReal x6096=(cj5*r10);
IkReal x6097=(r21*sj5);
IkReal x6098=(cj5*r20);
IkReal x6099=((1.0)*x6093);
IkReal x6100=((1.0)*x6094);
IkReal x6101=(sj5*x6094);
IkReal x6102=(sj5*x6093);
evalcond[0]=((((-1.0)*x6095*x6099))+((r01*x6102))+((r02*x6094)));
evalcond[1]=((((-1.0)*r22*x6099))+(((-1.0)*x6098*x6100))+((x6094*x6097)));
evalcond[2]=(((r11*x6101))+(((-1.0)*x6096*x6100))+(((-1.0)*r12*x6099)));
evalcond[3]=((1.0)+(((-1.0)*x6095*x6100))+(((-1.0)*r02*x6099))+((r01*x6101)));
evalcond[4]=(((cj2*sj1))+((x6093*x6097))+((cj1*sj2))+(((-1.0)*x6098*x6099))+((r22*x6094)));
evalcond[5]=(((r11*x6102))+(((-1.0)*sj1*sj2))+(((-1.0)*x6096*x6099))+((r12*x6094))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6103=((1.0)*cj5);
CheckValue<IkReal> x6104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6103))+(((-1.0)*r20*sj5)))),-1);
if(!x6104.valid){
continue;
}
CheckValue<IkReal> x6105 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6104.value)))+(x6105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6106=IKcos(j4);
IkReal x6107=IKsin(j4);
IkReal x6108=(cj5*r00);
IkReal x6109=(cj5*r10);
IkReal x6110=(r21*sj5);
IkReal x6111=(cj5*r20);
IkReal x6112=((1.0)*x6106);
IkReal x6113=((1.0)*x6107);
IkReal x6114=(sj5*x6107);
IkReal x6115=(sj5*x6106);
evalcond[0]=((((-1.0)*x6108*x6112))+((r01*x6115))+((r02*x6107)));
evalcond[1]=((((-1.0)*r22*x6112))+(((-1.0)*x6111*x6113))+((x6107*x6110)));
evalcond[2]=((((-1.0)*x6109*x6113))+(((-1.0)*r12*x6112))+((r11*x6114)));
evalcond[3]=((1.0)+(((-1.0)*x6108*x6113))+(((-1.0)*r02*x6112))+((r01*x6114)));
evalcond[4]=(((cj2*sj1))+((r22*x6107))+((cj1*sj2))+((x6106*x6110))+(((-1.0)*x6111*x6112)));
evalcond[5]=((((-1.0)*x6109*x6112))+(((-1.0)*sj1*sj2))+((r11*x6115))+((cj1*cj2))+((r12*x6107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6116 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6116.valid){
continue;
}
CheckValue<IkReal> x6117=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6116.value)+(((1.5707963267949)*(x6117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6118=IKcos(j4);
IkReal x6119=IKsin(j4);
IkReal x6120=(cj5*r00);
IkReal x6121=(cj5*r10);
IkReal x6122=(r21*sj5);
IkReal x6123=(cj5*r20);
IkReal x6124=((1.0)*x6118);
IkReal x6125=((1.0)*x6119);
IkReal x6126=(sj5*x6119);
IkReal x6127=(sj5*x6118);
evalcond[0]=(((r01*x6127))+((r02*x6119))+(((-1.0)*x6120*x6124)));
evalcond[1]=(((x6119*x6122))+(((-1.0)*r22*x6124))+(((-1.0)*x6123*x6125)));
evalcond[2]=((((-1.0)*x6121*x6125))+(((-1.0)*r12*x6124))+((r11*x6126)));
evalcond[3]=((1.0)+((r01*x6126))+(((-1.0)*r02*x6124))+(((-1.0)*x6120*x6125)));
evalcond[4]=(((cj2*sj1))+((x6118*x6122))+((cj1*sj2))+((r22*x6119))+(((-1.0)*x6123*x6124)));
evalcond[5]=((((-1.0)*x6121*x6124))+(((-1.0)*sj1*sj2))+((r12*x6119))+((cj1*cj2))+((r11*x6127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6128=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6128);
rxp1_1=(px*r21);
rxp1_2=(r11*x6128);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6129=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6129);
rxp1_1=(px*r21);
rxp1_2=(r11*x6129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6130=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6130);
rxp1_1=(px*r21);
rxp1_2=(r11*x6130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6133=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6133.valid){
continue;
}
IkReal x6131=x6133.value;
IkReal x6132=(sj0*x6131);
cj4array[0]=(((cj1*cj2*x6132))+(((-1.0)*sj1*sj2*x6132)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6134=IKsin(j4);
IkReal x6135=IKcos(j4);
IkReal x6136=(r21*sj5);
IkReal x6137=((1.0)*cj5*r20);
evalcond[0]=(r02*x6134);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6135)));
evalcond[2]=((((-1.0)*x6134*x6137))+((x6134*x6136)));
evalcond[3]=(((r11*sj5*x6134))+(((-1.0)*cj5*r10*x6134)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6135*x6136))+(((-1.0)*x6135*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6140=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6140.valid){
continue;
}
IkReal x6138=x6140.value;
IkReal x6139=((1.0)*x6138);
cj4array[0]=((((-1.0)*cj2*sj1*x6139))+(((-1.0)*cj1*sj2*x6139)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6141=IKsin(j4);
IkReal x6142=IKcos(j4);
IkReal x6143=((1.0)*sj0);
IkReal x6144=((1.0)*cj5);
IkReal x6145=(sj5*x6141);
evalcond[0]=(r02*x6141);
evalcond[1]=((((-1.0)*x6143))+(((-1.0)*r02*x6142)));
evalcond[2]=((((-1.0)*r20*x6141*x6144))+((r21*x6145)));
evalcond[3]=((((-1.0)*r10*x6141*x6144))+((r11*x6145)));
evalcond[4]=(((r11*sj5*x6142))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6143))+(((-1.0)*r10*x6142*x6144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(r02,-1);
if(!x6146.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6146.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6147=IKsin(j4);
IkReal x6148=IKcos(j4);
IkReal x6149=(r21*sj5);
IkReal x6150=((1.0)*cj5);
IkReal x6151=(r11*sj5);
evalcond[0]=(r02*x6147);
evalcond[1]=((((-1.0)*r20*x6147*x6150))+((x6147*x6149)));
evalcond[2]=(((x6147*x6151))+(((-1.0)*r10*x6147*x6150)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6148*x6150))+((x6148*x6149)));
evalcond[4]=(((x6148*x6151))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r10*x6148*x6150))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6152=((1.0)*sj0);
IkReal x6153=((1.0)*cj0);
CheckValue<IkReal> x6154 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6153))+(((-1.0)*r12*x6152)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6153))+(((-1.0)*r11*sj5*x6152)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6154.valid){
continue;
}
CheckValue<IkReal> x6155=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6154.value)+(((1.5707963267949)*(x6155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6156=IKsin(j4);
IkReal x6157=IKcos(j4);
IkReal x6158=(cj5*r00);
IkReal x6159=(cj5*r10);
IkReal x6160=(r21*sj5);
IkReal x6161=(sj1*sj2);
IkReal x6162=(cj5*r20);
IkReal x6163=((1.0)*x6157);
IkReal x6164=((1.0)*cj1*cj2);
IkReal x6165=((1.0)*x6156);
IkReal x6166=(sj5*x6156);
IkReal x6167=(sj5*x6157);
evalcond[0]=((((-1.0)*r22*x6163))+((x6156*x6160))+(((-1.0)*x6162*x6165)));
evalcond[1]=(cj0+(((-1.0)*r12*x6163))+((r11*x6166))+(((-1.0)*x6159*x6165)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6166))+(((-1.0)*r02*x6163))+(((-1.0)*x6158*x6165)));
evalcond[3]=(((r22*x6156))+((cj2*sj1))+((x6157*x6160))+((cj1*sj2))+(((-1.0)*x6162*x6163)));
evalcond[4]=((((-1.0)*cj0*x6164))+((r02*x6156))+((r01*x6167))+(((-1.0)*x6158*x6163))+((cj0*x6161)));
evalcond[5]=(((r12*x6156))+(((-1.0)*sj0*x6164))+((sj0*x6161))+((r11*x6167))+(((-1.0)*x6159*x6163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6168=((1.0)*cj5);
CheckValue<IkReal> x6169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6168)))),-1);
if(!x6169.valid){
continue;
}
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6169.value)))+(x6170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6171=IKsin(j4);
IkReal x6172=IKcos(j4);
IkReal x6173=(cj5*r00);
IkReal x6174=(cj5*r10);
IkReal x6175=(r21*sj5);
IkReal x6176=(sj1*sj2);
IkReal x6177=(cj5*r20);
IkReal x6178=((1.0)*x6172);
IkReal x6179=((1.0)*cj1*cj2);
IkReal x6180=((1.0)*x6171);
IkReal x6181=(sj5*x6171);
IkReal x6182=(sj5*x6172);
evalcond[0]=((((-1.0)*x6177*x6180))+((x6171*x6175))+(((-1.0)*r22*x6178)));
evalcond[1]=(cj0+(((-1.0)*r12*x6178))+((r11*x6181))+(((-1.0)*x6174*x6180)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6173*x6180))+((r01*x6181))+(((-1.0)*r02*x6178)));
evalcond[3]=(((cj2*sj1))+((x6172*x6175))+((cj1*sj2))+(((-1.0)*x6177*x6178))+((r22*x6171)));
evalcond[4]=((((-1.0)*cj0*x6179))+((r01*x6182))+((r02*x6171))+(((-1.0)*x6173*x6178))+((cj0*x6176)));
evalcond[5]=((((-1.0)*sj0*x6179))+((r12*x6171))+((sj0*x6176))+(((-1.0)*x6174*x6178))+((r11*x6182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6183=((1.0)*cj5);
CheckValue<IkReal> x6184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6184.valid){
continue;
}
CheckValue<IkReal> x6185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6183))+(((-1.0)*r00*sj5)))),-1);
if(!x6185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6184.value)+(((1.5707963267949)*(x6185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6186=IKsin(j4);
IkReal x6187=IKcos(j4);
IkReal x6188=(cj5*r00);
IkReal x6189=(cj5*r10);
IkReal x6190=(r21*sj5);
IkReal x6191=(sj1*sj2);
IkReal x6192=(cj5*r20);
IkReal x6193=((1.0)*x6187);
IkReal x6194=((1.0)*cj1*cj2);
IkReal x6195=((1.0)*x6186);
IkReal x6196=(sj5*x6186);
IkReal x6197=(sj5*x6187);
evalcond[0]=((((-1.0)*x6192*x6195))+(((-1.0)*r22*x6193))+((x6186*x6190)));
evalcond[1]=(cj0+((r11*x6196))+(((-1.0)*r12*x6193))+(((-1.0)*x6189*x6195)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6196))+(((-1.0)*x6188*x6195))+(((-1.0)*r02*x6193)));
evalcond[3]=(((cj2*sj1))+((r22*x6186))+(((-1.0)*x6192*x6193))+((cj1*sj2))+((x6187*x6190)));
evalcond[4]=((((-1.0)*cj0*x6194))+((r02*x6186))+((r01*x6197))+(((-1.0)*x6188*x6193))+((cj0*x6191)));
evalcond[5]=(((r11*x6197))+(((-1.0)*x6189*x6193))+(((-1.0)*sj0*x6194))+((sj0*x6191))+((r12*x6186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6198=r21*r21;
IkReal x6199=cj5*cj5;
IkReal x6200=(cj2*sj1);
IkReal x6201=(cj1*sj2);
IkReal x6202=(r21*sj5);
IkReal x6203=((1.0)*cj5*r20);
CheckValue<IkReal> x6204=IKPowWithIntegerCheck(IKsign((((x6198*x6199))+(((-1.0)*x6199*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6198))+(((2.0)*cj5*r20*x6202)))),-1);
if(!x6204.valid){
continue;
}
CheckValue<IkReal> x6205 = IKatan2WithCheck(IkReal((((r22*x6200))+((r22*x6201)))),IkReal((((x6201*x6202))+(((-1.0)*x6201*x6203))+((x6200*x6202))+(((-1.0)*x6200*x6203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6204.value)))+(x6205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6206=IKsin(j4);
IkReal x6207=IKcos(j4);
IkReal x6208=(r21*sj5);
IkReal x6209=(cj5*r20);
IkReal x6210=((1.0)*x6207);
evalcond[0]=((((-1.0)*x6206*x6209))+((x6206*x6208))+(((-1.0)*r22*x6210)));
evalcond[1]=(((x6207*x6208))+((cj2*sj1))+((r22*x6206))+(((-1.0)*x6209*x6210))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6211=(cj5*sj4);
IkReal x6212=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6212))+(((-1.0)*r00*x6211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6211))+(((-1.0)*r11*x6212))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6212))+(((-1.0)*r00*x6211))))+IKsqr((((r10*x6211))+(((-1.0)*r11*x6212))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6212))+(((-1.0)*r00*x6211))), (((r10*x6211))+(((-1.0)*r11*x6212))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6213=IKcos(j0);
IkReal x6214=IKsin(j0);
IkReal x6215=((0.21325)*cj2);
IkReal x6216=(cj5*r01);
IkReal x6217=((1.0)*sj2);
IkReal x6218=(r11*sj5);
IkReal x6219=((0.21325)*sj2);
IkReal x6220=(r00*sj5);
IkReal x6221=(cj5*r11);
IkReal x6222=((1.0)*cj2);
IkReal x6223=((1.0)*cj4);
IkReal x6224=(r01*sj5);
IkReal x6225=(r10*sj5);
IkReal x6226=(cj1*x6214);
IkReal x6227=(cj1*x6213);
IkReal x6228=(cj5*x6223);
IkReal x6229=(sj1*x6213);
IkReal x6230=((1.0)*cj5*sj4);
IkReal x6231=(sj1*x6214);
evalcond[0]=(x6213+(((-1.0)*r10*x6230))+(((-1.0)*r12*x6223))+((sj4*x6218)));
evalcond[1]=((((-1.0)*x6214))+((sj4*x6224))+(((-1.0)*r00*x6230))+(((-1.0)*r02*x6223)));
evalcond[2]=(x6216+x6220+(((-1.0)*x6222*x6229))+(((-1.0)*x6217*x6227)));
evalcond[3]=((((-1.0)*x6222*x6231))+x6221+x6225+(((-1.0)*x6217*x6226)));
evalcond[4]=((((-1.0)*x6222*x6227))+(((-1.0)*r00*x6228))+((r02*sj4))+((cj4*x6224))+((sj2*x6229)));
evalcond[5]=((((-1.0)*x6222*x6226))+((r12*sj4))+((cj4*x6218))+((sj2*x6231))+(((-1.0)*r10*x6228)));
evalcond[6]=((((0.24365)*x6227))+(((-0.08535)*x6216))+(((-0.11235)*x6214))+(((-0.08535)*x6220))+(((-1.0)*x6219*x6229))+(((-1.0)*px))+((x6215*x6227)));
evalcond[7]=((((0.24365)*x6226))+(((-0.08535)*x6221))+(((-0.08535)*x6225))+(((-1.0)*py))+(((-1.0)*x6219*x6231))+((x6215*x6226))+(((0.11235)*x6213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6232=((1.0)*cj5);
IkReal x6233=((1.0)*sj5);
CheckValue<IkReal> x6234 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6232))+(((-1.0)*r10*x6233)))),IkReal(((((-1.0)*r00*x6233))+(((-1.0)*r01*x6232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6234.valid){
continue;
}
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6235.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6234.value)+(((1.5707963267949)*(x6235.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6236=IKcos(j0);
IkReal x6237=IKsin(j0);
IkReal x6238=((0.21325)*cj2);
IkReal x6239=(cj5*r01);
IkReal x6240=((1.0)*sj2);
IkReal x6241=(r00*sj5);
IkReal x6242=(cj5*r11);
IkReal x6243=(r10*sj5);
IkReal x6244=(cj1*x6237);
IkReal x6245=(cj1*x6236);
IkReal x6246=((0.21325)*sj1*sj2);
IkReal x6247=((1.0)*cj2*sj1);
evalcond[0]=(x6241+x6239+(((-1.0)*x6236*x6247))+(((-1.0)*x6240*x6245)));
evalcond[1]=(x6242+x6243+(((-1.0)*x6237*x6247))+(((-1.0)*x6240*x6244)));
evalcond[2]=((((-0.11235)*x6237))+(((-1.0)*x6236*x6246))+(((-0.08535)*x6239))+((x6238*x6245))+(((-1.0)*px))+(((0.24365)*x6245))+(((-0.08535)*x6241)));
evalcond[3]=((((-1.0)*x6237*x6246))+((x6238*x6244))+(((-1.0)*py))+(((0.11235)*x6236))+(((0.24365)*x6244))+(((-0.08535)*x6242))+(((-0.08535)*x6243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6248=((1.0)*cj5);
IkReal x6249=((((-1.0)*r01*x6248))+(((-1.0)*r00*sj5)));
j4eval[0]=x6249;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6248))))));
j4eval[2]=IKsign(x6249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6250=((1.0)*cj5);
IkReal x6251=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6250)));
j4eval[0]=x6251;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6250)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6252=((1.0)*sj0);
IkReal x6253=((1.0)*cj0);
IkReal x6254=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6254;
j4eval[1]=((IKabs(((((-1.0)*r02*x6253))+(((-1.0)*r12*x6252)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6252))+(((-1.0)*r01*sj5*x6253))))));
j4eval[2]=IKsign(x6254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6255=((-1.0)*r20);
IkReal x6257 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6257)==0){
continue;
}
IkReal x6256=pow(x6257,-0.5);
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6255),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6258.value));
IkReal gconst115=(r21*x6256);
IkReal gconst116=(x6255*x6256);
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6259.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6260=((-1.0)*r20);
IkReal x6261=x6256;
CheckValue<IkReal> x6263 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6260),IKFAST_ATAN2_MAGTHRESH);
if(!x6263.valid){
continue;
}
IkReal x6262=((-1.0)*(x6263.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6262;
IkReal gconst114=x6262;
IkReal gconst115=(r21*x6261);
IkReal gconst116=(x6260*x6261);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6264=((-1.0)*r20);
IkReal x6265=x6256;
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6264),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
IkReal x6266=((-1.0)*(x6267.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6266;
IkReal gconst114=x6266;
IkReal gconst115=(r21*x6265);
IkReal gconst116=(x6264*x6265);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6268=((-1.0)*r20);
IkReal x6269=x6256;
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6268),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
IkReal x6270=((-1.0)*(x6271.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6270;
IkReal gconst114=x6270;
IkReal gconst115=(r21*x6269);
IkReal gconst116=(x6268*x6269);
IkReal x6272=((1.0)*(r22*r22));
CheckValue<IkReal> x6276=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6272))),-1);
if(!x6276.valid){
continue;
}
IkReal x6273=x6276.value;
IkReal x6274=((1.0)*x6273);
IkReal x6275=((((-1.0)*x6274*(r21*r21*r21*r21)))+(((-2.0)*x6273*(r20*r20)*(r21*r21)))+(((-1.0)*x6272))+(((-1.0)*x6274*(r20*r20*r20*r20))));
j4eval[0]=x6275;
j4eval[1]=IKsign(x6275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6277=(cj2*sj1);
IkReal x6278=(gconst115*r21);
IkReal x6279=(cj1*sj2);
IkReal x6280=((1.0)*gconst116*r20);
CheckValue<IkReal> x6281 = IKatan2WithCheck(IkReal((((r22*x6277))+((r22*x6279)))),IkReal(((((-1.0)*x6279*x6280))+((x6278*x6279))+((x6277*x6278))+(((-1.0)*x6277*x6280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6281.valid){
continue;
}
CheckValue<IkReal> x6282=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6280))+(((-1.0)*(x6278*x6278)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6278)))),-1);
if(!x6282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6281.value)+(((1.5707963267949)*(x6282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6283=IKsin(j4);
IkReal x6284=IKcos(j4);
IkReal x6285=(sj1*sj2);
IkReal x6286=((1.0)*x6284);
IkReal x6287=((1.0)*cj1*cj2);
IkReal x6288=(gconst115*x6283);
IkReal x6289=(gconst115*x6284);
IkReal x6290=((1.0)*gconst116*x6283);
evalcond[0]=((((-1.0)*r20*x6290))+(((-1.0)*r22*x6286))+((r21*x6288)));
evalcond[1]=(cj0+((r11*x6288))+(((-1.0)*r10*x6290))+(((-1.0)*r12*x6286)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6290))+(((-1.0)*r02*x6286))+((r01*x6288)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6286))+((r22*x6283))+((cj1*sj2))+((r21*x6289)));
evalcond[4]=((((-1.0)*gconst116*r00*x6286))+((cj0*x6285))+(((-1.0)*cj0*x6287))+((r02*x6283))+((r01*x6289)));
evalcond[5]=(((r12*x6283))+(((-1.0)*gconst116*r10*x6286))+((r11*x6289))+((sj0*x6285))+(((-1.0)*sj0*x6287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6291=((1.0)*gconst116);
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6291))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
CheckValue<IkReal> x6293=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6291)))),-1);
if(!x6293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6292.value)+(((1.5707963267949)*(x6293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6294=IKsin(j4);
IkReal x6295=IKcos(j4);
IkReal x6296=(sj1*sj2);
IkReal x6297=((1.0)*x6295);
IkReal x6298=((1.0)*cj1*cj2);
IkReal x6299=(gconst115*x6294);
IkReal x6300=(gconst115*x6295);
IkReal x6301=((1.0)*gconst116*x6294);
evalcond[0]=((((-1.0)*r22*x6297))+(((-1.0)*r20*x6301))+((r21*x6299)));
evalcond[1]=(cj0+(((-1.0)*r10*x6301))+((r11*x6299))+(((-1.0)*r12*x6297)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6299))+(((-1.0)*r02*x6297))+(((-1.0)*r00*x6301)));
evalcond[3]=(((cj2*sj1))+((r22*x6294))+((cj1*sj2))+(((-1.0)*gconst116*r20*x6297))+((r21*x6300)));
evalcond[4]=((((-1.0)*gconst116*r00*x6297))+((r01*x6300))+((cj0*x6296))+((r02*x6294))+(((-1.0)*cj0*x6298)));
evalcond[5]=(((r11*x6300))+((r12*x6294))+(((-1.0)*gconst116*r10*x6297))+((sj0*x6296))+(((-1.0)*sj0*x6298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6302=((1.0)*gconst116);
CheckValue<IkReal> x6303=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6302)))),-1);
if(!x6303.valid){
continue;
}
CheckValue<IkReal> x6304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6303.value)))+(x6304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6305=IKsin(j4);
IkReal x6306=IKcos(j4);
IkReal x6307=(sj1*sj2);
IkReal x6308=((1.0)*x6306);
IkReal x6309=((1.0)*cj1*cj2);
IkReal x6310=(gconst115*x6305);
IkReal x6311=(gconst115*x6306);
IkReal x6312=((1.0)*gconst116*x6305);
evalcond[0]=(((r21*x6310))+(((-1.0)*r20*x6312))+(((-1.0)*r22*x6308)));
evalcond[1]=(cj0+(((-1.0)*r12*x6308))+(((-1.0)*r10*x6312))+((r11*x6310)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6308))+((r01*x6310))+(((-1.0)*r00*x6312)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6305))+((r21*x6311))+(((-1.0)*gconst116*r20*x6308)));
evalcond[4]=(((r01*x6311))+((r02*x6305))+((cj0*x6307))+(((-1.0)*gconst116*r00*x6308))+(((-1.0)*cj0*x6309)));
evalcond[5]=(((r11*x6311))+(((-1.0)*sj0*x6309))+((r12*x6305))+(((-1.0)*gconst116*r10*x6308))+((sj0*x6307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6313=((-1.0)*r21);
IkReal x6315 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6315)==0){
continue;
}
IkReal x6314=pow(x6315,-0.5);
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal(x6313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6316.value))));
IkReal gconst118=(x6313*x6314);
IkReal gconst119=((1.0)*r20*x6314);
CheckValue<IkReal> x6317 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6317.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6317.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6318=((-1.0)*r21);
CheckValue<IkReal> x6321 = IKatan2WithCheck(IkReal(x6318),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6321.valid){
continue;
}
IkReal x6319=((1.0)*(x6321.value));
IkReal x6320=x6314;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6319)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6319)));
IkReal gconst118=(x6318*x6320);
IkReal gconst119=((1.0)*r20*x6320);
IkReal x6322=r22*r22;
IkReal x6323=((1.0)*x6322);
CheckValue<IkReal> x6327=IKPowWithIntegerCheck(((-1.0)+x6322),-1);
if(!x6327.valid){
continue;
}
IkReal x6324=x6327.value;
if((((1.0)+(((-1.0)*x6323)))) < -0.00001)
continue;
IkReal x6325=IKsqrt(((1.0)+(((-1.0)*x6323))));
IkReal x6326=(cj0*x6324*x6325);
j4eval[0]=((IKabs((x6326+(((-1.0)*x6323*x6326)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6328=((-1.0)*r21);
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(x6328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
IkReal x6329=((1.0)*(x6331.value));
IkReal x6330=x6314;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6329)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6329)));
IkReal gconst118=(x6328*x6330);
IkReal gconst119=((1.0)*r20*x6330);
IkReal x6332=r22*r22;
IkReal x6333=((1.0)*x6332);
CheckValue<IkReal> x6337=IKPowWithIntegerCheck(((-1.0)+x6332),-1);
if(!x6337.valid){
continue;
}
IkReal x6334=x6337.value;
if((((1.0)+(((-1.0)*x6333)))) < -0.00001)
continue;
IkReal x6335=IKsqrt(((1.0)+(((-1.0)*x6333))));
IkReal x6336=(sj0*x6334*x6335);
j4eval[0]=((IKabs(((((-1.0)*x6333*x6336))+x6336)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6338=((-1.0)*r21);
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal(x6338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
IkReal x6339=((1.0)*(x6341.value));
IkReal x6340=x6314;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6339)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6339)));
IkReal gconst118=(x6338*x6340);
IkReal gconst119=((1.0)*r20*x6340);
IkReal x6342=r22*r22;
IkReal x6343=(r12*sj0);
IkReal x6344=(cj0*r02);
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(((-1.0)+x6342),-1);
if(!x6348.valid){
continue;
}
IkReal x6345=x6348.value;
if((((1.0)+(((-1.0)*x6342)))) < -0.00001)
continue;
IkReal x6346=IKsqrt(((1.0)+(((-1.0)*x6342))));
IkReal x6347=(r22*x6345*x6346);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6344*x6347))+((x6343*x6347)))))+(IKabs(((((-1.0)*x6344))+(((-1.0)*x6343))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6349=((1.0)*sj0);
IkReal x6350=((1.0)*gconst118);
CheckValue<IkReal> x6351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6350)))),-1);
if(!x6351.valid){
continue;
}
CheckValue<IkReal> x6352 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6349)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6350))+(((-1.0)*gconst118*r11*x6349))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6351.value)))+(x6352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6353=IKsin(j4);
IkReal x6354=IKcos(j4);
IkReal x6355=(gconst118*r01);
IkReal x6356=(sj1*sj2);
IkReal x6357=(gconst119*r20);
IkReal x6358=(gconst119*r10);
IkReal x6359=(gconst119*r00);
IkReal x6360=(gconst118*r21);
IkReal x6361=(gconst118*r11);
IkReal x6362=((1.0)*x6354);
IkReal x6363=((1.0)*cj1*cj2);
IkReal x6364=((1.0)*x6353);
evalcond[0]=(((x6353*x6360))+(((-1.0)*x6357*x6364))+(((-1.0)*r22*x6362)));
evalcond[1]=(((x6353*x6361))+cj0+(((-1.0)*r12*x6362))+(((-1.0)*x6358*x6364)));
evalcond[2]=(((x6353*x6355))+(((-1.0)*sj0))+(((-1.0)*r02*x6362))+(((-1.0)*x6359*x6364)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6357*x6362))+((r22*x6353))+((x6354*x6360)));
evalcond[4]=((((-1.0)*x6359*x6362))+((r02*x6353))+((x6354*x6355))+(((-1.0)*cj0*x6363))+((cj0*x6356)));
evalcond[5]=((((-1.0)*sj0*x6363))+((r12*x6353))+((sj0*x6356))+((x6354*x6361))+(((-1.0)*x6358*x6362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6365=((1.0)*gconst119);
CheckValue<IkReal> x6366=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6365)))),-1);
if(!x6366.valid){
continue;
}
CheckValue<IkReal> x6367 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6366.value)))+(x6367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6368=IKsin(j4);
IkReal x6369=IKcos(j4);
IkReal x6370=(gconst118*r01);
IkReal x6371=(sj1*sj2);
IkReal x6372=(gconst119*r20);
IkReal x6373=(gconst119*r10);
IkReal x6374=(gconst119*r00);
IkReal x6375=(gconst118*r21);
IkReal x6376=(gconst118*r11);
IkReal x6377=((1.0)*x6369);
IkReal x6378=((1.0)*cj1*cj2);
IkReal x6379=((1.0)*x6368);
evalcond[0]=((((-1.0)*x6372*x6379))+((x6368*x6375))+(((-1.0)*r22*x6377)));
evalcond[1]=(cj0+(((-1.0)*x6373*x6379))+((x6368*x6376))+(((-1.0)*r12*x6377)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6377))+(((-1.0)*x6374*x6379))+((x6368*x6370)));
evalcond[3]=(((x6369*x6375))+((cj2*sj1))+(((-1.0)*x6372*x6377))+((cj1*sj2))+((r22*x6368)));
evalcond[4]=(((x6369*x6370))+(((-1.0)*x6374*x6377))+((cj0*x6371))+((r02*x6368))+(((-1.0)*cj0*x6378)));
evalcond[5]=(((x6369*x6376))+(((-1.0)*sj0*x6378))+((r12*x6368))+((sj0*x6371))+(((-1.0)*x6373*x6377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6380=((1.0)*gconst119);
CheckValue<IkReal> x6381=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6380)))),-1);
if(!x6381.valid){
continue;
}
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6381.value)))+(x6382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6383=IKsin(j4);
IkReal x6384=IKcos(j4);
IkReal x6385=(gconst118*r01);
IkReal x6386=(sj1*sj2);
IkReal x6387=(gconst119*r20);
IkReal x6388=(gconst119*r10);
IkReal x6389=(gconst119*r00);
IkReal x6390=(gconst118*r21);
IkReal x6391=(gconst118*r11);
IkReal x6392=((1.0)*x6384);
IkReal x6393=((1.0)*cj1*cj2);
IkReal x6394=((1.0)*x6383);
evalcond[0]=(((x6383*x6390))+(((-1.0)*x6387*x6394))+(((-1.0)*r22*x6392)));
evalcond[1]=(((x6383*x6391))+cj0+(((-1.0)*x6388*x6394))+(((-1.0)*r12*x6392)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6392))+((x6383*x6385))+(((-1.0)*x6389*x6394)));
evalcond[3]=(((cj2*sj1))+((x6384*x6390))+((r22*x6383))+((cj1*sj2))+(((-1.0)*x6387*x6392)));
evalcond[4]=(((cj0*x6386))+(((-1.0)*cj0*x6393))+((x6384*x6385))+((r02*x6383))+(((-1.0)*x6389*x6392)));
evalcond[5]=((((-1.0)*sj0*x6393))+((sj0*x6386))+((x6384*x6391))+(((-1.0)*x6388*x6392))+((r12*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6395=((-1.0)*r10);
IkReal x6397 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6397)==0){
continue;
}
IkReal x6396=pow(x6397,-0.5);
CheckValue<IkReal> x6398 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6395),IKFAST_ATAN2_MAGTHRESH);
if(!x6398.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6398.value));
IkReal gconst121=(r11*x6396);
IkReal gconst122=(x6395*x6396);
CheckValue<IkReal> x6399 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6399.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6399.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6400=((-1.0)*r10);
IkReal x6401=x6396;
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6400),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
IkReal x6402=((-1.0)*(x6403.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6402;
IkReal gconst120=x6402;
IkReal gconst121=(r11*x6401);
IkReal gconst122=(x6400*x6401);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6404=((1.0)*sj0);
IkReal x6405=((1.0)*gconst121);
CheckValue<IkReal> x6406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6405))+(((-1.0)*gconst122*r21)))),-1);
if(!x6406.valid){
continue;
}
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6404)))),IkReal(((((-1.0)*cj0*r01*x6405))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6404))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6406.value)))+(x6407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6408=IKsin(j4);
IkReal x6409=IKcos(j4);
IkReal x6410=(gconst121*r11);
IkReal x6411=(sj1*sj2);
IkReal x6412=(gconst122*r00);
IkReal x6413=(gconst122*r10);
IkReal x6414=(gconst122*r20);
IkReal x6415=((1.0)*x6409);
IkReal x6416=((1.0)*cj1*cj2);
IkReal x6417=((1.0)*x6408);
IkReal x6418=(gconst121*x6408);
IkReal x6419=(gconst121*x6409);
evalcond[0]=((((-1.0)*x6414*x6417))+((r21*x6418))+(((-1.0)*r22*x6415)));
evalcond[1]=(((x6408*x6410))+cj0+(((-1.0)*x6413*x6417))+(((-1.0)*r12*x6415)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6418))+(((-1.0)*x6412*x6417))+(((-1.0)*r02*x6415)));
evalcond[3]=((((-1.0)*x6414*x6415))+((cj2*sj1))+((r21*x6419))+((cj1*sj2))+((r22*x6408)));
evalcond[4]=(((r02*x6408))+((r01*x6419))+(((-1.0)*x6412*x6415))+((cj0*x6411))+(((-1.0)*cj0*x6416)));
evalcond[5]=(((sj0*x6411))+((x6409*x6410))+(((-1.0)*x6413*x6415))+((r12*x6408))+(((-1.0)*sj0*x6416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6420=((1.0)*gconst122);
CheckValue<IkReal> x6421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6420)))),-1);
if(!x6421.valid){
continue;
}
CheckValue<IkReal> x6422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6420))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6421.value)))+(x6422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6423=IKsin(j4);
IkReal x6424=IKcos(j4);
IkReal x6425=(gconst121*r11);
IkReal x6426=(sj1*sj2);
IkReal x6427=(gconst122*r00);
IkReal x6428=(gconst122*r10);
IkReal x6429=(gconst122*r20);
IkReal x6430=((1.0)*x6424);
IkReal x6431=((1.0)*cj1*cj2);
IkReal x6432=((1.0)*x6423);
IkReal x6433=(gconst121*x6423);
IkReal x6434=(gconst121*x6424);
evalcond[0]=((((-1.0)*r22*x6430))+(((-1.0)*x6429*x6432))+((r21*x6433)));
evalcond[1]=(cj0+(((-1.0)*r12*x6430))+(((-1.0)*x6428*x6432))+((x6423*x6425)));
evalcond[2]=(((r01*x6433))+(((-1.0)*sj0))+(((-1.0)*r02*x6430))+(((-1.0)*x6427*x6432)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6429*x6430))+((r21*x6434))+((r22*x6423)));
evalcond[4]=(((r01*x6434))+((r02*x6423))+(((-1.0)*x6427*x6430))+(((-1.0)*cj0*x6431))+((cj0*x6426)));
evalcond[5]=((((-1.0)*sj0*x6431))+((x6424*x6425))+(((-1.0)*x6428*x6430))+((r12*x6423))+((sj0*x6426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6435=((-1.0)*r11);
IkReal x6437 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6437)==0){
continue;
}
IkReal x6436=pow(x6437,-0.5);
CheckValue<IkReal> x6438 = IKatan2WithCheck(IkReal(x6435),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6438.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6438.value))));
IkReal gconst124=(x6435*x6436);
IkReal gconst125=((1.0)*r10*x6436);
CheckValue<IkReal> x6439 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6439.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6439.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6440=((-1.0)*r11);
CheckValue<IkReal> x6443 = IKatan2WithCheck(IkReal(x6440),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6443.valid){
continue;
}
IkReal x6441=((1.0)*(x6443.value));
IkReal x6442=x6436;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6441)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6441)));
IkReal gconst124=(x6440*x6442);
IkReal gconst125=((1.0)*r10*x6442);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6444=((-1.0)*r11);
CheckValue<IkReal> x6447 = IKatan2WithCheck(IkReal(x6444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6447.valid){
continue;
}
IkReal x6445=((1.0)*(x6447.value));
IkReal x6446=x6436;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6445)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6445)));
IkReal gconst124=(x6444*x6446);
IkReal gconst125=((1.0)*r10*x6446);
IkReal x6448=r12*r12;
IkReal x6449=((1.0)*sj0);
IkReal x6450=(cj0*r02);
IkReal x6451=x6436;
j4eval[0]=((IKabs((((r12*x6450*x6451))+(((-1.0)*x6449*x6451))+((sj0*x6448*x6451)))))+(IKabs(((((-1.0)*x6450))+(((-1.0)*r12*x6449))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6452=((-1.0)*r11);
CheckValue<IkReal> x6455 = IKatan2WithCheck(IkReal(x6452),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6455.valid){
continue;
}
IkReal x6453=((1.0)*(x6455.value));
IkReal x6454=x6436;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6453)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6453)));
IkReal gconst124=(x6452*x6454);
IkReal gconst125=((1.0)*r10*x6454);
IkReal x6456=r12*r12;
IkReal x6457=((1.0)+(((-1.0)*x6456)));
IkReal x6458=(cj2*r22*sj1);
IkReal x6459=(cj1*r22*sj2);
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(x6457,-1);
if(!x6466.valid){
continue;
}
IkReal x6460=x6466.value;
CheckValue<IkReal> x6467=IKPowWithIntegerCheck(((-1.0)+x6456),-1);
if(!x6467.valid){
continue;
}
IkReal x6461=x6467.value;
IkReal x6462=((1.0)*x6460);
if((x6457) < -0.00001)
continue;
IkReal x6463=IKsqrt(x6457);
IkReal x6464=((1.0)*r12*x6461*x6463);
IkReal x6465=((((-1.0)*x6462*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6460))+(((-1.0)*x6462*(r10*r10)*(r20*r20))));
j4eval[0]=x6465;
j4eval[1]=IKsign(x6465);
j4eval[2]=((IKabs(((((-1.0)*x6458*x6464))+(((-1.0)*x6459*x6464)))))+(IKabs((x6459+x6458))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6468=(gconst124*r21);
IkReal x6469=(cj1*sj2);
IkReal x6470=(cj2*sj1);
IkReal x6471=(gconst125*r20);
CheckValue<IkReal> x6472=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6471*x6471)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6468*x6468)))+(((2.0)*x6468*x6471)))),-1);
if(!x6472.valid){
continue;
}
CheckValue<IkReal> x6473 = IKatan2WithCheck(IkReal((((r22*x6470))+((r22*x6469)))),IkReal(((((-1.0)*x6470*x6471))+((x6468*x6470))+((x6468*x6469))+(((-1.0)*x6469*x6471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6472.value)))+(x6473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6474=IKsin(j4);
IkReal x6475=IKcos(j4);
IkReal x6476=(sj1*sj2);
IkReal x6477=(gconst125*r20);
IkReal x6478=(gconst124*r01);
IkReal x6479=(gconst125*r00);
IkReal x6480=(gconst125*r10);
IkReal x6481=((1.0)*x6475);
IkReal x6482=((1.0)*cj1*cj2);
IkReal x6483=((1.0)*x6474);
IkReal x6484=(gconst124*x6474);
IkReal x6485=(gconst124*x6475);
evalcond[0]=(((r21*x6484))+(((-1.0)*r22*x6481))+(((-1.0)*x6477*x6483)));
evalcond[1]=(((r11*x6484))+cj0+(((-1.0)*r12*x6481))+(((-1.0)*x6480*x6483)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6481))+((x6474*x6478))+(((-1.0)*x6479*x6483)));
evalcond[3]=(((r22*x6474))+((r21*x6485))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6477*x6481)));
evalcond[4]=(((r02*x6474))+(((-1.0)*cj0*x6482))+((x6475*x6478))+(((-1.0)*x6479*x6481))+((cj0*x6476)));
evalcond[5]=(((r11*x6485))+(((-1.0)*sj0*x6482))+(((-1.0)*x6480*x6481))+((r12*x6474))+((sj0*x6476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6486=((1.0)*sj0);
IkReal x6487=((1.0)*cj0);
CheckValue<IkReal> x6488 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6486))+(((-1.0)*r02*x6487)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6486))+(((-1.0)*gconst124*r01*x6487))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6488.valid){
continue;
}
CheckValue<IkReal> x6489=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6488.value)+(((1.5707963267949)*(x6489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6490=IKsin(j4);
IkReal x6491=IKcos(j4);
IkReal x6492=(sj1*sj2);
IkReal x6493=(gconst125*r20);
IkReal x6494=(gconst124*r01);
IkReal x6495=(gconst125*r00);
IkReal x6496=(gconst125*r10);
IkReal x6497=((1.0)*x6491);
IkReal x6498=((1.0)*cj1*cj2);
IkReal x6499=((1.0)*x6490);
IkReal x6500=(gconst124*x6490);
IkReal x6501=(gconst124*x6491);
evalcond[0]=((((-1.0)*r22*x6497))+((r21*x6500))+(((-1.0)*x6493*x6499)));
evalcond[1]=(cj0+(((-1.0)*r12*x6497))+(((-1.0)*x6496*x6499))+((r11*x6500)));
evalcond[2]=((((-1.0)*x6495*x6499))+(((-1.0)*sj0))+(((-1.0)*r02*x6497))+((x6490*x6494)));
evalcond[3]=(((cj2*sj1))+((r21*x6501))+((cj1*sj2))+(((-1.0)*x6493*x6497))+((r22*x6490)));
evalcond[4]=((((-1.0)*x6495*x6497))+((x6491*x6494))+((cj0*x6492))+((r02*x6490))+(((-1.0)*cj0*x6498)));
evalcond[5]=((((-1.0)*sj0*x6498))+((r12*x6490))+(((-1.0)*x6496*x6497))+((sj0*x6492))+((r11*x6501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6502=((1.0)*gconst125);
CheckValue<IkReal> x6503=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6502)))),-1);
if(!x6503.valid){
continue;
}
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6502))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6503.value)))+(x6504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6505=IKsin(j4);
IkReal x6506=IKcos(j4);
IkReal x6507=(sj1*sj2);
IkReal x6508=(gconst125*r20);
IkReal x6509=(gconst124*r01);
IkReal x6510=(gconst125*r00);
IkReal x6511=(gconst125*r10);
IkReal x6512=((1.0)*x6506);
IkReal x6513=((1.0)*cj1*cj2);
IkReal x6514=((1.0)*x6505);
IkReal x6515=(gconst124*x6505);
IkReal x6516=(gconst124*x6506);
evalcond[0]=((((-1.0)*r22*x6512))+((r21*x6515))+(((-1.0)*x6508*x6514)));
evalcond[1]=(cj0+((r11*x6515))+(((-1.0)*r12*x6512))+(((-1.0)*x6511*x6514)));
evalcond[2]=((((-1.0)*r02*x6512))+(((-1.0)*sj0))+(((-1.0)*x6510*x6514))+((x6505*x6509)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6505))+((r21*x6516))+(((-1.0)*x6508*x6512)));
evalcond[4]=((((-1.0)*cj0*x6513))+((r02*x6505))+((cj0*x6507))+(((-1.0)*x6510*x6512))+((x6506*x6509)));
evalcond[5]=(((r12*x6505))+((sj0*x6507))+((r11*x6516))+(((-1.0)*sj0*x6513))+(((-1.0)*x6511*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6517=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6517;
j4eval[1]=IKsign(x6517);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6518=((1.0)*cj5);
IkReal x6519=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6518)));
j4eval[0]=x6519;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6518))))));
j4eval[2]=IKsign(x6519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6520=cj5*cj5;
IkReal x6521=r11*r11;
IkReal x6522=(cj5*r10);
IkReal x6523=(r11*sj5);
IkReal x6524=((((-1.0)*x6520*(r10*r10)))+((x6520*x6521))+(((2.0)*x6522*x6523))+(((-1.0)*x6521))+(((-1.0)*(r12*r12))));
j4eval[0]=x6524;
j4eval[1]=IKsign(x6524);
j4eval[2]=((IKabs(r12))+(IKabs((x6523+(((-1.0)*x6522))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6525=cj5*cj5;
IkReal x6526=r11*r11;
IkReal x6527=(cj5*r10);
IkReal x6528=(r11*sj5);
CheckValue<IkReal> x6529=IKPowWithIntegerCheck(IKsign((((x6525*x6526))+(((2.0)*x6527*x6528))+(((-1.0)*x6526))+(((-1.0)*(r12*r12)))+(((-1.0)*x6525*(r10*r10))))),-1);
if(!x6529.valid){
continue;
}
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal((x6528+(((-1.0)*x6527)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6529.value)))+(x6530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6531=IKcos(j4);
IkReal x6532=IKsin(j4);
IkReal x6533=(cj5*r00);
IkReal x6534=(cj5*r10);
IkReal x6535=(r21*sj5);
IkReal x6536=(cj5*r20);
IkReal x6537=((1.0)*x6531);
IkReal x6538=((1.0)*x6532);
IkReal x6539=(sj5*x6532);
IkReal x6540=(sj5*x6531);
evalcond[0]=((((-1.0)*x6534*x6537))+((r11*x6540))+((r12*x6532)));
evalcond[1]=((((-1.0)*x6536*x6538))+(((-1.0)*r22*x6537))+((x6532*x6535)));
evalcond[2]=((((-1.0)*r02*x6537))+(((-1.0)*x6533*x6538))+((r01*x6539)));
evalcond[3]=((1.0)+(((-1.0)*x6534*x6538))+(((-1.0)*r12*x6537))+((r11*x6539)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6536*x6537))+((r22*x6532))+((x6531*x6535)));
evalcond[5]=(((r02*x6532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6533*x6537))+((r01*x6540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6541=((1.0)*cj5);
CheckValue<IkReal> x6542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6541)))),-1);
if(!x6542.valid){
continue;
}
CheckValue<IkReal> x6543 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6542.value)))+(x6543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6544=IKcos(j4);
IkReal x6545=IKsin(j4);
IkReal x6546=(cj5*r00);
IkReal x6547=(cj5*r10);
IkReal x6548=(r21*sj5);
IkReal x6549=(cj5*r20);
IkReal x6550=((1.0)*x6544);
IkReal x6551=((1.0)*x6545);
IkReal x6552=(sj5*x6545);
IkReal x6553=(sj5*x6544);
evalcond[0]=(((r11*x6553))+(((-1.0)*x6547*x6550))+((r12*x6545)));
evalcond[1]=((((-1.0)*r22*x6550))+((x6545*x6548))+(((-1.0)*x6549*x6551)));
evalcond[2]=((((-1.0)*x6546*x6551))+(((-1.0)*r02*x6550))+((r01*x6552)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6550))+((r11*x6552))+(((-1.0)*x6547*x6551)));
evalcond[4]=(((cj2*sj1))+((x6544*x6548))+((cj1*sj2))+((r22*x6545))+(((-1.0)*x6549*x6550)));
evalcond[5]=(((r02*x6545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6546*x6550))+((r01*x6553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6554.valid){
continue;
}
CheckValue<IkReal> x6555 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6554.value)))+(x6555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6556=IKcos(j4);
IkReal x6557=IKsin(j4);
IkReal x6558=(cj5*r00);
IkReal x6559=(cj5*r10);
IkReal x6560=(r21*sj5);
IkReal x6561=(cj5*r20);
IkReal x6562=((1.0)*x6556);
IkReal x6563=((1.0)*x6557);
IkReal x6564=(sj5*x6557);
IkReal x6565=(sj5*x6556);
evalcond[0]=(((r11*x6565))+((r12*x6557))+(((-1.0)*x6559*x6562)));
evalcond[1]=((((-1.0)*r22*x6562))+(((-1.0)*x6561*x6563))+((x6557*x6560)));
evalcond[2]=((((-1.0)*x6558*x6563))+(((-1.0)*r02*x6562))+((r01*x6564)));
evalcond[3]=((1.0)+((r11*x6564))+(((-1.0)*x6559*x6563))+(((-1.0)*r12*x6562)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6561*x6562))+((r22*x6557))+((x6556*x6560)));
evalcond[5]=(((r02*x6557))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6558*x6562))+((r01*x6565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6566=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6566;
j4eval[1]=IKsign(x6566);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6567=((1.0)*cj5);
IkReal x6568=((((-1.0)*r21*x6567))+(((-1.0)*r20*sj5)));
j4eval[0]=x6568;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6567))))));
j4eval[2]=IKsign(x6568);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6569=cj5*cj5;
IkReal x6570=r11*r11;
IkReal x6571=(r11*sj5);
IkReal x6572=(cj5*r10);
IkReal x6573=(((x6569*(r10*r10)))+(r12*r12)+x6570+(((-1.0)*x6569*x6570))+(((-2.0)*x6571*x6572)));
j4eval[0]=x6573;
j4eval[1]=IKsign(x6573);
j4eval[2]=((IKabs(r12))+(IKabs((x6571+(((-1.0)*x6572))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6574=cj5*cj5;
IkReal x6575=r11*r11;
IkReal x6576=(cj5*r10);
IkReal x6577=(r11*sj5);
CheckValue<IkReal> x6578=IKPowWithIntegerCheck(IKsign((((x6574*(r10*r10)))+(r12*r12)+x6575+(((-1.0)*x6574*x6575))+(((-2.0)*x6576*x6577)))),-1);
if(!x6578.valid){
continue;
}
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal((x6577+(((-1.0)*x6576)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6578.value)))+(x6579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6580=IKcos(j4);
IkReal x6581=IKsin(j4);
IkReal x6582=(cj5*r00);
IkReal x6583=(cj5*r10);
IkReal x6584=(r21*sj5);
IkReal x6585=(cj5*r20);
IkReal x6586=((1.0)*x6580);
IkReal x6587=((1.0)*x6581);
IkReal x6588=(sj5*x6581);
IkReal x6589=(sj5*x6580);
evalcond[0]=(((r11*x6589))+(((-1.0)*x6583*x6586))+((r12*x6581)));
evalcond[1]=(((x6581*x6584))+(((-1.0)*r22*x6586))+(((-1.0)*x6585*x6587)));
evalcond[2]=((((-1.0)*r02*x6586))+((r01*x6588))+(((-1.0)*x6582*x6587)));
evalcond[3]=((-1.0)+((r11*x6588))+(((-1.0)*r12*x6586))+(((-1.0)*x6583*x6587)));
evalcond[4]=(((cj2*sj1))+((r22*x6581))+((cj1*sj2))+((x6580*x6584))+(((-1.0)*x6585*x6586)));
evalcond[5]=(((r02*x6581))+(((-1.0)*sj1*sj2))+((r01*x6589))+(((-1.0)*x6582*x6586))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6590=((1.0)*cj5);
CheckValue<IkReal> x6591 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6590))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6591.valid){
continue;
}
CheckValue<IkReal> x6592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6590))+(((-1.0)*r20*sj5)))),-1);
if(!x6592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6591.value)+(((1.5707963267949)*(x6592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6593=IKcos(j4);
IkReal x6594=IKsin(j4);
IkReal x6595=(cj5*r00);
IkReal x6596=(cj5*r10);
IkReal x6597=(r21*sj5);
IkReal x6598=(cj5*r20);
IkReal x6599=((1.0)*x6593);
IkReal x6600=((1.0)*x6594);
IkReal x6601=(sj5*x6594);
IkReal x6602=(sj5*x6593);
evalcond[0]=(((r12*x6594))+(((-1.0)*x6596*x6599))+((r11*x6602)));
evalcond[1]=(((x6594*x6597))+(((-1.0)*x6598*x6600))+(((-1.0)*r22*x6599)));
evalcond[2]=((((-1.0)*x6595*x6600))+((r01*x6601))+(((-1.0)*r02*x6599)));
evalcond[3]=((-1.0)+(((-1.0)*x6596*x6600))+(((-1.0)*r12*x6599))+((r11*x6601)));
evalcond[4]=((((-1.0)*x6598*x6599))+((x6593*x6597))+((cj2*sj1))+((r22*x6594))+((cj1*sj2)));
evalcond[5]=(((r02*x6594))+((r01*x6602))+(((-1.0)*sj1*sj2))+(((-1.0)*x6595*x6599))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6603 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6603.valid){
continue;
}
CheckValue<IkReal> x6604=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6603.value)+(((1.5707963267949)*(x6604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6605=IKcos(j4);
IkReal x6606=IKsin(j4);
IkReal x6607=(cj5*r00);
IkReal x6608=(cj5*r10);
IkReal x6609=(r21*sj5);
IkReal x6610=(cj5*r20);
IkReal x6611=((1.0)*x6605);
IkReal x6612=((1.0)*x6606);
IkReal x6613=(sj5*x6606);
IkReal x6614=(sj5*x6605);
evalcond[0]=((((-1.0)*x6608*x6611))+((r11*x6614))+((r12*x6606)));
evalcond[1]=((((-1.0)*r22*x6611))+(((-1.0)*x6610*x6612))+((x6606*x6609)));
evalcond[2]=((((-1.0)*x6607*x6612))+((r01*x6613))+(((-1.0)*r02*x6611)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6611))+(((-1.0)*x6608*x6612))+((r11*x6613)));
evalcond[4]=(((cj2*sj1))+((x6605*x6609))+((r22*x6606))+((cj1*sj2))+(((-1.0)*x6610*x6611)));
evalcond[5]=((((-1.0)*x6607*x6611))+((r01*x6614))+(((-1.0)*sj1*sj2))+((r02*x6606))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6615=((-1.0)*r00);
IkReal x6617 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6617)==0){
continue;
}
IkReal x6616=pow(x6617,-0.5);
CheckValue<IkReal> x6618 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6615),IKFAST_ATAN2_MAGTHRESH);
if(!x6618.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6618.value));
IkReal gconst127=(r01*x6616);
IkReal gconst128=(x6615*x6616);
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6619.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6620=((-1.0)*r00);
IkReal x6621=x6616;
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6620),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
IkReal x6622=((-1.0)*(x6623.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6622;
IkReal gconst126=x6622;
IkReal gconst127=(r01*x6621);
IkReal gconst128=(x6620*x6621);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6624=((1.0)*sj0);
IkReal x6625=((1.0)*gconst127);
CheckValue<IkReal> x6626=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6625)))),-1);
if(!x6626.valid){
continue;
}
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6624))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6624))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6626.value)))+(x6627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6628=IKsin(j4);
IkReal x6629=IKcos(j4);
IkReal x6630=(gconst127*r01);
IkReal x6631=(sj1*sj2);
IkReal x6632=(gconst128*r10);
IkReal x6633=(gconst128*r00);
IkReal x6634=(gconst128*r20);
IkReal x6635=((1.0)*x6629);
IkReal x6636=((1.0)*cj1*cj2);
IkReal x6637=((1.0)*x6628);
IkReal x6638=(gconst127*x6629);
IkReal x6639=(gconst127*x6628);
evalcond[0]=((((-1.0)*r22*x6635))+((r21*x6639))+(((-1.0)*x6634*x6637)));
evalcond[1]=(cj0+((r11*x6639))+(((-1.0)*x6632*x6637))+(((-1.0)*r12*x6635)));
evalcond[2]=((((-1.0)*sj0))+((x6628*x6630))+(((-1.0)*r02*x6635))+(((-1.0)*x6633*x6637)));
evalcond[3]=(((cj2*sj1))+((r21*x6638))+((cj1*sj2))+(((-1.0)*x6634*x6635))+((r22*x6628)));
evalcond[4]=(((r02*x6628))+(((-1.0)*cj0*x6636))+(((-1.0)*x6633*x6635))+((x6629*x6630))+((cj0*x6631)));
evalcond[5]=(((r12*x6628))+((r11*x6638))+(((-1.0)*x6632*x6635))+(((-1.0)*sj0*x6636))+((sj0*x6631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6640=((1.0)*gconst128);
CheckValue<IkReal> x6641 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6641.valid){
continue;
}
CheckValue<IkReal> x6642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6640))+(((-1.0)*gconst127*r10)))),-1);
if(!x6642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6641.value)+(((1.5707963267949)*(x6642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6643=IKsin(j4);
IkReal x6644=IKcos(j4);
IkReal x6645=(gconst127*r01);
IkReal x6646=(sj1*sj2);
IkReal x6647=(gconst128*r10);
IkReal x6648=(gconst128*r00);
IkReal x6649=(gconst128*r20);
IkReal x6650=((1.0)*x6644);
IkReal x6651=((1.0)*cj1*cj2);
IkReal x6652=((1.0)*x6643);
IkReal x6653=(gconst127*x6644);
IkReal x6654=(gconst127*x6643);
evalcond[0]=((((-1.0)*r22*x6650))+(((-1.0)*x6649*x6652))+((r21*x6654)));
evalcond[1]=(cj0+((r11*x6654))+(((-1.0)*r12*x6650))+(((-1.0)*x6647*x6652)));
evalcond[2]=((((-1.0)*x6648*x6652))+(((-1.0)*sj0))+((x6643*x6645))+(((-1.0)*r02*x6650)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6649*x6650))+((cj1*sj2))+((r22*x6643))+((r21*x6653)));
evalcond[4]=((((-1.0)*x6648*x6650))+((x6644*x6645))+(((-1.0)*cj0*x6651))+((cj0*x6646))+((r02*x6643)));
evalcond[5]=(((r11*x6653))+(((-1.0)*sj0*x6651))+(((-1.0)*x6647*x6650))+((r12*x6643))+((sj0*x6646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6655=((-1.0)*r01);
IkReal x6657 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6657)==0){
continue;
}
IkReal x6656=pow(x6657,-0.5);
CheckValue<IkReal> x6658 = IKatan2WithCheck(IkReal(x6655),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6658.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6658.value))));
IkReal gconst130=(x6655*x6656);
IkReal gconst131=((1.0)*r00*x6656);
CheckValue<IkReal> x6659 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6659.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6660=((-1.0)*r01);
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal(x6660),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
IkReal x6661=((1.0)*(x6663.value));
IkReal x6662=x6656;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6661)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6661)));
IkReal gconst130=(x6660*x6662);
IkReal gconst131=((1.0)*r00*x6662);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6664=((-1.0)*r01);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal(x6664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
IkReal x6665=((1.0)*(x6667.value));
IkReal x6666=x6656;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6665)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6665)));
IkReal gconst130=(x6664*x6666);
IkReal gconst131=((1.0)*r00*x6666);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6668=((-1.0)*r01);
CheckValue<IkReal> x6671 = IKatan2WithCheck(IkReal(x6668),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6671.valid){
continue;
}
IkReal x6669=((1.0)*(x6671.value));
IkReal x6670=x6656;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6669)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6669)));
IkReal gconst130=(x6668*x6670);
IkReal gconst131=((1.0)*r00*x6670);
IkReal x6672=r02*r02;
IkReal x6673=(r12*sj0);
IkReal x6674=((1.0)*cj0);
IkReal x6675=x6656;
j4eval[0]=((IKabs(((((-1.0)*r02*x6674))+(((-1.0)*x6673)))))+(IKabs((((r02*x6673*x6675))+(((-1.0)*x6674*x6675))+((cj0*x6672*x6675))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6676=((1.0)*sj0);
IkReal x6677=((1.0)*gconst130);
CheckValue<IkReal> x6678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6677))+(((-1.0)*gconst131*r21)))),-1);
if(!x6678.valid){
continue;
}
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6676))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6676))+(((-1.0)*cj0*r01*x6677))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6678.value)))+(x6679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6680=IKsin(j4);
IkReal x6681=IKcos(j4);
IkReal x6682=(gconst131*r10);
IkReal x6683=(sj1*sj2);
IkReal x6684=(gconst131*r20);
IkReal x6685=(gconst131*r00);
IkReal x6686=((1.0)*x6681);
IkReal x6687=((1.0)*cj1*cj2);
IkReal x6688=(gconst130*x6680);
IkReal x6689=((1.0)*x6680);
IkReal x6690=(gconst130*x6681);
evalcond[0]=(((r21*x6688))+(((-1.0)*x6684*x6689))+(((-1.0)*r22*x6686)));
evalcond[1]=(cj0+((r11*x6688))+(((-1.0)*x6682*x6689))+(((-1.0)*r12*x6686)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6686))+((r01*x6688))+(((-1.0)*x6685*x6689)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6680))+(((-1.0)*x6684*x6686))+((r21*x6690)));
evalcond[4]=(((r02*x6680))+(((-1.0)*cj0*x6687))+((r01*x6690))+(((-1.0)*x6685*x6686))+((cj0*x6683)));
evalcond[5]=(((r12*x6680))+((r11*x6690))+((sj0*x6683))+(((-1.0)*sj0*x6687))+(((-1.0)*x6682*x6686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6691=((1.0)*gconst131);
CheckValue<IkReal> x6692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6691))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6692.valid){
continue;
}
CheckValue<IkReal> x6693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6691)))),-1);
if(!x6693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6692.value)+(((1.5707963267949)*(x6693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6694=IKsin(j4);
IkReal x6695=IKcos(j4);
IkReal x6696=(gconst131*r10);
IkReal x6697=(sj1*sj2);
IkReal x6698=(gconst131*r20);
IkReal x6699=(gconst131*r00);
IkReal x6700=((1.0)*x6695);
IkReal x6701=((1.0)*cj1*cj2);
IkReal x6702=(gconst130*x6694);
IkReal x6703=((1.0)*x6694);
IkReal x6704=(gconst130*x6695);
evalcond[0]=(((r21*x6702))+(((-1.0)*x6698*x6703))+(((-1.0)*r22*x6700)));
evalcond[1]=((((-1.0)*x6696*x6703))+cj0+((r11*x6702))+(((-1.0)*r12*x6700)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6700))+((r01*x6702))+(((-1.0)*x6699*x6703)));
evalcond[3]=(((cj2*sj1))+((r21*x6704))+((r22*x6694))+(((-1.0)*x6698*x6700))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x6701))+((cj0*x6697))+((r01*x6704))+(((-1.0)*x6699*x6700))+((r02*x6694)));
evalcond[5]=((((-1.0)*x6696*x6700))+((r12*x6694))+((sj0*x6697))+((r11*x6704))+(((-1.0)*sj0*x6701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6705=((1.0)*gconst131);
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6705))+(((-1.0)*gconst130*r00)))),-1);
if(!x6707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6706.value)+(((1.5707963267949)*(x6707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6708=IKsin(j4);
IkReal x6709=IKcos(j4);
IkReal x6710=(gconst131*r10);
IkReal x6711=(sj1*sj2);
IkReal x6712=(gconst131*r20);
IkReal x6713=(gconst131*r00);
IkReal x6714=((1.0)*x6709);
IkReal x6715=((1.0)*cj1*cj2);
IkReal x6716=(gconst130*x6708);
IkReal x6717=((1.0)*x6708);
IkReal x6718=(gconst130*x6709);
evalcond[0]=((((-1.0)*x6712*x6717))+((r21*x6716))+(((-1.0)*r22*x6714)));
evalcond[1]=(cj0+((r11*x6716))+(((-1.0)*x6710*x6717))+(((-1.0)*r12*x6714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6713*x6717))+(((-1.0)*r02*x6714))+((r01*x6716)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6712*x6714))+((r21*x6718))+((r22*x6708)));
evalcond[4]=(((cj0*x6711))+(((-1.0)*x6713*x6714))+(((-1.0)*cj0*x6715))+((r01*x6718))+((r02*x6708)));
evalcond[5]=((((-1.0)*sj0*x6715))+((r11*x6718))+(((-1.0)*x6710*x6714))+((r12*x6708))+((sj0*x6711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6719=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6719;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6720=((1.0)*cj5);
IkReal x6721=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6720)));
j4eval[0]=x6721;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6720))+((r21*sj5))))));
j4eval[2]=IKsign(x6721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6722=cj5*cj5;
IkReal x6723=r01*r01;
IkReal x6724=(cj5*r00);
IkReal x6725=(r01*sj5);
IkReal x6726=(x6723+((x6722*(r00*r00)))+(((-2.0)*x6724*x6725))+(r02*r02)+(((-1.0)*x6722*x6723)));
j4eval[0]=x6726;
j4eval[1]=IKsign(x6726);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6724))+x6725))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6727=cj5*cj5;
IkReal x6728=r01*r01;
IkReal x6729=(r01*sj5);
IkReal x6730=(cj5*r00);
CheckValue<IkReal> x6731 = IKatan2WithCheck(IkReal(((((-1.0)*x6730))+x6729)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6731.valid){
continue;
}
CheckValue<IkReal> x6732=IKPowWithIntegerCheck(IKsign((((x6727*(r00*r00)))+x6728+(((-1.0)*x6727*x6728))+(r02*r02)+(((-2.0)*x6729*x6730)))),-1);
if(!x6732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6731.value)+(((1.5707963267949)*(x6732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6733=IKcos(j4);
IkReal x6734=IKsin(j4);
IkReal x6735=(cj5*r00);
IkReal x6736=(cj5*r10);
IkReal x6737=(r21*sj5);
IkReal x6738=(cj5*r20);
IkReal x6739=((1.0)*x6733);
IkReal x6740=((1.0)*x6734);
IkReal x6741=(sj5*x6734);
IkReal x6742=(sj5*x6733);
evalcond[0]=((((-1.0)*x6735*x6739))+((r01*x6742))+((r02*x6734)));
evalcond[1]=((((-1.0)*r22*x6739))+((x6734*x6737))+(((-1.0)*x6738*x6740)));
evalcond[2]=((((-1.0)*r12*x6739))+((r11*x6741))+(((-1.0)*x6736*x6740)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6739))+((r01*x6741))+(((-1.0)*x6735*x6740)));
evalcond[4]=(((r22*x6734))+((cj2*sj1))+((cj1*sj2))+((x6733*x6737))+(((-1.0)*x6738*x6739)));
evalcond[5]=(((r11*x6742))+((r12*x6734))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6736*x6739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6743=((1.0)*cj5);
CheckValue<IkReal> x6744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6743))+(((-1.0)*r10*sj5)))),-1);
if(!x6744.valid){
continue;
}
CheckValue<IkReal> x6745 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6744.value)))+(x6745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6746=IKcos(j4);
IkReal x6747=IKsin(j4);
IkReal x6748=(cj5*r00);
IkReal x6749=(cj5*r10);
IkReal x6750=(r21*sj5);
IkReal x6751=(cj5*r20);
IkReal x6752=((1.0)*x6746);
IkReal x6753=((1.0)*x6747);
IkReal x6754=(sj5*x6747);
IkReal x6755=(sj5*x6746);
evalcond[0]=(((r02*x6747))+((r01*x6755))+(((-1.0)*x6748*x6752)));
evalcond[1]=((((-1.0)*r22*x6752))+(((-1.0)*x6751*x6753))+((x6747*x6750)));
evalcond[2]=(((r11*x6754))+(((-1.0)*x6749*x6753))+(((-1.0)*r12*x6752)));
evalcond[3]=((-1.0)+((r01*x6754))+(((-1.0)*x6748*x6753))+(((-1.0)*r02*x6752)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6746*x6750))+(((-1.0)*x6751*x6752))+((r22*x6747)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6755))+((r12*x6747))+(((-1.0)*x6749*x6752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6756=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6756.valid){
continue;
}
CheckValue<IkReal> x6757 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6756.value)))+(x6757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6758=IKcos(j4);
IkReal x6759=IKsin(j4);
IkReal x6760=(cj5*r00);
IkReal x6761=(cj5*r10);
IkReal x6762=(r21*sj5);
IkReal x6763=(cj5*r20);
IkReal x6764=((1.0)*x6758);
IkReal x6765=((1.0)*x6759);
IkReal x6766=(sj5*x6759);
IkReal x6767=(sj5*x6758);
evalcond[0]=((((-1.0)*x6760*x6764))+((r01*x6767))+((r02*x6759)));
evalcond[1]=(((x6759*x6762))+(((-1.0)*r22*x6764))+(((-1.0)*x6763*x6765)));
evalcond[2]=(((r11*x6766))+(((-1.0)*r12*x6764))+(((-1.0)*x6761*x6765)));
evalcond[3]=((-1.0)+(((-1.0)*x6760*x6765))+((r01*x6766))+(((-1.0)*r02*x6764)));
evalcond[4]=(((x6758*x6762))+((cj2*sj1))+((r22*x6759))+((cj1*sj2))+(((-1.0)*x6763*x6764)));
evalcond[5]=(((r12*x6759))+(((-1.0)*cj1*cj2))+((r11*x6767))+((sj1*sj2))+(((-1.0)*x6761*x6764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6768=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6768;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6769=((1.0)*cj5);
IkReal x6770=((((-1.0)*r20*sj5))+(((-1.0)*r21*x6769)));
j4eval[0]=x6770;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6769))))));
j4eval[2]=IKsign(x6770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6771=(r01*sj5);
IkReal x6772=(cj1*sj2);
IkReal x6773=(cj2*sj1);
IkReal x6774=((1.0)*r02);
IkReal x6775=((1.0)*cj5*r00);
IkReal x6776=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6776;
j4eval[1]=((IKabs(((((-1.0)*x6773*x6774))+(((-1.0)*x6772*x6774)))))+(IKabs((((x6771*x6773))+((x6771*x6772))+(((-1.0)*x6773*x6775))+(((-1.0)*x6772*x6775))))));
j4eval[2]=IKsign(x6776);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6777=(r01*sj5);
IkReal x6778=(cj1*sj2);
IkReal x6779=(cj2*sj1);
IkReal x6780=((1.0)*r02);
IkReal x6781=((1.0)*cj5*r00);
CheckValue<IkReal> x6782 = IKatan2WithCheck(IkReal((((x6777*x6779))+((x6777*x6778))+(((-1.0)*x6778*x6781))+(((-1.0)*x6779*x6781)))),IkReal(((((-1.0)*x6778*x6780))+(((-1.0)*x6779*x6780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6782.valid){
continue;
}
CheckValue<IkReal> x6783=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6782.value)+(((1.5707963267949)*(x6783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6784=IKcos(j4);
IkReal x6785=IKsin(j4);
IkReal x6786=(cj5*r00);
IkReal x6787=(cj5*r10);
IkReal x6788=(r21*sj5);
IkReal x6789=(cj5*r20);
IkReal x6790=((1.0)*x6784);
IkReal x6791=((1.0)*x6785);
IkReal x6792=(sj5*x6785);
IkReal x6793=(sj5*x6784);
evalcond[0]=(((r01*x6793))+((r02*x6785))+(((-1.0)*x6786*x6790)));
evalcond[1]=((((-1.0)*x6789*x6791))+(((-1.0)*r22*x6790))+((x6785*x6788)));
evalcond[2]=(((r11*x6792))+(((-1.0)*x6787*x6791))+(((-1.0)*r12*x6790)));
evalcond[3]=((1.0)+((r01*x6792))+(((-1.0)*x6786*x6791))+(((-1.0)*r02*x6790)));
evalcond[4]=(((x6784*x6788))+((cj2*sj1))+(((-1.0)*x6789*x6790))+((cj1*sj2))+((r22*x6785)));
evalcond[5]=(((r12*x6785))+(((-1.0)*sj1*sj2))+((r11*x6793))+((cj1*cj2))+(((-1.0)*x6787*x6790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6794=((1.0)*cj5);
CheckValue<IkReal> x6795 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6794))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6795.valid){
continue;
}
CheckValue<IkReal> x6796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6794))+(((-1.0)*r20*sj5)))),-1);
if(!x6796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6795.value)+(((1.5707963267949)*(x6796.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6797=IKcos(j4);
IkReal x6798=IKsin(j4);
IkReal x6799=(cj5*r00);
IkReal x6800=(cj5*r10);
IkReal x6801=(r21*sj5);
IkReal x6802=(cj5*r20);
IkReal x6803=((1.0)*x6797);
IkReal x6804=((1.0)*x6798);
IkReal x6805=(sj5*x6798);
IkReal x6806=(sj5*x6797);
evalcond[0]=(((r02*x6798))+((r01*x6806))+(((-1.0)*x6799*x6803)));
evalcond[1]=((((-1.0)*r22*x6803))+(((-1.0)*x6802*x6804))+((x6798*x6801)));
evalcond[2]=((((-1.0)*r12*x6803))+((r11*x6805))+(((-1.0)*x6800*x6804)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6803))+((r01*x6805))+(((-1.0)*x6799*x6804)));
evalcond[4]=(((cj2*sj1))+((r22*x6798))+((cj1*sj2))+(((-1.0)*x6802*x6803))+((x6797*x6801)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6806))+((r12*x6798))+((cj1*cj2))+(((-1.0)*x6800*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6807 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6807.valid){
continue;
}
CheckValue<IkReal> x6808=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6807.value)+(((1.5707963267949)*(x6808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6809=IKcos(j4);
IkReal x6810=IKsin(j4);
IkReal x6811=(cj5*r00);
IkReal x6812=(cj5*r10);
IkReal x6813=(r21*sj5);
IkReal x6814=(cj5*r20);
IkReal x6815=((1.0)*x6809);
IkReal x6816=((1.0)*x6810);
IkReal x6817=(sj5*x6810);
IkReal x6818=(sj5*x6809);
evalcond[0]=(((r02*x6810))+(((-1.0)*x6811*x6815))+((r01*x6818)));
evalcond[1]=(((x6810*x6813))+(((-1.0)*x6814*x6816))+(((-1.0)*r22*x6815)));
evalcond[2]=(((r11*x6817))+(((-1.0)*x6812*x6816))+(((-1.0)*r12*x6815)));
evalcond[3]=((1.0)+(((-1.0)*x6811*x6816))+(((-1.0)*r02*x6815))+((r01*x6817)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6810))+((x6809*x6813))+(((-1.0)*x6814*x6815)));
evalcond[5]=(((r11*x6818))+((r12*x6810))+(((-1.0)*sj1*sj2))+(((-1.0)*x6812*x6815))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6819=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6819);
rxp1_1=(px*r21);
rxp1_2=(r11*x6819);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6820=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6820);
rxp1_1=(px*r21);
rxp1_2=(r11*x6820);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6821=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6821);
rxp1_1=(px*r21);
rxp1_2=(r11*x6821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6824=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6824.valid){
continue;
}
IkReal x6822=x6824.value;
IkReal x6823=(sj0*x6822);
cj4array[0]=(((cj1*cj2*x6823))+(((-1.0)*sj1*sj2*x6823)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6825=IKsin(j4);
IkReal x6826=IKcos(j4);
IkReal x6827=(r21*sj5);
IkReal x6828=((1.0)*cj5*r20);
evalcond[0]=(r02*x6825);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6826)));
evalcond[2]=(((x6825*x6827))+(((-1.0)*x6825*x6828)));
evalcond[3]=(((r11*sj5*x6825))+(((-1.0)*cj5*r10*x6825)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6826*x6827))+(((-1.0)*x6826*x6828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6831=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6831.valid){
continue;
}
IkReal x6829=x6831.value;
IkReal x6830=((1.0)*x6829);
cj4array[0]=((((-1.0)*cj2*sj1*x6830))+(((-1.0)*cj1*sj2*x6830)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6832=IKsin(j4);
IkReal x6833=IKcos(j4);
IkReal x6834=((1.0)*sj0);
IkReal x6835=((1.0)*cj5);
IkReal x6836=(sj5*x6832);
evalcond[0]=(r02*x6832);
evalcond[1]=((((-1.0)*r02*x6833))+(((-1.0)*x6834)));
evalcond[2]=(((r21*x6836))+(((-1.0)*r20*x6832*x6835)));
evalcond[3]=(((r11*x6836))+(((-1.0)*r10*x6832*x6835)));
evalcond[4]=((((-1.0)*cj1*cj2*x6834))+((sj0*sj1*sj2))+((r11*sj5*x6833))+(((-1.0)*r10*x6833*x6835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6837=IKPowWithIntegerCheck(r02,-1);
if(!x6837.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6837.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6838=IKsin(j4);
IkReal x6839=IKcos(j4);
IkReal x6840=(r21*sj5);
IkReal x6841=((1.0)*cj5);
IkReal x6842=(r11*sj5);
evalcond[0]=(r02*x6838);
evalcond[1]=(((x6838*x6840))+(((-1.0)*r20*x6838*x6841)));
evalcond[2]=(((x6838*x6842))+(((-1.0)*r10*x6838*x6841)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x6839*x6841))+((cj1*sj2))+((x6839*x6840)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6839*x6842))+((sj0*sj1*sj2))+(((-1.0)*r10*x6839*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6843=((1.0)*sj0);
IkReal x6844=((1.0)*cj0);
CheckValue<IkReal> x6845 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6843))+(((-1.0)*r02*x6844)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6844))+(((-1.0)*r11*sj5*x6843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6845.valid){
continue;
}
CheckValue<IkReal> x6846=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6845.value)+(((1.5707963267949)*(x6846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6847=IKsin(j4);
IkReal x6848=IKcos(j4);
IkReal x6849=(cj5*r00);
IkReal x6850=(cj5*r10);
IkReal x6851=(r21*sj5);
IkReal x6852=(sj1*sj2);
IkReal x6853=(cj5*r20);
IkReal x6854=((1.0)*x6848);
IkReal x6855=((1.0)*cj1*cj2);
IkReal x6856=((1.0)*x6847);
IkReal x6857=(sj5*x6847);
IkReal x6858=(sj5*x6848);
evalcond[0]=((((-1.0)*r22*x6854))+((x6847*x6851))+(((-1.0)*x6853*x6856)));
evalcond[1]=(cj0+(((-1.0)*r12*x6854))+((r11*x6857))+(((-1.0)*x6850*x6856)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6854))+((r01*x6857))+(((-1.0)*x6849*x6856)));
evalcond[3]=(((cj2*sj1))+((r22*x6847))+((cj1*sj2))+((x6848*x6851))+(((-1.0)*x6853*x6854)));
evalcond[4]=(((r01*x6858))+(((-1.0)*cj0*x6855))+((cj0*x6852))+(((-1.0)*x6849*x6854))+((r02*x6847)));
evalcond[5]=(((sj0*x6852))+((r12*x6847))+((r11*x6858))+(((-1.0)*x6850*x6854))+(((-1.0)*sj0*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6859=((1.0)*cj5);
CheckValue<IkReal> x6860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6859))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6860.valid){
continue;
}
CheckValue<IkReal> x6861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6859)))),-1);
if(!x6861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6860.value)+(((1.5707963267949)*(x6861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6862=IKsin(j4);
IkReal x6863=IKcos(j4);
IkReal x6864=(cj5*r00);
IkReal x6865=(cj5*r10);
IkReal x6866=(r21*sj5);
IkReal x6867=(sj1*sj2);
IkReal x6868=(cj5*r20);
IkReal x6869=((1.0)*x6863);
IkReal x6870=((1.0)*cj1*cj2);
IkReal x6871=((1.0)*x6862);
IkReal x6872=(sj5*x6862);
IkReal x6873=(sj5*x6863);
evalcond[0]=((((-1.0)*x6868*x6871))+(((-1.0)*r22*x6869))+((x6862*x6866)));
evalcond[1]=(((r11*x6872))+cj0+(((-1.0)*x6865*x6871))+(((-1.0)*r12*x6869)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6864*x6871))+(((-1.0)*r02*x6869))+((r01*x6872)));
evalcond[3]=(((cj2*sj1))+((r22*x6862))+(((-1.0)*x6868*x6869))+((cj1*sj2))+((x6863*x6866)));
evalcond[4]=(((r02*x6862))+((cj0*x6867))+(((-1.0)*x6864*x6869))+((r01*x6873))+(((-1.0)*cj0*x6870)));
evalcond[5]=(((sj0*x6867))+((r11*x6873))+(((-1.0)*x6865*x6869))+((r12*x6862))+(((-1.0)*sj0*x6870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6874=((1.0)*cj5);
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6874))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6874))+(((-1.0)*r00*sj5)))),-1);
if(!x6876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6875.value)+(((1.5707963267949)*(x6876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6877=IKsin(j4);
IkReal x6878=IKcos(j4);
IkReal x6879=(cj5*r00);
IkReal x6880=(cj5*r10);
IkReal x6881=(r21*sj5);
IkReal x6882=(sj1*sj2);
IkReal x6883=(cj5*r20);
IkReal x6884=((1.0)*x6878);
IkReal x6885=((1.0)*cj1*cj2);
IkReal x6886=((1.0)*x6877);
IkReal x6887=(sj5*x6877);
IkReal x6888=(sj5*x6878);
evalcond[0]=(((x6877*x6881))+(((-1.0)*x6883*x6886))+(((-1.0)*r22*x6884)));
evalcond[1]=(((r11*x6887))+cj0+(((-1.0)*x6880*x6886))+(((-1.0)*r12*x6884)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6884))+(((-1.0)*x6879*x6886))+((r01*x6887)));
evalcond[3]=(((cj2*sj1))+((r22*x6877))+((cj1*sj2))+((x6878*x6881))+(((-1.0)*x6883*x6884)));
evalcond[4]=(((r02*x6877))+((cj0*x6882))+(((-1.0)*x6879*x6884))+((r01*x6888))+(((-1.0)*cj0*x6885)));
evalcond[5]=(((r11*x6888))+((r12*x6877))+((sj0*x6882))+(((-1.0)*sj0*x6885))+(((-1.0)*x6880*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6889=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6889;
j0eval[1]=IKsign(x6889);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6890=cj5*cj5;
IkReal x6891=r21*r21;
IkReal x6892=(cj2*sj1);
IkReal x6893=(cj1*sj2);
IkReal x6894=(r21*sj5);
IkReal x6895=((1.0)*cj5*r20);
IkReal x6896=((r22*r22)+(((-2.0)*cj5*r20*x6894))+((x6890*(r20*r20)))+x6891+(((-1.0)*x6890*x6891)));
j4eval[0]=x6896;
j4eval[1]=IKsign(x6896);
j4eval[2]=((IKabs((((x6893*x6894))+((x6892*x6894))+(((-1.0)*x6892*x6895))+(((-1.0)*x6893*x6895)))))+(IKabs((((r22*x6893))+((r22*x6892))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6897=cj1*cj1;
IkReal x6898=(cj2*sj2);
IkReal x6899=(cj2*sj1);
IkReal x6900=(cj1*sj1);
j0eval[0]=((((-2.0)*x6897*x6898))+(((-1.14255568581477)*sj2*x6897))+x6898+x6900+(((-2.0)*cj1*cj2*x6899))+(((-1.14255568581477)*cj1*x6899)));
j0eval[1]=((((-1.0)*x6899))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6901=IKsin(j0);
IkReal x6902=IKcos(j0);
evalcond[0]=((((-0.11235)*x6901))+(((-1.0)*px))+(((0.4569)*x6902)));
evalcond[1]=((((-1.0)*py))+(((0.4569)*x6901))+(((0.11235)*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6903=((1.0)*cj5);
IkReal x6904=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6903)));
j4eval[0]=x6904;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6903)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6905=((1.0)*cj5);
IkReal x6906=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6905)));
j4eval[0]=x6906;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6905))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6907=cj5*cj5;
IkReal x6908=((1.0)*sj5);
IkReal x6909=(cj5*r20);
IkReal x6910=(r11*r21);
IkReal x6911=((((-1.0)*x6907*x6910))+((r12*r22))+((r10*r20*x6907))+x6910+(((-1.0)*r11*x6908*x6909))+(((-1.0)*cj5*r10*r21*x6908)));
j4eval[0]=x6911;
j4eval[1]=IKsign(x6911);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6908))+((cj0*x6909)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6912=cj5*cj5;
IkReal x6913=((1.0)*sj5);
IkReal x6914=(cj5*r20);
IkReal x6915=(r11*r21);
CheckValue<IkReal> x6916 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6913))+((cj0*x6914)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6916.valid){
continue;
}
CheckValue<IkReal> x6917=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6912*x6915))+(((-1.0)*r11*x6913*x6914))+((r12*r22))+((r10*r20*x6912))+(((-1.0)*cj5*r10*r21*x6913))+x6915)),-1);
if(!x6917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6916.value)+(((1.5707963267949)*(x6917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6918=IKsin(j4);
IkReal x6919=IKcos(j4);
IkReal x6920=((1.0)*sj0);
IkReal x6921=(cj5*r00);
IkReal x6922=(r11*sj5);
IkReal x6923=(cj5*r10);
IkReal x6924=(r21*sj5);
IkReal x6925=(cj5*r20);
IkReal x6926=(r01*sj5);
IkReal x6927=((1.0)*x6919);
IkReal x6928=((1.0)*x6918);
evalcond[0]=((((-1.0)*r22*x6927))+(((-1.0)*x6925*x6928))+((x6918*x6924)));
evalcond[1]=((((-1.0)*r22*x6928))+(((-1.0)*x6924*x6927))+((x6919*x6925)));
evalcond[2]=(cj0+(((-1.0)*r12*x6927))+(((-1.0)*x6923*x6928))+((x6918*x6922)));
evalcond[3]=((((-1.0)*r02*x6927))+(((-1.0)*x6920))+(((-1.0)*x6921*x6928))+((x6918*x6926)));
evalcond[4]=((((-1.0)*r02*x6928))+((x6919*x6921))+(((-1.0)*x6926*x6927))+(((-1.0)*cj0)));
evalcond[5]=(((x6919*x6923))+(((-1.0)*r12*x6928))+(((-1.0)*x6920))+(((-1.0)*x6922*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6929=((1.0)*cj5);
CheckValue<IkReal> x6930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6929)))),-1);
if(!x6930.valid){
continue;
}
CheckValue<IkReal> x6931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6929)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6930.value)))+(x6931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6932=IKsin(j4);
IkReal x6933=IKcos(j4);
IkReal x6934=((1.0)*sj0);
IkReal x6935=(cj5*r00);
IkReal x6936=(r11*sj5);
IkReal x6937=(cj5*r10);
IkReal x6938=(r21*sj5);
IkReal x6939=(cj5*r20);
IkReal x6940=(r01*sj5);
IkReal x6941=((1.0)*x6933);
IkReal x6942=((1.0)*x6932);
evalcond[0]=(((x6932*x6938))+(((-1.0)*r22*x6941))+(((-1.0)*x6939*x6942)));
evalcond[1]=(((x6933*x6939))+(((-1.0)*r22*x6942))+(((-1.0)*x6938*x6941)));
evalcond[2]=(cj0+(((-1.0)*r12*x6941))+((x6932*x6936))+(((-1.0)*x6937*x6942)));
evalcond[3]=(((x6932*x6940))+(((-1.0)*r02*x6941))+(((-1.0)*x6935*x6942))+(((-1.0)*x6934)));
evalcond[4]=(((x6933*x6935))+(((-1.0)*r02*x6942))+(((-1.0)*x6940*x6941))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6942))+((x6933*x6937))+(((-1.0)*x6934))+(((-1.0)*x6936*x6941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6943=((1.0)*cj5);
CheckValue<IkReal> x6944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6943)))),-1);
if(!x6944.valid){
continue;
}
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6944.value)))+(x6945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6946=IKsin(j4);
IkReal x6947=IKcos(j4);
IkReal x6948=((1.0)*sj0);
IkReal x6949=(cj5*r00);
IkReal x6950=(r11*sj5);
IkReal x6951=(cj5*r10);
IkReal x6952=(r21*sj5);
IkReal x6953=(cj5*r20);
IkReal x6954=(r01*sj5);
IkReal x6955=((1.0)*x6947);
IkReal x6956=((1.0)*x6946);
evalcond[0]=(((x6946*x6952))+(((-1.0)*r22*x6955))+(((-1.0)*x6953*x6956)));
evalcond[1]=((((-1.0)*x6952*x6955))+((x6947*x6953))+(((-1.0)*r22*x6956)));
evalcond[2]=((((-1.0)*x6951*x6956))+cj0+(((-1.0)*r12*x6955))+((x6946*x6950)));
evalcond[3]=((((-1.0)*x6948))+((x6946*x6954))+(((-1.0)*r02*x6955))+(((-1.0)*x6949*x6956)));
evalcond[4]=((((-1.0)*r02*x6956))+((x6947*x6949))+(((-1.0)*cj0))+(((-1.0)*x6954*x6955)));
evalcond[5]=((((-1.0)*x6950*x6955))+(((-1.0)*r12*x6956))+(((-1.0)*x6948))+((x6947*x6951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6957=IKsin(j0);
IkReal x6958=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.0304)*x6958))+(((-0.11235)*x6957)));
evalcond[1]=((((-1.0)*py))+(((0.0304)*x6957))+(((0.11235)*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6959=((1.0)*cj5);
IkReal x6960=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6959)));
j4eval[0]=x6960;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6959)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6961=cj5*cj5;
IkReal x6962=((1.0)*r21);
IkReal x6963=(cj5*sj5);
IkReal x6964=((1.0)*r20);
IkReal x6965=((((-1.0)*r01*x6963*x6964))+(((-1.0)*r01*x6961*x6962))+((r01*r21))+((r00*r20*x6961))+(((-1.0)*r00*x6962*x6963))+((r02*r22)));
j4eval[0]=x6965;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6964))))));
j4eval[2]=IKsign(x6965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6966=cj5*cj5;
IkReal x6967=(r21*sj5);
IkReal x6968=(r11*r21);
IkReal x6969=((1.0)*cj5*r20);
IkReal x6970=((((-1.0)*cj5*r10*x6967))+((r12*r22))+(((-1.0)*r11*sj5*x6969))+x6968+(((-1.0)*x6966*x6968))+((r10*r20*x6966)));
j4eval[0]=x6970;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6967))+(((-1.0)*sj0*x6969))))));
j4eval[2]=IKsign(x6970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6971=cj5*cj5;
IkReal x6972=(r21*sj5);
IkReal x6973=(r11*r21);
IkReal x6974=((1.0)*cj5*r20);
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6972))+(((-1.0)*sj0*x6974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(IKsign((((r10*r20*x6971))+(((-1.0)*cj5*r10*x6972))+(((-1.0)*x6971*x6973))+(((-1.0)*r11*sj5*x6974))+((r12*r22))+x6973)),-1);
if(!x6976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6975.value)+(((1.5707963267949)*(x6976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6977=IKsin(j4);
IkReal x6978=IKcos(j4);
IkReal x6979=(r11*sj5);
IkReal x6980=(cj5*r00);
IkReal x6981=(cj5*r10);
IkReal x6982=(r21*sj5);
IkReal x6983=(cj5*r20);
IkReal x6984=(r01*sj5);
IkReal x6985=((1.0)*x6978);
IkReal x6986=((1.0)*x6977);
evalcond[0]=((((-1.0)*r22*x6985))+((x6977*x6982))+(((-1.0)*x6983*x6986)));
evalcond[1]=((((-1.0)*r22*x6986))+((x6978*x6983))+(((-1.0)*x6982*x6985)));
evalcond[2]=(cj0+(((-1.0)*r12*x6985))+(((-1.0)*x6981*x6986))+((x6977*x6979)));
evalcond[3]=(cj0+(((-1.0)*x6984*x6985))+((x6978*x6980))+(((-1.0)*r02*x6986)));
evalcond[4]=(sj0+(((-1.0)*r12*x6986))+(((-1.0)*x6979*x6985))+((x6978*x6981)));
evalcond[5]=((((-1.0)*sj0))+((x6977*x6984))+(((-1.0)*x6980*x6986))+(((-1.0)*r02*x6985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6987=cj5*cj5;
IkReal x6988=((1.0)*r21);
IkReal x6989=(cj5*sj5);
IkReal x6990=((1.0)*r20);
CheckValue<IkReal> x6991=IKPowWithIntegerCheck(IKsign((((r00*r20*x6987))+((r01*r21))+(((-1.0)*r01*x6989*x6990))+(((-1.0)*r01*x6987*x6988))+(((-1.0)*r00*x6988*x6989))+((r02*r22)))),-1);
if(!x6991.valid){
continue;
}
CheckValue<IkReal> x6992 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6991.value)))+(x6992.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6993=IKsin(j4);
IkReal x6994=IKcos(j4);
IkReal x6995=(r11*sj5);
IkReal x6996=(cj5*r00);
IkReal x6997=(cj5*r10);
IkReal x6998=(r21*sj5);
IkReal x6999=(cj5*r20);
IkReal x7000=(r01*sj5);
IkReal x7001=((1.0)*x6994);
IkReal x7002=((1.0)*x6993);
evalcond[0]=((((-1.0)*r22*x7001))+(((-1.0)*x6999*x7002))+((x6993*x6998)));
evalcond[1]=((((-1.0)*r22*x7002))+((x6994*x6999))+(((-1.0)*x6998*x7001)));
evalcond[2]=((((-1.0)*r12*x7001))+cj0+((x6993*x6995))+(((-1.0)*x6997*x7002)));
evalcond[3]=((((-1.0)*r02*x7002))+((x6994*x6996))+cj0+(((-1.0)*x7000*x7001)));
evalcond[4]=((((-1.0)*r12*x7002))+((x6994*x6997))+sj0+(((-1.0)*x6995*x7001)));
evalcond[5]=((((-1.0)*r02*x7001))+(((-1.0)*sj0))+((x6993*x7000))+(((-1.0)*x6996*x7002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7003=((1.0)*cj5);
CheckValue<IkReal> x7004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7003)))),-1);
if(!x7004.valid){
continue;
}
CheckValue<IkReal> x7005 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7004.value)))+(x7005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7006=IKsin(j4);
IkReal x7007=IKcos(j4);
IkReal x7008=(r11*sj5);
IkReal x7009=(cj5*r00);
IkReal x7010=(cj5*r10);
IkReal x7011=(r21*sj5);
IkReal x7012=(cj5*r20);
IkReal x7013=(r01*sj5);
IkReal x7014=((1.0)*x7007);
IkReal x7015=((1.0)*x7006);
evalcond[0]=((((-1.0)*r22*x7014))+(((-1.0)*x7012*x7015))+((x7006*x7011)));
evalcond[1]=((((-1.0)*r22*x7015))+(((-1.0)*x7011*x7014))+((x7007*x7012)));
evalcond[2]=(cj0+(((-1.0)*x7010*x7015))+(((-1.0)*r12*x7014))+((x7006*x7008)));
evalcond[3]=(cj0+((x7007*x7009))+(((-1.0)*x7013*x7014))+(((-1.0)*r02*x7015)));
evalcond[4]=(sj0+(((-1.0)*x7008*x7014))+((x7007*x7010))+(((-1.0)*r12*x7015)));
evalcond[5]=((((-1.0)*x7009*x7015))+(((-1.0)*sj0))+((x7006*x7013))+(((-1.0)*r02*x7014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7016=((1.0)*sj5);
IkReal x7017=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7017))+(((-1.0)*r10*x7016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7016))+(((-1.0)*r01*x7017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7017))+(((-1.0)*r10*x7016))))+IKsqr(((((-1.0)*r00*x7016))+(((-1.0)*r01*x7017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7017))+(((-1.0)*r10*x7016))), ((((-1.0)*r00*x7016))+(((-1.0)*r01*x7017))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7018=IKsin(j0);
IkReal x7019=IKcos(j0);
IkReal x7020=((1.0)*cj5);
IkReal x7021=((0.08535)*sj5);
IkReal x7022=((0.08535)*cj5);
IkReal x7023=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x7023))+(((-1.0)*r01*x7020))+(((-1.0)*x7019)));
evalcond[1]=((((-1.0)*r11*x7020))+(((-1.0)*r10*x7023))+(((-1.0)*x7018)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r00*x7021))+(((-1.0)*r01*x7022))+(((-0.11235)*x7018)));
evalcond[3]=((((-1.0)*r11*x7022))+(((-1.0)*r10*x7021))+(((-1.0)*py))+(((0.11235)*x7019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7024=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7024;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7025=((1.0)*cj5);
IkReal x7026=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7025)));
j4eval[0]=x7026;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7025)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7027=cj5*cj5;
IkReal x7028=r21*r21;
IkReal x7029=(r21*sj5);
IkReal x7030=(cj5*r20);
IkReal x7031=((((-2.0)*x7029*x7030))+x7028+(((-1.0)*x7027*x7028))+(r22*r22)+((x7027*(r20*r20))));
j4eval[0]=x7031;
j4eval[1]=IKsign(x7031);
j4eval[2]=((IKabs((x7029+(((-1.0)*x7030)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7032=cj5*cj5;
IkReal x7033=r21*r21;
IkReal x7034=(r21*sj5);
IkReal x7035=(cj5*r20);
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal(r22),IkReal((x7034+(((-1.0)*x7035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
CheckValue<IkReal> x7037=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7034*x7035))+x7033+(((-1.0)*x7032*x7033))+(r22*r22)+((x7032*(r20*r20))))),-1);
if(!x7037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7036.value)+(((1.5707963267949)*(x7037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7038=IKsin(j4);
IkReal x7039=IKcos(j4);
IkReal x7040=(r11*sj5);
IkReal x7041=(r21*sj5);
IkReal x7042=(cj5*r00);
IkReal x7043=(cj5*r20);
IkReal x7044=(r01*sj5);
IkReal x7045=(cj5*r10);
IkReal x7046=((1.0)*x7039);
IkReal x7047=((1.0)*x7038);
evalcond[0]=((((-1.0)*r22*x7046))+(((-1.0)*x7043*x7047))+((x7038*x7041)));
evalcond[1]=(((x7039*x7042))+(((-1.0)*r02*x7047))+(((-1.0)*x7044*x7046)));
evalcond[2]=(((x7039*x7045))+(((-1.0)*r12*x7047))+(((-1.0)*x7040*x7046)));
evalcond[3]=(cj0+(((-1.0)*r12*x7046))+(((-1.0)*x7045*x7047))+((x7038*x7040)));
evalcond[4]=((1.0)+((x7039*x7043))+(((-1.0)*r22*x7047))+(((-1.0)*x7041*x7046)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7046))+(((-1.0)*x7042*x7047))+((x7038*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7048=((1.0)*cj5);
CheckValue<IkReal> x7049 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7049.valid){
continue;
}
CheckValue<IkReal> x7050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7048)))),-1);
if(!x7050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7049.value)+(((1.5707963267949)*(x7050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7051=IKsin(j4);
IkReal x7052=IKcos(j4);
IkReal x7053=(r11*sj5);
IkReal x7054=(r21*sj5);
IkReal x7055=(cj5*r00);
IkReal x7056=(cj5*r20);
IkReal x7057=(r01*sj5);
IkReal x7058=(cj5*r10);
IkReal x7059=((1.0)*x7052);
IkReal x7060=((1.0)*x7051);
evalcond[0]=((((-1.0)*x7056*x7060))+((x7051*x7054))+(((-1.0)*r22*x7059)));
evalcond[1]=((((-1.0)*r02*x7060))+(((-1.0)*x7057*x7059))+((x7052*x7055)));
evalcond[2]=((((-1.0)*r12*x7060))+(((-1.0)*x7053*x7059))+((x7052*x7058)));
evalcond[3]=(((x7051*x7053))+cj0+(((-1.0)*x7058*x7060))+(((-1.0)*r12*x7059)));
evalcond[4]=((1.0)+(((-1.0)*x7054*x7059))+(((-1.0)*r22*x7060))+((x7052*x7056)));
evalcond[5]=((((-1.0)*sj0))+((x7051*x7057))+(((-1.0)*x7055*x7060))+(((-1.0)*r02*x7059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7061.value)+(((1.5707963267949)*(x7062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7063=IKsin(j4);
IkReal x7064=IKcos(j4);
IkReal x7065=(r11*sj5);
IkReal x7066=(r21*sj5);
IkReal x7067=(cj5*r00);
IkReal x7068=(cj5*r20);
IkReal x7069=(r01*sj5);
IkReal x7070=(cj5*r10);
IkReal x7071=((1.0)*x7064);
IkReal x7072=((1.0)*x7063);
evalcond[0]=(((x7063*x7066))+(((-1.0)*x7068*x7072))+(((-1.0)*r22*x7071)));
evalcond[1]=((((-1.0)*x7069*x7071))+((x7064*x7067))+(((-1.0)*r02*x7072)));
evalcond[2]=((((-1.0)*x7065*x7071))+((x7064*x7070))+(((-1.0)*r12*x7072)));
evalcond[3]=(cj0+((x7063*x7065))+(((-1.0)*x7070*x7072))+(((-1.0)*r12*x7071)));
evalcond[4]=((1.0)+(((-1.0)*x7066*x7071))+((x7064*x7068))+(((-1.0)*r22*x7072)));
evalcond[5]=((((-1.0)*sj0))+((x7063*x7069))+(((-1.0)*x7067*x7072))+(((-1.0)*r02*x7071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7073=IKcos(j0);
IkReal x7074=IKsin(j0);
evalcond[0]=((((-0.11235)*x7074))+(((-1.0)*px))+(((-0.21325)*x7073)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x7073))+(((-0.21325)*x7074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7075=((1.0)*cj5);
IkReal x7076=((((-1.0)*r01*x7075))+(((-1.0)*r00*sj5)));
j4eval[0]=x7076;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7075)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7077=cj5*cj5;
IkReal x7078=((1.0)*r21);
IkReal x7079=(cj5*sj5);
IkReal x7080=((1.0)*r20);
IkReal x7081=((((-1.0)*r01*x7077*x7078))+((r01*r21))+(((-1.0)*r00*x7078*x7079))+((r02*r22))+(((-1.0)*r01*x7079*x7080))+((r00*r20*x7077)));
j4eval[0]=x7081;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7080)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7082=cj5*cj5;
IkReal x7083=(r21*sj5);
IkReal x7084=(r11*r21);
IkReal x7085=((1.0)*cj5*r20);
IkReal x7086=(x7084+(((-1.0)*cj5*r10*x7083))+((r12*r22))+((r10*r20*x7082))+(((-1.0)*x7082*x7084))+(((-1.0)*r11*sj5*x7085)));
j4eval[0]=x7086;
j4eval[1]=((IKabs((((sj0*x7083))+(((-1.0)*sj0*x7085)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7087=cj5*cj5;
IkReal x7088=(r21*sj5);
IkReal x7089=(r11*r21);
IkReal x7090=((1.0)*cj5*r20);
CheckValue<IkReal> x7091=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7087*x7089))+x7089+(((-1.0)*cj5*r10*x7088))+((r12*r22))+((r10*r20*x7087))+(((-1.0)*r11*sj5*x7090)))),-1);
if(!x7091.valid){
continue;
}
CheckValue<IkReal> x7092 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7088))+(((-1.0)*sj0*x7090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7091.value)))+(x7092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7093=IKsin(j4);
IkReal x7094=IKcos(j4);
IkReal x7095=(r11*sj5);
IkReal x7096=(cj5*r00);
IkReal x7097=(cj5*r10);
IkReal x7098=(r21*sj5);
IkReal x7099=(cj5*r20);
IkReal x7100=(r01*sj5);
IkReal x7101=((1.0)*x7094);
IkReal x7102=((1.0)*x7093);
evalcond[0]=(((x7093*x7098))+(((-1.0)*r22*x7101))+(((-1.0)*x7099*x7102)));
evalcond[1]=((((-1.0)*r22*x7102))+(((-1.0)*x7098*x7101))+((x7094*x7099)));
evalcond[2]=(cj0+(((-1.0)*r12*x7101))+((x7093*x7095))+(((-1.0)*x7097*x7102)));
evalcond[3]=(cj0+(((-1.0)*x7100*x7101))+(((-1.0)*r02*x7102))+((x7094*x7096)));
evalcond[4]=(sj0+(((-1.0)*r12*x7102))+(((-1.0)*x7095*x7101))+((x7094*x7097)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7101))+((x7093*x7100))+(((-1.0)*x7096*x7102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7103=cj5*cj5;
IkReal x7104=((1.0)*r21);
IkReal x7105=(cj5*sj5);
IkReal x7106=((1.0)*r20);
CheckValue<IkReal> x7107 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7107.valid){
continue;
}
CheckValue<IkReal> x7108=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7103*x7104))+(((-1.0)*r01*x7105*x7106))+((r00*r20*x7103))+(((-1.0)*r00*x7104*x7105))+((r02*r22)))),-1);
if(!x7108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7107.value)+(((1.5707963267949)*(x7108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7109=IKsin(j4);
IkReal x7110=IKcos(j4);
IkReal x7111=(r11*sj5);
IkReal x7112=(cj5*r00);
IkReal x7113=(cj5*r10);
IkReal x7114=(r21*sj5);
IkReal x7115=(cj5*r20);
IkReal x7116=(r01*sj5);
IkReal x7117=((1.0)*x7110);
IkReal x7118=((1.0)*x7109);
evalcond[0]=((((-1.0)*x7115*x7118))+((x7109*x7114))+(((-1.0)*r22*x7117)));
evalcond[1]=(((x7110*x7115))+(((-1.0)*r22*x7118))+(((-1.0)*x7114*x7117)));
evalcond[2]=(cj0+(((-1.0)*r12*x7117))+((x7109*x7111))+(((-1.0)*x7113*x7118)));
evalcond[3]=((((-1.0)*x7116*x7117))+cj0+((x7110*x7112))+(((-1.0)*r02*x7118)));
evalcond[4]=(sj0+((x7110*x7113))+(((-1.0)*x7111*x7117))+(((-1.0)*r12*x7118)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7112*x7118))+((x7109*x7116))+(((-1.0)*r02*x7117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7119=((1.0)*cj5);
CheckValue<IkReal> x7120=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7119)))),-1);
if(!x7120.valid){
continue;
}
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7120.value)))+(x7121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7122=IKsin(j4);
IkReal x7123=IKcos(j4);
IkReal x7124=(r11*sj5);
IkReal x7125=(cj5*r00);
IkReal x7126=(cj5*r10);
IkReal x7127=(r21*sj5);
IkReal x7128=(cj5*r20);
IkReal x7129=(r01*sj5);
IkReal x7130=((1.0)*x7123);
IkReal x7131=((1.0)*x7122);
evalcond[0]=((((-1.0)*r22*x7130))+(((-1.0)*x7128*x7131))+((x7122*x7127)));
evalcond[1]=((((-1.0)*x7127*x7130))+((x7123*x7128))+(((-1.0)*r22*x7131)));
evalcond[2]=((((-1.0)*r12*x7130))+cj0+(((-1.0)*x7126*x7131))+((x7122*x7124)));
evalcond[3]=(cj0+((x7123*x7125))+(((-1.0)*x7129*x7130))+(((-1.0)*r02*x7131)));
evalcond[4]=(sj0+(((-1.0)*r12*x7131))+((x7123*x7126))+(((-1.0)*x7124*x7130)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7125*x7131))+(((-1.0)*r02*x7130))+((x7122*x7129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7132=IKsin(j0);
IkReal x7133=IKcos(j0);
IkReal x7134=((1.0)*cj5);
IkReal x7135=((0.08535)*sj5);
IkReal x7136=((0.08535)*cj5);
IkReal x7137=((1.0)*sj5);
evalcond[0]=(x7133+(((-1.0)*r01*x7134))+(((-1.0)*r00*x7137)));
evalcond[1]=(x7132+(((-1.0)*r10*x7137))+(((-1.0)*r11*x7134)));
evalcond[2]=((((-1.0)*r01*x7136))+(((-1.0)*r00*x7135))+(((-0.11235)*x7132))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r10*x7135))+(((-1.0)*r11*x7136))+(((-1.0)*py))+(((0.11235)*x7133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7138=((1.0)*sj5);
IkReal x7139=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7138)));
j4eval[0]=x7139;
j4eval[1]=IKsign(x7139);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7138))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7140=((1.0)*cj5);
IkReal x7141=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7140)));
j4eval[0]=x7141;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7140))))));
j4eval[2]=IKsign(x7141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7142=r21*r21;
IkReal x7143=cj5*cj5;
IkReal x7144=(r21*sj5);
IkReal x7145=(cj5*r20);
IkReal x7146=((((2.0)*x7144*x7145))+(((-1.0)*x7142))+(((-1.0)*(r22*r22)))+(((-1.0)*x7143*(r20*r20)))+((x7142*x7143)));
j4eval[0]=x7146;
j4eval[1]=((IKabs((x7144+(((-1.0)*x7145)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7147=r21*r21;
IkReal x7148=cj5*cj5;
IkReal x7149=(r21*sj5);
IkReal x7150=(cj5*r20);
CheckValue<IkReal> x7151 = IKatan2WithCheck(IkReal(r22),IkReal((x7149+(((-1.0)*x7150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7151.valid){
continue;
}
CheckValue<IkReal> x7152=IKPowWithIntegerCheck(IKsign((((x7147*x7148))+(((-1.0)*x7148*(r20*r20)))+(((-1.0)*x7147))+(((-1.0)*(r22*r22)))+(((2.0)*x7149*x7150)))),-1);
if(!x7152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7151.value)+(((1.5707963267949)*(x7152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7153=IKsin(j4);
IkReal x7154=IKcos(j4);
IkReal x7155=(r11*sj5);
IkReal x7156=(r21*sj5);
IkReal x7157=(cj5*r00);
IkReal x7158=(cj5*r20);
IkReal x7159=(r01*sj5);
IkReal x7160=(cj5*r10);
IkReal x7161=((1.0)*x7154);
IkReal x7162=((1.0)*x7153);
evalcond[0]=((((-1.0)*r22*x7161))+(((-1.0)*x7158*x7162))+((x7153*x7156)));
evalcond[1]=((((-1.0)*r02*x7162))+(((-1.0)*x7159*x7161))+((x7154*x7157)));
evalcond[2]=((((-1.0)*x7155*x7161))+((x7154*x7160))+(((-1.0)*r12*x7162)));
evalcond[3]=(cj0+(((-1.0)*x7160*x7162))+((x7153*x7155))+(((-1.0)*r12*x7161)));
evalcond[4]=((-1.0)+(((-1.0)*x7156*x7161))+(((-1.0)*r22*x7162))+((x7154*x7158)));
evalcond[5]=((((-1.0)*r02*x7161))+(((-1.0)*sj0))+(((-1.0)*x7157*x7162))+((x7153*x7159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7163=((1.0)*cj5);
CheckValue<IkReal> x7164 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7164.valid){
continue;
}
CheckValue<IkReal> x7165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7163)))),-1);
if(!x7165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7164.value)+(((1.5707963267949)*(x7165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7166=IKsin(j4);
IkReal x7167=IKcos(j4);
IkReal x7168=(r11*sj5);
IkReal x7169=(r21*sj5);
IkReal x7170=(cj5*r00);
IkReal x7171=(cj5*r20);
IkReal x7172=(r01*sj5);
IkReal x7173=(cj5*r10);
IkReal x7174=((1.0)*x7167);
IkReal x7175=((1.0)*x7166);
evalcond[0]=((((-1.0)*x7171*x7175))+(((-1.0)*r22*x7174))+((x7166*x7169)));
evalcond[1]=((((-1.0)*r02*x7175))+((x7167*x7170))+(((-1.0)*x7172*x7174)));
evalcond[2]=((((-1.0)*x7168*x7174))+(((-1.0)*r12*x7175))+((x7167*x7173)));
evalcond[3]=(cj0+(((-1.0)*x7173*x7175))+(((-1.0)*r12*x7174))+((x7166*x7168)));
evalcond[4]=((-1.0)+(((-1.0)*x7169*x7174))+(((-1.0)*r22*x7175))+((x7167*x7171)));
evalcond[5]=((((-1.0)*x7170*x7175))+(((-1.0)*sj0))+((x7166*x7172))+(((-1.0)*r02*x7174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7176=((1.0)*sj5);
CheckValue<IkReal> x7177=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7176)))),-1);
if(!x7177.valid){
continue;
}
CheckValue<IkReal> x7178 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7176))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7177.value)))+(x7178.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7179=IKsin(j4);
IkReal x7180=IKcos(j4);
IkReal x7181=(r11*sj5);
IkReal x7182=(r21*sj5);
IkReal x7183=(cj5*r00);
IkReal x7184=(cj5*r20);
IkReal x7185=(r01*sj5);
IkReal x7186=(cj5*r10);
IkReal x7187=((1.0)*x7180);
IkReal x7188=((1.0)*x7179);
evalcond[0]=(((x7179*x7182))+(((-1.0)*x7184*x7188))+(((-1.0)*r22*x7187)));
evalcond[1]=((((-1.0)*x7185*x7187))+((x7180*x7183))+(((-1.0)*r02*x7188)));
evalcond[2]=(((x7180*x7186))+(((-1.0)*x7181*x7187))+(((-1.0)*r12*x7188)));
evalcond[3]=(((x7179*x7181))+cj0+(((-1.0)*x7186*x7188))+(((-1.0)*r12*x7187)));
evalcond[4]=((-1.0)+(((-1.0)*x7182*x7187))+((x7180*x7184))+(((-1.0)*r22*x7188)));
evalcond[5]=((((-1.0)*sj0))+((x7179*x7185))+(((-1.0)*x7183*x7188))+(((-1.0)*r02*x7187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7189=IKcos(j0);
IkReal x7190=IKsin(j0);
evalcond[0]=((((0.21325)*x7189))+(((-1.0)*px))+(((-0.11235)*x7190)));
evalcond[1]=((((0.11235)*x7189))+(((-1.0)*py))+(((0.21325)*x7190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7191=((1.0)*cj5);
IkReal x7192=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7191)));
j4eval[0]=x7192;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7191)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7193=((1.0)*cj5);
IkReal x7194=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7193)));
j4eval[0]=x7194;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7193)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7195=cj5*cj5;
IkReal x7196=((1.0)*sj5);
IkReal x7197=(cj5*r20);
IkReal x7198=(r11*r21);
IkReal x7199=(x7198+((r12*r22))+(((-1.0)*x7195*x7198))+(((-1.0)*r11*x7196*x7197))+((r10*r20*x7195))+(((-1.0)*cj5*r10*r21*x7196)));
j4eval[0]=x7199;
j4eval[1]=IKsign(x7199);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7196))+((cj0*x7197))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7200=cj5*cj5;
IkReal x7201=((1.0)*sj5);
IkReal x7202=(cj5*r20);
IkReal x7203=(r11*r21);
CheckValue<IkReal> x7204 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7201))+((cj0*x7202)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7204.valid){
continue;
}
CheckValue<IkReal> x7205=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7201*x7202))+x7203+((r10*r20*x7200))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7201))+(((-1.0)*x7200*x7203)))),-1);
if(!x7205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7204.value)+(((1.5707963267949)*(x7205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7206=IKsin(j4);
IkReal x7207=IKcos(j4);
IkReal x7208=((1.0)*sj0);
IkReal x7209=(cj5*r00);
IkReal x7210=(r11*sj5);
IkReal x7211=(cj5*r10);
IkReal x7212=(r21*sj5);
IkReal x7213=(cj5*r20);
IkReal x7214=(r01*sj5);
IkReal x7215=((1.0)*x7207);
IkReal x7216=((1.0)*x7206);
evalcond[0]=((((-1.0)*x7213*x7216))+((x7206*x7212))+(((-1.0)*r22*x7215)));
evalcond[1]=((((-1.0)*x7212*x7215))+((x7207*x7213))+(((-1.0)*r22*x7216)));
evalcond[2]=(cj0+((x7206*x7210))+(((-1.0)*r12*x7215))+(((-1.0)*x7211*x7216)));
evalcond[3]=(((x7206*x7214))+(((-1.0)*x7209*x7216))+(((-1.0)*r02*x7215))+(((-1.0)*x7208)));
evalcond[4]=(((x7207*x7209))+(((-1.0)*x7214*x7215))+(((-1.0)*r02*x7216))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7216))+((x7207*x7211))+(((-1.0)*x7210*x7215))+(((-1.0)*x7208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7217=((1.0)*cj5);
CheckValue<IkReal> x7218 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7217))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7218.valid){
continue;
}
CheckValue<IkReal> x7219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7217)))),-1);
if(!x7219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7218.value)+(((1.5707963267949)*(x7219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7220=IKsin(j4);
IkReal x7221=IKcos(j4);
IkReal x7222=((1.0)*sj0);
IkReal x7223=(cj5*r00);
IkReal x7224=(r11*sj5);
IkReal x7225=(cj5*r10);
IkReal x7226=(r21*sj5);
IkReal x7227=(cj5*r20);
IkReal x7228=(r01*sj5);
IkReal x7229=((1.0)*x7221);
IkReal x7230=((1.0)*x7220);
evalcond[0]=((((-1.0)*x7227*x7230))+((x7220*x7226))+(((-1.0)*r22*x7229)));
evalcond[1]=(((x7221*x7227))+(((-1.0)*r22*x7230))+(((-1.0)*x7226*x7229)));
evalcond[2]=(cj0+(((-1.0)*x7225*x7230))+(((-1.0)*r12*x7229))+((x7220*x7224)));
evalcond[3]=((((-1.0)*r02*x7229))+(((-1.0)*x7223*x7230))+(((-1.0)*x7222))+((x7220*x7228)));
evalcond[4]=(((x7221*x7223))+(((-1.0)*x7228*x7229))+(((-1.0)*r02*x7230))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7224*x7229))+((x7221*x7225))+(((-1.0)*x7222))+(((-1.0)*r12*x7230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7231=((1.0)*cj5);
CheckValue<IkReal> x7232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7232.valid){
continue;
}
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7231)))),-1);
if(!x7233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7232.value)+(((1.5707963267949)*(x7233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7234=IKsin(j4);
IkReal x7235=IKcos(j4);
IkReal x7236=((1.0)*sj0);
IkReal x7237=(cj5*r00);
IkReal x7238=(r11*sj5);
IkReal x7239=(cj5*r10);
IkReal x7240=(r21*sj5);
IkReal x7241=(cj5*r20);
IkReal x7242=(r01*sj5);
IkReal x7243=((1.0)*x7235);
IkReal x7244=((1.0)*x7234);
evalcond[0]=((((-1.0)*r22*x7243))+((x7234*x7240))+(((-1.0)*x7241*x7244)));
evalcond[1]=(((x7235*x7241))+(((-1.0)*r22*x7244))+(((-1.0)*x7240*x7243)));
evalcond[2]=((((-1.0)*r12*x7243))+cj0+(((-1.0)*x7239*x7244))+((x7234*x7238)));
evalcond[3]=((((-1.0)*x7237*x7244))+(((-1.0)*r02*x7243))+((x7234*x7242))+(((-1.0)*x7236)));
evalcond[4]=(((x7235*x7237))+(((-1.0)*x7242*x7243))+(((-1.0)*r02*x7244))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7244))+((x7235*x7239))+(((-1.0)*x7238*x7243))+(((-1.0)*x7236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7245=IKcos(j0);
IkReal x7246=IKsin(j0);
evalcond[0]=((((-0.11235)*x7246))+(((-0.4569)*x7245))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x7245))+(((-0.4569)*x7246))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7247=((1.0)*cj5);
IkReal x7248=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7247)));
j4eval[0]=x7248;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7247)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7249=cj5*cj5;
IkReal x7250=((1.0)*r21);
IkReal x7251=(cj5*sj5);
IkReal x7252=((1.0)*r20);
IkReal x7253=((((-1.0)*r01*x7251*x7252))+(((-1.0)*r00*x7250*x7251))+((r01*r21))+((r00*r20*x7249))+((r02*r22))+(((-1.0)*r01*x7249*x7250)));
j4eval[0]=x7253;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7252)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7254=cj5*cj5;
IkReal x7255=(r21*sj5);
IkReal x7256=(r11*r21);
IkReal x7257=((1.0)*cj5*r20);
IkReal x7258=(x7256+(((-1.0)*x7254*x7256))+(((-1.0)*r11*sj5*x7257))+((r12*r22))+(((-1.0)*cj5*r10*x7255))+((r10*r20*x7254)));
j4eval[0]=x7258;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7255))+(((-1.0)*sj0*x7257))))));
j4eval[2]=IKsign(x7258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7259=cj5*cj5;
IkReal x7260=(r21*sj5);
IkReal x7261=(r11*r21);
IkReal x7262=((1.0)*cj5*r20);
CheckValue<IkReal> x7263 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7260))+(((-1.0)*sj0*x7262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7263.valid){
continue;
}
CheckValue<IkReal> x7264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7262))+(((-1.0)*cj5*r10*x7260))+x7261+((r12*r22))+((r10*r20*x7259))+(((-1.0)*x7259*x7261)))),-1);
if(!x7264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7263.value)+(((1.5707963267949)*(x7264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7265=IKsin(j4);
IkReal x7266=IKcos(j4);
IkReal x7267=(r11*sj5);
IkReal x7268=(cj5*r00);
IkReal x7269=(cj5*r10);
IkReal x7270=(r21*sj5);
IkReal x7271=(cj5*r20);
IkReal x7272=(r01*sj5);
IkReal x7273=((1.0)*x7266);
IkReal x7274=((1.0)*x7265);
evalcond[0]=(((x7265*x7270))+(((-1.0)*r22*x7273))+(((-1.0)*x7271*x7274)));
evalcond[1]=((((-1.0)*r22*x7274))+(((-1.0)*x7270*x7273))+((x7266*x7271)));
evalcond[2]=(cj0+(((-1.0)*r12*x7273))+((x7265*x7267))+(((-1.0)*x7269*x7274)));
evalcond[3]=(cj0+(((-1.0)*x7272*x7273))+(((-1.0)*r02*x7274))+((x7266*x7268)));
evalcond[4]=((((-1.0)*x7267*x7273))+sj0+(((-1.0)*r12*x7274))+((x7266*x7269)));
evalcond[5]=(((x7265*x7272))+(((-1.0)*sj0))+(((-1.0)*r02*x7273))+(((-1.0)*x7268*x7274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7275=cj5*cj5;
IkReal x7276=((1.0)*r21);
IkReal x7277=(cj5*sj5);
IkReal x7278=((1.0)*r20);
CheckValue<IkReal> x7279=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7277*x7278))+(((-1.0)*r00*x7276*x7277))+((r00*r20*x7275))+((r02*r22))+(((-1.0)*r01*x7275*x7276)))),-1);
if(!x7279.valid){
continue;
}
CheckValue<IkReal> x7280 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7279.value)))+(x7280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7281=IKsin(j4);
IkReal x7282=IKcos(j4);
IkReal x7283=(r11*sj5);
IkReal x7284=(cj5*r00);
IkReal x7285=(cj5*r10);
IkReal x7286=(r21*sj5);
IkReal x7287=(cj5*r20);
IkReal x7288=(r01*sj5);
IkReal x7289=((1.0)*x7282);
IkReal x7290=((1.0)*x7281);
evalcond[0]=(((x7281*x7286))+(((-1.0)*x7287*x7290))+(((-1.0)*r22*x7289)));
evalcond[1]=((((-1.0)*r22*x7290))+((x7282*x7287))+(((-1.0)*x7286*x7289)));
evalcond[2]=(((x7281*x7283))+(((-1.0)*x7285*x7290))+cj0+(((-1.0)*r12*x7289)));
evalcond[3]=(((x7282*x7284))+cj0+(((-1.0)*x7288*x7289))+(((-1.0)*r02*x7290)));
evalcond[4]=(sj0+((x7282*x7285))+(((-1.0)*x7283*x7289))+(((-1.0)*r12*x7290)));
evalcond[5]=(((x7281*x7288))+(((-1.0)*sj0))+(((-1.0)*x7284*x7290))+(((-1.0)*r02*x7289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7291=((1.0)*cj5);
CheckValue<IkReal> x7292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7292.valid){
continue;
}
CheckValue<IkReal> x7293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7291))+(((-1.0)*r00*sj5)))),-1);
if(!x7293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7292.value)+(((1.5707963267949)*(x7293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7294=IKsin(j4);
IkReal x7295=IKcos(j4);
IkReal x7296=(r11*sj5);
IkReal x7297=(cj5*r00);
IkReal x7298=(cj5*r10);
IkReal x7299=(r21*sj5);
IkReal x7300=(cj5*r20);
IkReal x7301=(r01*sj5);
IkReal x7302=((1.0)*x7295);
IkReal x7303=((1.0)*x7294);
evalcond[0]=((((-1.0)*x7300*x7303))+(((-1.0)*r22*x7302))+((x7294*x7299)));
evalcond[1]=(((x7295*x7300))+(((-1.0)*x7299*x7302))+(((-1.0)*r22*x7303)));
evalcond[2]=(cj0+(((-1.0)*r12*x7302))+(((-1.0)*x7298*x7303))+((x7294*x7296)));
evalcond[3]=((((-1.0)*r02*x7303))+cj0+(((-1.0)*x7301*x7302))+((x7295*x7297)));
evalcond[4]=(sj0+(((-1.0)*x7296*x7302))+(((-1.0)*r12*x7303))+((x7295*x7298)));
evalcond[5]=((((-1.0)*r02*x7302))+(((-1.0)*x7297*x7303))+(((-1.0)*sj0))+((x7294*x7301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7304=IKcos(j0);
IkReal x7305=IKsin(j0);
evalcond[0]=((((-0.0304)*x7304))+(((-0.11235)*x7305))+(((-1.0)*px)));
evalcond[1]=((((-0.0304)*x7305))+(((-1.0)*py))+(((0.11235)*x7304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7306=((1.0)*cj5);
IkReal x7307=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7306)));
j4eval[0]=x7307;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7306)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7308=((1.0)*cj5);
IkReal x7309=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7308)));
j4eval[0]=x7309;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7308))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7310=cj5*cj5;
IkReal x7311=((1.0)*sj5);
IkReal x7312=(cj5*r20);
IkReal x7313=(r11*r21);
IkReal x7314=(x7313+((r12*r22))+((r10*r20*x7310))+(((-1.0)*r11*x7311*x7312))+(((-1.0)*x7310*x7313))+(((-1.0)*cj5*r10*r21*x7311)));
j4eval[0]=x7314;
j4eval[1]=IKsign(x7314);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7311))+((cj0*x7312)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7315=cj5*cj5;
IkReal x7316=((1.0)*sj5);
IkReal x7317=(cj5*r20);
IkReal x7318=(r11*r21);
CheckValue<IkReal> x7319 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7316))+((cj0*x7317)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7319.valid){
continue;
}
CheckValue<IkReal> x7320=IKPowWithIntegerCheck(IKsign((x7318+((r12*r22))+(((-1.0)*r11*x7316*x7317))+((r10*r20*x7315))+(((-1.0)*cj5*r10*r21*x7316))+(((-1.0)*x7315*x7318)))),-1);
if(!x7320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7319.value)+(((1.5707963267949)*(x7320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7321=IKsin(j4);
IkReal x7322=IKcos(j4);
IkReal x7323=((1.0)*sj0);
IkReal x7324=(cj5*r00);
IkReal x7325=(r11*sj5);
IkReal x7326=(cj5*r10);
IkReal x7327=(r21*sj5);
IkReal x7328=(cj5*r20);
IkReal x7329=(r01*sj5);
IkReal x7330=((1.0)*x7322);
IkReal x7331=((1.0)*x7321);
evalcond[0]=((((-1.0)*x7328*x7331))+((x7321*x7327))+(((-1.0)*r22*x7330)));
evalcond[1]=((((-1.0)*x7327*x7330))+((x7322*x7328))+(((-1.0)*r22*x7331)));
evalcond[2]=(cj0+(((-1.0)*x7326*x7331))+(((-1.0)*r12*x7330))+((x7321*x7325)));
evalcond[3]=((((-1.0)*r02*x7330))+(((-1.0)*x7323))+(((-1.0)*x7324*x7331))+((x7321*x7329)));
evalcond[4]=((((-1.0)*r02*x7331))+(((-1.0)*x7329*x7330))+((x7322*x7324))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7325*x7330))+(((-1.0)*r12*x7331))+(((-1.0)*x7323))+((x7322*x7326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7332=((1.0)*cj5);
CheckValue<IkReal> x7333 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7332))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7333.valid){
continue;
}
CheckValue<IkReal> x7334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7332)))),-1);
if(!x7334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7333.value)+(((1.5707963267949)*(x7334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7335=IKsin(j4);
IkReal x7336=IKcos(j4);
IkReal x7337=((1.0)*sj0);
IkReal x7338=(cj5*r00);
IkReal x7339=(r11*sj5);
IkReal x7340=(cj5*r10);
IkReal x7341=(r21*sj5);
IkReal x7342=(cj5*r20);
IkReal x7343=(r01*sj5);
IkReal x7344=((1.0)*x7336);
IkReal x7345=((1.0)*x7335);
evalcond[0]=((((-1.0)*r22*x7344))+(((-1.0)*x7342*x7345))+((x7335*x7341)));
evalcond[1]=((((-1.0)*r22*x7345))+(((-1.0)*x7341*x7344))+((x7336*x7342)));
evalcond[2]=(cj0+(((-1.0)*r12*x7344))+((x7335*x7339))+(((-1.0)*x7340*x7345)));
evalcond[3]=(((x7335*x7343))+(((-1.0)*r02*x7344))+(((-1.0)*x7337))+(((-1.0)*x7338*x7345)));
evalcond[4]=(((x7336*x7338))+(((-1.0)*x7343*x7344))+(((-1.0)*r02*x7345))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7345))+((x7336*x7340))+(((-1.0)*x7337))+(((-1.0)*x7339*x7344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7346=((1.0)*cj5);
CheckValue<IkReal> x7347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7346))+(((-1.0)*r00*sj5)))),-1);
if(!x7347.valid){
continue;
}
CheckValue<IkReal> x7348 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7347.value)))+(x7348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7349=IKsin(j4);
IkReal x7350=IKcos(j4);
IkReal x7351=((1.0)*sj0);
IkReal x7352=(cj5*r00);
IkReal x7353=(r11*sj5);
IkReal x7354=(cj5*r10);
IkReal x7355=(r21*sj5);
IkReal x7356=(cj5*r20);
IkReal x7357=(r01*sj5);
IkReal x7358=((1.0)*x7350);
IkReal x7359=((1.0)*x7349);
evalcond[0]=((((-1.0)*r22*x7358))+(((-1.0)*x7356*x7359))+((x7349*x7355)));
evalcond[1]=((((-1.0)*r22*x7359))+((x7350*x7356))+(((-1.0)*x7355*x7358)));
evalcond[2]=(cj0+(((-1.0)*r12*x7358))+(((-1.0)*x7354*x7359))+((x7349*x7353)));
evalcond[3]=((((-1.0)*x7351))+(((-1.0)*r02*x7358))+(((-1.0)*x7352*x7359))+((x7349*x7357)));
evalcond[4]=(((x7350*x7352))+(((-1.0)*x7357*x7358))+(((-1.0)*r02*x7359))+(((-1.0)*cj0)));
evalcond[5]=(((x7350*x7354))+(((-1.0)*r12*x7359))+(((-1.0)*x7351))+(((-1.0)*x7353*x7358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7360=IKsin(j0);
IkReal x7361=IKcos(j0);
IkReal x7362=((1.0)*cj5);
IkReal x7363=((0.08535)*sj5);
IkReal x7364=((0.08535)*cj5);
IkReal x7365=((1.0)*sj5);
evalcond[0]=(x7361+(((-1.0)*r00*x7365))+(((-1.0)*r01*x7362)));
evalcond[1]=(x7360+(((-1.0)*r10*x7365))+(((-1.0)*r11*x7362)));
evalcond[2]=((((-1.0)*px))+(((-0.11235)*x7360))+(((-1.0)*r00*x7363))+(((-1.0)*r01*x7364)));
evalcond[3]=((((-1.0)*r10*x7363))+(((-1.0)*r11*x7364))+(((-1.0)*py))+(((0.11235)*x7361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7366=((1.0)*sj5);
IkReal x7367=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7366)));
j4eval[0]=x7367;
j4eval[1]=IKsign(x7367);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7366))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7368=((1.0)*cj5);
IkReal x7369=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7368)));
j4eval[0]=x7369;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7368))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7370=r21*r21;
IkReal x7371=cj5*cj5;
IkReal x7372=(r21*sj5);
IkReal x7373=(cj5*r20);
IkReal x7374=(((x7370*x7371))+(((-1.0)*x7371*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x7370))+(((2.0)*x7372*x7373)));
j4eval[0]=x7374;
j4eval[1]=((IKabs((x7372+(((-1.0)*x7373)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7375=r21*r21;
IkReal x7376=cj5*cj5;
IkReal x7377=(r21*sj5);
IkReal x7378=(cj5*r20);
CheckValue<IkReal> x7379=IKPowWithIntegerCheck(IKsign((((x7375*x7376))+(((-1.0)*(r22*r22)))+(((-1.0)*x7376*(r20*r20)))+(((-1.0)*x7375))+(((2.0)*x7377*x7378)))),-1);
if(!x7379.valid){
continue;
}
CheckValue<IkReal> x7380 = IKatan2WithCheck(IkReal(r22),IkReal((x7377+(((-1.0)*x7378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7379.value)))+(x7380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7381=IKsin(j4);
IkReal x7382=IKcos(j4);
IkReal x7383=(r11*sj5);
IkReal x7384=(r21*sj5);
IkReal x7385=(cj5*r00);
IkReal x7386=(cj5*r20);
IkReal x7387=(r01*sj5);
IkReal x7388=(cj5*r10);
IkReal x7389=((1.0)*x7382);
IkReal x7390=((1.0)*x7381);
evalcond[0]=((((-1.0)*r22*x7389))+((x7381*x7384))+(((-1.0)*x7386*x7390)));
evalcond[1]=((((-1.0)*r02*x7390))+((x7382*x7385))+(((-1.0)*x7387*x7389)));
evalcond[2]=((((-1.0)*r12*x7390))+(((-1.0)*x7383*x7389))+((x7382*x7388)));
evalcond[3]=(cj0+((x7381*x7383))+(((-1.0)*x7388*x7390))+(((-1.0)*r12*x7389)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7390))+(((-1.0)*x7384*x7389))+((x7382*x7386)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7389))+((x7381*x7387))+(((-1.0)*x7385*x7390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7391=((1.0)*cj5);
CheckValue<IkReal> x7392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7392.valid){
continue;
}
CheckValue<IkReal> x7393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7391)))),-1);
if(!x7393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7392.value)+(((1.5707963267949)*(x7393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7394=IKsin(j4);
IkReal x7395=IKcos(j4);
IkReal x7396=(r11*sj5);
IkReal x7397=(r21*sj5);
IkReal x7398=(cj5*r00);
IkReal x7399=(cj5*r20);
IkReal x7400=(r01*sj5);
IkReal x7401=(cj5*r10);
IkReal x7402=((1.0)*x7395);
IkReal x7403=((1.0)*x7394);
evalcond[0]=((((-1.0)*x7399*x7403))+(((-1.0)*r22*x7402))+((x7394*x7397)));
evalcond[1]=(((x7395*x7398))+(((-1.0)*x7400*x7402))+(((-1.0)*r02*x7403)));
evalcond[2]=((((-1.0)*r12*x7403))+(((-1.0)*x7396*x7402))+((x7395*x7401)));
evalcond[3]=((((-1.0)*r12*x7402))+cj0+(((-1.0)*x7401*x7403))+((x7394*x7396)));
evalcond[4]=((-1.0)+(((-1.0)*x7397*x7402))+((x7395*x7399))+(((-1.0)*r22*x7403)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7398*x7403))+((x7394*x7400))+(((-1.0)*r02*x7402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7404=((1.0)*sj5);
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7404))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
CheckValue<IkReal> x7406=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7404)))),-1);
if(!x7406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7405.value)+(((1.5707963267949)*(x7406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7407=IKsin(j4);
IkReal x7408=IKcos(j4);
IkReal x7409=(r11*sj5);
IkReal x7410=(r21*sj5);
IkReal x7411=(cj5*r00);
IkReal x7412=(cj5*r20);
IkReal x7413=(r01*sj5);
IkReal x7414=(cj5*r10);
IkReal x7415=((1.0)*x7408);
IkReal x7416=((1.0)*x7407);
evalcond[0]=(((x7407*x7410))+(((-1.0)*r22*x7415))+(((-1.0)*x7412*x7416)));
evalcond[1]=(((x7408*x7411))+(((-1.0)*x7413*x7415))+(((-1.0)*r02*x7416)));
evalcond[2]=((((-1.0)*r12*x7416))+(((-1.0)*x7409*x7415))+((x7408*x7414)));
evalcond[3]=((((-1.0)*r12*x7415))+cj0+(((-1.0)*x7414*x7416))+((x7407*x7409)));
evalcond[4]=((-1.0)+((x7408*x7412))+(((-1.0)*r22*x7416))+(((-1.0)*x7410*x7415)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7411*x7416))+((x7407*x7413))+(((-1.0)*r02*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7417=IKcos(j0);
IkReal x7418=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x7418))+(((0.21325)*x7417)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x7417))+(((0.21325)*x7418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7419=((1.0)*cj5);
IkReal x7420=((((-1.0)*r01*x7419))+(((-1.0)*r00*sj5)));
j4eval[0]=x7420;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7419))))));
j4eval[2]=IKsign(x7420);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7421=((1.0)*cj5);
IkReal x7422=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7421)));
j4eval[0]=x7422;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7421))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7422);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7423=cj5*cj5;
IkReal x7424=((1.0)*sj5);
IkReal x7425=(cj5*r20);
IkReal x7426=(r11*r21);
IkReal x7427=((((-1.0)*cj5*r10*r21*x7424))+(((-1.0)*x7423*x7426))+((r12*r22))+(((-1.0)*r11*x7424*x7425))+((r10*r20*x7423))+x7426);
j4eval[0]=x7427;
j4eval[1]=IKsign(x7427);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7424))+((cj0*x7425))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7428=cj5*cj5;
IkReal x7429=((1.0)*sj5);
IkReal x7430=(cj5*r20);
IkReal x7431=(r11*r21);
CheckValue<IkReal> x7432=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7429))+((r12*r22))+((r10*r20*x7428))+(((-1.0)*r11*x7429*x7430))+(((-1.0)*x7428*x7431))+x7431)),-1);
if(!x7432.valid){
continue;
}
CheckValue<IkReal> x7433 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7429))+((cj0*x7430)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7432.value)))+(x7433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7434=IKsin(j4);
IkReal x7435=IKcos(j4);
IkReal x7436=((1.0)*sj0);
IkReal x7437=(cj5*r00);
IkReal x7438=(r11*sj5);
IkReal x7439=(cj5*r10);
IkReal x7440=(r21*sj5);
IkReal x7441=(cj5*r20);
IkReal x7442=(r01*sj5);
IkReal x7443=((1.0)*x7435);
IkReal x7444=((1.0)*x7434);
evalcond[0]=(((x7434*x7440))+(((-1.0)*r22*x7443))+(((-1.0)*x7441*x7444)));
evalcond[1]=((((-1.0)*x7440*x7443))+((x7435*x7441))+(((-1.0)*r22*x7444)));
evalcond[2]=(cj0+(((-1.0)*x7439*x7444))+((x7434*x7438))+(((-1.0)*r12*x7443)));
evalcond[3]=((((-1.0)*x7437*x7444))+((x7434*x7442))+(((-1.0)*x7436))+(((-1.0)*r02*x7443)));
evalcond[4]=((((-1.0)*x7442*x7443))+((x7435*x7437))+(((-1.0)*r02*x7444))+(((-1.0)*cj0)));
evalcond[5]=(((x7435*x7439))+(((-1.0)*x7436))+(((-1.0)*x7438*x7443))+(((-1.0)*r12*x7444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7445=((1.0)*cj5);
CheckValue<IkReal> x7446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7445)))),-1);
if(!x7446.valid){
continue;
}
CheckValue<IkReal> x7447 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7446.value)))+(x7447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7448=IKsin(j4);
IkReal x7449=IKcos(j4);
IkReal x7450=((1.0)*sj0);
IkReal x7451=(cj5*r00);
IkReal x7452=(r11*sj5);
IkReal x7453=(cj5*r10);
IkReal x7454=(r21*sj5);
IkReal x7455=(cj5*r20);
IkReal x7456=(r01*sj5);
IkReal x7457=((1.0)*x7449);
IkReal x7458=((1.0)*x7448);
evalcond[0]=((((-1.0)*x7455*x7458))+((x7448*x7454))+(((-1.0)*r22*x7457)));
evalcond[1]=(((x7449*x7455))+(((-1.0)*x7454*x7457))+(((-1.0)*r22*x7458)));
evalcond[2]=(cj0+(((-1.0)*x7453*x7458))+((x7448*x7452))+(((-1.0)*r12*x7457)));
evalcond[3]=((((-1.0)*x7450))+(((-1.0)*x7451*x7458))+((x7448*x7456))+(((-1.0)*r02*x7457)));
evalcond[4]=((((-1.0)*x7456*x7457))+((x7449*x7451))+(((-1.0)*r02*x7458))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7450))+(((-1.0)*x7452*x7457))+((x7449*x7453))+(((-1.0)*r12*x7458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7459=((1.0)*cj5);
CheckValue<IkReal> x7460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7460.valid){
continue;
}
CheckValue<IkReal> x7461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7459))+(((-1.0)*r00*sj5)))),-1);
if(!x7461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7460.value)+(((1.5707963267949)*(x7461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7462=IKsin(j4);
IkReal x7463=IKcos(j4);
IkReal x7464=((1.0)*sj0);
IkReal x7465=(cj5*r00);
IkReal x7466=(r11*sj5);
IkReal x7467=(cj5*r10);
IkReal x7468=(r21*sj5);
IkReal x7469=(cj5*r20);
IkReal x7470=(r01*sj5);
IkReal x7471=((1.0)*x7463);
IkReal x7472=((1.0)*x7462);
evalcond[0]=((((-1.0)*r22*x7471))+((x7462*x7468))+(((-1.0)*x7469*x7472)));
evalcond[1]=(((x7463*x7469))+(((-1.0)*r22*x7472))+(((-1.0)*x7468*x7471)));
evalcond[2]=(cj0+(((-1.0)*x7467*x7472))+((x7462*x7466))+(((-1.0)*r12*x7471)));
evalcond[3]=(((x7462*x7470))+(((-1.0)*r02*x7471))+(((-1.0)*x7464))+(((-1.0)*x7465*x7472)));
evalcond[4]=((((-1.0)*r02*x7472))+((x7463*x7465))+(((-1.0)*x7470*x7471))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7466*x7471))+((x7463*x7467))+(((-1.0)*x7464))+(((-1.0)*r12*x7472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7473=((1.0)*sj5);
IkReal x7474=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7474))+(((-1.0)*r10*x7473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7473))+(((-1.0)*r01*x7474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7474))+(((-1.0)*r10*x7473))))+IKsqr(((((-1.0)*r00*x7473))+(((-1.0)*r01*x7474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7474))+(((-1.0)*r10*x7473))), ((((-1.0)*r00*x7473))+(((-1.0)*r01*x7474))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7475=IKsin(j0);
IkReal x7476=IKcos(j0);
IkReal x7477=((1.0)*cj5);
IkReal x7478=((0.08535)*sj5);
IkReal x7479=((0.08535)*cj5);
IkReal x7480=((1.0)*sj5);
evalcond[0]=((((-1.0)*r01*x7477))+(((-1.0)*r00*x7480))+(((-1.0)*x7476)));
evalcond[1]=((((-1.0)*r11*x7477))+(((-1.0)*r10*x7480))+(((-1.0)*x7475)));
evalcond[2]=((((-1.0)*r00*x7478))+(((-1.0)*r01*x7479))+(((-1.0)*px))+(((-0.11235)*x7475)));
evalcond[3]=((((-1.0)*r11*x7479))+(((0.11235)*x7476))+(((-1.0)*py))+(((-1.0)*r10*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7481=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7481;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7482=((1.0)*cj5);
IkReal x7483=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7482)));
j4eval[0]=x7483;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7482)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7484=cj5*cj5;
IkReal x7485=r21*r21;
IkReal x7486=(r21*sj5);
IkReal x7487=(cj5*r20);
IkReal x7488=((r22*r22)+(((-2.0)*x7486*x7487))+x7485+((x7484*(r20*r20)))+(((-1.0)*x7484*x7485)));
j4eval[0]=x7488;
j4eval[1]=IKsign(x7488);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7487))+x7486))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7489=cj5*cj5;
IkReal x7490=r21*r21;
IkReal x7491=(r21*sj5);
IkReal x7492=(cj5*r20);
CheckValue<IkReal> x7493 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7492))+x7491)),IKFAST_ATAN2_MAGTHRESH);
if(!x7493.valid){
continue;
}
CheckValue<IkReal> x7494=IKPowWithIntegerCheck(IKsign((((x7489*(r20*r20)))+(r22*r22)+(((-1.0)*x7489*x7490))+x7490+(((-2.0)*x7491*x7492)))),-1);
if(!x7494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7493.value)+(((1.5707963267949)*(x7494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7495=IKsin(j4);
IkReal x7496=IKcos(j4);
IkReal x7497=(r11*sj5);
IkReal x7498=(r21*sj5);
IkReal x7499=(cj5*r00);
IkReal x7500=(cj5*r20);
IkReal x7501=(r01*sj5);
IkReal x7502=(cj5*r10);
IkReal x7503=((1.0)*x7496);
IkReal x7504=((1.0)*x7495);
evalcond[0]=((((-1.0)*r22*x7503))+(((-1.0)*x7500*x7504))+((x7495*x7498)));
evalcond[1]=((((-1.0)*x7501*x7503))+((x7496*x7499))+(((-1.0)*r02*x7504)));
evalcond[2]=((((-1.0)*x7497*x7503))+((x7496*x7502))+(((-1.0)*r12*x7504)));
evalcond[3]=(cj0+(((-1.0)*x7502*x7504))+((x7495*x7497))+(((-1.0)*r12*x7503)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7504))+(((-1.0)*x7498*x7503))+((x7496*x7500)));
evalcond[5]=((((-1.0)*x7499*x7504))+(((-1.0)*sj0))+(((-1.0)*r02*x7503))+((x7495*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7505=((1.0)*cj5);
CheckValue<IkReal> x7506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7505))+(((-1.0)*r00*sj5)))),-1);
if(!x7506.valid){
continue;
}
CheckValue<IkReal> x7507 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7506.value)))+(x7507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7508=IKsin(j4);
IkReal x7509=IKcos(j4);
IkReal x7510=(r11*sj5);
IkReal x7511=(r21*sj5);
IkReal x7512=(cj5*r00);
IkReal x7513=(cj5*r20);
IkReal x7514=(r01*sj5);
IkReal x7515=(cj5*r10);
IkReal x7516=((1.0)*x7509);
IkReal x7517=((1.0)*x7508);
evalcond[0]=((((-1.0)*x7513*x7517))+((x7508*x7511))+(((-1.0)*r22*x7516)));
evalcond[1]=(((x7509*x7512))+(((-1.0)*r02*x7517))+(((-1.0)*x7514*x7516)));
evalcond[2]=(((x7509*x7515))+(((-1.0)*x7510*x7516))+(((-1.0)*r12*x7517)));
evalcond[3]=((((-1.0)*x7515*x7517))+cj0+(((-1.0)*r12*x7516))+((x7508*x7510)));
evalcond[4]=((1.0)+((x7509*x7513))+(((-1.0)*x7511*x7516))+(((-1.0)*r22*x7517)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7512*x7517))+(((-1.0)*r02*x7516))+((x7508*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7518 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7518.valid){
continue;
}
CheckValue<IkReal> x7519=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7518.value)+(((1.5707963267949)*(x7519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7520=IKsin(j4);
IkReal x7521=IKcos(j4);
IkReal x7522=(r11*sj5);
IkReal x7523=(r21*sj5);
IkReal x7524=(cj5*r00);
IkReal x7525=(cj5*r20);
IkReal x7526=(r01*sj5);
IkReal x7527=(cj5*r10);
IkReal x7528=((1.0)*x7521);
IkReal x7529=((1.0)*x7520);
evalcond[0]=(((x7520*x7523))+(((-1.0)*x7525*x7529))+(((-1.0)*r22*x7528)));
evalcond[1]=(((x7521*x7524))+(((-1.0)*r02*x7529))+(((-1.0)*x7526*x7528)));
evalcond[2]=(((x7521*x7527))+(((-1.0)*x7522*x7528))+(((-1.0)*r12*x7529)));
evalcond[3]=(cj0+((x7520*x7522))+(((-1.0)*x7527*x7529))+(((-1.0)*r12*x7528)));
evalcond[4]=((1.0)+(((-1.0)*x7523*x7528))+((x7521*x7525))+(((-1.0)*r22*x7529)));
evalcond[5]=((((-1.0)*sj0))+((x7520*x7526))+(((-1.0)*r02*x7528))+(((-1.0)*x7524*x7529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7530=IKcos(j0);
IkReal x7531=IKsin(j0);
evalcond[0]=((((-0.21325)*x7530))+(((-1.0)*px))+(((-0.11235)*x7531)));
evalcond[1]=((((-0.21325)*x7531))+(((0.11235)*x7530))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7532=((1.0)*cj5);
IkReal x7533=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7532)));
j4eval[0]=x7533;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7532)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7534=cj5*cj5;
IkReal x7535=((1.0)*r21);
IkReal x7536=(cj5*sj5);
IkReal x7537=((1.0)*r20);
IkReal x7538=(((r01*r21))+(((-1.0)*r00*x7535*x7536))+(((-1.0)*r01*x7534*x7535))+((r02*r22))+(((-1.0)*r01*x7536*x7537))+((r00*r20*x7534)));
j4eval[0]=x7538;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7537)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7539=cj5*cj5;
IkReal x7540=(r21*sj5);
IkReal x7541=(r11*r21);
IkReal x7542=((1.0)*cj5*r20);
IkReal x7543=((((-1.0)*r11*sj5*x7542))+((r10*r20*x7539))+((r12*r22))+(((-1.0)*x7539*x7541))+x7541+(((-1.0)*cj5*r10*x7540)));
j4eval[0]=x7543;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7540))+(((-1.0)*sj0*x7542))))));
j4eval[2]=IKsign(x7543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7544=cj5*cj5;
IkReal x7545=(r21*sj5);
IkReal x7546=(r11*r21);
IkReal x7547=((1.0)*cj5*r20);
CheckValue<IkReal> x7548 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7545))+(((-1.0)*sj0*x7547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7548.valid){
continue;
}
CheckValue<IkReal> x7549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7547))+((r10*r20*x7544))+((r12*r22))+x7546+(((-1.0)*cj5*r10*x7545))+(((-1.0)*x7544*x7546)))),-1);
if(!x7549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7548.value)+(((1.5707963267949)*(x7549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7550=IKsin(j4);
IkReal x7551=IKcos(j4);
IkReal x7552=(r11*sj5);
IkReal x7553=(cj5*r00);
IkReal x7554=(cj5*r10);
IkReal x7555=(r21*sj5);
IkReal x7556=(cj5*r20);
IkReal x7557=(r01*sj5);
IkReal x7558=((1.0)*x7551);
IkReal x7559=((1.0)*x7550);
evalcond[0]=(((x7550*x7555))+(((-1.0)*x7556*x7559))+(((-1.0)*r22*x7558)));
evalcond[1]=((((-1.0)*x7555*x7558))+((x7551*x7556))+(((-1.0)*r22*x7559)));
evalcond[2]=((((-1.0)*x7554*x7559))+cj0+((x7550*x7552))+(((-1.0)*r12*x7558)));
evalcond[3]=(((x7551*x7553))+cj0+(((-1.0)*x7557*x7558))+(((-1.0)*r02*x7559)));
evalcond[4]=(sj0+((x7551*x7554))+(((-1.0)*r12*x7559))+(((-1.0)*x7552*x7558)));
evalcond[5]=((((-1.0)*sj0))+((x7550*x7557))+(((-1.0)*x7553*x7559))+(((-1.0)*r02*x7558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7560=cj5*cj5;
IkReal x7561=((1.0)*r21);
IkReal x7562=(cj5*sj5);
IkReal x7563=((1.0)*r20);
CheckValue<IkReal> x7564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7564.valid){
continue;
}
CheckValue<IkReal> x7565=IKPowWithIntegerCheck(IKsign((((r00*r20*x7560))+(((-1.0)*r01*x7562*x7563))+((r01*r21))+(((-1.0)*r00*x7561*x7562))+(((-1.0)*r01*x7560*x7561))+((r02*r22)))),-1);
if(!x7565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7564.value)+(((1.5707963267949)*(x7565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7566=IKsin(j4);
IkReal x7567=IKcos(j4);
IkReal x7568=(r11*sj5);
IkReal x7569=(cj5*r00);
IkReal x7570=(cj5*r10);
IkReal x7571=(r21*sj5);
IkReal x7572=(cj5*r20);
IkReal x7573=(r01*sj5);
IkReal x7574=((1.0)*x7567);
IkReal x7575=((1.0)*x7566);
evalcond[0]=(((x7566*x7571))+(((-1.0)*r22*x7574))+(((-1.0)*x7572*x7575)));
evalcond[1]=((((-1.0)*x7571*x7574))+((x7567*x7572))+(((-1.0)*r22*x7575)));
evalcond[2]=(((x7566*x7568))+cj0+(((-1.0)*r12*x7574))+(((-1.0)*x7570*x7575)));
evalcond[3]=(((x7567*x7569))+cj0+(((-1.0)*r02*x7575))+(((-1.0)*x7573*x7574)));
evalcond[4]=(sj0+((x7567*x7570))+(((-1.0)*x7568*x7574))+(((-1.0)*r12*x7575)));
evalcond[5]=((((-1.0)*sj0))+((x7566*x7573))+(((-1.0)*r02*x7574))+(((-1.0)*x7569*x7575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7576=((1.0)*cj5);
CheckValue<IkReal> x7577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7576))+(((-1.0)*r00*sj5)))),-1);
if(!x7577.valid){
continue;
}
CheckValue<IkReal> x7578 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7577.value)))+(x7578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7579=IKsin(j4);
IkReal x7580=IKcos(j4);
IkReal x7581=(r11*sj5);
IkReal x7582=(cj5*r00);
IkReal x7583=(cj5*r10);
IkReal x7584=(r21*sj5);
IkReal x7585=(cj5*r20);
IkReal x7586=(r01*sj5);
IkReal x7587=((1.0)*x7580);
IkReal x7588=((1.0)*x7579);
evalcond[0]=((((-1.0)*x7585*x7588))+((x7579*x7584))+(((-1.0)*r22*x7587)));
evalcond[1]=((((-1.0)*x7584*x7587))+(((-1.0)*r22*x7588))+((x7580*x7585)));
evalcond[2]=(cj0+((x7579*x7581))+(((-1.0)*x7583*x7588))+(((-1.0)*r12*x7587)));
evalcond[3]=((((-1.0)*x7586*x7587))+cj0+(((-1.0)*r02*x7588))+((x7580*x7582)));
evalcond[4]=(sj0+(((-1.0)*x7581*x7587))+(((-1.0)*r12*x7588))+((x7580*x7583)));
evalcond[5]=((((-1.0)*sj0))+((x7579*x7586))+(((-1.0)*r02*x7587))+(((-1.0)*x7582*x7588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7589=cj1*cj1;
IkReal x7590=(cj2*sj1);
IkReal x7591=(cj1*sj1);
IkReal x7592=(cj1*sj2);
IkReal x7593=((20000.0)*py);
IkReal x7594=(r00*sj5);
IkReal x7595=(cj5*r01);
IkReal x7596=((1707.0)*cj5*r11);
IkReal x7597=(sj2*x7589);
IkReal x7598=((1707.0)*r10*sj5);
CheckValue<IkReal> x7599=IKPowWithIntegerCheck(((((-8530.0)*cj1*cj2*x7590))+(((-4873.0)*x7597))+(((4265.0)*cj2*sj2))+(((-8530.0)*cj2*x7597))+(((4265.0)*x7591))+(((-4873.0)*cj1*x7590))),-1);
if(!x7599.valid){
continue;
}
CheckValue<IkReal> x7600=IKPowWithIntegerCheck(((((-1.0)*x7592))+(((-1.0)*x7590))),-1);
if(!x7600.valid){
continue;
}
if( IKabs(((x7599.value)*(((((-1.0)*x7592*x7596))+(((-1.0)*x7592*x7593))+(((-1.0)*x7592*x7598))+(((-2247.0)*x7595))+(((-2247.0)*x7594))+(((-1.0)*x7590*x7598))+(((-1.0)*x7590*x7596))+(((-1.0)*x7590*x7593)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7600.value)*((x7595+x7594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7599.value)*(((((-1.0)*x7592*x7596))+(((-1.0)*x7592*x7593))+(((-1.0)*x7592*x7598))+(((-2247.0)*x7595))+(((-2247.0)*x7594))+(((-1.0)*x7590*x7598))+(((-1.0)*x7590*x7596))+(((-1.0)*x7590*x7593))))))+IKsqr(((x7600.value)*((x7595+x7594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7599.value)*(((((-1.0)*x7592*x7596))+(((-1.0)*x7592*x7593))+(((-1.0)*x7592*x7598))+(((-2247.0)*x7595))+(((-2247.0)*x7594))+(((-1.0)*x7590*x7598))+(((-1.0)*x7590*x7596))+(((-1.0)*x7590*x7593))))), ((x7600.value)*((x7595+x7594))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7601=IKcos(j0);
IkReal x7602=IKsin(j0);
IkReal x7603=((0.21325)*cj2);
IkReal x7604=((1.0)*sj2);
IkReal x7605=(r00*sj5);
IkReal x7606=((1.0)*cj5);
IkReal x7607=(r10*sj5);
IkReal x7608=((0.08535)*cj5);
IkReal x7609=(cj1*x7602);
IkReal x7610=(cj1*x7601);
IkReal x7611=((0.21325)*sj1*sj2);
IkReal x7612=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x7604*x7610))+(((-1.0)*r01*x7606))+(((-1.0)*x7601*x7612))+(((-1.0)*x7605)));
evalcond[1]=((((-1.0)*r11*x7606))+(((-1.0)*x7602*x7612))+(((-1.0)*x7604*x7609))+(((-1.0)*x7607)));
evalcond[2]=(((x7603*x7610))+(((-1.0)*px))+(((-0.08535)*x7605))+(((0.24365)*x7610))+(((-1.0)*r01*x7608))+(((-0.11235)*x7602))+(((-1.0)*x7601*x7611)));
evalcond[3]=((((-1.0)*r11*x7608))+(((0.11235)*x7601))+(((-1.0)*py))+((x7603*x7609))+(((-0.08535)*x7607))+(((-1.0)*x7602*x7611))+(((0.24365)*x7609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7613=((1.0)*cj5);
IkReal x7614=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7613)));
j4eval[0]=x7614;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7613)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7615=((1.0)*cj5);
IkReal x7616=((((-1.0)*r11*x7615))+(((-1.0)*r10*sj5)));
j4eval[0]=x7616;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7615))))));
j4eval[2]=IKsign(x7616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7617=((1.0)*sj0);
IkReal x7618=((1.0)*cj0);
IkReal x7619=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7619;
j4eval[1]=((IKabs(((((-1.0)*r12*x7617))+(((-1.0)*r02*x7618)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7617))+(((-1.0)*r01*sj5*x7618))))));
j4eval[2]=IKsign(x7619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7620=((-1.0)*r20);
IkReal x7622 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7622)==0){
continue;
}
IkReal x7621=pow(x7622,-0.5);
CheckValue<IkReal> x7623 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7620),IKFAST_ATAN2_MAGTHRESH);
if(!x7623.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7623.value));
IkReal gconst133=(r21*x7621);
IkReal gconst134=(x7620*x7621);
CheckValue<IkReal> x7624 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7624.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7625=((-1.0)*r20);
IkReal x7626=x7621;
CheckValue<IkReal> x7628 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7625),IKFAST_ATAN2_MAGTHRESH);
if(!x7628.valid){
continue;
}
IkReal x7627=((-1.0)*(x7628.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7627;
IkReal gconst132=x7627;
IkReal gconst133=(r21*x7626);
IkReal gconst134=(x7625*x7626);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7629=((-1.0)*r20);
IkReal x7630=x7621;
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7629),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
IkReal x7631=((-1.0)*(x7632.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7631;
IkReal gconst132=x7631;
IkReal gconst133=(r21*x7630);
IkReal gconst134=(x7629*x7630);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7633=((-1.0)*r20);
IkReal x7634=x7621;
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7633),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
IkReal x7635=((-1.0)*(x7636.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7635;
IkReal gconst132=x7635;
IkReal gconst133=(r21*x7634);
IkReal gconst134=(x7633*x7634);
IkReal x7637=r22*r22;
CheckValue<IkReal> x7640=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7637))),-1);
if(!x7640.valid){
continue;
}
IkReal x7638=x7640.value;
IkReal x7639=(((x7638*(r20*r20*r20*r20)))+(((2.0)*x7638*(r20*r20)*(r21*r21)))+((x7638*(r21*r21*r21*r21)))+x7637);
j4eval[0]=x7639;
j4eval[1]=IKsign(x7639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7641=(gconst133*r21);
IkReal x7642=(cj1*sj2);
IkReal x7643=(gconst134*r20);
IkReal x7644=(cj2*sj1);
CheckValue<IkReal> x7645 = IKatan2WithCheck(IkReal((((r22*x7642))+((r22*x7644)))),IkReal((((x7641*x7644))+((x7641*x7642))+(((-1.0)*x7642*x7643))+(((-1.0)*x7643*x7644)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7645.valid){
continue;
}
CheckValue<IkReal> x7646=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7641*x7641)+(((-2.0)*x7641*x7643))+(x7643*x7643))),-1);
if(!x7646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7645.value)+(((1.5707963267949)*(x7646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7647=IKsin(j4);
IkReal x7648=IKcos(j4);
IkReal x7649=(sj1*sj2);
IkReal x7650=(gconst133*r11);
IkReal x7651=(gconst133*r21);
IkReal x7652=(gconst133*r01);
IkReal x7653=((1.0)*x7648);
IkReal x7654=(gconst134*x7648);
IkReal x7655=((1.0)*x7647);
IkReal x7656=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7653))+((x7647*x7651))+(((-1.0)*gconst134*r20*x7655)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7655))+((x7647*x7650))+(((-1.0)*r12*x7653)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7653))+(((-1.0)*gconst134*r00*x7655))+((x7647*x7652)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7655))+((cj1*sj2))+(((-1.0)*x7651*x7653))+((r20*x7654)));
evalcond[4]=((((-1.0)*r02*x7655))+(((-1.0)*cj0*x7656))+((r00*x7654))+((cj0*x7649))+(((-1.0)*x7652*x7653)));
evalcond[5]=((((-1.0)*x7650*x7653))+((sj0*x7649))+(((-1.0)*sj0*x7656))+((r10*x7654))+(((-1.0)*r12*x7655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7657=((1.0)*gconst134);
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7657))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
CheckValue<IkReal> x7659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7657)))),-1);
if(!x7659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7658.value)+(((1.5707963267949)*(x7659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7660=IKsin(j4);
IkReal x7661=IKcos(j4);
IkReal x7662=(sj1*sj2);
IkReal x7663=(gconst133*r11);
IkReal x7664=(gconst133*r21);
IkReal x7665=(gconst133*r01);
IkReal x7666=((1.0)*x7661);
IkReal x7667=(gconst134*x7661);
IkReal x7668=((1.0)*x7660);
IkReal x7669=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7668))+(((-1.0)*r22*x7666))+((x7660*x7664)));
evalcond[1]=((((-1.0)*gconst134*r10*x7668))+(((-1.0)*r12*x7666))+cj0+((x7660*x7663)));
evalcond[2]=((((-1.0)*sj0))+((x7660*x7665))+(((-1.0)*r02*x7666))+(((-1.0)*gconst134*r00*x7668)));
evalcond[3]=(((cj2*sj1))+((r20*x7667))+((cj1*sj2))+(((-1.0)*r22*x7668))+(((-1.0)*x7664*x7666)));
evalcond[4]=((((-1.0)*cj0*x7669))+((r00*x7667))+(((-1.0)*r02*x7668))+((cj0*x7662))+(((-1.0)*x7665*x7666)));
evalcond[5]=((((-1.0)*r12*x7668))+((r10*x7667))+(((-1.0)*x7663*x7666))+((sj0*x7662))+(((-1.0)*sj0*x7669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7670=((1.0)*gconst134);
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7670))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
CheckValue<IkReal> x7672=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7670)))),-1);
if(!x7672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7671.value)+(((1.5707963267949)*(x7672.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7673=IKsin(j4);
IkReal x7674=IKcos(j4);
IkReal x7675=(sj1*sj2);
IkReal x7676=(gconst133*r11);
IkReal x7677=(gconst133*r21);
IkReal x7678=(gconst133*r01);
IkReal x7679=((1.0)*x7674);
IkReal x7680=(gconst134*x7674);
IkReal x7681=((1.0)*x7673);
IkReal x7682=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7681))+((x7673*x7677))+(((-1.0)*r22*x7679)));
evalcond[1]=((((-1.0)*gconst134*r10*x7681))+cj0+(((-1.0)*r12*x7679))+((x7673*x7676)));
evalcond[2]=((((-1.0)*gconst134*r00*x7681))+(((-1.0)*sj0))+(((-1.0)*r02*x7679))+((x7673*x7678)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7681))+((r20*x7680))+(((-1.0)*x7677*x7679)));
evalcond[4]=((((-1.0)*cj0*x7682))+(((-1.0)*x7678*x7679))+((r00*x7680))+((cj0*x7675))+(((-1.0)*r02*x7681)));
evalcond[5]=(((sj0*x7675))+((r10*x7680))+(((-1.0)*r12*x7681))+(((-1.0)*x7676*x7679))+(((-1.0)*sj0*x7682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7683=((-1.0)*r21);
IkReal x7685 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7685)==0){
continue;
}
IkReal x7684=pow(x7685,-0.5);
CheckValue<IkReal> x7686 = IKatan2WithCheck(IkReal(x7683),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7686.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7686.value))));
IkReal gconst136=(x7683*x7684);
IkReal gconst137=((1.0)*r20*x7684);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7687.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7688=((-1.0)*r21);
CheckValue<IkReal> x7691 = IKatan2WithCheck(IkReal(x7688),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7691.valid){
continue;
}
IkReal x7689=((1.0)*(x7691.value));
IkReal x7690=x7684;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7689)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7689)));
IkReal gconst136=(x7688*x7690);
IkReal gconst137=((1.0)*r20*x7690);
IkReal x7692=r22*r22;
IkReal x7693=((1.0)*x7692);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(((-1.0)+x7692),-1);
if(!x7697.valid){
continue;
}
IkReal x7694=x7697.value;
if((((1.0)+(((-1.0)*x7693)))) < -0.00001)
continue;
IkReal x7695=IKsqrt(((1.0)+(((-1.0)*x7693))));
IkReal x7696=(cj0*x7694*x7695);
j4eval[0]=((IKabs(((((-1.0)*x7693*x7696))+x7696)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7698=((-1.0)*r21);
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(x7698),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
IkReal x7699=((1.0)*(x7701.value));
IkReal x7700=x7684;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7699)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7699)));
IkReal gconst136=(x7698*x7700);
IkReal gconst137=((1.0)*r20*x7700);
IkReal x7702=r22*r22;
IkReal x7703=((1.0)*x7702);
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(((-1.0)+x7702),-1);
if(!x7707.valid){
continue;
}
IkReal x7704=x7707.value;
if((((1.0)+(((-1.0)*x7703)))) < -0.00001)
continue;
IkReal x7705=IKsqrt(((1.0)+(((-1.0)*x7703))));
IkReal x7706=(sj0*x7704*x7705);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7703*x7706))+x7706))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7708=((-1.0)*r21);
CheckValue<IkReal> x7711 = IKatan2WithCheck(IkReal(x7708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7711.valid){
continue;
}
IkReal x7709=((1.0)*(x7711.value));
IkReal x7710=x7684;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7709)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7709)));
IkReal gconst136=(x7708*x7710);
IkReal gconst137=((1.0)*r20*x7710);
IkReal x7712=r22*r22;
IkReal x7713=(r12*sj0);
IkReal x7714=(cj0*r02);
CheckValue<IkReal> x7718=IKPowWithIntegerCheck(((-1.0)+x7712),-1);
if(!x7718.valid){
continue;
}
IkReal x7715=x7718.value;
if((((1.0)+(((-1.0)*x7712)))) < -0.00001)
continue;
IkReal x7716=IKsqrt(((1.0)+(((-1.0)*x7712))));
IkReal x7717=(r22*x7715*x7716);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7713*x7717))+((x7714*x7717)))))+(IKabs(((((-1.0)*x7714))+(((-1.0)*x7713))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7719=((1.0)*sj0);
IkReal x7720=((1.0)*cj0);
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7721.valid){
continue;
}
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7719))+(((-1.0)*r02*x7720)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7719))+(((-1.0)*gconst136*r01*x7720))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7721.value)))+(x7722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7723=IKsin(j4);
IkReal x7724=IKcos(j4);
IkReal x7725=(gconst136*r01);
IkReal x7726=(gconst137*r10);
IkReal x7727=(sj1*sj2);
IkReal x7728=(gconst137*r20);
IkReal x7729=(gconst136*r11);
IkReal x7730=(gconst136*r21);
IkReal x7731=(gconst137*r00);
IkReal x7732=((1.0)*x7724);
IkReal x7733=((1.0)*cj1*cj2);
IkReal x7734=((1.0)*x7723);
evalcond[0]=((((-1.0)*x7728*x7734))+(((-1.0)*r22*x7732))+((x7723*x7730)));
evalcond[1]=(cj0+(((-1.0)*r12*x7732))+((x7723*x7729))+(((-1.0)*x7726*x7734)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7731*x7734))+((x7723*x7725))+(((-1.0)*r02*x7732)));
evalcond[3]=(((cj2*sj1))+((x7724*x7728))+(((-1.0)*x7730*x7732))+((cj1*sj2))+(((-1.0)*r22*x7734)));
evalcond[4]=((((-1.0)*cj0*x7733))+(((-1.0)*x7725*x7732))+((x7724*x7731))+((cj0*x7727))+(((-1.0)*r02*x7734)));
evalcond[5]=(((sj0*x7727))+((x7724*x7726))+(((-1.0)*r12*x7734))+(((-1.0)*x7729*x7732))+(((-1.0)*sj0*x7733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7735=((1.0)*gconst137);
CheckValue<IkReal> x7736 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7735))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7735))+(((-1.0)*gconst136*r10)))),-1);
if(!x7737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7736.value)+(((1.5707963267949)*(x7737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7738=IKsin(j4);
IkReal x7739=IKcos(j4);
IkReal x7740=(gconst136*r01);
IkReal x7741=(gconst137*r10);
IkReal x7742=(sj1*sj2);
IkReal x7743=(gconst137*r20);
IkReal x7744=(gconst136*r11);
IkReal x7745=(gconst136*r21);
IkReal x7746=(gconst137*r00);
IkReal x7747=((1.0)*x7739);
IkReal x7748=((1.0)*cj1*cj2);
IkReal x7749=((1.0)*x7738);
evalcond[0]=((((-1.0)*r22*x7747))+((x7738*x7745))+(((-1.0)*x7743*x7749)));
evalcond[1]=(cj0+(((-1.0)*x7741*x7749))+((x7738*x7744))+(((-1.0)*r12*x7747)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7747))+((x7738*x7740))+(((-1.0)*x7746*x7749)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7749))+((cj1*sj2))+((x7739*x7743))+(((-1.0)*x7745*x7747)));
evalcond[4]=((((-1.0)*r02*x7749))+(((-1.0)*x7740*x7747))+(((-1.0)*cj0*x7748))+((x7739*x7746))+((cj0*x7742)));
evalcond[5]=((((-1.0)*x7744*x7747))+((sj0*x7742))+(((-1.0)*r12*x7749))+((x7739*x7741))+(((-1.0)*sj0*x7748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7750=((1.0)*gconst137);
CheckValue<IkReal> x7751 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7751.valid){
continue;
}
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7750)))),-1);
if(!x7752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7751.value)+(((1.5707963267949)*(x7752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7753=IKsin(j4);
IkReal x7754=IKcos(j4);
IkReal x7755=(gconst136*r01);
IkReal x7756=(gconst137*r10);
IkReal x7757=(sj1*sj2);
IkReal x7758=(gconst137*r20);
IkReal x7759=(gconst136*r11);
IkReal x7760=(gconst136*r21);
IkReal x7761=(gconst137*r00);
IkReal x7762=((1.0)*x7754);
IkReal x7763=((1.0)*cj1*cj2);
IkReal x7764=((1.0)*x7753);
evalcond[0]=((((-1.0)*r22*x7762))+(((-1.0)*x7758*x7764))+((x7753*x7760)));
evalcond[1]=(cj0+((x7753*x7759))+(((-1.0)*r12*x7762))+(((-1.0)*x7756*x7764)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7762))+((x7753*x7755))+(((-1.0)*x7761*x7764)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7760*x7762))+(((-1.0)*r22*x7764))+((cj1*sj2))+((x7754*x7758)));
evalcond[4]=((((-1.0)*r02*x7764))+(((-1.0)*x7755*x7762))+(((-1.0)*cj0*x7763))+((cj0*x7757))+((x7754*x7761)));
evalcond[5]=(((sj0*x7757))+(((-1.0)*x7759*x7762))+(((-1.0)*sj0*x7763))+(((-1.0)*r12*x7764))+((x7754*x7756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7765=((-1.0)*r10);
IkReal x7767 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7767)==0){
continue;
}
IkReal x7766=pow(x7767,-0.5);
CheckValue<IkReal> x7768 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7765),IKFAST_ATAN2_MAGTHRESH);
if(!x7768.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7768.value));
IkReal gconst139=(r11*x7766);
IkReal gconst140=(x7765*x7766);
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7769.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7770=((-1.0)*r10);
IkReal x7771=x7766;
CheckValue<IkReal> x7773 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7770),IKFAST_ATAN2_MAGTHRESH);
if(!x7773.valid){
continue;
}
IkReal x7772=((-1.0)*(x7773.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7772;
IkReal gconst138=x7772;
IkReal gconst139=(r11*x7771);
IkReal gconst140=(x7770*x7771);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7774=((1.0)*sj0);
IkReal x7775=((1.0)*gconst139);
CheckValue<IkReal> x7776=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7775)))),-1);
if(!x7776.valid){
continue;
}
CheckValue<IkReal> x7777 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7774)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7774))+(((-1.0)*cj0*r01*x7775))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7776.value)))+(x7777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7778=IKsin(j4);
IkReal x7779=IKcos(j4);
IkReal x7780=(gconst140*r00);
IkReal x7781=(sj1*sj2);
IkReal x7782=(gconst139*r11);
IkReal x7783=(gconst139*r01);
IkReal x7784=(gconst139*r21);
IkReal x7785=((1.0)*x7779);
IkReal x7786=((1.0)*x7778);
IkReal x7787=((1.0)*cj1*cj2);
IkReal x7788=(gconst140*x7779);
evalcond[0]=(((x7778*x7784))+(((-1.0)*gconst140*r20*x7786))+(((-1.0)*r22*x7785)));
evalcond[1]=(((x7778*x7782))+cj0+(((-1.0)*gconst140*r10*x7786))+(((-1.0)*r12*x7785)));
evalcond[2]=(((x7778*x7783))+(((-1.0)*sj0))+(((-1.0)*r02*x7785))+(((-1.0)*x7780*x7786)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7784*x7785))+((cj1*sj2))+(((-1.0)*r22*x7786))+((r20*x7788)));
evalcond[4]=((((-1.0)*x7783*x7785))+((x7779*x7780))+(((-1.0)*r02*x7786))+(((-1.0)*cj0*x7787))+((cj0*x7781)));
evalcond[5]=((((-1.0)*x7782*x7785))+((sj0*x7781))+((r10*x7788))+(((-1.0)*sj0*x7787))+(((-1.0)*r12*x7786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7789=((1.0)*gconst140);
CheckValue<IkReal> x7790=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7789))+(((-1.0)*gconst139*r00)))),-1);
if(!x7790.valid){
continue;
}
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7789))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7790.value)))+(x7791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7792=IKsin(j4);
IkReal x7793=IKcos(j4);
IkReal x7794=(gconst140*r00);
IkReal x7795=(sj1*sj2);
IkReal x7796=(gconst139*r11);
IkReal x7797=(gconst139*r01);
IkReal x7798=(gconst139*r21);
IkReal x7799=((1.0)*x7793);
IkReal x7800=((1.0)*x7792);
IkReal x7801=((1.0)*cj1*cj2);
IkReal x7802=(gconst140*x7793);
evalcond[0]=((((-1.0)*r22*x7799))+(((-1.0)*gconst140*r20*x7800))+((x7792*x7798)));
evalcond[1]=(cj0+(((-1.0)*r12*x7799))+((x7792*x7796))+(((-1.0)*gconst140*r10*x7800)));
evalcond[2]=((((-1.0)*sj0))+((x7792*x7797))+(((-1.0)*x7794*x7800))+(((-1.0)*r02*x7799)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7800))+(((-1.0)*x7798*x7799))+((r20*x7802)));
evalcond[4]=((((-1.0)*r02*x7800))+((x7793*x7794))+((cj0*x7795))+(((-1.0)*cj0*x7801))+(((-1.0)*x7797*x7799)));
evalcond[5]=((((-1.0)*sj0*x7801))+(((-1.0)*r12*x7800))+((sj0*x7795))+((r10*x7802))+(((-1.0)*x7796*x7799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7803=((-1.0)*r11);
IkReal x7805 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7805)==0){
continue;
}
IkReal x7804=pow(x7805,-0.5);
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(x7803),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7806.value))));
IkReal gconst142=(x7803*x7804);
IkReal gconst143=((1.0)*r10*x7804);
CheckValue<IkReal> x7807 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7807.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7808=((-1.0)*r11);
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal(x7808),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
IkReal x7809=((1.0)*(x7811.value));
IkReal x7810=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7809)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7809)));
IkReal gconst142=(x7808*x7810);
IkReal gconst143=((1.0)*r10*x7810);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7812=((-1.0)*r11);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal(x7812),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
IkReal x7813=((1.0)*(x7815.value));
IkReal x7814=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7813)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7813)));
IkReal gconst142=(x7812*x7814);
IkReal gconst143=((1.0)*r10*x7814);
IkReal x7816=r12*r12;
IkReal x7817=((1.0)*sj0);
IkReal x7818=(cj0*r02);
IkReal x7819=x7804;
j4eval[0]=((IKabs((((sj0*x7816*x7819))+(((-1.0)*x7817*x7819))+((r12*x7818*x7819)))))+(IKabs(((((-1.0)*x7818))+(((-1.0)*r12*x7817))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7820=((-1.0)*r11);
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal(x7820),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
IkReal x7821=((1.0)*(x7823.value));
IkReal x7822=x7804;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7821)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7821)));
IkReal gconst142=(x7820*x7822);
IkReal gconst143=((1.0)*r10*x7822);
IkReal x7824=r12*r12;
IkReal x7825=(cj1*r22*sj2);
IkReal x7826=(cj2*r22*sj1);
CheckValue<IkReal> x7830=IKPowWithIntegerCheck(((-1.0)+x7824),-1);
if(!x7830.valid){
continue;
}
IkReal x7827=x7830.value;
if((((1.0)+(((-1.0)*x7824)))) < -0.00001)
continue;
IkReal x7828=IKsqrt(((1.0)+(((-1.0)*x7824))));
IkReal x7829=((1.0)*r12*x7827*x7828);
j4eval[0]=((IKabs((x7826+x7825)))+(IKabs(((((-1.0)*x7826*x7829))+(((-1.0)*x7825*x7829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7831=(gconst142*r21);
IkReal x7832=(cj1*sj2);
IkReal x7833=(cj2*sj1);
IkReal x7834=(gconst143*r20);
CheckValue<IkReal> x7835=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7831*x7834))+(x7831*x7831)+(x7834*x7834)+(r22*r22))),-1);
if(!x7835.valid){
continue;
}
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal((((r22*x7832))+((r22*x7833)))),IkReal((((x7831*x7833))+((x7831*x7832))+(((-1.0)*x7832*x7834))+(((-1.0)*x7833*x7834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7835.value)))+(x7836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7837=IKsin(j4);
IkReal x7838=IKcos(j4);
IkReal x7839=(sj1*sj2);
IkReal x7840=(gconst143*r20);
IkReal x7841=((1.0)*x7838);
IkReal x7842=((1.0)*cj1*cj2);
IkReal x7843=((1.0)*x7837);
IkReal x7844=(gconst142*x7837);
IkReal x7845=(gconst143*x7838);
evalcond[0]=(((r21*x7844))+(((-1.0)*r22*x7841))+(((-1.0)*x7840*x7843)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7843))+(((-1.0)*r12*x7841))+((r11*x7844)));
evalcond[2]=((((-1.0)*gconst143*r00*x7843))+(((-1.0)*sj0))+(((-1.0)*r02*x7841))+((r01*x7844)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7843))+((cj1*sj2))+((x7838*x7840))+(((-1.0)*gconst142*r21*x7841)));
evalcond[4]=((((-1.0)*cj0*x7842))+(((-1.0)*gconst142*r01*x7841))+((cj0*x7839))+((r00*x7845))+(((-1.0)*r02*x7843)));
evalcond[5]=((((-1.0)*gconst142*r11*x7841))+((r10*x7845))+(((-1.0)*r12*x7843))+(((-1.0)*sj0*x7842))+((sj0*x7839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7846=((1.0)*sj0);
IkReal x7847=((1.0)*gconst142);
CheckValue<IkReal> x7848 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7846))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x7846))+(((-1.0)*cj0*r01*x7847))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7848.valid){
continue;
}
CheckValue<IkReal> x7849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7847))+(((-1.0)*gconst143*r21)))),-1);
if(!x7849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7848.value)+(((1.5707963267949)*(x7849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7850=IKsin(j4);
IkReal x7851=IKcos(j4);
IkReal x7852=(sj1*sj2);
IkReal x7853=(gconst143*r20);
IkReal x7854=((1.0)*x7851);
IkReal x7855=((1.0)*cj1*cj2);
IkReal x7856=((1.0)*x7850);
IkReal x7857=(gconst142*x7850);
IkReal x7858=(gconst143*x7851);
evalcond[0]=(((r21*x7857))+(((-1.0)*x7853*x7856))+(((-1.0)*r22*x7854)));
evalcond[1]=(((r11*x7857))+cj0+(((-1.0)*gconst143*r10*x7856))+(((-1.0)*r12*x7854)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7857))+(((-1.0)*r02*x7854))+(((-1.0)*gconst143*r00*x7856)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7854))+((x7851*x7853))+(((-1.0)*r22*x7856)));
evalcond[4]=((((-1.0)*cj0*x7855))+((cj0*x7852))+((r00*x7858))+(((-1.0)*r02*x7856))+(((-1.0)*gconst142*r01*x7854)));
evalcond[5]=((((-1.0)*sj0*x7855))+((sj0*x7852))+(((-1.0)*gconst142*r11*x7854))+((r10*x7858))+(((-1.0)*r12*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7859=((1.0)*gconst143);
CheckValue<IkReal> x7860 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7860.valid){
continue;
}
CheckValue<IkReal> x7861=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7859)))),-1);
if(!x7861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7860.value)+(((1.5707963267949)*(x7861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7862=IKsin(j4);
IkReal x7863=IKcos(j4);
IkReal x7864=(sj1*sj2);
IkReal x7865=(gconst143*r20);
IkReal x7866=((1.0)*x7863);
IkReal x7867=((1.0)*cj1*cj2);
IkReal x7868=((1.0)*x7862);
IkReal x7869=(gconst142*x7862);
IkReal x7870=(gconst143*x7863);
evalcond[0]=(((r21*x7869))+(((-1.0)*x7865*x7868))+(((-1.0)*r22*x7866)));
evalcond[1]=(cj0+((r11*x7869))+(((-1.0)*r12*x7866))+(((-1.0)*gconst143*r10*x7868)));
evalcond[2]=((((-1.0)*gconst143*r00*x7868))+(((-1.0)*sj0))+((r01*x7869))+(((-1.0)*r02*x7866)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7866))+((x7863*x7865))+(((-1.0)*r22*x7868)));
evalcond[4]=(((cj0*x7864))+(((-1.0)*gconst142*r01*x7866))+((r00*x7870))+(((-1.0)*r02*x7868))+(((-1.0)*cj0*x7867)));
evalcond[5]=(((r10*x7870))+((sj0*x7864))+(((-1.0)*r12*x7868))+(((-1.0)*sj0*x7867))+(((-1.0)*gconst142*r11*x7866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7871=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7871;
j4eval[1]=IKsign(x7871);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7872=((1.0)*cj5);
IkReal x7873=((((-1.0)*r01*x7872))+(((-1.0)*r00*sj5)));
j4eval[0]=x7873;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7872)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7874=cj5*cj5;
IkReal x7875=r11*r11;
IkReal x7876=(r11*sj5);
IkReal x7877=(cj5*r10);
IkReal x7878=((r12*r12)+((x7874*(r10*r10)))+(((-2.0)*x7876*x7877))+x7875+(((-1.0)*x7874*x7875)));
j4eval[0]=x7878;
j4eval[1]=IKsign(x7878);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7876))+x7877))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7879=cj5*cj5;
IkReal x7880=r11*r11;
IkReal x7881=(cj5*r10);
IkReal x7882=(r11*sj5);
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7879*x7880))+(r12*r12)+x7880+((x7879*(r10*r10)))+(((-2.0)*x7881*x7882)))),-1);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal(((((-1.0)*x7882))+x7881)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7883.value)))+(x7884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7885=IKsin(j4);
IkReal x7886=IKcos(j4);
IkReal x7887=(cj5*r10);
IkReal x7888=(r01*sj5);
IkReal x7889=(cj5*r00);
IkReal x7890=(cj5*r20);
IkReal x7891=((1.0)*x7886);
IkReal x7892=((1.0)*x7885);
IkReal x7893=(sj5*x7885);
evalcond[0]=(((r21*x7893))+(((-1.0)*r22*x7891))+(((-1.0)*x7890*x7892)));
evalcond[1]=(((x7885*x7888))+(((-1.0)*x7889*x7892))+(((-1.0)*r02*x7891)));
evalcond[2]=((((-1.0)*r11*sj5*x7891))+((x7886*x7887))+(((-1.0)*r12*x7892)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7891))+(((-1.0)*x7887*x7892))+((r11*x7893)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7891))+(((-1.0)*r22*x7892))+((x7886*x7890)));
evalcond[5]=((((-1.0)*x7888*x7891))+((x7886*x7889))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7894=((1.0)*cj5);
CheckValue<IkReal> x7895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7894)))),-1);
if(!x7895.valid){
continue;
}
CheckValue<IkReal> x7896 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7895.value)))+(x7896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7897=IKsin(j4);
IkReal x7898=IKcos(j4);
IkReal x7899=(cj5*r10);
IkReal x7900=(r01*sj5);
IkReal x7901=(cj5*r00);
IkReal x7902=(cj5*r20);
IkReal x7903=((1.0)*x7898);
IkReal x7904=((1.0)*x7897);
IkReal x7905=(sj5*x7897);
evalcond[0]=(((r21*x7905))+(((-1.0)*r22*x7903))+(((-1.0)*x7902*x7904)));
evalcond[1]=(((x7897*x7900))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7903)));
evalcond[2]=((((-1.0)*r12*x7904))+(((-1.0)*r11*sj5*x7903))+((x7898*x7899)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7903))+(((-1.0)*x7899*x7904))+((r11*x7905)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7898*x7902))+(((-1.0)*r22*x7904))+(((-1.0)*r21*sj5*x7903)));
evalcond[5]=(((x7898*x7901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7900*x7903))+(((-1.0)*r02*x7904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7906.valid){
continue;
}
CheckValue<IkReal> x7907 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7906.value)))+(x7907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7908=IKsin(j4);
IkReal x7909=IKcos(j4);
IkReal x7910=(cj5*r10);
IkReal x7911=(r01*sj5);
IkReal x7912=(cj5*r00);
IkReal x7913=(cj5*r20);
IkReal x7914=((1.0)*x7909);
IkReal x7915=((1.0)*x7908);
IkReal x7916=(sj5*x7908);
evalcond[0]=(((r21*x7916))+(((-1.0)*x7913*x7915))+(((-1.0)*r22*x7914)));
evalcond[1]=((((-1.0)*r02*x7914))+(((-1.0)*x7912*x7915))+((x7908*x7911)));
evalcond[2]=((((-1.0)*r11*sj5*x7914))+(((-1.0)*r12*x7915))+((x7909*x7910)));
evalcond[3]=((1.0)+(((-1.0)*x7910*x7915))+((r11*x7916))+(((-1.0)*r12*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7915))+(((-1.0)*r21*sj5*x7914))+((x7909*x7913)));
evalcond[5]=((((-1.0)*r02*x7915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7911*x7914))+((x7909*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7917=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7917;
j4eval[1]=IKsign(x7917);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7918=((1.0)*cj5);
IkReal x7919=((((-1.0)*r21*x7918))+(((-1.0)*r20*sj5)));
j4eval[0]=x7919;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7918))))));
j4eval[2]=IKsign(x7919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7920=cj5*cj5;
IkReal x7921=r11*r11;
IkReal x7922=(cj5*r10);
IkReal x7923=(r11*sj5);
IkReal x7924=((((-1.0)*x7921))+((x7920*x7921))+(((-1.0)*x7920*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7922*x7923)));
j4eval[0]=x7924;
j4eval[1]=((IKabs(((((-1.0)*x7923))+x7922)))+(IKabs(r12)));
j4eval[2]=IKsign(x7924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7925=cj5*cj5;
IkReal x7926=r11*r11;
IkReal x7927=(cj5*r10);
IkReal x7928=(r11*sj5);
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(((((-1.0)*x7928))+x7927)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
CheckValue<IkReal> x7930=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7925*(r10*r10)))+(((-1.0)*x7926))+(((-1.0)*(r12*r12)))+(((2.0)*x7927*x7928))+((x7925*x7926)))),-1);
if(!x7930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7929.value)+(((1.5707963267949)*(x7930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7931=IKsin(j4);
IkReal x7932=IKcos(j4);
IkReal x7933=(cj5*r10);
IkReal x7934=(r01*sj5);
IkReal x7935=(cj5*r00);
IkReal x7936=(cj5*r20);
IkReal x7937=((1.0)*x7932);
IkReal x7938=((1.0)*x7931);
IkReal x7939=(sj5*x7931);
evalcond[0]=(((r21*x7939))+(((-1.0)*r22*x7937))+(((-1.0)*x7936*x7938)));
evalcond[1]=((((-1.0)*x7935*x7938))+(((-1.0)*r02*x7937))+((x7931*x7934)));
evalcond[2]=((((-1.0)*r11*sj5*x7937))+((x7932*x7933))+(((-1.0)*r12*x7938)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7937))+((r11*x7939))+(((-1.0)*x7933*x7938)));
evalcond[4]=(((cj2*sj1))+((x7932*x7936))+(((-1.0)*r22*x7938))+(((-1.0)*r21*sj5*x7937))+((cj1*sj2)));
evalcond[5]=(((x7932*x7935))+(((-1.0)*x7934*x7937))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7938))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7940=((1.0)*cj5);
CheckValue<IkReal> x7941 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x7940))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7941.valid){
continue;
}
CheckValue<IkReal> x7942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7940))+(((-1.0)*r20*sj5)))),-1);
if(!x7942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7941.value)+(((1.5707963267949)*(x7942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7943=IKsin(j4);
IkReal x7944=IKcos(j4);
IkReal x7945=(cj5*r10);
IkReal x7946=(r01*sj5);
IkReal x7947=(cj5*r00);
IkReal x7948=(cj5*r20);
IkReal x7949=((1.0)*x7944);
IkReal x7950=((1.0)*x7943);
IkReal x7951=(sj5*x7943);
evalcond[0]=((((-1.0)*r22*x7949))+(((-1.0)*x7948*x7950))+((r21*x7951)));
evalcond[1]=((((-1.0)*x7947*x7950))+(((-1.0)*r02*x7949))+((x7943*x7946)));
evalcond[2]=((((-1.0)*r11*sj5*x7949))+(((-1.0)*r12*x7950))+((x7944*x7945)));
evalcond[3]=((-1.0)+((r11*x7951))+(((-1.0)*r12*x7949))+(((-1.0)*x7945*x7950)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x7949))+(((-1.0)*r22*x7950))+((cj1*sj2))+((x7944*x7948)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7950))+((cj1*cj2))+(((-1.0)*x7946*x7949))+((x7944*x7947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(cj5*r10);
IkReal x7957=(r01*sj5);
IkReal x7958=(cj5*r00);
IkReal x7959=(cj5*r20);
IkReal x7960=((1.0)*x7955);
IkReal x7961=((1.0)*x7954);
IkReal x7962=(sj5*x7954);
evalcond[0]=(((r21*x7962))+(((-1.0)*r22*x7960))+(((-1.0)*x7959*x7961)));
evalcond[1]=((((-1.0)*x7958*x7961))+((x7954*x7957))+(((-1.0)*r02*x7960)));
evalcond[2]=(((x7955*x7956))+(((-1.0)*r11*sj5*x7960))+(((-1.0)*r12*x7961)));
evalcond[3]=((-1.0)+(((-1.0)*x7956*x7961))+((r11*x7962))+(((-1.0)*r12*x7960)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7961))+((x7955*x7959))+((cj1*sj2))+(((-1.0)*r21*sj5*x7960)));
evalcond[5]=((((-1.0)*x7957*x7960))+((x7955*x7958))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7961))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7963=((-1.0)*r00);
IkReal x7965 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7965)==0){
continue;
}
IkReal x7964=pow(x7965,-0.5);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7963),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7966.value));
IkReal gconst145=(r01*x7964);
IkReal gconst146=(x7963*x7964);
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7967.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7968=((-1.0)*r00);
IkReal x7969=x7964;
CheckValue<IkReal> x7971 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7968),IKFAST_ATAN2_MAGTHRESH);
if(!x7971.valid){
continue;
}
IkReal x7970=((-1.0)*(x7971.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7970;
IkReal gconst144=x7970;
IkReal gconst145=(r01*x7969);
IkReal gconst146=(x7968*x7969);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7972=((1.0)*sj0);
IkReal x7973=((1.0)*gconst145);
CheckValue<IkReal> x7974 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7972)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7973))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7974.valid){
continue;
}
CheckValue<IkReal> x7975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7973)))),-1);
if(!x7975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7974.value)+(((1.5707963267949)*(x7975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7976=IKsin(j4);
IkReal x7977=IKcos(j4);
IkReal x7978=(gconst146*r10);
IkReal x7979=(sj1*sj2);
IkReal x7980=(gconst146*r20);
IkReal x7981=(gconst146*r00);
IkReal x7982=((1.0)*x7977);
IkReal x7983=((1.0)*x7976);
IkReal x7984=(gconst145*x7976);
IkReal x7985=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7982))+(((-1.0)*x7980*x7983))+((r21*x7984)));
evalcond[1]=((((-1.0)*r12*x7982))+cj0+(((-1.0)*x7978*x7983))+((r11*x7984)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7981*x7983))+((r01*x7984))+(((-1.0)*r02*x7982)));
evalcond[3]=((((-1.0)*r22*x7983))+((cj2*sj1))+((x7977*x7980))+(((-1.0)*gconst145*r21*x7982))+((cj1*sj2)));
evalcond[4]=(((x7977*x7981))+((cj0*x7979))+(((-1.0)*cj0*x7985))+(((-1.0)*r02*x7983))+(((-1.0)*gconst145*r01*x7982)));
evalcond[5]=((((-1.0)*r12*x7983))+(((-1.0)*gconst145*r11*x7982))+((x7977*x7978))+(((-1.0)*sj0*x7985))+((sj0*x7979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7986=((1.0)*gconst146);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7986))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7986))+(((-1.0)*gconst145*r10)))),-1);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7987.value)+(((1.5707963267949)*(x7988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=(gconst146*r10);
IkReal x7992=(sj1*sj2);
IkReal x7993=(gconst146*r20);
IkReal x7994=(gconst146*r00);
IkReal x7995=((1.0)*x7990);
IkReal x7996=((1.0)*x7989);
IkReal x7997=(gconst145*x7989);
IkReal x7998=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7997))+(((-1.0)*x7993*x7996))+(((-1.0)*r22*x7995)));
evalcond[1]=((((-1.0)*x7991*x7996))+((r11*x7997))+(((-1.0)*r12*x7995))+cj0);
evalcond[2]=((((-1.0)*sj0))+((r01*x7997))+(((-1.0)*r02*x7995))+(((-1.0)*x7994*x7996)));
evalcond[3]=(((cj2*sj1))+((x7990*x7993))+(((-1.0)*gconst145*r21*x7995))+((cj1*sj2))+(((-1.0)*r22*x7996)));
evalcond[4]=((((-1.0)*gconst145*r01*x7995))+((x7990*x7994))+((cj0*x7992))+(((-1.0)*cj0*x7998))+(((-1.0)*r02*x7996)));
evalcond[5]=(((x7990*x7991))+(((-1.0)*r12*x7996))+(((-1.0)*gconst145*r11*x7995))+((sj0*x7992))+(((-1.0)*sj0*x7998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7999=((-1.0)*r01);
IkReal x8001 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8001)==0){
continue;
}
IkReal x8000=pow(x8001,-0.5);
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(x7999),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8002.value))));
IkReal gconst148=(x7999*x8000);
IkReal gconst149=((1.0)*r00*x8000);
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8003.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8004=((-1.0)*r01);
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(x8004),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
IkReal x8005=((1.0)*(x8007.value));
IkReal x8006=x8000;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8005)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8005)));
IkReal gconst148=(x8004*x8006);
IkReal gconst149=((1.0)*r00*x8006);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8008=((-1.0)*r01);
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal(x8008),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
IkReal x8009=((1.0)*(x8011.value));
IkReal x8010=x8000;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8009)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8009)));
IkReal gconst148=(x8008*x8010);
IkReal gconst149=((1.0)*r00*x8010);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8012=((-1.0)*r01);
CheckValue<IkReal> x8015 = IKatan2WithCheck(IkReal(x8012),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8015.valid){
continue;
}
IkReal x8013=((1.0)*(x8015.value));
IkReal x8014=x8000;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8013)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8013)));
IkReal gconst148=(x8012*x8014);
IkReal gconst149=((1.0)*r00*x8014);
IkReal x8016=r02*r02;
IkReal x8017=(r12*sj0);
IkReal x8018=((1.0)*cj0);
IkReal x8019=x8000;
j4eval[0]=((IKabs(((((-1.0)*x8018*x8019))+((cj0*x8016*x8019))+((r02*x8017*x8019)))))+(IKabs(((((-1.0)*r02*x8018))+(((-1.0)*x8017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8020=((1.0)*sj0);
IkReal x8021=((1.0)*gconst148);
CheckValue<IkReal> x8022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8021))+(((-1.0)*gconst149*r21)))),-1);
if(!x8022.valid){
continue;
}
CheckValue<IkReal> x8023 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8020))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8021))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8022.value)))+(x8023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8024=IKsin(j4);
IkReal x8025=IKcos(j4);
IkReal x8026=(gconst148*r11);
IkReal x8027=(sj1*sj2);
IkReal x8028=((1.0)*x8025);
IkReal x8029=(gconst149*x8025);
IkReal x8030=(gconst148*x8024);
IkReal x8031=((1.0)*cj1*cj2);
IkReal x8032=((1.0)*x8024);
evalcond[0]=((((-1.0)*gconst149*r20*x8032))+((r21*x8030))+(((-1.0)*r22*x8028)));
evalcond[1]=((((-1.0)*r12*x8028))+cj0+((x8024*x8026))+(((-1.0)*gconst149*r10*x8032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8028))+(((-1.0)*gconst149*r00*x8032))+((r01*x8030)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8028))+((cj1*sj2))+((r20*x8029))+(((-1.0)*r22*x8032)));
evalcond[4]=((((-1.0)*gconst148*r01*x8028))+(((-1.0)*r02*x8032))+((cj0*x8027))+((r00*x8029))+(((-1.0)*cj0*x8031)));
evalcond[5]=(((r10*x8029))+(((-1.0)*sj0*x8031))+(((-1.0)*r12*x8032))+((sj0*x8027))+(((-1.0)*x8026*x8028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8033=((1.0)*gconst149);
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8033))+(((-1.0)*gconst148*r10)))),-1);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8033))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8034.value)))+(x8035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8036=IKsin(j4);
IkReal x8037=IKcos(j4);
IkReal x8038=(gconst148*r11);
IkReal x8039=(sj1*sj2);
IkReal x8040=((1.0)*x8037);
IkReal x8041=(gconst149*x8037);
IkReal x8042=(gconst148*x8036);
IkReal x8043=((1.0)*cj1*cj2);
IkReal x8044=((1.0)*x8036);
evalcond[0]=((((-1.0)*gconst149*r20*x8044))+((r21*x8042))+(((-1.0)*r22*x8040)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8044))+((x8036*x8038))+(((-1.0)*r12*x8040)));
evalcond[2]=(((r01*x8042))+(((-1.0)*sj0))+(((-1.0)*r02*x8040))+(((-1.0)*gconst149*r00*x8044)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8040))+((cj1*sj2))+((r20*x8041))+(((-1.0)*r22*x8044)));
evalcond[4]=((((-1.0)*cj0*x8043))+(((-1.0)*gconst148*r01*x8040))+((cj0*x8039))+(((-1.0)*r02*x8044))+((r00*x8041)));
evalcond[5]=(((r10*x8041))+((sj0*x8039))+(((-1.0)*sj0*x8043))+(((-1.0)*x8038*x8040))+(((-1.0)*r12*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8045=((1.0)*gconst149);
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8045)))),-1);
if(!x8046.valid){
continue;
}
CheckValue<IkReal> x8047 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8046.value)))+(x8047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8048=IKsin(j4);
IkReal x8049=IKcos(j4);
IkReal x8050=(gconst148*r11);
IkReal x8051=(sj1*sj2);
IkReal x8052=((1.0)*x8049);
IkReal x8053=(gconst149*x8049);
IkReal x8054=(gconst148*x8048);
IkReal x8055=((1.0)*cj1*cj2);
IkReal x8056=((1.0)*x8048);
evalcond[0]=((((-1.0)*gconst149*r20*x8056))+(((-1.0)*r22*x8052))+((r21*x8054)));
evalcond[1]=((((-1.0)*r12*x8052))+cj0+(((-1.0)*gconst149*r10*x8056))+((x8048*x8050)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8052))+(((-1.0)*gconst149*r00*x8056))+((r01*x8054)));
evalcond[3]=(((cj2*sj1))+((r20*x8053))+(((-1.0)*gconst148*r21*x8052))+((cj1*sj2))+(((-1.0)*r22*x8056)));
evalcond[4]=(((r00*x8053))+(((-1.0)*gconst148*r01*x8052))+((cj0*x8051))+(((-1.0)*r02*x8056))+(((-1.0)*cj0*x8055)));
evalcond[5]=((((-1.0)*r12*x8056))+(((-1.0)*sj0*x8055))+((r10*x8053))+(((-1.0)*x8050*x8052))+((sj0*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8057=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8057;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8058=((1.0)*cj5);
IkReal x8059=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8058)));
j4eval[0]=x8059;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8058))))));
j4eval[2]=IKsign(x8059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8060=cj5*cj5;
IkReal x8061=r01*r01;
IkReal x8062=(r01*sj5);
IkReal x8063=(cj5*r00);
IkReal x8064=((((-1.0)*x8061))+((x8060*x8061))+(((-1.0)*(r02*r02)))+(((-1.0)*x8060*(r00*r00)))+(((2.0)*x8062*x8063)));
j4eval[0]=x8064;
j4eval[1]=IKsign(x8064);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8062))+x8063))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8065=cj5*cj5;
IkReal x8066=r01*r01;
IkReal x8067=(r01*sj5);
IkReal x8068=(cj5*r00);
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal(((((-1.0)*x8067))+x8068)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
CheckValue<IkReal> x8070=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8066))+((x8065*x8066))+(((2.0)*x8067*x8068))+(((-1.0)*(r02*r02)))+(((-1.0)*x8065*(r00*r00))))),-1);
if(!x8070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8069.value)+(((1.5707963267949)*(x8070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8071=IKsin(j4);
IkReal x8072=IKcos(j4);
IkReal x8073=(cj5*r10);
IkReal x8074=(r01*sj5);
IkReal x8075=(cj5*r00);
IkReal x8076=(cj5*r20);
IkReal x8077=((1.0)*x8072);
IkReal x8078=((1.0)*x8071);
IkReal x8079=(sj5*x8071);
evalcond[0]=(((r21*x8079))+(((-1.0)*r22*x8077))+(((-1.0)*x8076*x8078)));
evalcond[1]=((((-1.0)*x8073*x8078))+((r11*x8079))+(((-1.0)*r12*x8077)));
evalcond[2]=(((x8072*x8075))+(((-1.0)*r02*x8078))+(((-1.0)*x8074*x8077)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8077))+(((-1.0)*x8075*x8078))+((x8071*x8074)));
evalcond[4]=(((x8072*x8076))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8077))+(((-1.0)*r22*x8078)));
evalcond[5]=(((x8072*x8073))+(((-1.0)*r11*sj5*x8077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8080=((1.0)*cj5);
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8080)))),-1);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8081.value)+(((1.5707963267949)*(x8082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(cj5*r10);
IkReal x8086=(r01*sj5);
IkReal x8087=(cj5*r00);
IkReal x8088=(cj5*r20);
IkReal x8089=((1.0)*x8084);
IkReal x8090=((1.0)*x8083);
IkReal x8091=(sj5*x8083);
evalcond[0]=((((-1.0)*x8088*x8090))+(((-1.0)*r22*x8089))+((r21*x8091)));
evalcond[1]=((((-1.0)*x8085*x8090))+((r11*x8091))+(((-1.0)*r12*x8089)));
evalcond[2]=((((-1.0)*r02*x8090))+(((-1.0)*x8086*x8089))+((x8084*x8087)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8089))+(((-1.0)*x8087*x8090))+((x8083*x8086)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8089))+((cj1*sj2))+((x8084*x8088))+(((-1.0)*r22*x8090)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8089))+((x8084*x8085))+(((-1.0)*r12*x8090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8092.valid){
continue;
}
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8092.value)))+(x8093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8094=IKsin(j4);
IkReal x8095=IKcos(j4);
IkReal x8096=(cj5*r10);
IkReal x8097=(r01*sj5);
IkReal x8098=(cj5*r00);
IkReal x8099=(cj5*r20);
IkReal x8100=((1.0)*x8095);
IkReal x8101=((1.0)*x8094);
IkReal x8102=(sj5*x8094);
evalcond[0]=((((-1.0)*x8099*x8101))+(((-1.0)*r22*x8100))+((r21*x8102)));
evalcond[1]=((((-1.0)*x8096*x8101))+((r11*x8102))+(((-1.0)*r12*x8100)));
evalcond[2]=(((x8095*x8098))+(((-1.0)*r02*x8101))+(((-1.0)*x8097*x8100)));
evalcond[3]=((-1.0)+(((-1.0)*x8098*x8101))+(((-1.0)*r02*x8100))+((x8094*x8097)));
evalcond[4]=((((-1.0)*r21*sj5*x8100))+((cj2*sj1))+((x8095*x8099))+((cj1*sj2))+(((-1.0)*r22*x8101)));
evalcond[5]=(((x8095*x8096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8100))+(((-1.0)*r12*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8103;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8104=((1.0)*cj5);
IkReal x8105=((((-1.0)*r21*x8104))+(((-1.0)*r20*sj5)));
j4eval[0]=x8105;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8104)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8106=cj5*cj5;
IkReal x8107=r01*r01;
IkReal x8108=(cj5*r00);
IkReal x8109=(r01*sj5);
IkReal x8110=((((-1.0)*x8106*x8107))+((x8106*(r00*r00)))+(((-2.0)*x8108*x8109))+(r02*r02)+x8107);
j4eval[0]=x8110;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8109))+x8108))));
j4eval[2]=IKsign(x8110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8111=cj5*cj5;
IkReal x8112=r01*r01;
IkReal x8113=(r01*sj5);
IkReal x8114=(cj5*r00);
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal((x8114+(((-1.0)*x8113)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8113*x8114))+(r02*r02)+((x8111*(r00*r00)))+x8112+(((-1.0)*x8111*x8112)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(cj5*r10);
IkReal x8120=(r01*sj5);
IkReal x8121=(cj5*r00);
IkReal x8122=(cj5*r20);
IkReal x8123=((1.0)*x8118);
IkReal x8124=((1.0)*x8117);
IkReal x8125=(sj5*x8117);
evalcond[0]=((((-1.0)*x8122*x8124))+((r21*x8125))+(((-1.0)*r22*x8123)));
evalcond[1]=((((-1.0)*r12*x8123))+((r11*x8125))+(((-1.0)*x8119*x8124)));
evalcond[2]=(((x8118*x8121))+(((-1.0)*r02*x8124))+(((-1.0)*x8120*x8123)));
evalcond[3]=((1.0)+(((-1.0)*x8121*x8124))+((x8117*x8120))+(((-1.0)*r02*x8123)));
evalcond[4]=(((cj2*sj1))+((x8118*x8122))+(((-1.0)*r21*sj5*x8123))+((cj1*sj2))+(((-1.0)*r22*x8124)));
evalcond[5]=((((-1.0)*r11*sj5*x8123))+(((-1.0)*r12*x8124))+((x8118*x8119))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8126=((1.0)*cj5);
CheckValue<IkReal> x8127 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8127.valid){
continue;
}
CheckValue<IkReal> x8128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8126))+(((-1.0)*r20*sj5)))),-1);
if(!x8128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8127.value)+(((1.5707963267949)*(x8128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8129=IKsin(j4);
IkReal x8130=IKcos(j4);
IkReal x8131=(cj5*r10);
IkReal x8132=(r01*sj5);
IkReal x8133=(cj5*r00);
IkReal x8134=(cj5*r20);
IkReal x8135=((1.0)*x8130);
IkReal x8136=((1.0)*x8129);
IkReal x8137=(sj5*x8129);
evalcond[0]=((((-1.0)*x8134*x8136))+(((-1.0)*r22*x8135))+((r21*x8137)));
evalcond[1]=(((r11*x8137))+(((-1.0)*x8131*x8136))+(((-1.0)*r12*x8135)));
evalcond[2]=((((-1.0)*r02*x8136))+(((-1.0)*x8132*x8135))+((x8130*x8133)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8135))+((x8129*x8132))+(((-1.0)*x8133*x8136)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8136))+(((-1.0)*r21*sj5*x8135))+((cj1*sj2))+((x8130*x8134)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8130*x8131))+(((-1.0)*r12*x8136))+(((-1.0)*r11*sj5*x8135))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8138 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8138.valid){
continue;
}
CheckValue<IkReal> x8139=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8138.value)+(((1.5707963267949)*(x8139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8140=IKsin(j4);
IkReal x8141=IKcos(j4);
IkReal x8142=(cj5*r10);
IkReal x8143=(r01*sj5);
IkReal x8144=(cj5*r00);
IkReal x8145=(cj5*r20);
IkReal x8146=((1.0)*x8141);
IkReal x8147=((1.0)*x8140);
IkReal x8148=(sj5*x8140);
evalcond[0]=((((-1.0)*x8145*x8147))+(((-1.0)*r22*x8146))+((r21*x8148)));
evalcond[1]=(((r11*x8148))+(((-1.0)*r12*x8146))+(((-1.0)*x8142*x8147)));
evalcond[2]=(((x8141*x8144))+(((-1.0)*x8143*x8146))+(((-1.0)*r02*x8147)));
evalcond[3]=((1.0)+((x8140*x8143))+(((-1.0)*x8144*x8147))+(((-1.0)*r02*x8146)));
evalcond[4]=(((cj2*sj1))+((x8141*x8145))+((cj1*sj2))+(((-1.0)*r22*x8147))+(((-1.0)*r21*sj5*x8146)));
evalcond[5]=((((-1.0)*r11*sj5*x8146))+((x8141*x8142))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8147))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8149=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8149);
rxp1_1=(px*r21);
rxp1_2=(r11*x8149);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8150=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8150);
rxp1_1=(px*r21);
rxp1_2=(r11*x8150);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8151=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8151);
rxp1_1=(px*r21);
rxp1_2=(r11*x8151);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8154=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8154.valid){
continue;
}
IkReal x8152=x8154.value;
IkReal x8153=(sj0*x8152);
cj4array[0]=((((-1.0)*sj1*sj2*x8153))+((cj1*cj2*x8153)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8155=IKsin(j4);
IkReal x8156=IKcos(j4);
IkReal x8157=(r21*sj5);
IkReal x8158=(cj5*r20);
IkReal x8159=((1.0)*x8155);
IkReal x8160=((1.0)*x8156);
evalcond[0]=((-1.0)*r02*x8155);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8160)));
evalcond[2]=((((-1.0)*x8158*x8159))+((x8155*x8157)));
evalcond[3]=((((-1.0)*cj5*r10*x8159))+((r11*sj5*x8155)));
evalcond[4]=(((cj2*sj1))+((x8156*x8158))+(((-1.0)*x8157*x8160))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8163=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8163.valid){
continue;
}
IkReal x8161=x8163.value;
IkReal x8162=((1.0)*x8161);
cj4array[0]=((((-1.0)*cj2*sj1*x8162))+(((-1.0)*cj1*sj2*x8162)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8164=IKsin(j4);
IkReal x8165=IKcos(j4);
IkReal x8166=(r11*sj5);
IkReal x8167=((1.0)*sj0);
IkReal x8168=((1.0)*x8165);
IkReal x8169=((1.0)*cj5*x8164);
evalcond[0]=((-1.0)*r02*x8164);
evalcond[1]=((((-1.0)*r02*x8168))+(((-1.0)*x8167)));
evalcond[2]=(((r21*sj5*x8164))+(((-1.0)*r20*x8169)));
evalcond[3]=(((x8164*x8166))+(((-1.0)*r10*x8169)));
evalcond[4]=((((-1.0)*cj1*cj2*x8167))+(((-1.0)*x8166*x8168))+((cj5*r10*x8165))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8170=IKPowWithIntegerCheck(r02,-1);
if(!x8170.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8170.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*x8172);
IkReal x8174=(sj5*x8171);
IkReal x8175=((1.0)*sj5*x8172);
IkReal x8176=((1.0)*cj5*x8171);
evalcond[0]=((-1.0)*r02*x8171);
evalcond[1]=((((-1.0)*r20*x8176))+((r21*x8174)));
evalcond[2]=(((r11*x8174))+(((-1.0)*r10*x8176)));
evalcond[3]=(((cj2*sj1))+((r20*x8173))+((cj1*sj2))+(((-1.0)*r21*x8175)));
evalcond[4]=((((-1.0)*r11*x8175))+(((-1.0)*cj1*cj2*sj0))+((r10*x8173))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8177=((1.0)*sj0);
IkReal x8178=((1.0)*cj0);
CheckValue<IkReal> x8179 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8177))+(((-1.0)*r02*x8178)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8178))+(((-1.0)*r11*sj5*x8177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8179.valid){
continue;
}
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8179.value)+(((1.5707963267949)*(x8180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8181=IKsin(j4);
IkReal x8182=IKcos(j4);
IkReal x8183=(cj5*r10);
IkReal x8184=(sj1*sj2);
IkReal x8185=(r01*sj5);
IkReal x8186=(cj5*r00);
IkReal x8187=(cj5*r20);
IkReal x8188=((1.0)*x8182);
IkReal x8189=((1.0)*cj1*cj2);
IkReal x8190=((1.0)*x8181);
IkReal x8191=(sj5*x8181);
evalcond[0]=((((-1.0)*r22*x8188))+((r21*x8191))+(((-1.0)*x8187*x8190)));
evalcond[1]=(((r11*x8191))+cj0+(((-1.0)*x8183*x8190))+(((-1.0)*r12*x8188)));
evalcond[2]=((((-1.0)*r02*x8188))+(((-1.0)*sj0))+(((-1.0)*x8186*x8190))+((x8181*x8185)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8190))+((cj1*sj2))+(((-1.0)*r21*sj5*x8188))+((x8182*x8187)));
evalcond[4]=((((-1.0)*r02*x8190))+((x8182*x8186))+(((-1.0)*x8185*x8188))+(((-1.0)*cj0*x8189))+((cj0*x8184)));
evalcond[5]=(((sj0*x8184))+((x8182*x8183))+(((-1.0)*r12*x8190))+(((-1.0)*sj0*x8189))+(((-1.0)*r11*sj5*x8188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8192=((1.0)*cj5);
CheckValue<IkReal> x8193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8192)))),-1);
if(!x8193.valid){
continue;
}
CheckValue<IkReal> x8194 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8193.value)))+(x8194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8195=IKsin(j4);
IkReal x8196=IKcos(j4);
IkReal x8197=(cj5*r10);
IkReal x8198=(sj1*sj2);
IkReal x8199=(r01*sj5);
IkReal x8200=(cj5*r00);
IkReal x8201=(cj5*r20);
IkReal x8202=((1.0)*x8196);
IkReal x8203=((1.0)*cj1*cj2);
IkReal x8204=((1.0)*x8195);
IkReal x8205=(sj5*x8195);
evalcond[0]=((((-1.0)*x8201*x8204))+(((-1.0)*r22*x8202))+((r21*x8205)));
evalcond[1]=(((r11*x8205))+cj0+(((-1.0)*r12*x8202))+(((-1.0)*x8197*x8204)));
evalcond[2]=((((-1.0)*sj0))+((x8195*x8199))+(((-1.0)*x8200*x8204))+(((-1.0)*r02*x8202)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8202))+(((-1.0)*r22*x8204))+((x8196*x8201)));
evalcond[4]=((((-1.0)*cj0*x8203))+(((-1.0)*r02*x8204))+((x8196*x8200))+(((-1.0)*x8199*x8202))+((cj0*x8198)));
evalcond[5]=(((sj0*x8198))+(((-1.0)*r12*x8204))+((x8196*x8197))+(((-1.0)*r11*sj5*x8202))+(((-1.0)*sj0*x8203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8206=((1.0)*cj5);
CheckValue<IkReal> x8207 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8207.valid){
continue;
}
CheckValue<IkReal> x8208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8206))+(((-1.0)*r00*sj5)))),-1);
if(!x8208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8207.value)+(((1.5707963267949)*(x8208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8209=IKsin(j4);
IkReal x8210=IKcos(j4);
IkReal x8211=(cj5*r10);
IkReal x8212=(sj1*sj2);
IkReal x8213=(r01*sj5);
IkReal x8214=(cj5*r00);
IkReal x8215=(cj5*r20);
IkReal x8216=((1.0)*x8210);
IkReal x8217=((1.0)*cj1*cj2);
IkReal x8218=((1.0)*x8209);
IkReal x8219=(sj5*x8209);
evalcond[0]=((((-1.0)*r22*x8216))+(((-1.0)*x8215*x8218))+((r21*x8219)));
evalcond[1]=(((r11*x8219))+cj0+(((-1.0)*x8211*x8218))+(((-1.0)*r12*x8216)));
evalcond[2]=(((x8209*x8213))+(((-1.0)*sj0))+(((-1.0)*r02*x8216))+(((-1.0)*x8214*x8218)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8216))+((x8210*x8215))+(((-1.0)*r22*x8218)));
evalcond[4]=((((-1.0)*cj0*x8217))+((cj0*x8212))+(((-1.0)*r02*x8218))+((x8210*x8214))+(((-1.0)*x8213*x8216)));
evalcond[5]=(((x8210*x8211))+(((-1.0)*r12*x8218))+(((-1.0)*sj0*x8217))+(((-1.0)*r11*sj5*x8216))+((sj0*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8220=cj5*cj5;
IkReal x8221=r21*r21;
IkReal x8222=(cj2*sj1);
IkReal x8223=(cj1*sj2);
IkReal x8224=(r21*sj5);
IkReal x8225=((1.0)*cj5*r20);
CheckValue<IkReal> x8226=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8220*x8221))+(r22*r22)+(((-2.0)*cj5*r20*x8224))+((x8220*(r20*r20)))+x8221)),-1);
if(!x8226.valid){
continue;
}
CheckValue<IkReal> x8227 = IKatan2WithCheck(IkReal((((r22*x8222))+((r22*x8223)))),IkReal((((x8222*x8224))+(((-1.0)*x8223*x8225))+((x8223*x8224))+(((-1.0)*x8222*x8225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8226.value)))+(x8227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8228=IKsin(j4);
IkReal x8229=IKcos(j4);
IkReal x8230=(r21*sj5);
IkReal x8231=(cj5*r20);
IkReal x8232=((1.0)*x8229);
IkReal x8233=((1.0)*x8228);
evalcond[0]=(((x8228*x8230))+(((-1.0)*r22*x8232))+(((-1.0)*x8231*x8233)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x8229*x8231))+(((-1.0)*r22*x8233))+(((-1.0)*x8230*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8234=(cj5*sj4);
IkReal x8235=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8235))+(((-1.0)*r00*x8234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8235))+((r10*x8234))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8235))+(((-1.0)*r00*x8234))))+IKsqr(((((-1.0)*r11*x8235))+((r10*x8234))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8235))+(((-1.0)*r00*x8234))), ((((-1.0)*r11*x8235))+((r10*x8234))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8236=IKcos(j0);
IkReal x8237=IKsin(j0);
IkReal x8238=(cj4*cj5);
IkReal x8239=((0.21325)*cj2);
IkReal x8240=((1.0)*sj2);
IkReal x8241=(r11*sj5);
IkReal x8242=(r00*sj5);
IkReal x8243=(cj5*r11);
IkReal x8244=((1.0)*sj4);
IkReal x8245=((1.0)*sj5);
IkReal x8246=((1.0)*cj2);
IkReal x8247=(cj5*r01);
IkReal x8248=((1.0)*cj4);
IkReal x8249=((0.21325)*sj2);
IkReal x8250=(cj1*x8237);
IkReal x8251=(cj1*x8236);
IkReal x8252=(sj1*x8236);
IkReal x8253=(sj1*x8237);
evalcond[0]=((((-1.0)*cj5*r10*x8244))+(((-1.0)*r12*x8248))+((sj4*x8241))+x8236);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8244))+(((-1.0)*x8237))+(((-1.0)*r02*x8248)));
evalcond[2]=((((-1.0)*x8246*x8252))+(((-1.0)*x8240*x8251))+(((-1.0)*x8247))+(((-1.0)*x8242)));
evalcond[3]=((((-1.0)*x8246*x8253))+(((-1.0)*x8240*x8250))+(((-1.0)*r10*x8245))+(((-1.0)*x8243)));
evalcond[4]=((((-1.0)*x8246*x8251))+((r00*x8238))+(((-1.0)*r02*x8244))+(((-1.0)*cj4*r01*x8245))+((sj2*x8252)));
evalcond[5]=((((-1.0)*x8241*x8248))+(((-1.0)*x8246*x8250))+((r10*x8238))+(((-1.0)*r12*x8244))+((sj2*x8253)));
evalcond[6]=((((-1.0)*x8249*x8252))+(((-0.08535)*x8247))+(((-0.08535)*x8242))+(((-0.11235)*x8237))+(((-1.0)*px))+((x8239*x8251))+(((0.24365)*x8251)));
evalcond[7]=((((-1.0)*x8249*x8253))+(((-0.08535)*x8243))+(((0.11235)*x8236))+(((-1.0)*py))+((x8239*x8250))+(((-0.08535)*r10*sj5))+(((0.24365)*x8250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8254 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8254.valid){
continue;
}
CheckValue<IkReal> x8255=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8255.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8254.value)+(((1.5707963267949)*(x8255.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8256=IKcos(j0);
IkReal x8257=IKsin(j0);
IkReal x8258=((0.21325)*cj2);
IkReal x8259=((1.0)*sj2);
IkReal x8260=(r00*sj5);
IkReal x8261=((1.0)*cj5);
IkReal x8262=(r10*sj5);
IkReal x8263=((0.08535)*cj5);
IkReal x8264=(cj1*x8257);
IkReal x8265=(cj1*x8256);
IkReal x8266=((0.21325)*sj1*sj2);
IkReal x8267=((1.0)*cj2*sj1);
evalcond[0]=((((-1.0)*x8256*x8267))+(((-1.0)*x8259*x8265))+(((-1.0)*r01*x8261))+(((-1.0)*x8260)));
evalcond[1]=((((-1.0)*x8257*x8267))+(((-1.0)*x8259*x8264))+(((-1.0)*x8262))+(((-1.0)*r11*x8261)));
evalcond[2]=((((-1.0)*x8256*x8266))+(((-1.0)*px))+((x8258*x8265))+(((-1.0)*r01*x8263))+(((-0.11235)*x8257))+(((-0.08535)*x8260))+(((0.24365)*x8265)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*x8257*x8266))+((x8258*x8264))+(((-1.0)*r11*x8263))+(((0.11235)*x8256))+(((-0.08535)*x8262))+(((0.24365)*x8264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8268=((1.0)*cj5);
IkReal x8269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8268)));
j4eval[0]=x8269;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8268)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8270=((1.0)*cj5);
IkReal x8271=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8270)));
j4eval[0]=x8271;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8270)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8272=((1.0)*sj0);
IkReal x8273=((1.0)*cj0);
IkReal x8274=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8274;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x8273))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8272)))))+(IKabs(((((-1.0)*r02*x8273))+(((-1.0)*r12*x8272))))));
j4eval[2]=IKsign(x8274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8275=((-1.0)*r20);
IkReal x8277 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8277)==0){
continue;
}
IkReal x8276=pow(x8277,-0.5);
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8275),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8278.value));
IkReal gconst133=(r21*x8276);
IkReal gconst134=(x8275*x8276);
CheckValue<IkReal> x8279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8280=((-1.0)*r20);
IkReal x8281=x8276;
CheckValue<IkReal> x8283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8280),IKFAST_ATAN2_MAGTHRESH);
if(!x8283.valid){
continue;
}
IkReal x8282=((-1.0)*(x8283.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8282;
IkReal gconst132=x8282;
IkReal gconst133=(r21*x8281);
IkReal gconst134=(x8280*x8281);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8284=((-1.0)*r20);
IkReal x8285=x8276;
CheckValue<IkReal> x8287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8284),IKFAST_ATAN2_MAGTHRESH);
if(!x8287.valid){
continue;
}
IkReal x8286=((-1.0)*(x8287.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8286;
IkReal gconst132=x8286;
IkReal gconst133=(r21*x8285);
IkReal gconst134=(x8284*x8285);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8288=((-1.0)*r20);
IkReal x8289=x8276;
CheckValue<IkReal> x8291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8288),IKFAST_ATAN2_MAGTHRESH);
if(!x8291.valid){
continue;
}
IkReal x8290=((-1.0)*(x8291.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8290;
IkReal gconst132=x8290;
IkReal gconst133=(r21*x8289);
IkReal gconst134=(x8288*x8289);
IkReal x8292=r22*r22;
CheckValue<IkReal> x8295=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8292))),-1);
if(!x8295.valid){
continue;
}
IkReal x8293=x8295.value;
IkReal x8294=((((2.0)*x8293*(r20*r20)*(r21*r21)))+((x8293*(r20*r20*r20*r20)))+((x8293*(r21*r21*r21*r21)))+x8292);
j4eval[0]=x8294;
j4eval[1]=IKsign(x8294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8296=(gconst133*r21);
IkReal x8297=(cj1*sj2);
IkReal x8298=(gconst134*r20);
IkReal x8299=(cj2*sj1);
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal((((r22*x8297))+((r22*x8299)))),IkReal((((x8296*x8297))+((x8296*x8299))+(((-1.0)*x8297*x8298))+(((-1.0)*x8298*x8299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
CheckValue<IkReal> x8301=IKPowWithIntegerCheck(IKsign(((x8298*x8298)+(r22*r22)+(x8296*x8296)+(((-2.0)*x8296*x8298)))),-1);
if(!x8301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8300.value)+(((1.5707963267949)*(x8301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8302=IKsin(j4);
IkReal x8303=IKcos(j4);
IkReal x8304=(sj1*sj2);
IkReal x8305=(gconst133*r11);
IkReal x8306=(gconst133*r21);
IkReal x8307=(gconst133*r01);
IkReal x8308=((1.0)*x8303);
IkReal x8309=(gconst134*x8303);
IkReal x8310=((1.0)*x8302);
IkReal x8311=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8308))+((x8302*x8306))+(((-1.0)*gconst134*r20*x8310)));
evalcond[1]=((((-1.0)*gconst134*r10*x8310))+cj0+(((-1.0)*r12*x8308))+((x8302*x8305)));
evalcond[2]=((((-1.0)*sj0))+((x8302*x8307))+(((-1.0)*r02*x8308))+(((-1.0)*gconst134*r00*x8310)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8310))+((r20*x8309))+(((-1.0)*x8306*x8308)));
evalcond[4]=(((r00*x8309))+(((-1.0)*r02*x8310))+((cj0*x8304))+(((-1.0)*cj0*x8311))+(((-1.0)*x8307*x8308)));
evalcond[5]=(((sj0*x8304))+(((-1.0)*sj0*x8311))+(((-1.0)*x8305*x8308))+((r10*x8309))+(((-1.0)*r12*x8310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8312=((1.0)*gconst134);
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8312))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
CheckValue<IkReal> x8314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8312)))),-1);
if(!x8314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8313.value)+(((1.5707963267949)*(x8314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8315=IKsin(j4);
IkReal x8316=IKcos(j4);
IkReal x8317=(sj1*sj2);
IkReal x8318=(gconst133*r11);
IkReal x8319=(gconst133*r21);
IkReal x8320=(gconst133*r01);
IkReal x8321=((1.0)*x8316);
IkReal x8322=(gconst134*x8316);
IkReal x8323=((1.0)*x8315);
IkReal x8324=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8323))+(((-1.0)*r22*x8321))+((x8315*x8319)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x8323))+((x8315*x8318))+(((-1.0)*r12*x8321)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8323))+((x8315*x8320))+(((-1.0)*r02*x8321)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8323))+((cj1*sj2))+((r20*x8322))+(((-1.0)*x8319*x8321)));
evalcond[4]=(((cj0*x8317))+((r00*x8322))+(((-1.0)*x8320*x8321))+(((-1.0)*r02*x8323))+(((-1.0)*cj0*x8324)));
evalcond[5]=(((r10*x8322))+(((-1.0)*x8318*x8321))+((sj0*x8317))+(((-1.0)*sj0*x8324))+(((-1.0)*r12*x8323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8325=((1.0)*gconst134);
CheckValue<IkReal> x8326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8325))+(((-1.0)*gconst133*r00)))),-1);
if(!x8326.valid){
continue;
}
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8325))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8326.value)))+(x8327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8328=IKsin(j4);
IkReal x8329=IKcos(j4);
IkReal x8330=(sj1*sj2);
IkReal x8331=(gconst133*r11);
IkReal x8332=(gconst133*r21);
IkReal x8333=(gconst133*r01);
IkReal x8334=((1.0)*x8329);
IkReal x8335=(gconst134*x8329);
IkReal x8336=((1.0)*x8328);
IkReal x8337=((1.0)*cj1*cj2);
evalcond[0]=(((x8328*x8332))+(((-1.0)*r22*x8334))+(((-1.0)*gconst134*r20*x8336)));
evalcond[1]=(((x8328*x8331))+cj0+(((-1.0)*r12*x8334))+(((-1.0)*gconst134*r10*x8336)));
evalcond[2]=((((-1.0)*gconst134*r00*x8336))+((x8328*x8333))+(((-1.0)*sj0))+(((-1.0)*r02*x8334)));
evalcond[3]=((((-1.0)*x8332*x8334))+((cj2*sj1))+(((-1.0)*r22*x8336))+((cj1*sj2))+((r20*x8335)));
evalcond[4]=(((r00*x8335))+(((-1.0)*r02*x8336))+((cj0*x8330))+(((-1.0)*x8333*x8334))+(((-1.0)*cj0*x8337)));
evalcond[5]=((((-1.0)*r12*x8336))+((r10*x8335))+(((-1.0)*sj0*x8337))+(((-1.0)*x8331*x8334))+((sj0*x8330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8338=((-1.0)*r21);
IkReal x8340 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8340)==0){
continue;
}
IkReal x8339=pow(x8340,-0.5);
CheckValue<IkReal> x8341 = IKatan2WithCheck(IkReal(x8338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8341.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8341.value))));
IkReal gconst136=(x8338*x8339);
IkReal gconst137=((1.0)*r20*x8339);
CheckValue<IkReal> x8342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8342.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8342.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8343=((-1.0)*r21);
CheckValue<IkReal> x8346 = IKatan2WithCheck(IkReal(x8343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8346.valid){
continue;
}
IkReal x8344=((1.0)*(x8346.value));
IkReal x8345=x8339;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8344)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8344)));
IkReal gconst136=(x8343*x8345);
IkReal gconst137=((1.0)*r20*x8345);
IkReal x8347=r22*r22;
IkReal x8348=((1.0)*x8347);
CheckValue<IkReal> x8352=IKPowWithIntegerCheck(((-1.0)+x8347),-1);
if(!x8352.valid){
continue;
}
IkReal x8349=x8352.value;
if((((1.0)+(((-1.0)*x8348)))) < -0.00001)
continue;
IkReal x8350=IKsqrt(((1.0)+(((-1.0)*x8348))));
IkReal x8351=(cj0*x8349*x8350);
j4eval[0]=((IKabs((x8351+(((-1.0)*x8348*x8351)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8353=((-1.0)*r21);
CheckValue<IkReal> x8356 = IKatan2WithCheck(IkReal(x8353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8356.valid){
continue;
}
IkReal x8354=((1.0)*(x8356.value));
IkReal x8355=x8339;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8354)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8354)));
IkReal gconst136=(x8353*x8355);
IkReal gconst137=((1.0)*r20*x8355);
IkReal x8357=r22*r22;
IkReal x8358=((1.0)*x8357);
CheckValue<IkReal> x8362=IKPowWithIntegerCheck(((-1.0)+x8357),-1);
if(!x8362.valid){
continue;
}
IkReal x8359=x8362.value;
if((((1.0)+(((-1.0)*x8358)))) < -0.00001)
continue;
IkReal x8360=IKsqrt(((1.0)+(((-1.0)*x8358))));
IkReal x8361=(sj0*x8359*x8360);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8361+(((-1.0)*x8358*x8361))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8363=((-1.0)*r21);
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(x8363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
IkReal x8364=((1.0)*(x8366.value));
IkReal x8365=x8339;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8364)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8364)));
IkReal gconst136=(x8363*x8365);
IkReal gconst137=((1.0)*r20*x8365);
IkReal x8367=r22*r22;
IkReal x8368=(r12*sj0);
IkReal x8369=(cj0*r02);
CheckValue<IkReal> x8373=IKPowWithIntegerCheck(((-1.0)+x8367),-1);
if(!x8373.valid){
continue;
}
IkReal x8370=x8373.value;
if((((1.0)+(((-1.0)*x8367)))) < -0.00001)
continue;
IkReal x8371=IKsqrt(((1.0)+(((-1.0)*x8367))));
IkReal x8372=(r22*x8370*x8371);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8368))+(((-1.0)*x8369)))))+(IKabs((((x8369*x8372))+((x8368*x8372))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8374=((1.0)*sj0);
IkReal x8375=((1.0)*cj0);
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8376.valid){
continue;
}
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8374))+(((-1.0)*r02*x8375)))),IkReal(((((-1.0)*gconst136*r11*x8374))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8375))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8376.value)))+(x8377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8378=IKsin(j4);
IkReal x8379=IKcos(j4);
IkReal x8380=(gconst136*r01);
IkReal x8381=(gconst137*r10);
IkReal x8382=(sj1*sj2);
IkReal x8383=(gconst137*r20);
IkReal x8384=(gconst136*r11);
IkReal x8385=(gconst136*r21);
IkReal x8386=(gconst137*r00);
IkReal x8387=((1.0)*x8379);
IkReal x8388=((1.0)*cj1*cj2);
IkReal x8389=((1.0)*x8378);
evalcond[0]=((((-1.0)*x8383*x8389))+((x8378*x8385))+(((-1.0)*r22*x8387)));
evalcond[1]=((((-1.0)*x8381*x8389))+cj0+((x8378*x8384))+(((-1.0)*r12*x8387)));
evalcond[2]=((((-1.0)*x8386*x8389))+(((-1.0)*sj0))+(((-1.0)*r02*x8387))+((x8378*x8380)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8385*x8387))+(((-1.0)*r22*x8389))+((x8379*x8383)));
evalcond[4]=((((-1.0)*r02*x8389))+(((-1.0)*x8380*x8387))+(((-1.0)*cj0*x8388))+((x8379*x8386))+((cj0*x8382)));
evalcond[5]=((((-1.0)*sj0*x8388))+((sj0*x8382))+(((-1.0)*x8384*x8387))+(((-1.0)*r12*x8389))+((x8379*x8381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8390=((1.0)*gconst137);
CheckValue<IkReal> x8391=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8390)))),-1);
if(!x8391.valid){
continue;
}
CheckValue<IkReal> x8392 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8390))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8391.value)))+(x8392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8393=IKsin(j4);
IkReal x8394=IKcos(j4);
IkReal x8395=(gconst136*r01);
IkReal x8396=(gconst137*r10);
IkReal x8397=(sj1*sj2);
IkReal x8398=(gconst137*r20);
IkReal x8399=(gconst136*r11);
IkReal x8400=(gconst136*r21);
IkReal x8401=(gconst137*r00);
IkReal x8402=((1.0)*x8394);
IkReal x8403=((1.0)*cj1*cj2);
IkReal x8404=((1.0)*x8393);
evalcond[0]=((((-1.0)*x8398*x8404))+(((-1.0)*r22*x8402))+((x8393*x8400)));
evalcond[1]=(cj0+((x8393*x8399))+(((-1.0)*r12*x8402))+(((-1.0)*x8396*x8404)));
evalcond[2]=((((-1.0)*sj0))+((x8393*x8395))+(((-1.0)*r02*x8402))+(((-1.0)*x8401*x8404)));
evalcond[3]=(((x8394*x8398))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8400*x8402))+(((-1.0)*r22*x8404)));
evalcond[4]=((((-1.0)*cj0*x8403))+(((-1.0)*x8395*x8402))+(((-1.0)*r02*x8404))+((x8394*x8401))+((cj0*x8397)));
evalcond[5]=(((x8394*x8396))+(((-1.0)*sj0*x8403))+((sj0*x8397))+(((-1.0)*x8399*x8402))+(((-1.0)*r12*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8405=((1.0)*gconst137);
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8405))+(((-1.0)*gconst136*r00)))),-1);
if(!x8406.valid){
continue;
}
CheckValue<IkReal> x8407 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8406.value)))+(x8407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8408=IKsin(j4);
IkReal x8409=IKcos(j4);
IkReal x8410=(gconst136*r01);
IkReal x8411=(gconst137*r10);
IkReal x8412=(sj1*sj2);
IkReal x8413=(gconst137*r20);
IkReal x8414=(gconst136*r11);
IkReal x8415=(gconst136*r21);
IkReal x8416=(gconst137*r00);
IkReal x8417=((1.0)*x8409);
IkReal x8418=((1.0)*cj1*cj2);
IkReal x8419=((1.0)*x8408);
evalcond[0]=(((x8408*x8415))+(((-1.0)*x8413*x8419))+(((-1.0)*r22*x8417)));
evalcond[1]=((((-1.0)*r12*x8417))+cj0+((x8408*x8414))+(((-1.0)*x8411*x8419)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8416*x8419))+(((-1.0)*r02*x8417))+((x8408*x8410)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8415*x8417))+((x8409*x8413))+(((-1.0)*r22*x8419)));
evalcond[4]=((((-1.0)*x8410*x8417))+(((-1.0)*cj0*x8418))+(((-1.0)*r02*x8419))+((cj0*x8412))+((x8409*x8416)));
evalcond[5]=((((-1.0)*r12*x8419))+(((-1.0)*x8414*x8417))+((x8409*x8411))+(((-1.0)*sj0*x8418))+((sj0*x8412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8420=((-1.0)*r10);
IkReal x8422 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8422)==0){
continue;
}
IkReal x8421=pow(x8422,-0.5);
CheckValue<IkReal> x8423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8420),IKFAST_ATAN2_MAGTHRESH);
if(!x8423.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8423.value));
IkReal gconst139=(r11*x8421);
IkReal gconst140=(x8420*x8421);
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8424.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8425=((-1.0)*r10);
IkReal x8426=x8421;
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8425),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
IkReal x8427=((-1.0)*(x8428.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8427;
IkReal gconst138=x8427;
IkReal gconst139=(r11*x8426);
IkReal gconst140=(x8425*x8426);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8429=((1.0)*sj0);
IkReal x8430=((1.0)*gconst139);
CheckValue<IkReal> x8431=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8430)))),-1);
if(!x8431.valid){
continue;
}
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8429)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8429))+((cj0*gconst140*r00))+(((-1.0)*cj0*r01*x8430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8431.value)))+(x8432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8433=IKsin(j4);
IkReal x8434=IKcos(j4);
IkReal x8435=(gconst140*r00);
IkReal x8436=(sj1*sj2);
IkReal x8437=(gconst139*r11);
IkReal x8438=(gconst139*r01);
IkReal x8439=(gconst139*r21);
IkReal x8440=((1.0)*x8434);
IkReal x8441=((1.0)*x8433);
IkReal x8442=((1.0)*cj1*cj2);
IkReal x8443=(gconst140*x8434);
evalcond[0]=((((-1.0)*r22*x8440))+(((-1.0)*gconst140*r20*x8441))+((x8433*x8439)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8441))+(((-1.0)*r12*x8440))+((x8433*x8437)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8435*x8441))+(((-1.0)*r02*x8440))+((x8433*x8438)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8443))+(((-1.0)*r22*x8441))+(((-1.0)*x8439*x8440)));
evalcond[4]=((((-1.0)*x8438*x8440))+((x8434*x8435))+(((-1.0)*cj0*x8442))+(((-1.0)*r02*x8441))+((cj0*x8436)));
evalcond[5]=((((-1.0)*r12*x8441))+((sj0*x8436))+(((-1.0)*x8437*x8440))+(((-1.0)*sj0*x8442))+((r10*x8443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8444=((1.0)*gconst140);
CheckValue<IkReal> x8445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8444))+(((-1.0)*gconst139*r00)))),-1);
if(!x8445.valid){
continue;
}
CheckValue<IkReal> x8446 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8445.value)))+(x8446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8447=IKsin(j4);
IkReal x8448=IKcos(j4);
IkReal x8449=(gconst140*r00);
IkReal x8450=(sj1*sj2);
IkReal x8451=(gconst139*r11);
IkReal x8452=(gconst139*r01);
IkReal x8453=(gconst139*r21);
IkReal x8454=((1.0)*x8448);
IkReal x8455=((1.0)*x8447);
IkReal x8456=((1.0)*cj1*cj2);
IkReal x8457=(gconst140*x8448);
evalcond[0]=(((x8447*x8453))+(((-1.0)*r22*x8454))+(((-1.0)*gconst140*r20*x8455)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8455))+((x8447*x8451))+(((-1.0)*r12*x8454)));
evalcond[2]=((((-1.0)*sj0))+((x8447*x8452))+(((-1.0)*x8449*x8455))+(((-1.0)*r02*x8454)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8453*x8454))+((r20*x8457))+(((-1.0)*r22*x8455)));
evalcond[4]=((((-1.0)*x8452*x8454))+((x8448*x8449))+(((-1.0)*cj0*x8456))+(((-1.0)*r02*x8455))+((cj0*x8450)));
evalcond[5]=((((-1.0)*sj0*x8456))+(((-1.0)*x8451*x8454))+(((-1.0)*r12*x8455))+((sj0*x8450))+((r10*x8457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8458=((-1.0)*r11);
IkReal x8460 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8460)==0){
continue;
}
IkReal x8459=pow(x8460,-0.5);
CheckValue<IkReal> x8461 = IKatan2WithCheck(IkReal(x8458),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8461.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8461.value))));
IkReal gconst142=(x8458*x8459);
IkReal gconst143=((1.0)*r10*x8459);
CheckValue<IkReal> x8462 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8462.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8462.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8463=((-1.0)*r11);
CheckValue<IkReal> x8466 = IKatan2WithCheck(IkReal(x8463),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8466.valid){
continue;
}
IkReal x8464=((1.0)*(x8466.value));
IkReal x8465=x8459;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8464)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8464)));
IkReal gconst142=(x8463*x8465);
IkReal gconst143=((1.0)*r10*x8465);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8467=((-1.0)*r11);
CheckValue<IkReal> x8470 = IKatan2WithCheck(IkReal(x8467),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8470.valid){
continue;
}
IkReal x8468=((1.0)*(x8470.value));
IkReal x8469=x8459;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8468)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8468)));
IkReal gconst142=(x8467*x8469);
IkReal gconst143=((1.0)*r10*x8469);
IkReal x8471=r12*r12;
IkReal x8472=((1.0)*sj0);
IkReal x8473=(cj0*r02);
IkReal x8474=x8459;
j4eval[0]=((IKabs((((sj0*x8471*x8474))+((r12*x8473*x8474))+(((-1.0)*x8472*x8474)))))+(IKabs(((((-1.0)*x8473))+(((-1.0)*r12*x8472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8475=((-1.0)*r11);
CheckValue<IkReal> x8478 = IKatan2WithCheck(IkReal(x8475),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8478.valid){
continue;
}
IkReal x8476=((1.0)*(x8478.value));
IkReal x8477=x8459;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8476)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8476)));
IkReal gconst142=(x8475*x8477);
IkReal gconst143=((1.0)*r10*x8477);
IkReal x8479=r12*r12;
IkReal x8480=(cj1*r22*sj2);
IkReal x8481=(cj2*r22*sj1);
CheckValue<IkReal> x8485=IKPowWithIntegerCheck(((-1.0)+x8479),-1);
if(!x8485.valid){
continue;
}
IkReal x8482=x8485.value;
if((((1.0)+(((-1.0)*x8479)))) < -0.00001)
continue;
IkReal x8483=IKsqrt(((1.0)+(((-1.0)*x8479))));
IkReal x8484=((1.0)*r12*x8482*x8483);
j4eval[0]=((IKabs(((((-1.0)*x8480*x8484))+(((-1.0)*x8481*x8484)))))+(IKabs((x8480+x8481))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8486=(gconst142*r21);
IkReal x8487=(cj1*sj2);
IkReal x8488=(cj2*sj1);
IkReal x8489=(gconst143*r20);
CheckValue<IkReal> x8490=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8486*x8489))+(r22*r22)+(x8486*x8486)+(x8489*x8489))),-1);
if(!x8490.valid){
continue;
}
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal((((r22*x8488))+((r22*x8487)))),IkReal(((((-1.0)*x8488*x8489))+((x8486*x8488))+((x8486*x8487))+(((-1.0)*x8487*x8489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8490.value)))+(x8491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8492=IKsin(j4);
IkReal x8493=IKcos(j4);
IkReal x8494=(sj1*sj2);
IkReal x8495=(gconst143*r20);
IkReal x8496=((1.0)*x8493);
IkReal x8497=((1.0)*cj1*cj2);
IkReal x8498=((1.0)*x8492);
IkReal x8499=(gconst142*x8492);
IkReal x8500=(gconst143*x8493);
evalcond[0]=((((-1.0)*r22*x8496))+(((-1.0)*x8495*x8498))+((r21*x8499)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8498))+(((-1.0)*r12*x8496))+((r11*x8499)));
evalcond[2]=((((-1.0)*r02*x8496))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8498))+((r01*x8499)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8493*x8495))+(((-1.0)*r22*x8498))+(((-1.0)*gconst142*r21*x8496)));
evalcond[4]=((((-1.0)*cj0*x8497))+(((-1.0)*r02*x8498))+(((-1.0)*gconst142*r01*x8496))+((r00*x8500))+((cj0*x8494)));
evalcond[5]=(((r10*x8500))+(((-1.0)*sj0*x8497))+((sj0*x8494))+(((-1.0)*gconst142*r11*x8496))+(((-1.0)*r12*x8498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8501=((1.0)*sj0);
IkReal x8502=((1.0)*gconst142);
CheckValue<IkReal> x8503 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8501)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8502))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x8501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8503.valid){
continue;
}
CheckValue<IkReal> x8504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8502))+(((-1.0)*gconst143*r21)))),-1);
if(!x8504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8503.value)+(((1.5707963267949)*(x8504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8505=IKsin(j4);
IkReal x8506=IKcos(j4);
IkReal x8507=(sj1*sj2);
IkReal x8508=(gconst143*r20);
IkReal x8509=((1.0)*x8506);
IkReal x8510=((1.0)*cj1*cj2);
IkReal x8511=((1.0)*x8505);
IkReal x8512=(gconst142*x8505);
IkReal x8513=(gconst143*x8506);
evalcond[0]=((((-1.0)*x8508*x8511))+((r21*x8512))+(((-1.0)*r22*x8509)));
evalcond[1]=((((-1.0)*gconst143*r10*x8511))+cj0+((r11*x8512))+(((-1.0)*r12*x8509)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8511))+(((-1.0)*r02*x8509))+((r01*x8512)));
evalcond[3]=(((cj2*sj1))+((x8506*x8508))+(((-1.0)*gconst142*r21*x8509))+((cj1*sj2))+(((-1.0)*r22*x8511)));
evalcond[4]=(((cj0*x8507))+(((-1.0)*r02*x8511))+(((-1.0)*gconst142*r01*x8509))+(((-1.0)*cj0*x8510))+((r00*x8513)));
evalcond[5]=(((sj0*x8507))+(((-1.0)*r12*x8511))+(((-1.0)*sj0*x8510))+(((-1.0)*gconst142*r11*x8509))+((r10*x8513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8514=((1.0)*gconst143);
CheckValue<IkReal> x8515 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8514))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8515.valid){
continue;
}
CheckValue<IkReal> x8516=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8514)))),-1);
if(!x8516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8515.value)+(((1.5707963267949)*(x8516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8517=IKsin(j4);
IkReal x8518=IKcos(j4);
IkReal x8519=(sj1*sj2);
IkReal x8520=(gconst143*r20);
IkReal x8521=((1.0)*x8518);
IkReal x8522=((1.0)*cj1*cj2);
IkReal x8523=((1.0)*x8517);
IkReal x8524=(gconst142*x8517);
IkReal x8525=(gconst143*x8518);
evalcond[0]=(((r21*x8524))+(((-1.0)*r22*x8521))+(((-1.0)*x8520*x8523)));
evalcond[1]=((((-1.0)*gconst143*r10*x8523))+cj0+((r11*x8524))+(((-1.0)*r12*x8521)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8521))+((r01*x8524))+(((-1.0)*gconst143*r00*x8523)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8521))+((x8518*x8520))+((cj1*sj2))+(((-1.0)*r22*x8523)));
evalcond[4]=(((cj0*x8519))+(((-1.0)*r02*x8523))+(((-1.0)*cj0*x8522))+((r00*x8525))+(((-1.0)*gconst142*r01*x8521)));
evalcond[5]=(((sj0*x8519))+(((-1.0)*gconst142*r11*x8521))+(((-1.0)*sj0*x8522))+(((-1.0)*r12*x8523))+((r10*x8525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8526=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8526;
j4eval[1]=IKsign(x8526);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8527=((1.0)*cj5);
IkReal x8528=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8527)));
j4eval[0]=x8528;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8527)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8529=cj5*cj5;
IkReal x8530=r11*r11;
IkReal x8531=(r11*sj5);
IkReal x8532=(cj5*r10);
IkReal x8533=((r12*r12)+(((-2.0)*x8531*x8532))+x8530+(((-1.0)*x8529*x8530))+((x8529*(r10*r10))));
j4eval[0]=x8533;
j4eval[1]=IKsign(x8533);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8531))+x8532))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8534=cj5*cj5;
IkReal x8535=r11*r11;
IkReal x8536=(cj5*r10);
IkReal x8537=(r11*sj5);
CheckValue<IkReal> x8538=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8536*x8537))+x8535+((x8534*(r10*r10)))+(((-1.0)*x8534*x8535)))),-1);
if(!x8538.valid){
continue;
}
CheckValue<IkReal> x8539 = IKatan2WithCheck(IkReal(((((-1.0)*x8537))+x8536)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8538.value)))+(x8539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8540=IKsin(j4);
IkReal x8541=IKcos(j4);
IkReal x8542=(cj5*r10);
IkReal x8543=(r01*sj5);
IkReal x8544=(cj5*r00);
IkReal x8545=(cj5*r20);
IkReal x8546=((1.0)*x8541);
IkReal x8547=((1.0)*x8540);
IkReal x8548=(sj5*x8540);
evalcond[0]=((((-1.0)*r22*x8546))+((r21*x8548))+(((-1.0)*x8545*x8547)));
evalcond[1]=((((-1.0)*r02*x8546))+((x8540*x8543))+(((-1.0)*x8544*x8547)));
evalcond[2]=((((-1.0)*r11*sj5*x8546))+(((-1.0)*r12*x8547))+((x8541*x8542)));
evalcond[3]=((1.0)+(((-1.0)*x8542*x8547))+(((-1.0)*r12*x8546))+((r11*x8548)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8547))+((x8541*x8545))+(((-1.0)*r21*sj5*x8546)));
evalcond[5]=((((-1.0)*r02*x8547))+(((-1.0)*x8543*x8546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8541*x8544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8549=((1.0)*cj5);
CheckValue<IkReal> x8550 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8550.valid){
continue;
}
CheckValue<IkReal> x8551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8549))+(((-1.0)*r00*sj5)))),-1);
if(!x8551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8550.value)+(((1.5707963267949)*(x8551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8552=IKsin(j4);
IkReal x8553=IKcos(j4);
IkReal x8554=(cj5*r10);
IkReal x8555=(r01*sj5);
IkReal x8556=(cj5*r00);
IkReal x8557=(cj5*r20);
IkReal x8558=((1.0)*x8553);
IkReal x8559=((1.0)*x8552);
IkReal x8560=(sj5*x8552);
evalcond[0]=((((-1.0)*r22*x8558))+(((-1.0)*x8557*x8559))+((r21*x8560)));
evalcond[1]=((((-1.0)*x8556*x8559))+(((-1.0)*r02*x8558))+((x8552*x8555)));
evalcond[2]=((((-1.0)*r12*x8559))+(((-1.0)*r11*sj5*x8558))+((x8553*x8554)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8558))+((r11*x8560))+(((-1.0)*x8554*x8559)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8559))+(((-1.0)*r21*sj5*x8558))+((cj1*sj2))+((x8553*x8557)));
evalcond[5]=((((-1.0)*x8555*x8558))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8553*x8556))+(((-1.0)*r02*x8559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8561=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8561.value)))+(x8562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8563=IKsin(j4);
IkReal x8564=IKcos(j4);
IkReal x8565=(cj5*r10);
IkReal x8566=(r01*sj5);
IkReal x8567=(cj5*r00);
IkReal x8568=(cj5*r20);
IkReal x8569=((1.0)*x8564);
IkReal x8570=((1.0)*x8563);
IkReal x8571=(sj5*x8563);
evalcond[0]=(((r21*x8571))+(((-1.0)*r22*x8569))+(((-1.0)*x8568*x8570)));
evalcond[1]=(((x8563*x8566))+(((-1.0)*x8567*x8570))+(((-1.0)*r02*x8569)));
evalcond[2]=(((x8564*x8565))+(((-1.0)*r12*x8570))+(((-1.0)*r11*sj5*x8569)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8569))+((r11*x8571))+(((-1.0)*x8565*x8570)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8569))+((x8564*x8568))+(((-1.0)*r22*x8570)));
evalcond[5]=((((-1.0)*x8566*x8569))+(((-1.0)*r02*x8570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8564*x8567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8572=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8572;
j4eval[1]=IKsign(x8572);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8573=((1.0)*cj5);
IkReal x8574=((((-1.0)*r21*x8573))+(((-1.0)*r20*sj5)));
j4eval[0]=x8574;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8573))))));
j4eval[2]=IKsign(x8574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8575=cj5*cj5;
IkReal x8576=r11*r11;
IkReal x8577=(cj5*r10);
IkReal x8578=(r11*sj5);
IkReal x8579=((((2.0)*x8577*x8578))+(((-1.0)*x8576))+((x8575*x8576))+(((-1.0)*(r12*r12)))+(((-1.0)*x8575*(r10*r10))));
j4eval[0]=x8579;
j4eval[1]=((IKabs(r12))+(IKabs((x8577+(((-1.0)*x8578))))));
j4eval[2]=IKsign(x8579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8580=cj5*cj5;
IkReal x8581=r11*r11;
IkReal x8582=(cj5*r10);
IkReal x8583=(r11*sj5);
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8581))+(((-1.0)*x8580*(r10*r10)))+(((2.0)*x8582*x8583))+((x8580*x8581))+(((-1.0)*(r12*r12))))),-1);
if(!x8584.valid){
continue;
}
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal((x8582+(((-1.0)*x8583)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8584.value)))+(x8585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8586=IKsin(j4);
IkReal x8587=IKcos(j4);
IkReal x8588=(cj5*r10);
IkReal x8589=(r01*sj5);
IkReal x8590=(cj5*r00);
IkReal x8591=(cj5*r20);
IkReal x8592=((1.0)*x8587);
IkReal x8593=((1.0)*x8586);
IkReal x8594=(sj5*x8586);
evalcond[0]=((((-1.0)*r22*x8592))+(((-1.0)*x8591*x8593))+((r21*x8594)));
evalcond[1]=(((x8586*x8589))+(((-1.0)*r02*x8592))+(((-1.0)*x8590*x8593)));
evalcond[2]=((((-1.0)*r11*sj5*x8592))+(((-1.0)*r12*x8593))+((x8587*x8588)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8592))+(((-1.0)*x8588*x8593))+((r11*x8594)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8593))+((x8587*x8591))+((cj1*sj2))+(((-1.0)*r21*sj5*x8592)));
evalcond[5]=((((-1.0)*x8589*x8592))+(((-1.0)*r02*x8593))+((x8587*x8590))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8595=((1.0)*cj5);
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8595))+(((-1.0)*r20*sj5)))),-1);
if(!x8597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8596.value)+(((1.5707963267949)*(x8597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8598=IKsin(j4);
IkReal x8599=IKcos(j4);
IkReal x8600=(cj5*r10);
IkReal x8601=(r01*sj5);
IkReal x8602=(cj5*r00);
IkReal x8603=(cj5*r20);
IkReal x8604=((1.0)*x8599);
IkReal x8605=((1.0)*x8598);
IkReal x8606=(sj5*x8598);
evalcond[0]=((((-1.0)*r22*x8604))+(((-1.0)*x8603*x8605))+((r21*x8606)));
evalcond[1]=(((x8598*x8601))+(((-1.0)*x8602*x8605))+(((-1.0)*r02*x8604)));
evalcond[2]=(((x8599*x8600))+(((-1.0)*r12*x8605))+(((-1.0)*r11*sj5*x8604)));
evalcond[3]=((-1.0)+((r11*x8606))+(((-1.0)*r12*x8604))+(((-1.0)*x8600*x8605)));
evalcond[4]=(((cj2*sj1))+((x8599*x8603))+((cj1*sj2))+(((-1.0)*r22*x8605))+(((-1.0)*r21*sj5*x8604)));
evalcond[5]=(((x8599*x8602))+(((-1.0)*x8601*x8604))+(((-1.0)*r02*x8605))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8607.value)+(((1.5707963267949)*(x8608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8609=IKsin(j4);
IkReal x8610=IKcos(j4);
IkReal x8611=(cj5*r10);
IkReal x8612=(r01*sj5);
IkReal x8613=(cj5*r00);
IkReal x8614=(cj5*r20);
IkReal x8615=((1.0)*x8610);
IkReal x8616=((1.0)*x8609);
IkReal x8617=(sj5*x8609);
evalcond[0]=((((-1.0)*x8614*x8616))+(((-1.0)*r22*x8615))+((r21*x8617)));
evalcond[1]=((((-1.0)*r02*x8615))+((x8609*x8612))+(((-1.0)*x8613*x8616)));
evalcond[2]=((((-1.0)*r12*x8616))+(((-1.0)*r11*sj5*x8615))+((x8610*x8611)));
evalcond[3]=((-1.0)+((r11*x8617))+(((-1.0)*r12*x8615))+(((-1.0)*x8611*x8616)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8616))+(((-1.0)*r21*sj5*x8615))+((x8610*x8614)));
evalcond[5]=((((-1.0)*x8612*x8615))+(((-1.0)*r02*x8616))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8610*x8613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8618=((-1.0)*r00);
IkReal x8620 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8620)==0){
continue;
}
IkReal x8619=pow(x8620,-0.5);
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8618),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8621.value));
IkReal gconst145=(r01*x8619);
IkReal gconst146=(x8618*x8619);
CheckValue<IkReal> x8622 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8622.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8622.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8623=((-1.0)*r00);
IkReal x8624=x8619;
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8623),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
IkReal x8625=((-1.0)*(x8626.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8625;
IkReal gconst144=x8625;
IkReal gconst145=(r01*x8624);
IkReal gconst146=(x8623*x8624);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8627=((1.0)*sj0);
IkReal x8628=((1.0)*gconst145);
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8627))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8628))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
CheckValue<IkReal> x8630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8628)))),-1);
if(!x8630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8629.value)+(((1.5707963267949)*(x8630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8631=IKsin(j4);
IkReal x8632=IKcos(j4);
IkReal x8633=(gconst146*r10);
IkReal x8634=(sj1*sj2);
IkReal x8635=(gconst146*r20);
IkReal x8636=(gconst146*r00);
IkReal x8637=((1.0)*x8632);
IkReal x8638=((1.0)*x8631);
IkReal x8639=(gconst145*x8631);
IkReal x8640=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8639))+(((-1.0)*r22*x8637))+(((-1.0)*x8635*x8638)));
evalcond[1]=(cj0+(((-1.0)*r12*x8637))+((r11*x8639))+(((-1.0)*x8633*x8638)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8639))+(((-1.0)*x8636*x8638))+(((-1.0)*r02*x8637)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8637))+((cj1*sj2))+(((-1.0)*r22*x8638))+((x8632*x8635)));
evalcond[4]=((((-1.0)*gconst145*r01*x8637))+((cj0*x8634))+(((-1.0)*cj0*x8640))+((x8632*x8636))+(((-1.0)*r02*x8638)));
evalcond[5]=((((-1.0)*r12*x8638))+(((-1.0)*gconst145*r11*x8637))+((sj0*x8634))+(((-1.0)*sj0*x8640))+((x8632*x8633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8641=((1.0)*gconst146);
CheckValue<IkReal> x8642=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8641)))),-1);
if(!x8642.valid){
continue;
}
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8641))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8642.value)))+(x8643.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8644=IKsin(j4);
IkReal x8645=IKcos(j4);
IkReal x8646=(gconst146*r10);
IkReal x8647=(sj1*sj2);
IkReal x8648=(gconst146*r20);
IkReal x8649=(gconst146*r00);
IkReal x8650=((1.0)*x8645);
IkReal x8651=((1.0)*x8644);
IkReal x8652=(gconst145*x8644);
IkReal x8653=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8652))+(((-1.0)*r22*x8650))+(((-1.0)*x8648*x8651)));
evalcond[1]=((((-1.0)*x8646*x8651))+(((-1.0)*r12*x8650))+cj0+((r11*x8652)));
evalcond[2]=(((r01*x8652))+(((-1.0)*sj0))+(((-1.0)*x8649*x8651))+(((-1.0)*r02*x8650)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst145*r21*x8650))+((x8645*x8648))+(((-1.0)*r22*x8651)));
evalcond[4]=(((cj0*x8647))+(((-1.0)*gconst145*r01*x8650))+((x8645*x8649))+(((-1.0)*cj0*x8653))+(((-1.0)*r02*x8651)));
evalcond[5]=((((-1.0)*gconst145*r11*x8650))+(((-1.0)*r12*x8651))+(((-1.0)*sj0*x8653))+((x8645*x8646))+((sj0*x8647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8654=((-1.0)*r01);
IkReal x8656 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8656)==0){
continue;
}
IkReal x8655=pow(x8656,-0.5);
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal(x8654),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8657.value))));
IkReal gconst148=(x8654*x8655);
IkReal gconst149=((1.0)*r00*x8655);
CheckValue<IkReal> x8658 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8658.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8658.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8659=((-1.0)*r01);
CheckValue<IkReal> x8662 = IKatan2WithCheck(IkReal(x8659),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8662.valid){
continue;
}
IkReal x8660=((1.0)*(x8662.value));
IkReal x8661=x8655;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8660)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8660)));
IkReal gconst148=(x8659*x8661);
IkReal gconst149=((1.0)*r00*x8661);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8663=((-1.0)*r01);
CheckValue<IkReal> x8666 = IKatan2WithCheck(IkReal(x8663),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8666.valid){
continue;
}
IkReal x8664=((1.0)*(x8666.value));
IkReal x8665=x8655;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8664)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8664)));
IkReal gconst148=(x8663*x8665);
IkReal gconst149=((1.0)*r00*x8665);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8667=((-1.0)*r01);
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal(x8667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
IkReal x8668=((1.0)*(x8670.value));
IkReal x8669=x8655;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8668)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8668)));
IkReal gconst148=(x8667*x8669);
IkReal gconst149=((1.0)*r00*x8669);
IkReal x8671=r02*r02;
IkReal x8672=(r12*sj0);
IkReal x8673=((1.0)*cj0);
IkReal x8674=x8655;
j4eval[0]=((IKabs((((r02*x8672*x8674))+((cj0*x8671*x8674))+(((-1.0)*x8673*x8674)))))+(IKabs(((((-1.0)*r02*x8673))+(((-1.0)*x8672))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8675=((1.0)*sj0);
IkReal x8676=((1.0)*gconst148);
CheckValue<IkReal> x8677=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8676)))),-1);
if(!x8677.valid){
continue;
}
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8675))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*gconst148*r11*x8675))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8677.value)))+(x8678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8679=IKsin(j4);
IkReal x8680=IKcos(j4);
IkReal x8681=(gconst148*r11);
IkReal x8682=(sj1*sj2);
IkReal x8683=((1.0)*x8680);
IkReal x8684=(gconst149*x8680);
IkReal x8685=(gconst148*x8679);
IkReal x8686=((1.0)*cj1*cj2);
IkReal x8687=((1.0)*x8679);
evalcond[0]=((((-1.0)*gconst149*r20*x8687))+(((-1.0)*r22*x8683))+((r21*x8685)));
evalcond[1]=(((x8679*x8681))+cj0+(((-1.0)*r12*x8683))+(((-1.0)*gconst149*r10*x8687)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8683))+((r01*x8685))+(((-1.0)*gconst149*r00*x8687)));
evalcond[3]=(((cj2*sj1))+((r20*x8684))+(((-1.0)*gconst148*r21*x8683))+((cj1*sj2))+(((-1.0)*r22*x8687)));
evalcond[4]=((((-1.0)*cj0*x8686))+(((-1.0)*r02*x8687))+((r00*x8684))+(((-1.0)*gconst148*r01*x8683))+((cj0*x8682)));
evalcond[5]=((((-1.0)*x8681*x8683))+(((-1.0)*r12*x8687))+((r10*x8684))+(((-1.0)*sj0*x8686))+((sj0*x8682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8688=((1.0)*gconst149);
CheckValue<IkReal> x8689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8688))+(((-1.0)*gconst148*r10)))),-1);
if(!x8689.valid){
continue;
}
CheckValue<IkReal> x8690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8688))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8689.value)))+(x8690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8691=IKsin(j4);
IkReal x8692=IKcos(j4);
IkReal x8693=(gconst148*r11);
IkReal x8694=(sj1*sj2);
IkReal x8695=((1.0)*x8692);
IkReal x8696=(gconst149*x8692);
IkReal x8697=(gconst148*x8691);
IkReal x8698=((1.0)*cj1*cj2);
IkReal x8699=((1.0)*x8691);
evalcond[0]=(((r21*x8697))+(((-1.0)*gconst149*r20*x8699))+(((-1.0)*r22*x8695)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8699))+((x8691*x8693))+(((-1.0)*r12*x8695)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8695))+((r01*x8697))+(((-1.0)*gconst149*r00*x8699)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8695))+((r20*x8696))+(((-1.0)*r22*x8699)));
evalcond[4]=(((cj0*x8694))+(((-1.0)*cj0*x8698))+((r00*x8696))+(((-1.0)*r02*x8699))+(((-1.0)*gconst148*r01*x8695)));
evalcond[5]=(((sj0*x8694))+(((-1.0)*sj0*x8698))+((r10*x8696))+(((-1.0)*r12*x8699))+(((-1.0)*x8693*x8695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8700=((1.0)*gconst149);
CheckValue<IkReal> x8701 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8701.valid){
continue;
}
CheckValue<IkReal> x8702=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8700)))),-1);
if(!x8702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8701.value)+(((1.5707963267949)*(x8702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8703=IKsin(j4);
IkReal x8704=IKcos(j4);
IkReal x8705=(gconst148*r11);
IkReal x8706=(sj1*sj2);
IkReal x8707=((1.0)*x8704);
IkReal x8708=(gconst149*x8704);
IkReal x8709=(gconst148*x8703);
IkReal x8710=((1.0)*cj1*cj2);
IkReal x8711=((1.0)*x8703);
evalcond[0]=(((r21*x8709))+(((-1.0)*gconst149*r20*x8711))+(((-1.0)*r22*x8707)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8711))+(((-1.0)*r12*x8707))+((x8703*x8705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8711))+(((-1.0)*r02*x8707))+((r01*x8709)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8707))+((cj1*sj2))+(((-1.0)*r22*x8711))+((r20*x8708)));
evalcond[4]=((((-1.0)*r02*x8711))+(((-1.0)*gconst148*r01*x8707))+((cj0*x8706))+(((-1.0)*cj0*x8710))+((r00*x8708)));
evalcond[5]=((((-1.0)*x8705*x8707))+((r10*x8708))+(((-1.0)*sj0*x8710))+(((-1.0)*r12*x8711))+((sj0*x8706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8712=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8712;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8713=((1.0)*cj5);
IkReal x8714=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8713)));
j4eval[0]=x8714;
j4eval[1]=((IKabs(((((-1.0)*r20*x8713))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8715=cj5*cj5;
IkReal x8716=r01*r01;
IkReal x8717=(r01*sj5);
IkReal x8718=(cj5*r00);
IkReal x8719=((((-1.0)*(r02*r02)))+(((2.0)*x8717*x8718))+((x8715*x8716))+(((-1.0)*x8716))+(((-1.0)*x8715*(r00*r00))));
j4eval[0]=x8719;
j4eval[1]=IKsign(x8719);
j4eval[2]=((IKabs(r02))+(IKabs((x8718+(((-1.0)*x8717))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8720=cj5*cj5;
IkReal x8721=r01*r01;
IkReal x8722=(r01*sj5);
IkReal x8723=(cj5*r00);
CheckValue<IkReal> x8724 = IKatan2WithCheck(IkReal((x8723+(((-1.0)*x8722)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8724.valid){
continue;
}
CheckValue<IkReal> x8725=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8721))+((x8720*x8721))+(((-1.0)*x8720*(r00*r00)))+(((2.0)*x8722*x8723)))),-1);
if(!x8725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8724.value)+(((1.5707963267949)*(x8725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8726=IKsin(j4);
IkReal x8727=IKcos(j4);
IkReal x8728=(cj5*r10);
IkReal x8729=(r01*sj5);
IkReal x8730=(cj5*r00);
IkReal x8731=(cj5*r20);
IkReal x8732=((1.0)*x8727);
IkReal x8733=((1.0)*x8726);
IkReal x8734=(sj5*x8726);
evalcond[0]=(((r21*x8734))+(((-1.0)*x8731*x8733))+(((-1.0)*r22*x8732)));
evalcond[1]=(((r11*x8734))+(((-1.0)*x8728*x8733))+(((-1.0)*r12*x8732)));
evalcond[2]=((((-1.0)*x8729*x8732))+((x8727*x8730))+(((-1.0)*r02*x8733)));
evalcond[3]=((-1.0)+((x8726*x8729))+(((-1.0)*r02*x8732))+(((-1.0)*x8730*x8733)));
evalcond[4]=(((cj2*sj1))+((x8727*x8731))+((cj1*sj2))+(((-1.0)*r21*sj5*x8732))+(((-1.0)*r22*x8733)));
evalcond[5]=((((-1.0)*r11*sj5*x8732))+((x8727*x8728))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8735=((1.0)*cj5);
CheckValue<IkReal> x8736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8735)))),-1);
if(!x8736.valid){
continue;
}
CheckValue<IkReal> x8737 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8736.value)))+(x8737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8738=IKsin(j4);
IkReal x8739=IKcos(j4);
IkReal x8740=(cj5*r10);
IkReal x8741=(r01*sj5);
IkReal x8742=(cj5*r00);
IkReal x8743=(cj5*r20);
IkReal x8744=((1.0)*x8739);
IkReal x8745=((1.0)*x8738);
IkReal x8746=(sj5*x8738);
evalcond[0]=((((-1.0)*x8743*x8745))+(((-1.0)*r22*x8744))+((r21*x8746)));
evalcond[1]=((((-1.0)*x8740*x8745))+(((-1.0)*r12*x8744))+((r11*x8746)));
evalcond[2]=((((-1.0)*x8741*x8744))+((x8739*x8742))+(((-1.0)*r02*x8745)));
evalcond[3]=((-1.0)+(((-1.0)*x8742*x8745))+((x8738*x8741))+(((-1.0)*r02*x8744)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8744))+((cj1*sj2))+(((-1.0)*r22*x8745))+((x8739*x8743)));
evalcond[5]=((((-1.0)*r12*x8745))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8739*x8740))+(((-1.0)*r11*sj5*x8744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8747=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8747.valid){
continue;
}
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8747.value)))+(x8748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8749=IKsin(j4);
IkReal x8750=IKcos(j4);
IkReal x8751=(cj5*r10);
IkReal x8752=(r01*sj5);
IkReal x8753=(cj5*r00);
IkReal x8754=(cj5*r20);
IkReal x8755=((1.0)*x8750);
IkReal x8756=((1.0)*x8749);
IkReal x8757=(sj5*x8749);
evalcond[0]=((((-1.0)*x8754*x8756))+(((-1.0)*r22*x8755))+((r21*x8757)));
evalcond[1]=((((-1.0)*x8751*x8756))+((r11*x8757))+(((-1.0)*r12*x8755)));
evalcond[2]=(((x8750*x8753))+(((-1.0)*r02*x8756))+(((-1.0)*x8752*x8755)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8755))+(((-1.0)*x8753*x8756))+((x8749*x8752)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8756))+((x8750*x8754))+((cj1*sj2))+(((-1.0)*r21*sj5*x8755)));
evalcond[5]=(((x8750*x8751))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8755))+(((-1.0)*r12*x8756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8758=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8758;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8759=((1.0)*cj5);
IkReal x8760=((((-1.0)*r21*x8759))+(((-1.0)*r20*sj5)));
j4eval[0]=x8760;
j4eval[1]=((IKabs(((((-1.0)*r10*x8759))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8761=cj5*cj5;
IkReal x8762=r01*r01;
IkReal x8763=(cj5*r00);
IkReal x8764=(r01*sj5);
IkReal x8765=((((-2.0)*x8763*x8764))+x8762+((x8761*(r00*r00)))+(r02*r02)+(((-1.0)*x8761*x8762)));
j4eval[0]=x8765;
j4eval[1]=((IKabs(r02))+(IKabs((x8763+(((-1.0)*x8764))))));
j4eval[2]=IKsign(x8765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8766=cj5*cj5;
IkReal x8767=r01*r01;
IkReal x8768=(r01*sj5);
IkReal x8769=(cj5*r00);
CheckValue<IkReal> x8770=IKPowWithIntegerCheck(IKsign((x8767+(((-2.0)*x8768*x8769))+((x8766*(r00*r00)))+(r02*r02)+(((-1.0)*x8766*x8767)))),-1);
if(!x8770.valid){
continue;
}
CheckValue<IkReal> x8771 = IKatan2WithCheck(IkReal((x8769+(((-1.0)*x8768)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8770.value)))+(x8771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8772=IKsin(j4);
IkReal x8773=IKcos(j4);
IkReal x8774=(cj5*r10);
IkReal x8775=(r01*sj5);
IkReal x8776=(cj5*r00);
IkReal x8777=(cj5*r20);
IkReal x8778=((1.0)*x8773);
IkReal x8779=((1.0)*x8772);
IkReal x8780=(sj5*x8772);
evalcond[0]=((((-1.0)*x8777*x8779))+((r21*x8780))+(((-1.0)*r22*x8778)));
evalcond[1]=(((r11*x8780))+(((-1.0)*x8774*x8779))+(((-1.0)*r12*x8778)));
evalcond[2]=(((x8773*x8776))+(((-1.0)*r02*x8779))+(((-1.0)*x8775*x8778)));
evalcond[3]=((1.0)+(((-1.0)*x8776*x8779))+((x8772*x8775))+(((-1.0)*r02*x8778)));
evalcond[4]=(((cj2*sj1))+((x8773*x8777))+((cj1*sj2))+(((-1.0)*r22*x8779))+(((-1.0)*r21*sj5*x8778)));
evalcond[5]=((((-1.0)*r11*sj5*x8778))+((x8773*x8774))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8779))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8781=((1.0)*cj5);
CheckValue<IkReal> x8782 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8782.valid){
continue;
}
CheckValue<IkReal> x8783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8781))+(((-1.0)*r20*sj5)))),-1);
if(!x8783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8782.value)+(((1.5707963267949)*(x8783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8784=IKsin(j4);
IkReal x8785=IKcos(j4);
IkReal x8786=(cj5*r10);
IkReal x8787=(r01*sj5);
IkReal x8788=(cj5*r00);
IkReal x8789=(cj5*r20);
IkReal x8790=((1.0)*x8785);
IkReal x8791=((1.0)*x8784);
IkReal x8792=(sj5*x8784);
evalcond[0]=((((-1.0)*x8789*x8791))+((r21*x8792))+(((-1.0)*r22*x8790)));
evalcond[1]=((((-1.0)*r12*x8790))+(((-1.0)*x8786*x8791))+((r11*x8792)));
evalcond[2]=(((x8785*x8788))+(((-1.0)*r02*x8791))+(((-1.0)*x8787*x8790)));
evalcond[3]=((1.0)+((x8784*x8787))+(((-1.0)*x8788*x8791))+(((-1.0)*r02*x8790)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8785*x8789))+(((-1.0)*r22*x8791))+(((-1.0)*r21*sj5*x8790)));
evalcond[5]=((((-1.0)*r12*x8791))+(((-1.0)*r11*sj5*x8790))+(((-1.0)*sj1*sj2))+((x8785*x8786))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
CheckValue<IkReal> x8794=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8793.value)+(((1.5707963267949)*(x8794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8795=IKsin(j4);
IkReal x8796=IKcos(j4);
IkReal x8797=(cj5*r10);
IkReal x8798=(r01*sj5);
IkReal x8799=(cj5*r00);
IkReal x8800=(cj5*r20);
IkReal x8801=((1.0)*x8796);
IkReal x8802=((1.0)*x8795);
IkReal x8803=(sj5*x8795);
evalcond[0]=(((r21*x8803))+(((-1.0)*r22*x8801))+(((-1.0)*x8800*x8802)));
evalcond[1]=((((-1.0)*r12*x8801))+((r11*x8803))+(((-1.0)*x8797*x8802)));
evalcond[2]=(((x8796*x8799))+(((-1.0)*r02*x8802))+(((-1.0)*x8798*x8801)));
evalcond[3]=((1.0)+((x8795*x8798))+(((-1.0)*r02*x8801))+(((-1.0)*x8799*x8802)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8802))+((x8796*x8800))+((cj1*sj2))+(((-1.0)*r21*sj5*x8801)));
evalcond[5]=((((-1.0)*r12*x8802))+((x8796*x8797))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8804=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8804);
rxp1_1=(px*r21);
rxp1_2=(r11*x8804);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8805=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8805);
rxp1_1=(px*r21);
rxp1_2=(r11*x8805);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8806=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8806);
rxp1_1=(px*r21);
rxp1_2=(r11*x8806);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8809=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8809.valid){
continue;
}
IkReal x8807=x8809.value;
IkReal x8808=(sj0*x8807);
cj4array[0]=(((cj1*cj2*x8808))+(((-1.0)*sj1*sj2*x8808)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8810=IKsin(j4);
IkReal x8811=IKcos(j4);
IkReal x8812=(r21*sj5);
IkReal x8813=(cj5*r20);
IkReal x8814=((1.0)*x8810);
IkReal x8815=((1.0)*x8811);
evalcond[0]=((-1.0)*r02*x8810);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8815)));
evalcond[2]=(((x8810*x8812))+(((-1.0)*x8813*x8814)));
evalcond[3]=((((-1.0)*cj5*r10*x8814))+((r11*sj5*x8810)));
evalcond[4]=(((cj2*sj1))+((x8811*x8813))+((cj1*sj2))+(((-1.0)*x8812*x8815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8818=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8818.valid){
continue;
}
IkReal x8816=x8818.value;
IkReal x8817=((1.0)*x8816);
cj4array[0]=((((-1.0)*cj1*sj2*x8817))+(((-1.0)*cj2*sj1*x8817)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8819=IKsin(j4);
IkReal x8820=IKcos(j4);
IkReal x8821=(r11*sj5);
IkReal x8822=((1.0)*sj0);
IkReal x8823=((1.0)*x8820);
IkReal x8824=((1.0)*cj5*x8819);
evalcond[0]=((-1.0)*r02*x8819);
evalcond[1]=((((-1.0)*r02*x8823))+(((-1.0)*x8822)));
evalcond[2]=((((-1.0)*r20*x8824))+((r21*sj5*x8819)));
evalcond[3]=(((x8819*x8821))+(((-1.0)*r10*x8824)));
evalcond[4]=((((-1.0)*x8821*x8823))+((sj0*sj1*sj2))+((cj5*r10*x8820))+(((-1.0)*cj1*cj2*x8822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8825=IKPowWithIntegerCheck(r02,-1);
if(!x8825.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8825.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8826=IKsin(j4);
IkReal x8827=IKcos(j4);
IkReal x8828=(cj5*x8827);
IkReal x8829=(sj5*x8826);
IkReal x8830=((1.0)*sj5*x8827);
IkReal x8831=((1.0)*cj5*x8826);
evalcond[0]=((-1.0)*r02*x8826);
evalcond[1]=(((r21*x8829))+(((-1.0)*r20*x8831)));
evalcond[2]=((((-1.0)*r10*x8831))+((r11*x8829)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8830))+((r20*x8828)));
evalcond[4]=(((r10*x8828))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8832=((1.0)*sj0);
IkReal x8833=((1.0)*cj0);
CheckValue<IkReal> x8834 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8833))+(((-1.0)*r12*x8832)))),IkReal(((((-1.0)*r01*sj5*x8833))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8834.valid){
continue;
}
CheckValue<IkReal> x8835=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8834.value)+(((1.5707963267949)*(x8835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(cj5*r10);
IkReal x8839=(sj1*sj2);
IkReal x8840=(r01*sj5);
IkReal x8841=(cj5*r00);
IkReal x8842=(cj5*r20);
IkReal x8843=((1.0)*x8837);
IkReal x8844=((1.0)*cj1*cj2);
IkReal x8845=((1.0)*x8836);
IkReal x8846=(sj5*x8836);
evalcond[0]=((((-1.0)*x8842*x8845))+((r21*x8846))+(((-1.0)*r22*x8843)));
evalcond[1]=(cj0+((r11*x8846))+(((-1.0)*x8838*x8845))+(((-1.0)*r12*x8843)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8841*x8845))+(((-1.0)*r02*x8843))+((x8836*x8840)));
evalcond[3]=(((x8837*x8842))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8843))+(((-1.0)*r22*x8845)));
evalcond[4]=(((x8837*x8841))+(((-1.0)*cj0*x8844))+((cj0*x8839))+(((-1.0)*x8840*x8843))+(((-1.0)*r02*x8845)));
evalcond[5]=(((x8837*x8838))+(((-1.0)*sj0*x8844))+((sj0*x8839))+(((-1.0)*r11*sj5*x8843))+(((-1.0)*r12*x8845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8847=((1.0)*cj5);
CheckValue<IkReal> x8848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8847)))),-1);
if(!x8848.valid){
continue;
}
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8847))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8848.value)))+(x8849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8850=IKsin(j4);
IkReal x8851=IKcos(j4);
IkReal x8852=(cj5*r10);
IkReal x8853=(sj1*sj2);
IkReal x8854=(r01*sj5);
IkReal x8855=(cj5*r00);
IkReal x8856=(cj5*r20);
IkReal x8857=((1.0)*x8851);
IkReal x8858=((1.0)*cj1*cj2);
IkReal x8859=((1.0)*x8850);
IkReal x8860=(sj5*x8850);
evalcond[0]=((((-1.0)*r22*x8857))+((r21*x8860))+(((-1.0)*x8856*x8859)));
evalcond[1]=(cj0+(((-1.0)*x8852*x8859))+(((-1.0)*r12*x8857))+((r11*x8860)));
evalcond[2]=(((x8850*x8854))+(((-1.0)*sj0))+(((-1.0)*r02*x8857))+(((-1.0)*x8855*x8859)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8859))+((cj1*sj2))+((x8851*x8856))+(((-1.0)*r21*sj5*x8857)));
evalcond[4]=((((-1.0)*cj0*x8858))+((cj0*x8853))+((x8851*x8855))+(((-1.0)*x8854*x8857))+(((-1.0)*r02*x8859)));
evalcond[5]=(((sj0*x8853))+(((-1.0)*r12*x8859))+(((-1.0)*r11*sj5*x8857))+((x8851*x8852))+(((-1.0)*sj0*x8858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8861=((1.0)*cj5);
CheckValue<IkReal> x8862 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8862.valid){
continue;
}
CheckValue<IkReal> x8863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8861)))),-1);
if(!x8863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8862.value)+(((1.5707963267949)*(x8863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8864=IKsin(j4);
IkReal x8865=IKcos(j4);
IkReal x8866=(cj5*r10);
IkReal x8867=(sj1*sj2);
IkReal x8868=(r01*sj5);
IkReal x8869=(cj5*r00);
IkReal x8870=(cj5*r20);
IkReal x8871=((1.0)*x8865);
IkReal x8872=((1.0)*cj1*cj2);
IkReal x8873=((1.0)*x8864);
IkReal x8874=(sj5*x8864);
evalcond[0]=((((-1.0)*x8870*x8873))+(((-1.0)*r22*x8871))+((r21*x8874)));
evalcond[1]=(cj0+(((-1.0)*x8866*x8873))+((r11*x8874))+(((-1.0)*r12*x8871)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8871))+((x8864*x8868))+(((-1.0)*x8869*x8873)));
evalcond[3]=(((cj2*sj1))+((x8865*x8870))+(((-1.0)*r21*sj5*x8871))+(((-1.0)*r22*x8873))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x8873))+(((-1.0)*x8868*x8871))+((x8865*x8869))+((cj0*x8867))+(((-1.0)*cj0*x8872)));
evalcond[5]=((((-1.0)*r11*sj5*x8871))+((x8865*x8866))+(((-1.0)*r12*x8873))+((sj0*x8867))+(((-1.0)*sj0*x8872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8875=cj1*cj1;
IkReal x8876=cj2*cj2;
IkReal x8877=(cj1*cj5);
IkReal x8878=((7280355.0)*cj2);
IkReal x8879=(r10*sj5);
IkReal x8880=((8318211.0)*cj1);
IkReal x8881=((97460000.0)*cj1);
IkReal x8882=(sj1*sj2);
IkReal x8883=((85300000.0)*px);
IkReal x8884=(cj1*cj2);
IkReal x8885=((85300000.0)*py);
IkReal x8886=(r00*sj5);
IkReal x8887=((7280355.0)*cj5);
IkReal x8888=((3835629.0)*cj5);
CheckValue<IkReal> x8889=IKPowWithIntegerCheck(IKsign(((23239234.0)+(((36380450.0)*x8875*x8876))+(((-36380450.0)*x8882*x8884))+(((-18190225.0)*x8876))+(((-41566690.0)*cj1*x8882))+(((5555904.0)*x8875))+(((41566690.0)*cj2*x8875)))),-1);
if(!x8889.valid){
continue;
}
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(((((-7280355.0)*x8879*x8882))+((r11*x8877*x8878))+((x8879*x8880))+(((-1.0)*x8882*x8885))+(((-1.0)*r01*x8888))+((x8884*x8885))+(((-3835629.0)*x8886))+((cj1*x8878*x8879))+((py*x8881))+(((-1.0)*r11*x8882*x8887))+(((8318211.0)*r11*x8877))+(((-44940000.0)*px)))),IkReal(((((-1.0)*x8882*x8883))+((r01*x8877*x8878))+(((-7280355.0)*x8882*x8886))+(((-1.0)*r01*x8882*x8887))+(((44940000.0)*py))+((x8880*x8886))+((px*x8881))+(((3835629.0)*x8879))+(((8318211.0)*r01*x8877))+((r11*x8888))+((cj1*x8878*x8886))+((x8883*x8884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8889.value)))+(x8890.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8891=IKcos(j0);
IkReal x8892=IKsin(j0);
IkReal x8893=(sj1*sj2);
IkReal x8894=((0.08535)*sj5);
IkReal x8895=((0.08535)*cj5);
IkReal x8896=((0.21325)*x8892);
IkReal x8897=(cj1*x8891);
evalcond[0]=((((-1.0)*r01*x8895))+(((-1.0)*r00*x8894))+(((-0.11235)*x8892))+(((0.24365)*x8897))+(((-0.21325)*x8891*x8893))+(((-1.0)*px))+(((0.21325)*cj2*x8897)));
evalcond[1]=((((0.24365)*cj1*x8892))+(((-1.0)*py))+(((-1.0)*r10*x8894))+(((-1.0)*r11*x8895))+(((-1.0)*x8893*x8896))+(((0.11235)*x8891))+((cj1*cj2*x8896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8898=((1.0)*cj5);
IkReal x8899=((((-1.0)*r01*x8898))+(((-1.0)*r00*sj5)));
j4eval[0]=x8899;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x8898))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8900=((1.0)*cj5);
IkReal x8901=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8900)));
j4eval[0]=x8901;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8900))))));
j4eval[2]=IKsign(x8901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8902=((1.0)*sj0);
IkReal x8903=((1.0)*cj0);
IkReal x8904=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8904;
j4eval[1]=((IKabs(((((-1.0)*r02*x8903))+(((-1.0)*r12*x8902)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8903))+(((-1.0)*r11*sj5*x8902))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x8904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8905=((-1.0)*r20);
IkReal x8907 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8907)==0){
continue;
}
IkReal x8906=pow(x8907,-0.5);
CheckValue<IkReal> x8908 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8905),IKFAST_ATAN2_MAGTHRESH);
if(!x8908.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8908.value));
IkReal gconst1=(r21*x8906);
IkReal gconst2=(x8905*x8906);
CheckValue<IkReal> x8909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8909.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8909.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8910=((-1.0)*r20);
IkReal x8911=x8906;
CheckValue<IkReal> x8913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8910),IKFAST_ATAN2_MAGTHRESH);
if(!x8913.valid){
continue;
}
IkReal x8912=((-1.0)*(x8913.value));
sj5=gconst1;
cj5=gconst2;
j5=x8912;
IkReal gconst0=x8912;
IkReal gconst1=(r21*x8911);
IkReal gconst2=(x8910*x8911);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8914=((-1.0)*r20);
IkReal x8915=x8906;
CheckValue<IkReal> x8917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8914),IKFAST_ATAN2_MAGTHRESH);
if(!x8917.valid){
continue;
}
IkReal x8916=((-1.0)*(x8917.value));
sj5=gconst1;
cj5=gconst2;
j5=x8916;
IkReal gconst0=x8916;
IkReal gconst1=(r21*x8915);
IkReal gconst2=(x8914*x8915);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8918=((-1.0)*r20);
IkReal x8919=x8906;
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8918),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
IkReal x8920=((-1.0)*(x8921.value));
sj5=gconst1;
cj5=gconst2;
j5=x8920;
IkReal gconst0=x8920;
IkReal gconst1=(r21*x8919);
IkReal gconst2=(x8918*x8919);
IkReal x8922=r22*r22;
CheckValue<IkReal> x8926=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8922))),-1);
if(!x8926.valid){
continue;
}
IkReal x8923=x8926.value;
IkReal x8924=(sj3*x8923);
IkReal x8925=((((2.0)*x8924*(r20*r20)*(r21*r21)))+((x8924*(r21*r21*r21*r21)))+((x8924*(r20*r20*r20*r20)))+((sj3*x8922)));
j4eval[0]=x8925;
j4eval[1]=IKsign(x8925);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8927=((-1.0)*r20);
IkReal x8928=x8906;
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8927),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
IkReal x8929=((-1.0)*(x8930.value));
sj5=gconst1;
cj5=gconst2;
j5=x8929;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8929;
IkReal gconst1=(r21*x8928);
IkReal gconst2=(x8927*x8928);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8931=((-1.0)*r20);
IkReal x8932=x8906;
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8931),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
IkReal x8933=((-1.0)*(x8934.value));
sj5=gconst1;
cj5=gconst2;
j5=x8933;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8933;
IkReal gconst1=(r21*x8932);
IkReal gconst2=(x8931*x8932);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8935=((-1.0)*r20);
IkReal x8936=x8906;
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8935),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
IkReal x8937=((-1.0)*(x8938.value));
sj5=gconst1;
cj5=gconst2;
j5=x8937;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8937;
IkReal gconst1=(r21*x8936);
IkReal gconst2=(x8935*x8936);
IkReal x8939=((1.0)*(r22*r22));
CheckValue<IkReal> x8943=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8939))),-1);
if(!x8943.valid){
continue;
}
IkReal x8940=x8943.value;
IkReal x8941=((1.0)*x8940);
IkReal x8942=((((-1.0)*x8941*(r21*r21*r21*r21)))+(((-1.0)*x8941*(r20*r20*r20*r20)))+(((-1.0)*x8939))+(((-2.0)*x8940*(r20*r20)*(r21*r21))));
j4eval[0]=x8942;
j4eval[1]=IKsign(x8942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8944=((-1.0)*r20);
IkReal x8945=x8906;
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8944),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
IkReal x8946=((-1.0)*(x8947.value));
sj5=gconst1;
cj5=gconst2;
j5=x8946;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8946;
IkReal gconst1=(r21*x8945);
IkReal gconst2=(x8944*x8945);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8948=((-1.0)*r20);
IkReal x8949=x8906;
CheckValue<IkReal> x8951 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8948),IKFAST_ATAN2_MAGTHRESH);
if(!x8951.valid){
continue;
}
IkReal x8950=((-1.0)*(x8951.value));
sj5=gconst1;
cj5=gconst2;
j5=x8950;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8950;
IkReal gconst1=(r21*x8949);
IkReal gconst2=(x8948*x8949);
IkReal x8952=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8956=IKPowWithIntegerCheck(x8952,-1);
if(!x8956.valid){
continue;
}
IkReal x8953=x8956.value;
IkReal x8954=((1.0)*x8953);
IkReal x8955=((((-1.0)*x8954*(r11*r11)*(r21*r21)))+(((-1.0)*x8954*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8953)));
j4eval[0]=x8955;
j4eval[1]=r12;
j4eval[2]=x8952;
j4eval[3]=IKsign(x8955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8957=((-1.0)*r20);
IkReal x8958=x8906;
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8957),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
IkReal x8959=((-1.0)*(x8960.value));
sj5=gconst1;
cj5=gconst2;
j5=x8959;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8959;
IkReal gconst1=(r21*x8958);
IkReal gconst2=(x8957*x8958);
IkReal x8961=r22*r22;
IkReal x8962=(cj1*r12*sj2);
IkReal x8963=(cj2*r12*sj1);
CheckValue<IkReal> x8967=IKPowWithIntegerCheck(((-1.0)+x8961),-1);
if(!x8967.valid){
continue;
}
IkReal x8964=x8967.value;
if((((1.0)+(((-1.0)*x8961)))) < -0.00001)
continue;
IkReal x8965=IKsqrt(((1.0)+(((-1.0)*x8961))));
IkReal x8966=(r22*x8964*x8965);
j4eval[0]=((IKabs(((((-1.0)*x8962))+(((-1.0)*x8963)))))+(IKabs((((x8962*x8966))+((x8963*x8966))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8968=(cj1*sj2);
IkReal x8969=(cj2*sj1);
IkReal x8970=((1.0)*r12);
IkReal x8971=(gconst1*r11);
IkReal x8972=((1.0)*gconst2*r10);
CheckValue<IkReal> x8973 = IKatan2WithCheck(IkReal((((x8968*x8971))+((x8969*x8971))+(((-1.0)*x8968*x8972))+(((-1.0)*x8969*x8972)))),IkReal(((((-1.0)*x8968*x8970))+(((-1.0)*x8969*x8970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8973.valid){
continue;
}
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8973.value)+(((1.5707963267949)*(x8974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8975=IKcos(j4);
IkReal x8976=IKsin(j4);
IkReal x8977=((1.0)*x8975);
IkReal x8978=(gconst1*x8975);
IkReal x8979=(gconst1*x8976);
IkReal x8980=((1.0)*gconst2*x8976);
evalcond[0]=(((r11*x8978))+((r12*x8976))+(((-1.0)*gconst2*r10*x8977)));
evalcond[1]=(((r21*x8979))+(((-1.0)*r22*x8977))+(((-1.0)*r20*x8980)));
evalcond[2]=(((r01*x8979))+(((-1.0)*r02*x8977))+(((-1.0)*r00*x8980)));
evalcond[3]=((1.0)+((r11*x8979))+(((-1.0)*r12*x8977))+(((-1.0)*r10*x8980)));
evalcond[4]=(((r21*x8978))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8977))+((cj1*sj2))+((r22*x8976)));
evalcond[5]=(((r01*x8978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8977))+((r02*x8976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8981=(gconst2*r10);
IkReal x8982=(gconst1*r11);
CheckValue<IkReal> x8983=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8981*x8981)))+(((2.0)*x8981*x8982))+(((-1.0)*(x8982*x8982)))+(((-1.0)*(r12*r12))))),-1);
if(!x8983.valid){
continue;
}
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((((-1.0)*x8981))+x8982)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8983.value)))+(x8984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8985=IKcos(j4);
IkReal x8986=IKsin(j4);
IkReal x8987=((1.0)*x8985);
IkReal x8988=(gconst1*x8985);
IkReal x8989=(gconst1*x8986);
IkReal x8990=((1.0)*gconst2*x8986);
evalcond[0]=((((-1.0)*gconst2*r10*x8987))+((r11*x8988))+((r12*x8986)));
evalcond[1]=(((r21*x8989))+(((-1.0)*r22*x8987))+(((-1.0)*r20*x8990)));
evalcond[2]=(((r01*x8989))+(((-1.0)*r02*x8987))+(((-1.0)*r00*x8990)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8990))+(((-1.0)*r12*x8987))+((r11*x8989)));
evalcond[4]=((((-1.0)*gconst2*r20*x8987))+((cj2*sj1))+((r22*x8986))+((cj1*sj2))+((r21*x8988)));
evalcond[5]=(((r01*x8988))+((r02*x8986))+(((-1.0)*gconst2*r00*x8987))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8991=((1.0)*gconst2);
CheckValue<IkReal> x8992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8991)))),-1);
if(!x8992.valid){
continue;
}
CheckValue<IkReal> x8993 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8992.value)))+(x8993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8994=IKcos(j4);
IkReal x8995=IKsin(j4);
IkReal x8996=((1.0)*x8994);
IkReal x8997=(gconst1*x8994);
IkReal x8998=(gconst1*x8995);
IkReal x8999=((1.0)*gconst2*x8995);
evalcond[0]=(((r11*x8997))+((r12*x8995))+(((-1.0)*gconst2*r10*x8996)));
evalcond[1]=(((r21*x8998))+(((-1.0)*r22*x8996))+(((-1.0)*r20*x8999)));
evalcond[2]=(((r01*x8998))+(((-1.0)*r02*x8996))+(((-1.0)*r00*x8999)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8996))+((r11*x8998))+(((-1.0)*r10*x8999)));
evalcond[4]=(((cj2*sj1))+((r21*x8997))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8996))+((r22*x8995)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8997))+(((-1.0)*gconst2*r00*x8996))+((r02*x8995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9000=((-1.0)*r20);
IkReal x9001=x8906;
CheckValue<IkReal> x9003 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9000),IKFAST_ATAN2_MAGTHRESH);
if(!x9003.valid){
continue;
}
IkReal x9002=((-1.0)*(x9003.value));
sj5=gconst1;
cj5=gconst2;
j5=x9002;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9002;
IkReal gconst1=(r21*x9001);
IkReal gconst2=(x9000*x9001);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9004=((-1.0)*r20);
IkReal x9005=x8906;
CheckValue<IkReal> x9007 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9004),IKFAST_ATAN2_MAGTHRESH);
if(!x9007.valid){
continue;
}
IkReal x9006=((-1.0)*(x9007.value));
sj5=gconst1;
cj5=gconst2;
j5=x9006;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9006;
IkReal gconst1=(r21*x9005);
IkReal gconst2=(x9004*x9005);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9008=((-1.0)*r20);
IkReal x9009=x8906;
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9008),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
IkReal x9010=((-1.0)*(x9011.value));
sj5=gconst1;
cj5=gconst2;
j5=x9010;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9010;
IkReal gconst1=(r21*x9009);
IkReal gconst2=(x9008*x9009);
IkReal x9012=r22*r22;
IkReal x9013=(cj1*r12*sj2);
IkReal x9014=(cj2*r12*sj1);
CheckValue<IkReal> x9018=IKPowWithIntegerCheck(((-1.0)+x9012),-1);
if(!x9018.valid){
continue;
}
IkReal x9015=x9018.value;
if((((1.0)+(((-1.0)*x9012)))) < -0.00001)
continue;
IkReal x9016=IKsqrt(((1.0)+(((-1.0)*x9012))));
IkReal x9017=(r22*x9015*x9016);
j4eval[0]=((IKabs(((((-1.0)*x9014))+(((-1.0)*x9013)))))+(IKabs((((x9014*x9017))+((x9013*x9017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9019=(cj1*sj2);
IkReal x9020=(cj2*sj1);
IkReal x9021=((1.0)*r12);
IkReal x9022=(gconst1*r11);
IkReal x9023=((1.0)*gconst2*r10);
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal((((x9019*x9022))+(((-1.0)*x9020*x9023))+((x9020*x9022))+(((-1.0)*x9019*x9023)))),IkReal(((((-1.0)*x9020*x9021))+(((-1.0)*x9019*x9021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
CheckValue<IkReal> x9025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9024.value)+(((1.5707963267949)*(x9025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9026=IKcos(j4);
IkReal x9027=IKsin(j4);
IkReal x9028=((1.0)*x9026);
IkReal x9029=(gconst1*x9026);
IkReal x9030=(gconst1*x9027);
IkReal x9031=((1.0)*gconst2*x9027);
evalcond[0]=((((-1.0)*gconst2*r10*x9028))+((r11*x9029))+((r12*x9027)));
evalcond[1]=(((r21*x9030))+(((-1.0)*r20*x9031))+(((-1.0)*r22*x9028)));
evalcond[2]=(((r01*x9030))+(((-1.0)*r00*x9031))+(((-1.0)*r02*x9028)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9031))+(((-1.0)*r12*x9028))+((r11*x9030)));
evalcond[4]=((((-1.0)*gconst2*r20*x9028))+((cj2*sj1))+((cj1*sj2))+((r21*x9029))+((r22*x9027)));
evalcond[5]=((((-1.0)*gconst2*r00*x9028))+((r01*x9029))+(((-1.0)*sj1*sj2))+((r02*x9027))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9032=(gconst1*r11);
IkReal x9033=(gconst2*r10);
CheckValue<IkReal> x9034=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9032*x9033))+(x9032*x9032)+(x9033*x9033))),-1);
if(!x9034.valid){
continue;
}
CheckValue<IkReal> x9035 = IKatan2WithCheck(IkReal((x9032+(((-1.0)*x9033)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9034.value)))+(x9035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9036=IKcos(j4);
IkReal x9037=IKsin(j4);
IkReal x9038=((1.0)*x9036);
IkReal x9039=(gconst1*x9036);
IkReal x9040=(gconst1*x9037);
IkReal x9041=((1.0)*gconst2*x9037);
evalcond[0]=((((-1.0)*gconst2*r10*x9038))+((r11*x9039))+((r12*x9037)));
evalcond[1]=((((-1.0)*r22*x9038))+(((-1.0)*r20*x9041))+((r21*x9040)));
evalcond[2]=(((r01*x9040))+(((-1.0)*r00*x9041))+(((-1.0)*r02*x9038)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9038))+(((-1.0)*r10*x9041))+((r11*x9040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9038))+((cj1*sj2))+((r22*x9037))+((r21*x9039)));
evalcond[5]=(((r01*x9039))+(((-1.0)*sj1*sj2))+((r02*x9037))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
CheckValue<IkReal> x9043=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9042.value)+(((1.5707963267949)*(x9043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9044=IKcos(j4);
IkReal x9045=IKsin(j4);
IkReal x9046=((1.0)*x9044);
IkReal x9047=(gconst1*x9044);
IkReal x9048=(gconst1*x9045);
IkReal x9049=((1.0)*gconst2*x9045);
evalcond[0]=(((r12*x9045))+((r11*x9047))+(((-1.0)*gconst2*r10*x9046)));
evalcond[1]=((((-1.0)*r22*x9046))+(((-1.0)*r20*x9049))+((r21*x9048)));
evalcond[2]=(((r01*x9048))+(((-1.0)*r00*x9049))+(((-1.0)*r02*x9046)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9049))+(((-1.0)*r12*x9046))+((r11*x9048)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9045))+((r21*x9047))+(((-1.0)*gconst2*r20*x9046)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9047))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9046))+((r02*x9045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9050=((-1.0)*r20);
IkReal x9051=x8906;
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9050),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
IkReal x9052=((-1.0)*(x9053.value));
sj5=gconst1;
cj5=gconst2;
j5=x9052;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9052;
IkReal gconst1=(r21*x9051);
IkReal gconst2=(x9050*x9051);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9054=((-1.0)*r20);
IkReal x9055=x8906;
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9054),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
IkReal x9056=((-1.0)*(x9057.value));
sj5=gconst1;
cj5=gconst2;
j5=x9056;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9056;
IkReal gconst1=(r21*x9055);
IkReal gconst2=(x9054*x9055);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9058=((-1.0)*r20);
IkReal x9059=x8906;
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9058),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
IkReal x9060=((-1.0)*(x9061.value));
sj5=gconst1;
cj5=gconst2;
j5=x9060;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9060;
IkReal gconst1=(r21*x9059);
IkReal gconst2=(x9058*x9059);
IkReal x9062=r22*r22;
IkReal x9063=((1.0)*r02);
IkReal x9064=(cj1*sj2);
IkReal x9065=(cj2*sj1);
CheckValue<IkReal> x9069=IKPowWithIntegerCheck(((-1.0)+x9062),-1);
if(!x9069.valid){
continue;
}
IkReal x9066=x9069.value;
if((((1.0)+(((-1.0)*x9062)))) < -0.00001)
continue;
IkReal x9067=IKsqrt(((1.0)+(((-1.0)*x9062))));
IkReal x9068=(r02*r22*x9066*x9067);
j4eval[0]=((IKabs((((x9064*x9068))+((x9065*x9068)))))+(IKabs(((((-1.0)*x9063*x9064))+(((-1.0)*x9063*x9065))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9070=(cj1*sj2);
IkReal x9071=(gconst1*r01);
IkReal x9072=((1.0)*r02);
IkReal x9073=(cj2*sj1);
IkReal x9074=((1.0)*gconst2*r00);
CheckValue<IkReal> x9075 = IKatan2WithCheck(IkReal((((x9071*x9073))+((x9070*x9071))+(((-1.0)*x9073*x9074))+(((-1.0)*x9070*x9074)))),IkReal(((((-1.0)*x9072*x9073))+(((-1.0)*x9070*x9072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9075.valid){
continue;
}
CheckValue<IkReal> x9076=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9075.value)+(((1.5707963267949)*(x9076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9077=IKcos(j4);
IkReal x9078=IKsin(j4);
IkReal x9079=((1.0)*x9077);
IkReal x9080=(gconst1*x9077);
IkReal x9081=(gconst1*x9078);
IkReal x9082=((1.0)*gconst2*x9078);
evalcond[0]=(((r01*x9080))+(((-1.0)*gconst2*r00*x9079))+((r02*x9078)));
evalcond[1]=((((-1.0)*r22*x9079))+((r21*x9081))+(((-1.0)*r20*x9082)));
evalcond[2]=(((r11*x9081))+(((-1.0)*r12*x9079))+(((-1.0)*r10*x9082)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9079))+(((-1.0)*r00*x9082))+((r01*x9081)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9080))+((r22*x9078))+(((-1.0)*gconst2*r20*x9079)));
evalcond[5]=(((r11*x9080))+(((-1.0)*gconst2*r10*x9079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9083=(gconst1*r01);
IkReal x9084=(gconst2*r00);
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal((x9083+(((-1.0)*x9084)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
CheckValue<IkReal> x9086=IKPowWithIntegerCheck(IKsign(((x9083*x9083)+(x9084*x9084)+(((-2.0)*x9083*x9084))+(r02*r02))),-1);
if(!x9086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9085.value)+(((1.5707963267949)*(x9086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9087=IKcos(j4);
IkReal x9088=IKsin(j4);
IkReal x9089=((1.0)*x9087);
IkReal x9090=(gconst1*x9087);
IkReal x9091=(gconst1*x9088);
IkReal x9092=((1.0)*gconst2*x9088);
evalcond[0]=((((-1.0)*gconst2*r00*x9089))+((r01*x9090))+((r02*x9088)));
evalcond[1]=((((-1.0)*r20*x9092))+((r21*x9091))+(((-1.0)*r22*x9089)));
evalcond[2]=(((r11*x9091))+(((-1.0)*r10*x9092))+(((-1.0)*r12*x9089)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9092))+((r01*x9091))+(((-1.0)*r02*x9089)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9089))+((cj1*sj2))+((r21*x9090))+((r22*x9088)));
evalcond[5]=(((r11*x9090))+((r12*x9088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9093=((1.0)*gconst2);
CheckValue<IkReal> x9094 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9093))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9094.valid){
continue;
}
CheckValue<IkReal> x9095=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9093)))),-1);
if(!x9095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9094.value)+(((1.5707963267949)*(x9095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9096=IKcos(j4);
IkReal x9097=IKsin(j4);
IkReal x9098=((1.0)*x9096);
IkReal x9099=(gconst1*x9096);
IkReal x9100=(gconst1*x9097);
IkReal x9101=((1.0)*gconst2*x9097);
evalcond[0]=((((-1.0)*gconst2*r00*x9098))+((r01*x9099))+((r02*x9097)));
evalcond[1]=(((r21*x9100))+(((-1.0)*r20*x9101))+(((-1.0)*r22*x9098)));
evalcond[2]=((((-1.0)*r10*x9101))+((r11*x9100))+(((-1.0)*r12*x9098)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9101))+(((-1.0)*r02*x9098))+((r01*x9100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9098))+((cj1*sj2))+((r21*x9099))+((r22*x9097)));
evalcond[5]=(((r11*x9099))+((r12*x9097))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9102=((-1.0)*r20);
IkReal x9103=x8906;
CheckValue<IkReal> x9105 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9102),IKFAST_ATAN2_MAGTHRESH);
if(!x9105.valid){
continue;
}
IkReal x9104=((-1.0)*(x9105.value));
sj5=gconst1;
cj5=gconst2;
j5=x9104;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9104;
IkReal gconst1=(r21*x9103);
IkReal gconst2=(x9102*x9103);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9106=((-1.0)*r20);
IkReal x9107=x8906;
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9106),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
IkReal x9108=((-1.0)*(x9109.value));
sj5=gconst1;
cj5=gconst2;
j5=x9108;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9108;
IkReal gconst1=(r21*x9107);
IkReal gconst2=(x9106*x9107);
IkReal x9110=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9114=IKPowWithIntegerCheck(x9110,-1);
if(!x9114.valid){
continue;
}
IkReal x9111=x9114.value;
IkReal x9112=((1.0)*x9111);
IkReal x9113=((((-2.0)*r00*r01*r20*r21*x9111))+(((-1.0)*(r02*r02)))+(((-1.0)*x9112*(r00*r00)*(r20*r20)))+(((-1.0)*x9112*(r01*r01)*(r21*r21))));
j4eval[0]=x9113;
j4eval[1]=IKsign(x9113);
j4eval[2]=r02;
j4eval[3]=x9110;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9115=((-1.0)*r20);
IkReal x9116=x8906;
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9115),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
IkReal x9117=((-1.0)*(x9118.value));
sj5=gconst1;
cj5=gconst2;
j5=x9117;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9117;
IkReal gconst1=(r21*x9116);
IkReal gconst2=(x9115*x9116);
IkReal x9119=r22*r22;
IkReal x9120=((1.0)*r02);
IkReal x9121=(cj1*sj2);
IkReal x9122=(cj2*sj1);
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(((-1.0)+x9119),-1);
if(!x9126.valid){
continue;
}
IkReal x9123=x9126.value;
if((((1.0)+(((-1.0)*x9119)))) < -0.00001)
continue;
IkReal x9124=IKsqrt(((1.0)+(((-1.0)*x9119))));
IkReal x9125=(r02*r22*x9123*x9124);
j4eval[0]=((IKabs(((((-1.0)*x9120*x9122))+(((-1.0)*x9120*x9121)))))+(IKabs((((x9122*x9125))+((x9121*x9125))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9127=(cj1*sj2);
IkReal x9128=(gconst1*r01);
IkReal x9129=((1.0)*r02);
IkReal x9130=(cj2*sj1);
IkReal x9131=((1.0)*gconst2*r00);
CheckValue<IkReal> x9132 = IKatan2WithCheck(IkReal((((x9128*x9130))+(((-1.0)*x9127*x9131))+(((-1.0)*x9130*x9131))+((x9127*x9128)))),IkReal(((((-1.0)*x9129*x9130))+(((-1.0)*x9127*x9129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9132.valid){
continue;
}
CheckValue<IkReal> x9133=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9132.value)+(((1.5707963267949)*(x9133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9134=IKcos(j4);
IkReal x9135=IKsin(j4);
IkReal x9136=((1.0)*x9134);
IkReal x9137=(gconst1*x9134);
IkReal x9138=(gconst1*x9135);
IkReal x9139=((1.0)*gconst2*x9135);
evalcond[0]=(((r02*x9135))+(((-1.0)*gconst2*r00*x9136))+((r01*x9137)));
evalcond[1]=((((-1.0)*r22*x9136))+(((-1.0)*r20*x9139))+((r21*x9138)));
evalcond[2]=((((-1.0)*r12*x9136))+(((-1.0)*r10*x9139))+((r11*x9138)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9136))+(((-1.0)*r00*x9139))+((r01*x9138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9135))+((r21*x9137))+(((-1.0)*gconst2*r20*x9136)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9136))+((r12*x9135))+((r11*x9137))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9140=(gconst1*r01);
IkReal x9141=(gconst2*r00);
CheckValue<IkReal> x9142 = IKatan2WithCheck(IkReal(((((-1.0)*x9141))+x9140)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9142.valid){
continue;
}
CheckValue<IkReal> x9143=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9141*x9141)))+(((-1.0)*(r02*r02)))+(((2.0)*x9140*x9141))+(((-1.0)*(x9140*x9140))))),-1);
if(!x9143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9142.value)+(((1.5707963267949)*(x9143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9144=IKcos(j4);
IkReal x9145=IKsin(j4);
IkReal x9146=((1.0)*x9144);
IkReal x9147=(gconst1*x9144);
IkReal x9148=(gconst1*x9145);
IkReal x9149=((1.0)*gconst2*x9145);
evalcond[0]=((((-1.0)*gconst2*r00*x9146))+((r01*x9147))+((r02*x9145)));
evalcond[1]=((((-1.0)*r20*x9149))+((r21*x9148))+(((-1.0)*r22*x9146)));
evalcond[2]=((((-1.0)*r10*x9149))+(((-1.0)*r12*x9146))+((r11*x9148)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9149))+((r01*x9148))+(((-1.0)*r02*x9146)));
evalcond[4]=((((-1.0)*gconst2*r20*x9146))+((cj2*sj1))+((cj1*sj2))+((r21*x9147))+((r22*x9145)));
evalcond[5]=((((-1.0)*gconst2*r10*x9146))+(((-1.0)*sj1*sj2))+((r12*x9145))+((cj1*cj2))+((r11*x9147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9150 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9150.valid){
continue;
}
CheckValue<IkReal> x9151=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9150.value)+(((1.5707963267949)*(x9151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9152=IKcos(j4);
IkReal x9153=IKsin(j4);
IkReal x9154=((1.0)*x9152);
IkReal x9155=(gconst1*x9152);
IkReal x9156=(gconst1*x9153);
IkReal x9157=((1.0)*gconst2*x9153);
evalcond[0]=(((r02*x9153))+(((-1.0)*gconst2*r00*x9154))+((r01*x9155)));
evalcond[1]=((((-1.0)*r20*x9157))+(((-1.0)*r22*x9154))+((r21*x9156)));
evalcond[2]=(((r11*x9156))+(((-1.0)*r12*x9154))+(((-1.0)*r10*x9157)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9154))+((r01*x9156))+(((-1.0)*r00*x9157)));
evalcond[4]=(((cj2*sj1))+((r22*x9153))+(((-1.0)*gconst2*r20*x9154))+((cj1*sj2))+((r21*x9155)));
evalcond[5]=(((r11*x9155))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9154))+((cj1*cj2))+((r12*x9153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9158=((-1.0)*r20);
IkReal x9159=((-1.0)*px);
CheckValue<IkReal> x9161 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9158),IKFAST_ATAN2_MAGTHRESH);
if(!x9161.valid){
continue;
}
IkReal x9160=((-1.0)*(x9161.value));
sj5=gconst1;
cj5=gconst2;
j5=x9160;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9159);
rxp1_1=(px*r21);
rxp1_2=(r11*x9159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9160;
IkReal gconst1=r21;
IkReal gconst2=x9158;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9162=((-1.0)*r20);
IkReal x9163=((-1.0)*px);
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9162),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
IkReal x9164=((-1.0)*(x9165.value));
sj5=gconst1;
cj5=gconst2;
j5=x9164;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9163);
rxp1_1=(px*r21);
rxp1_2=(r11*x9163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9164;
IkReal gconst1=r21;
IkReal gconst2=x9162;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9166=((-1.0)*r20);
IkReal x9167=((-1.0)*px);
CheckValue<IkReal> x9169 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9166),IKFAST_ATAN2_MAGTHRESH);
if(!x9169.valid){
continue;
}
IkReal x9168=((-1.0)*(x9169.value));
sj5=gconst1;
cj5=gconst2;
j5=x9168;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9167);
rxp1_1=(px*r21);
rxp1_2=(r11*x9167);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9168;
IkReal gconst1=r21;
IkReal gconst2=x9166;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9172=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9172.valid){
continue;
}
IkReal x9170=x9172.value;
IkReal x9171=(sj0*x9170);
cj4array[0]=(((cj1*cj2*x9171))+(((-1.0)*sj1*sj2*x9171)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9173=IKsin(j4);
IkReal x9174=IKcos(j4);
IkReal x9175=((1.0)*gconst2);
IkReal x9176=(gconst1*r21);
evalcond[0]=(r02*x9173);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9174)));
evalcond[2]=((((-1.0)*r20*x9173*x9175))+((x9173*x9176)));
evalcond[3]=(((gconst1*r11*x9173))+(((-1.0)*r10*x9173*x9175)));
evalcond[4]=((((-1.0)*r20*x9174*x9175))+((cj2*sj1))+((cj1*sj2))+((x9174*x9176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9179=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9179.valid){
continue;
}
IkReal x9177=x9179.value;
IkReal x9178=((1.0)*x9177);
cj4array[0]=((((-1.0)*cj1*sj2*x9178))+(((-1.0)*cj2*sj1*x9178)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9180=IKsin(j4);
IkReal x9181=IKcos(j4);
IkReal x9182=((1.0)*sj0);
IkReal x9183=(gconst1*x9180);
IkReal x9184=((1.0)*x9181);
IkReal x9185=((1.0)*gconst2*x9180);
evalcond[0]=(r02*x9180);
evalcond[1]=((((-1.0)*r02*x9184))+(((-1.0)*x9182)));
evalcond[2]=((((-1.0)*r20*x9185))+((r21*x9183)));
evalcond[3]=(((r11*x9183))+(((-1.0)*r10*x9185)));
evalcond[4]=(((gconst1*r11*x9181))+(((-1.0)*cj1*cj2*x9182))+(((-1.0)*gconst2*r10*x9184))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9186=IKPowWithIntegerCheck(r02,-1);
if(!x9186.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9186.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9187=IKsin(j4);
IkReal x9188=IKcos(j4);
IkReal x9189=(gconst1*r21);
IkReal x9190=(gconst1*r11);
IkReal x9191=((1.0)*gconst2*r10);
IkReal x9192=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9187);
evalcond[1]=(((x9187*x9189))+(((-1.0)*x9187*x9192)));
evalcond[2]=(((x9187*x9190))+(((-1.0)*x9187*x9191)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9188*x9192))+((cj1*sj2))+((x9188*x9189)));
evalcond[4]=((((-1.0)*x9188*x9191))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9188*x9190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9193=(cj2*sj1);
IkReal x9194=(cj1*sj2);
IkReal x9195=(gconst1*r21);
IkReal x9196=((1.0)*gconst2*r20);
CheckValue<IkReal> x9197=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9196))+(((2.0)*gconst2*r20*x9195))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9195*x9195))))),-1);
if(!x9197.valid){
continue;
}
CheckValue<IkReal> x9198 = IKatan2WithCheck(IkReal((((r22*x9193))+((r22*x9194)))),IkReal(((((-1.0)*x9194*x9196))+((x9193*x9195))+(((-1.0)*x9193*x9196))+((x9194*x9195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9197.value)))+(x9198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9199=IKsin(j4);
IkReal x9200=IKcos(j4);
IkReal x9201=(sj1*sj2);
IkReal x9202=(gconst2*r10);
IkReal x9203=(gconst2*r00);
IkReal x9204=(gconst2*r20);
IkReal x9205=((1.0)*x9200);
IkReal x9206=(gconst1*x9200);
IkReal x9207=((1.0)*cj1*cj2);
IkReal x9208=(gconst1*x9199);
IkReal x9209=((1.0)*x9199);
evalcond[0]=((((-1.0)*x9204*x9209))+((r21*x9208))+(((-1.0)*r22*x9205)));
evalcond[1]=(cj0+((r11*x9208))+(((-1.0)*r12*x9205))+(((-1.0)*x9202*x9209)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9208))+(((-1.0)*r02*x9205))+(((-1.0)*x9203*x9209)));
evalcond[3]=(((cj2*sj1))+((r22*x9199))+((cj1*sj2))+(((-1.0)*x9204*x9205))+((r21*x9206)));
evalcond[4]=(((r01*x9206))+(((-1.0)*cj0*x9207))+((r02*x9199))+((cj0*x9201))+(((-1.0)*x9203*x9205)));
evalcond[5]=(((r11*x9206))+((sj0*x9201))+((r12*x9199))+(((-1.0)*sj0*x9207))+(((-1.0)*x9202*x9205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9210=((1.0)*gconst2);
CheckValue<IkReal> x9211 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9210))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9211.valid){
continue;
}
CheckValue<IkReal> x9212=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9210)))),-1);
if(!x9212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9211.value)+(((1.5707963267949)*(x9212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9213=IKsin(j4);
IkReal x9214=IKcos(j4);
IkReal x9215=(sj1*sj2);
IkReal x9216=(gconst2*r10);
IkReal x9217=(gconst2*r00);
IkReal x9218=(gconst2*r20);
IkReal x9219=((1.0)*x9214);
IkReal x9220=(gconst1*x9214);
IkReal x9221=((1.0)*cj1*cj2);
IkReal x9222=(gconst1*x9213);
IkReal x9223=((1.0)*x9213);
evalcond[0]=(((r21*x9222))+(((-1.0)*x9218*x9223))+(((-1.0)*r22*x9219)));
evalcond[1]=(cj0+(((-1.0)*x9216*x9223))+((r11*x9222))+(((-1.0)*r12*x9219)));
evalcond[2]=(((r01*x9222))+(((-1.0)*r02*x9219))+(((-1.0)*sj0))+(((-1.0)*x9217*x9223)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9220))+(((-1.0)*x9218*x9219))+((r22*x9213)));
evalcond[4]=(((r01*x9220))+(((-1.0)*x9217*x9219))+(((-1.0)*cj0*x9221))+((r02*x9213))+((cj0*x9215)));
evalcond[5]=((((-1.0)*x9216*x9219))+((r12*x9213))+((r11*x9220))+((sj0*x9215))+(((-1.0)*sj0*x9221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9224=((1.0)*gconst2);
CheckValue<IkReal> x9225 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9225.valid){
continue;
}
CheckValue<IkReal> x9226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9224))+(((-1.0)*gconst1*r00)))),-1);
if(!x9226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9225.value)+(((1.5707963267949)*(x9226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9227=IKsin(j4);
IkReal x9228=IKcos(j4);
IkReal x9229=(sj1*sj2);
IkReal x9230=(gconst2*r10);
IkReal x9231=(gconst2*r00);
IkReal x9232=(gconst2*r20);
IkReal x9233=((1.0)*x9228);
IkReal x9234=(gconst1*x9228);
IkReal x9235=((1.0)*cj1*cj2);
IkReal x9236=(gconst1*x9227);
IkReal x9237=((1.0)*x9227);
evalcond[0]=(((r21*x9236))+(((-1.0)*x9232*x9237))+(((-1.0)*r22*x9233)));
evalcond[1]=(cj0+(((-1.0)*r12*x9233))+((r11*x9236))+(((-1.0)*x9230*x9237)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9236))+(((-1.0)*x9231*x9237))+(((-1.0)*r02*x9233)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9234))+((r22*x9227))+(((-1.0)*x9232*x9233)));
evalcond[4]=((((-1.0)*cj0*x9235))+((r02*x9227))+((cj0*x9229))+((r01*x9234))+(((-1.0)*x9231*x9233)));
evalcond[5]=((((-1.0)*sj0*x9235))+((r12*x9227))+((sj0*x9229))+((r11*x9234))+(((-1.0)*x9230*x9233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9238=((-1.0)*r20);
IkReal x9239=x8906;
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9238),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
IkReal x9240=((-1.0)*(x9241.value));
sj5=gconst1;
cj5=gconst2;
j5=x9240;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9240;
IkReal gconst1=(r21*x9239);
IkReal gconst2=(x9238*x9239);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9242=((-1.0)*r20);
IkReal x9243=x8906;
CheckValue<IkReal> x9245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9242),IKFAST_ATAN2_MAGTHRESH);
if(!x9245.valid){
continue;
}
IkReal x9244=((-1.0)*(x9245.value));
sj5=gconst1;
cj5=gconst2;
j5=x9244;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9244;
IkReal gconst1=(r21*x9243);
IkReal gconst2=(x9242*x9243);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9246=((-1.0)*r20);
IkReal x9247=x8906;
CheckValue<IkReal> x9249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9246),IKFAST_ATAN2_MAGTHRESH);
if(!x9249.valid){
continue;
}
IkReal x9248=((-1.0)*(x9249.value));
sj5=gconst1;
cj5=gconst2;
j5=x9248;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9248;
IkReal gconst1=(r21*x9247);
IkReal gconst2=(x9246*x9247);
IkReal x9250=r22*r22;
CheckValue<IkReal> x9253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9250))),-1);
if(!x9253.valid){
continue;
}
IkReal x9251=x9253.value;
IkReal x9252=(((x9251*(r20*r20*r20*r20)))+(((2.0)*x9251*(r20*r20)*(r21*r21)))+x9250+((x9251*(r21*r21*r21*r21))));
j4eval[0]=x9252;
j4eval[1]=IKsign(x9252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9254=((-1.0)*r20);
IkReal x9255=x8906;
CheckValue<IkReal> x9257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9254),IKFAST_ATAN2_MAGTHRESH);
if(!x9257.valid){
continue;
}
IkReal x9256=((-1.0)*(x9257.value));
sj5=gconst1;
cj5=gconst2;
j5=x9256;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9256;
IkReal gconst1=(r21*x9255);
IkReal gconst2=(x9254*x9255);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9258=((-1.0)*r20);
IkReal x9259=x8906;
CheckValue<IkReal> x9261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9258),IKFAST_ATAN2_MAGTHRESH);
if(!x9261.valid){
continue;
}
IkReal x9260=((-1.0)*(x9261.value));
sj5=gconst1;
cj5=gconst2;
j5=x9260;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9260;
IkReal gconst1=(r21*x9259);
IkReal gconst2=(x9258*x9259);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9262=((-1.0)*r20);
IkReal x9263=x8906;
CheckValue<IkReal> x9265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9262),IKFAST_ATAN2_MAGTHRESH);
if(!x9265.valid){
continue;
}
IkReal x9264=((-1.0)*(x9265.value));
sj5=gconst1;
cj5=gconst2;
j5=x9264;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9264;
IkReal gconst1=(r21*x9263);
IkReal gconst2=(x9262*x9263);
IkReal x9266=r22*r22;
IkReal x9267=(cj1*r12*sj2);
IkReal x9268=(cj2*r12*sj1);
CheckValue<IkReal> x9272=IKPowWithIntegerCheck(((-1.0)+x9266),-1);
if(!x9272.valid){
continue;
}
IkReal x9269=x9272.value;
if((((1.0)+(((-1.0)*x9266)))) < -0.00001)
continue;
IkReal x9270=IKsqrt(((1.0)+(((-1.0)*x9266))));
IkReal x9271=((1.0)*r22*x9269*x9270);
j4eval[0]=((IKabs((x9267+x9268)))+(IKabs(((((-1.0)*x9267*x9271))+(((-1.0)*x9268*x9271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9273=((1.0)*gconst1);
IkReal x9274=(cj2*sj1);
IkReal x9275=(gconst2*r10);
IkReal x9276=(cj1*sj2);
CheckValue<IkReal> x9277=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9273)))),-1);
if(!x9277.valid){
continue;
}
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal((((x9275*x9276))+(((-1.0)*r11*x9273*x9274))+(((-1.0)*r11*x9273*x9276))+((x9274*x9275)))),IkReal((((r12*x9274))+((r12*x9276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9277.value)))+(x9278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9279=IKsin(j4);
IkReal x9280=IKcos(j4);
IkReal x9281=((1.0)*x9280);
IkReal x9282=(gconst2*x9280);
IkReal x9283=(gconst1*x9279);
IkReal x9284=((1.0)*x9279);
evalcond[0]=((((-1.0)*gconst2*r20*x9284))+(((-1.0)*r22*x9281))+((r21*x9283)));
evalcond[1]=((((-1.0)*gconst2*r00*x9284))+((r01*x9283))+(((-1.0)*r02*x9281)));
evalcond[2]=((((-1.0)*r12*x9284))+(((-1.0)*gconst1*r11*x9281))+((r10*x9282)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9281))+((r11*x9283))+(((-1.0)*gconst2*r10*x9284)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9281))+((cj1*sj2))+(((-1.0)*r22*x9284))+((r20*x9282)));
evalcond[5]=((((-1.0)*gconst1*r01*x9281))+((r00*x9282))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9285=(gconst1*r11);
IkReal x9286=(gconst2*r10);
CheckValue<IkReal> x9287 = IKatan2WithCheck(IkReal((x9286+(((-1.0)*x9285)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9287.valid){
continue;
}
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9285*x9286))+(x9286*x9286)+(x9285*x9285))),-1);
if(!x9288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9287.value)+(((1.5707963267949)*(x9288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9289=IKsin(j4);
IkReal x9290=IKcos(j4);
IkReal x9291=((1.0)*x9290);
IkReal x9292=(gconst2*x9290);
IkReal x9293=(gconst1*x9289);
IkReal x9294=((1.0)*x9289);
evalcond[0]=((((-1.0)*gconst2*r20*x9294))+(((-1.0)*r22*x9291))+((r21*x9293)));
evalcond[1]=((((-1.0)*gconst2*r00*x9294))+((r01*x9293))+(((-1.0)*r02*x9291)));
evalcond[2]=((((-1.0)*gconst1*r11*x9291))+((r10*x9292))+(((-1.0)*r12*x9294)));
evalcond[3]=((1.0)+((r11*x9293))+(((-1.0)*gconst2*r10*x9294))+(((-1.0)*r12*x9291)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9291))+((cj1*sj2))+(((-1.0)*r22*x9294))+((r20*x9292)));
evalcond[5]=(((r00*x9292))+(((-1.0)*gconst1*r01*x9291))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9295=((1.0)*gconst2);
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
CheckValue<IkReal> x9297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9295)))),-1);
if(!x9297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9296.value)+(((1.5707963267949)*(x9297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9298=IKsin(j4);
IkReal x9299=IKcos(j4);
IkReal x9300=((1.0)*x9299);
IkReal x9301=(gconst2*x9299);
IkReal x9302=(gconst1*x9298);
IkReal x9303=((1.0)*x9298);
evalcond[0]=(((r21*x9302))+(((-1.0)*r22*x9300))+(((-1.0)*gconst2*r20*x9303)));
evalcond[1]=((((-1.0)*gconst2*r00*x9303))+((r01*x9302))+(((-1.0)*r02*x9300)));
evalcond[2]=((((-1.0)*gconst1*r11*x9300))+((r10*x9301))+(((-1.0)*r12*x9303)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9303))+((r11*x9302))+(((-1.0)*r12*x9300)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9300))+((cj1*sj2))+((r20*x9301))+(((-1.0)*r22*x9303)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9300))+(((-1.0)*r02*x9303))+((r00*x9301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9304=((-1.0)*r20);
IkReal x9305=x8906;
CheckValue<IkReal> x9307 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9304),IKFAST_ATAN2_MAGTHRESH);
if(!x9307.valid){
continue;
}
IkReal x9306=((-1.0)*(x9307.value));
sj5=gconst1;
cj5=gconst2;
j5=x9306;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9306;
IkReal gconst1=(r21*x9305);
IkReal gconst2=(x9304*x9305);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9308=((-1.0)*r20);
IkReal x9309=x8906;
CheckValue<IkReal> x9311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9308),IKFAST_ATAN2_MAGTHRESH);
if(!x9311.valid){
continue;
}
IkReal x9310=((-1.0)*(x9311.value));
sj5=gconst1;
cj5=gconst2;
j5=x9310;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9310;
IkReal gconst1=(r21*x9309);
IkReal gconst2=(x9308*x9309);
IkReal x9312=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9316=IKPowWithIntegerCheck(x9312,-1);
if(!x9316.valid){
continue;
}
IkReal x9313=x9316.value;
IkReal x9314=((1.0)*x9313);
IkReal x9315=((((-2.0)*r10*r11*r20*r21*x9313))+(((-1.0)*x9314*(r11*r11)*(r21*r21)))+(((-1.0)*x9314*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x9315;
j4eval[1]=r12;
j4eval[2]=x9312;
j4eval[3]=IKsign(x9315);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9317=((-1.0)*r20);
IkReal x9318=x8906;
CheckValue<IkReal> x9320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9317),IKFAST_ATAN2_MAGTHRESH);
if(!x9320.valid){
continue;
}
IkReal x9319=((-1.0)*(x9320.value));
sj5=gconst1;
cj5=gconst2;
j5=x9319;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9319;
IkReal gconst1=(r21*x9318);
IkReal gconst2=(x9317*x9318);
IkReal x9321=r22*r22;
IkReal x9322=(cj1*r12*sj2);
IkReal x9323=(cj2*r12*sj1);
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(((-1.0)+x9321),-1);
if(!x9327.valid){
continue;
}
IkReal x9324=x9327.value;
if((((1.0)+(((-1.0)*x9321)))) < -0.00001)
continue;
IkReal x9325=IKsqrt(((1.0)+(((-1.0)*x9321))));
IkReal x9326=((1.0)*r22*x9324*x9325);
j4eval[0]=((IKabs((x9322+x9323)))+(IKabs(((((-1.0)*x9322*x9326))+(((-1.0)*x9323*x9326))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9328=((1.0)*gconst1);
IkReal x9329=(cj2*sj1);
IkReal x9330=(gconst2*r10);
IkReal x9331=(cj1*sj2);
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal((((x9329*x9330))+(((-1.0)*r11*x9328*x9329))+(((-1.0)*r11*x9328*x9331))+((x9330*x9331)))),IkReal((((r12*x9331))+((r12*x9329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9328))+(((-1.0)*gconst2*r01)))),-1);
if(!x9333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9332.value)+(((1.5707963267949)*(x9333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9334=IKsin(j4);
IkReal x9335=IKcos(j4);
IkReal x9336=((1.0)*x9335);
IkReal x9337=(gconst2*x9335);
IkReal x9338=(gconst1*x9334);
IkReal x9339=((1.0)*x9334);
evalcond[0]=((((-1.0)*r22*x9336))+(((-1.0)*gconst2*r20*x9339))+((r21*x9338)));
evalcond[1]=((((-1.0)*r02*x9336))+((r01*x9338))+(((-1.0)*gconst2*r00*x9339)));
evalcond[2]=((((-1.0)*r12*x9339))+((r10*x9337))+(((-1.0)*gconst1*r11*x9336)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9339))+(((-1.0)*r12*x9336))+((r11*x9338)));
evalcond[4]=(((cj2*sj1))+((r20*x9337))+(((-1.0)*r22*x9339))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9336)));
evalcond[5]=((((-1.0)*r02*x9339))+((r00*x9337))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9340=(gconst1*r11);
IkReal x9341=(gconst2*r10);
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal((x9341+(((-1.0)*x9340)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
CheckValue<IkReal> x9343=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9340*x9340)))+(((2.0)*x9340*x9341))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9341*x9341))))),-1);
if(!x9343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9342.value)+(((1.5707963267949)*(x9343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9344=IKsin(j4);
IkReal x9345=IKcos(j4);
IkReal x9346=((1.0)*x9345);
IkReal x9347=(gconst2*x9345);
IkReal x9348=(gconst1*x9344);
IkReal x9349=((1.0)*x9344);
evalcond[0]=((((-1.0)*r22*x9346))+(((-1.0)*gconst2*r20*x9349))+((r21*x9348)));
evalcond[1]=((((-1.0)*r02*x9346))+((r01*x9348))+(((-1.0)*gconst2*r00*x9349)));
evalcond[2]=(((r10*x9347))+(((-1.0)*r12*x9349))+(((-1.0)*gconst1*r11*x9346)));
evalcond[3]=((-1.0)+((r11*x9348))+(((-1.0)*r12*x9346))+(((-1.0)*gconst2*r10*x9349)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9349))+((cj1*sj2))+((r20*x9347))+(((-1.0)*gconst1*r21*x9346)));
evalcond[5]=((((-1.0)*gconst1*r01*x9346))+((r00*x9347))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x9349))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
CheckValue<IkReal> x9351=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9350.value)+(((1.5707963267949)*(x9351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9352=IKsin(j4);
IkReal x9353=IKcos(j4);
IkReal x9354=((1.0)*x9353);
IkReal x9355=(gconst2*x9353);
IkReal x9356=(gconst1*x9352);
IkReal x9357=((1.0)*x9352);
evalcond[0]=((((-1.0)*r22*x9354))+(((-1.0)*gconst2*r20*x9357))+((r21*x9356)));
evalcond[1]=((((-1.0)*r02*x9354))+((r01*x9356))+(((-1.0)*gconst2*r00*x9357)));
evalcond[2]=((((-1.0)*r12*x9357))+((r10*x9355))+(((-1.0)*gconst1*r11*x9354)));
evalcond[3]=((-1.0)+((r11*x9356))+(((-1.0)*r12*x9354))+(((-1.0)*gconst2*r10*x9357)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9357))+((cj1*sj2))+((r20*x9355))+(((-1.0)*gconst1*r21*x9354)));
evalcond[5]=((((-1.0)*gconst1*r01*x9354))+(((-1.0)*r02*x9357))+(((-1.0)*sj1*sj2))+((r00*x9355))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9358=((-1.0)*r20);
IkReal x9359=x8906;
CheckValue<IkReal> x9361 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9358),IKFAST_ATAN2_MAGTHRESH);
if(!x9361.valid){
continue;
}
IkReal x9360=((-1.0)*(x9361.value));
sj5=gconst1;
cj5=gconst2;
j5=x9360;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9360;
IkReal gconst1=(r21*x9359);
IkReal gconst2=(x9358*x9359);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9362=((-1.0)*r20);
IkReal x9363=x8906;
CheckValue<IkReal> x9365 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9362),IKFAST_ATAN2_MAGTHRESH);
if(!x9365.valid){
continue;
}
IkReal x9364=((-1.0)*(x9365.value));
sj5=gconst1;
cj5=gconst2;
j5=x9364;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9364;
IkReal gconst1=(r21*x9363);
IkReal gconst2=(x9362*x9363);
IkReal x9366=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9370=IKPowWithIntegerCheck(x9366,-1);
if(!x9370.valid){
continue;
}
IkReal x9367=x9370.value;
IkReal x9368=((1.0)*x9367);
IkReal x9369=((((-1.0)*x9368*(r01*r01)*(r21*r21)))+(((-1.0)*x9368*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9367)));
j4eval[0]=x9369;
j4eval[1]=IKsign(x9369);
j4eval[2]=r02;
j4eval[3]=x9366;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9371=((-1.0)*r20);
IkReal x9372=x8906;
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9371),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9373=((-1.0)*(x9374.value));
sj5=gconst1;
cj5=gconst2;
j5=x9373;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9373;
IkReal gconst1=(r21*x9372);
IkReal gconst2=(x9371*x9372);
IkReal x9375=r22*r22;
IkReal x9376=(cj1*r02*sj2);
IkReal x9377=(cj2*r02*sj1);
CheckValue<IkReal> x9381=IKPowWithIntegerCheck(((-1.0)+x9375),-1);
if(!x9381.valid){
continue;
}
IkReal x9378=x9381.value;
if((((1.0)+(((-1.0)*x9375)))) < -0.00001)
continue;
IkReal x9379=IKsqrt(((1.0)+(((-1.0)*x9375))));
IkReal x9380=((1.0)*r22*x9378*x9379);
j4eval[0]=((IKabs(((((-1.0)*x9376*x9380))+(((-1.0)*x9377*x9380)))))+(IKabs((x9377+x9376))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9382=(cj2*sj1);
IkReal x9383=(cj1*sj2);
IkReal x9384=(gconst2*r00);
IkReal x9385=((1.0)*gconst1*r01);
CheckValue<IkReal> x9386 = IKatan2WithCheck(IkReal((((x9383*x9384))+((x9382*x9384))+(((-1.0)*x9383*x9385))+(((-1.0)*x9382*x9385)))),IkReal((((r02*x9382))+((r02*x9383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9386.valid){
continue;
}
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9386.value)+(((1.5707963267949)*(x9387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9388=IKsin(j4);
IkReal x9389=IKcos(j4);
IkReal x9390=(gconst1*r11);
IkReal x9391=(gconst1*r21);
IkReal x9392=(gconst1*r01);
IkReal x9393=((1.0)*x9389);
IkReal x9394=(gconst2*x9389);
IkReal x9395=((1.0)*x9388);
evalcond[0]=(((x9388*x9391))+(((-1.0)*gconst2*r20*x9395))+(((-1.0)*r22*x9393)));
evalcond[1]=(((x9388*x9390))+(((-1.0)*r12*x9393))+(((-1.0)*gconst2*r10*x9395)));
evalcond[2]=((((-1.0)*x9392*x9393))+(((-1.0)*r02*x9395))+((r00*x9394)));
evalcond[3]=((-1.0)+((x9388*x9392))+(((-1.0)*gconst2*r00*x9395))+(((-1.0)*r02*x9393)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9391*x9393))+((r20*x9394))+((cj1*sj2))+(((-1.0)*r22*x9395)));
evalcond[5]=((((-1.0)*r12*x9395))+((r10*x9394))+(((-1.0)*x9390*x9393))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9396=(gconst2*r00);
IkReal x9397=(gconst1*r01);
CheckValue<IkReal> x9398 = IKatan2WithCheck(IkReal((x9396+(((-1.0)*x9397)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9398.valid){
continue;
}
CheckValue<IkReal> x9399=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9397*x9397)))+(((2.0)*x9396*x9397))+(((-1.0)*(x9396*x9396))))),-1);
if(!x9399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9398.value)+(((1.5707963267949)*(x9399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9400=IKsin(j4);
IkReal x9401=IKcos(j4);
IkReal x9402=(gconst1*r11);
IkReal x9403=(gconst1*r21);
IkReal x9404=(gconst1*r01);
IkReal x9405=((1.0)*x9401);
IkReal x9406=(gconst2*x9401);
IkReal x9407=((1.0)*x9400);
evalcond[0]=((((-1.0)*r22*x9405))+((x9400*x9403))+(((-1.0)*gconst2*r20*x9407)));
evalcond[1]=((((-1.0)*gconst2*r10*x9407))+((x9400*x9402))+(((-1.0)*r12*x9405)));
evalcond[2]=((((-1.0)*x9404*x9405))+(((-1.0)*r02*x9407))+((r00*x9406)));
evalcond[3]=((-1.0)+((x9400*x9404))+(((-1.0)*r02*x9405))+(((-1.0)*gconst2*r00*x9407)));
evalcond[4]=((((-1.0)*r22*x9407))+((cj2*sj1))+((cj1*sj2))+((r20*x9406))+(((-1.0)*x9403*x9405)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9407))+((r10*x9406))+(((-1.0)*x9402*x9405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9408=((1.0)*gconst2);
CheckValue<IkReal> x9409 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9408))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9409.valid){
continue;
}
CheckValue<IkReal> x9410=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9408)))),-1);
if(!x9410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9409.value)+(((1.5707963267949)*(x9410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9411=IKsin(j4);
IkReal x9412=IKcos(j4);
IkReal x9413=(gconst1*r11);
IkReal x9414=(gconst1*r21);
IkReal x9415=(gconst1*r01);
IkReal x9416=((1.0)*x9412);
IkReal x9417=(gconst2*x9412);
IkReal x9418=((1.0)*x9411);
evalcond[0]=((((-1.0)*gconst2*r20*x9418))+(((-1.0)*r22*x9416))+((x9411*x9414)));
evalcond[1]=((((-1.0)*r12*x9416))+(((-1.0)*gconst2*r10*x9418))+((x9411*x9413)));
evalcond[2]=((((-1.0)*r02*x9418))+((r00*x9417))+(((-1.0)*x9415*x9416)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9416))+(((-1.0)*gconst2*r00*x9418))+((x9411*x9415)));
evalcond[4]=(((r20*x9417))+((cj2*sj1))+(((-1.0)*x9414*x9416))+((cj1*sj2))+(((-1.0)*r22*x9418)));
evalcond[5]=((((-1.0)*r12*x9418))+((r10*x9417))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9413*x9416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9419=((-1.0)*r20);
IkReal x9420=x8906;
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9419),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
IkReal x9421=((-1.0)*(x9422.value));
sj5=gconst1;
cj5=gconst2;
j5=x9421;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9421;
IkReal gconst1=(r21*x9420);
IkReal gconst2=(x9419*x9420);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9423=((-1.0)*r20);
IkReal x9424=x8906;
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9423),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
IkReal x9425=((-1.0)*(x9426.value));
sj5=gconst1;
cj5=gconst2;
j5=x9425;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9425;
IkReal gconst1=(r21*x9424);
IkReal gconst2=(x9423*x9424);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9427=((-1.0)*r20);
IkReal x9428=x8906;
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9427),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
IkReal x9429=((-1.0)*(x9430.value));
sj5=gconst1;
cj5=gconst2;
j5=x9429;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9429;
IkReal gconst1=(r21*x9428);
IkReal gconst2=(x9427*x9428);
IkReal x9431=r22*r22;
IkReal x9432=(cj1*r02*sj2);
IkReal x9433=(cj2*r02*sj1);
CheckValue<IkReal> x9437=IKPowWithIntegerCheck(((-1.0)+x9431),-1);
if(!x9437.valid){
continue;
}
IkReal x9434=x9437.value;
if((((1.0)+(((-1.0)*x9431)))) < -0.00001)
continue;
IkReal x9435=IKsqrt(((1.0)+(((-1.0)*x9431))));
IkReal x9436=((1.0)*r22*x9434*x9435);
j4eval[0]=((IKabs(((((-1.0)*x9433*x9436))+(((-1.0)*x9432*x9436)))))+(IKabs((x9432+x9433))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9438=(cj2*sj1);
IkReal x9439=(cj1*sj2);
IkReal x9440=(gconst2*r00);
IkReal x9441=((1.0)*gconst1*r01);
CheckValue<IkReal> x9442 = IKatan2WithCheck(IkReal(((((-1.0)*x9439*x9441))+((x9439*x9440))+(((-1.0)*x9438*x9441))+((x9438*x9440)))),IkReal((((r02*x9439))+((r02*x9438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9442.valid){
continue;
}
CheckValue<IkReal> x9443=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9442.value)+(((1.5707963267949)*(x9443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9444=IKsin(j4);
IkReal x9445=IKcos(j4);
IkReal x9446=(gconst1*r11);
IkReal x9447=(gconst1*r21);
IkReal x9448=(gconst1*r01);
IkReal x9449=((1.0)*x9445);
IkReal x9450=(gconst2*x9445);
IkReal x9451=((1.0)*x9444);
evalcond[0]=(((x9444*x9447))+(((-1.0)*gconst2*r20*x9451))+(((-1.0)*r22*x9449)));
evalcond[1]=(((x9444*x9446))+(((-1.0)*gconst2*r10*x9451))+(((-1.0)*r12*x9449)));
evalcond[2]=(((r00*x9450))+(((-1.0)*r02*x9451))+(((-1.0)*x9448*x9449)));
evalcond[3]=((1.0)+((x9444*x9448))+(((-1.0)*gconst2*r00*x9451))+(((-1.0)*r02*x9449)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9451))+((r20*x9450))+(((-1.0)*x9447*x9449)));
evalcond[5]=((((-1.0)*x9446*x9449))+((r10*x9450))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9452=(gconst1*r01);
IkReal x9453=(gconst2*r00);
CheckValue<IkReal> x9454=IKPowWithIntegerCheck(IKsign(((x9453*x9453)+(x9452*x9452)+(r02*r02)+(((-2.0)*x9452*x9453)))),-1);
if(!x9454.valid){
continue;
}
CheckValue<IkReal> x9455 = IKatan2WithCheck(IkReal(((((-1.0)*x9452))+x9453)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9454.value)))+(x9455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9456=IKsin(j4);
IkReal x9457=IKcos(j4);
IkReal x9458=(gconst1*r11);
IkReal x9459=(gconst1*r21);
IkReal x9460=(gconst1*r01);
IkReal x9461=((1.0)*x9457);
IkReal x9462=(gconst2*x9457);
IkReal x9463=((1.0)*x9456);
evalcond[0]=((((-1.0)*gconst2*r20*x9463))+(((-1.0)*r22*x9461))+((x9456*x9459)));
evalcond[1]=((((-1.0)*r12*x9461))+(((-1.0)*gconst2*r10*x9463))+((x9456*x9458)));
evalcond[2]=(((r00*x9462))+(((-1.0)*x9460*x9461))+(((-1.0)*r02*x9463)));
evalcond[3]=((1.0)+((x9456*x9460))+(((-1.0)*gconst2*r00*x9463))+(((-1.0)*r02*x9461)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9459*x9461))+(((-1.0)*r22*x9463))+((r20*x9462)));
evalcond[5]=(((r10*x9462))+(((-1.0)*sj1*sj2))+(((-1.0)*x9458*x9461))+(((-1.0)*r12*x9463))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9464 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9464.valid){
continue;
}
CheckValue<IkReal> x9465=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9464.value)+(((1.5707963267949)*(x9465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9466=IKsin(j4);
IkReal x9467=IKcos(j4);
IkReal x9468=(gconst1*r11);
IkReal x9469=(gconst1*r21);
IkReal x9470=(gconst1*r01);
IkReal x9471=((1.0)*x9467);
IkReal x9472=(gconst2*x9467);
IkReal x9473=((1.0)*x9466);
evalcond[0]=(((x9466*x9469))+(((-1.0)*gconst2*r20*x9473))+(((-1.0)*r22*x9471)));
evalcond[1]=(((x9466*x9468))+(((-1.0)*r12*x9471))+(((-1.0)*gconst2*r10*x9473)));
evalcond[2]=((((-1.0)*r02*x9473))+(((-1.0)*x9470*x9471))+((r00*x9472)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9471))+(((-1.0)*gconst2*r00*x9473))+((x9466*x9470)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9469*x9471))+(((-1.0)*r22*x9473))+((r20*x9472)));
evalcond[5]=(((r10*x9472))+(((-1.0)*sj1*sj2))+(((-1.0)*x9468*x9471))+(((-1.0)*r12*x9473))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9474=((-1.0)*r20);
IkReal x9475=((-1.0)*px);
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9474),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
IkReal x9476=((-1.0)*(x9477.value));
sj5=gconst1;
cj5=gconst2;
j5=x9476;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9475);
rxp1_1=(px*r21);
rxp1_2=(r11*x9475);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9476;
IkReal gconst1=r21;
IkReal gconst2=x9474;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9478=((-1.0)*r20);
IkReal x9479=((-1.0)*px);
CheckValue<IkReal> x9481 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9478),IKFAST_ATAN2_MAGTHRESH);
if(!x9481.valid){
continue;
}
IkReal x9480=((-1.0)*(x9481.value));
sj5=gconst1;
cj5=gconst2;
j5=x9480;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9479);
rxp1_1=(px*r21);
rxp1_2=(r11*x9479);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9480;
IkReal gconst1=r21;
IkReal gconst2=x9478;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9482=((-1.0)*r20);
IkReal x9483=((-1.0)*px);
CheckValue<IkReal> x9485 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9482),IKFAST_ATAN2_MAGTHRESH);
if(!x9485.valid){
continue;
}
IkReal x9484=((-1.0)*(x9485.value));
sj5=gconst1;
cj5=gconst2;
j5=x9484;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9483);
rxp1_1=(px*r21);
rxp1_2=(r11*x9483);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9484;
IkReal gconst1=r21;
IkReal gconst2=x9482;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9488=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9488.valid){
continue;
}
IkReal x9486=x9488.value;
IkReal x9487=(sj0*x9486);
cj4array[0]=((((-1.0)*sj1*sj2*x9487))+((cj1*cj2*x9487)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9489=IKsin(j4);
IkReal x9490=IKcos(j4);
IkReal x9491=(gconst1*x9489);
IkReal x9492=((1.0)*x9490);
IkReal x9493=((1.0)*gconst2*x9489);
evalcond[0]=((-1.0)*r02*x9489);
evalcond[1]=((((-1.0)*r02*x9492))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9493))+((r21*x9491)));
evalcond[3]=((((-1.0)*r10*x9493))+((r11*x9491)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9492))+((gconst2*r20*x9490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9496=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9496.valid){
continue;
}
IkReal x9494=x9496.value;
IkReal x9495=((1.0)*x9494);
cj4array[0]=((((-1.0)*cj2*sj1*x9495))+(((-1.0)*cj1*sj2*x9495)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9497=IKsin(j4);
IkReal x9498=IKcos(j4);
IkReal x9499=(gconst2*r10);
IkReal x9500=((1.0)*sj0);
IkReal x9501=(gconst1*r11);
IkReal x9502=((1.0)*x9497);
IkReal x9503=((1.0)*x9498);
evalcond[0]=((-1.0)*r02*x9497);
evalcond[1]=((((-1.0)*r02*x9503))+(((-1.0)*x9500)));
evalcond[2]=(((gconst1*r21*x9497))+(((-1.0)*gconst2*r20*x9502)));
evalcond[3]=(((x9497*x9501))+(((-1.0)*x9499*x9502)));
evalcond[4]=(((x9498*x9499))+(((-1.0)*cj1*cj2*x9500))+((sj0*sj1*sj2))+(((-1.0)*x9501*x9503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9504=IKPowWithIntegerCheck(r02,-1);
if(!x9504.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9504.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9505=IKsin(j4);
IkReal x9506=IKcos(j4);
IkReal x9507=(gconst2*r10);
IkReal x9508=(gconst1*r11);
IkReal x9509=(gconst1*r21);
IkReal x9510=(gconst2*r20);
IkReal x9511=((1.0)*x9505);
IkReal x9512=((1.0)*x9506);
evalcond[0]=((-1.0)*r02*x9505);
evalcond[1]=(((x9505*x9509))+(((-1.0)*x9510*x9511)));
evalcond[2]=((((-1.0)*x9507*x9511))+((x9505*x9508)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9506*x9510))+(((-1.0)*x9509*x9512)));
evalcond[4]=((((-1.0)*x9508*x9512))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9506*x9507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9513=(cj2*sj1);
IkReal x9514=(cj1*sj2);
IkReal x9515=(gconst1*r21);
IkReal x9516=((1.0)*gconst2*r20);
CheckValue<IkReal> x9517 = IKatan2WithCheck(IkReal((((r22*x9513))+((r22*x9514)))),IkReal(((((-1.0)*x9514*x9516))+((x9514*x9515))+(((-1.0)*x9513*x9516))+((x9513*x9515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9517.valid){
continue;
}
CheckValue<IkReal> x9518=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9515))+(((gconst2*gconst2)*(r20*r20)))+(x9515*x9515))),-1);
if(!x9518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9517.value)+(((1.5707963267949)*(x9518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9519=IKsin(j4);
IkReal x9520=IKcos(j4);
IkReal x9521=(gconst1*r11);
IkReal x9522=(sj1*sj2);
IkReal x9523=(gconst1*r21);
IkReal x9524=(gconst1*r01);
IkReal x9525=((1.0)*x9520);
IkReal x9526=(gconst2*x9520);
IkReal x9527=((1.0)*cj1*cj2);
IkReal x9528=((1.0)*x9519);
evalcond[0]=(((x9519*x9523))+(((-1.0)*r22*x9525))+(((-1.0)*gconst2*r20*x9528)));
evalcond[1]=((((-1.0)*r12*x9525))+(((-1.0)*gconst2*r10*x9528))+cj0+((x9519*x9521)));
evalcond[2]=((((-1.0)*sj0))+((x9519*x9524))+(((-1.0)*r02*x9525))+(((-1.0)*gconst2*r00*x9528)));
evalcond[3]=(((cj2*sj1))+((r20*x9526))+((cj1*sj2))+(((-1.0)*r22*x9528))+(((-1.0)*x9523*x9525)));
evalcond[4]=((((-1.0)*cj0*x9527))+(((-1.0)*r02*x9528))+((cj0*x9522))+(((-1.0)*x9524*x9525))+((r00*x9526)));
evalcond[5]=((((-1.0)*r12*x9528))+((sj0*x9522))+(((-1.0)*x9521*x9525))+((r10*x9526))+(((-1.0)*sj0*x9527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9529=((1.0)*gconst2);
CheckValue<IkReal> x9530 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9529))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9530.valid){
continue;
}
CheckValue<IkReal> x9531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9529))+(((-1.0)*gconst1*r10)))),-1);
if(!x9531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9530.value)+(((1.5707963267949)*(x9531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9532=IKsin(j4);
IkReal x9533=IKcos(j4);
IkReal x9534=(gconst1*r11);
IkReal x9535=(sj1*sj2);
IkReal x9536=(gconst1*r21);
IkReal x9537=(gconst1*r01);
IkReal x9538=((1.0)*x9533);
IkReal x9539=(gconst2*x9533);
IkReal x9540=((1.0)*cj1*cj2);
IkReal x9541=((1.0)*x9532);
evalcond[0]=((((-1.0)*r22*x9538))+((x9532*x9536))+(((-1.0)*gconst2*r20*x9541)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9541))+((x9532*x9534))+(((-1.0)*r12*x9538)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9538))+((x9532*x9537))+(((-1.0)*gconst2*r00*x9541)));
evalcond[3]=((((-1.0)*x9536*x9538))+((cj2*sj1))+((r20*x9539))+((cj1*sj2))+(((-1.0)*r22*x9541)));
evalcond[4]=((((-1.0)*cj0*x9540))+(((-1.0)*r02*x9541))+((cj0*x9535))+((r00*x9539))+(((-1.0)*x9537*x9538)));
evalcond[5]=((((-1.0)*r12*x9541))+(((-1.0)*sj0*x9540))+((r10*x9539))+((sj0*x9535))+(((-1.0)*x9534*x9538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9542=((1.0)*gconst2);
CheckValue<IkReal> x9543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9542))+(((-1.0)*gconst1*r00)))),-1);
if(!x9543.valid){
continue;
}
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9543.value)))+(x9544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9545=IKsin(j4);
IkReal x9546=IKcos(j4);
IkReal x9547=(gconst1*r11);
IkReal x9548=(sj1*sj2);
IkReal x9549=(gconst1*r21);
IkReal x9550=(gconst1*r01);
IkReal x9551=((1.0)*x9546);
IkReal x9552=(gconst2*x9546);
IkReal x9553=((1.0)*cj1*cj2);
IkReal x9554=((1.0)*x9545);
evalcond[0]=((((-1.0)*r22*x9551))+((x9545*x9549))+(((-1.0)*gconst2*r20*x9554)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9554))+((x9545*x9547))+(((-1.0)*r12*x9551)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9551))+((x9545*x9550))+(((-1.0)*gconst2*r00*x9554)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9554))+((cj1*sj2))+((r20*x9552))+(((-1.0)*x9549*x9551)));
evalcond[4]=((((-1.0)*cj0*x9553))+(((-1.0)*r02*x9554))+(((-1.0)*x9550*x9551))+((cj0*x9548))+((r00*x9552)));
evalcond[5]=((((-1.0)*sj0*x9553))+((r10*x9552))+(((-1.0)*x9547*x9551))+(((-1.0)*r12*x9554))+((sj0*x9548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9555=((-1.0)*r20);
IkReal x9556=x8906;
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9555),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
IkReal x9557=((-1.0)*(x9558.value));
sj5=gconst1;
cj5=gconst2;
j5=x9557;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9557;
IkReal gconst1=(r21*x9556);
IkReal gconst2=(x9555*x9556);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9559=((-1.0)*r20);
IkReal x9560=x8906;
CheckValue<IkReal> x9562 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9559),IKFAST_ATAN2_MAGTHRESH);
if(!x9562.valid){
continue;
}
IkReal x9561=((-1.0)*(x9562.value));
sj5=gconst1;
cj5=gconst2;
j5=x9561;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9561;
IkReal gconst1=(r21*x9560);
IkReal gconst2=(x9559*x9560);
CheckValue<IkReal> x9570=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9570.valid){
continue;
}
IkReal x9563=x9570.value;
IkReal x9564=(sj3*x9563);
IkReal x9565=(r11*x9564);
IkReal x9566=(r00*x9564);
IkReal x9567=(r01*x9564);
IkReal x9568=(r10*x9564);
IkReal x9569=(r20*r21*x9564);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9567))+((r00*r20*r21*x9565))+((r01*x9565*(r21*r21)))+((r10*x9566*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=gconst2*gconst2;
IkReal x9572=gconst1*gconst1;
IkReal x9573=((1.0)*cj3);
IkReal x9574=((1.0)*sj3);
IkReal x9575=(r11*sj3);
IkReal x9576=(r10*sj3);
IkReal x9577=(gconst1*gconst2*r00);
IkReal x9578=(gconst1*gconst2*r01);
IkReal x9579=(r00*x9571);
IkReal x9580=(r01*x9572);
CheckValue<IkReal> x9581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9573*x9579))+((cj3*r10*x9578))+((cj3*r11*x9577))+(((-1.0)*r11*x9573*x9580))+(((-1.0)*r02*r12*x9573)))),-1);
if(!x9581.valid){
continue;
}
CheckValue<IkReal> x9582 = IKatan2WithCheck(IkReal((((gconst1*r02*x9576))+((gconst2*r02*x9575)))),IkReal((((x9575*x9578))+((x9576*x9580))+(((-1.0)*r11*x9574*x9579))+(((-1.0)*r10*x9574*x9577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9581.value)))+(x9582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9583=IKsin(j4);
IkReal x9584=IKcos(j4);
IkReal x9585=(sj1*sj2);
IkReal x9586=(gconst1*sj3);
IkReal x9587=(cj3*gconst1);
IkReal x9588=(cj3*gconst2);
IkReal x9589=((1.0)*cj2);
IkReal x9590=(cj1*sj2);
IkReal x9591=(gconst2*sj3);
IkReal x9592=(cj1*x9589);
IkReal x9593=((1.0)*x9584);
IkReal x9594=((1.0)*x9583);
IkReal x9595=(gconst1*x9583);
IkReal x9596=(cj3*x9583);
IkReal x9597=(x9584*x9591);
evalcond[0]=((((-1.0)*r22*x9593))+((r21*x9595))+(((-1.0)*gconst2*r20*x9594)));
evalcond[1]=(((r01*x9595))+(((-1.0)*gconst2*r00*x9594))+(((-1.0)*r02*x9593)));
evalcond[2]=((1.0)+((r11*x9595))+(((-1.0)*gconst2*r10*x9594))+(((-1.0)*r12*x9593)));
evalcond[3]=((((-1.0)*r10*x9588*x9593))+((r11*x9584*x9587))+((r11*x9591))+((r10*x9586))+((r12*x9596)));
evalcond[4]=(((r11*x9588))+(((-1.0)*r11*x9586*x9593))+((r10*x9587))+(((-1.0)*r12*sj3*x9594))+((r10*x9597)));
evalcond[5]=(((cj2*sj1))+((r20*x9586))+(((-1.0)*r20*x9588*x9593))+((r21*x9584*x9587))+((r22*x9596))+x9590+((r21*x9591)));
evalcond[6]=(((r01*x9591))+((r00*x9586))+(((-1.0)*x9592))+x9585+((r02*x9596))+(((-1.0)*r00*x9588*x9593))+((r01*x9584*x9587)));
evalcond[7]=(((r20*x9597))+((r20*x9587))+(((-1.0)*r22*sj3*x9594))+(((-1.0)*x9592))+x9585+((r21*x9588))+(((-1.0)*r21*x9586*x9593)));
evalcond[8]=((((-1.0)*sj1*x9589))+((r00*x9587))+((r00*x9597))+((r01*x9588))+(((-1.0)*r02*sj3*x9594))+(((-1.0)*x9590))+(((-1.0)*r01*x9586*x9593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9598=gconst2*gconst2;
IkReal x9599=gconst1*gconst1;
IkReal x9600=(gconst2*r11);
IkReal x9601=(cj3*r02);
IkReal x9602=(gconst1*r01);
IkReal x9603=(cj3*r10);
IkReal x9604=(r10*sj3);
IkReal x9605=((1.0)*gconst1*r00);
IkReal x9606=(r01*x9599);
IkReal x9607=(r00*x9598);
CheckValue<IkReal> x9608 = IKatan2WithCheck(IkReal((((gconst1*r10*x9601))+((x9600*x9601)))),IkReal((((x9603*x9606))+(((-1.0)*cj3*r11*x9607))+((cj3*x9600*x9602))+(((-1.0)*gconst2*x9603*x9605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9608.valid){
continue;
}
CheckValue<IkReal> x9609=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9602*x9604))+(((-1.0)*sj3*x9600*x9605))+((r11*sj3*x9606))+((x9604*x9607)))),-1);
if(!x9609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9608.value)+(((1.5707963267949)*(x9609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9610=IKsin(j4);
IkReal x9611=IKcos(j4);
IkReal x9612=(sj1*sj2);
IkReal x9613=(gconst1*sj3);
IkReal x9614=(cj3*gconst1);
IkReal x9615=(cj3*gconst2);
IkReal x9616=((1.0)*cj2);
IkReal x9617=(cj1*sj2);
IkReal x9618=(gconst2*sj3);
IkReal x9619=(cj1*x9616);
IkReal x9620=((1.0)*x9611);
IkReal x9621=((1.0)*x9610);
IkReal x9622=(gconst1*x9610);
IkReal x9623=(cj3*x9610);
IkReal x9624=(x9611*x9618);
evalcond[0]=((((-1.0)*r22*x9620))+((r21*x9622))+(((-1.0)*gconst2*r20*x9621)));
evalcond[1]=(((r01*x9622))+(((-1.0)*gconst2*r00*x9621))+(((-1.0)*r02*x9620)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9620))+((r11*x9622))+(((-1.0)*gconst2*r10*x9621)));
evalcond[3]=(((r11*x9611*x9614))+((r10*x9613))+(((-1.0)*r10*x9615*x9620))+((r12*x9623))+((r11*x9618)));
evalcond[4]=(((r10*x9624))+((r10*x9614))+(((-1.0)*r12*sj3*x9621))+((r11*x9615))+(((-1.0)*r11*x9613*x9620)));
evalcond[5]=(((cj2*sj1))+((r20*x9613))+((r21*x9618))+((r22*x9623))+x9617+(((-1.0)*r20*x9615*x9620))+((r21*x9611*x9614)));
evalcond[6]=(((r01*x9611*x9614))+((r00*x9613))+((r01*x9618))+((r02*x9623))+x9612+(((-1.0)*x9619))+(((-1.0)*r00*x9615*x9620)));
evalcond[7]=(((r20*x9614))+(((-1.0)*r21*x9613*x9620))+((r20*x9624))+(((-1.0)*r22*sj3*x9621))+((r21*x9615))+x9612+(((-1.0)*x9619)));
evalcond[8]=(((r00*x9624))+(((-1.0)*r01*x9613*x9620))+((r00*x9614))+((r01*x9615))+(((-1.0)*x9617))+(((-1.0)*r02*sj3*x9621))+(((-1.0)*sj1*x9616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9625=((1.0)*gconst2);
CheckValue<IkReal> x9626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9625))+(((-1.0)*gconst1*r00)))),-1);
if(!x9626.valid){
continue;
}
CheckValue<IkReal> x9627 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9626.value)))+(x9627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9628=IKsin(j4);
IkReal x9629=IKcos(j4);
IkReal x9630=(sj1*sj2);
IkReal x9631=(gconst1*sj3);
IkReal x9632=(cj3*gconst1);
IkReal x9633=(cj3*gconst2);
IkReal x9634=((1.0)*cj2);
IkReal x9635=(cj1*sj2);
IkReal x9636=(gconst2*sj3);
IkReal x9637=(cj1*x9634);
IkReal x9638=((1.0)*x9629);
IkReal x9639=((1.0)*x9628);
IkReal x9640=(gconst1*x9628);
IkReal x9641=(cj3*x9628);
IkReal x9642=(x9629*x9636);
evalcond[0]=((((-1.0)*r22*x9638))+(((-1.0)*gconst2*r20*x9639))+((r21*x9640)));
evalcond[1]=((((-1.0)*gconst2*r00*x9639))+(((-1.0)*r02*x9638))+((r01*x9640)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9639))+((r11*x9640))+(((-1.0)*r12*x9638)));
evalcond[3]=(((r10*x9631))+((r11*x9629*x9632))+((r11*x9636))+(((-1.0)*r10*x9633*x9638))+((r12*x9641)));
evalcond[4]=(((r10*x9632))+(((-1.0)*r12*sj3*x9639))+(((-1.0)*r11*x9631*x9638))+((r10*x9642))+((r11*x9633)));
evalcond[5]=(((r22*x9641))+((cj2*sj1))+((r20*x9631))+((r21*x9636))+((r21*x9629*x9632))+x9635+(((-1.0)*r20*x9633*x9638)));
evalcond[6]=(((r00*x9631))+((r01*x9636))+((r02*x9641))+(((-1.0)*r00*x9633*x9638))+((r01*x9629*x9632))+x9630+(((-1.0)*x9637)));
evalcond[7]=(((r20*x9632))+(((-1.0)*r21*x9631*x9638))+((r21*x9633))+(((-1.0)*r22*sj3*x9639))+x9630+((r20*x9642))+(((-1.0)*x9637)));
evalcond[8]=(((r00*x9632))+((r01*x9633))+(((-1.0)*x9635))+(((-1.0)*r02*sj3*x9639))+((r00*x9642))+(((-1.0)*r01*x9631*x9638))+(((-1.0)*sj1*x9634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9643=((-1.0)*r20);
IkReal x9644=x8906;
CheckValue<IkReal> x9646 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9643),IKFAST_ATAN2_MAGTHRESH);
if(!x9646.valid){
continue;
}
IkReal x9645=((-1.0)*(x9646.value));
sj5=gconst1;
cj5=gconst2;
j5=x9645;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9645;
IkReal gconst1=(r21*x9644);
IkReal gconst2=(x9643*x9644);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9647=((-1.0)*r20);
IkReal x9648=x8906;
CheckValue<IkReal> x9650 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9647),IKFAST_ATAN2_MAGTHRESH);
if(!x9650.valid){
continue;
}
IkReal x9649=((-1.0)*(x9650.value));
sj5=gconst1;
cj5=gconst2;
j5=x9649;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9649;
IkReal gconst1=(r21*x9648);
IkReal gconst2=(x9647*x9648);
CheckValue<IkReal> x9658=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9658.valid){
continue;
}
IkReal x9651=x9658.value;
IkReal x9652=(sj3*x9651);
IkReal x9653=(r11*x9652);
IkReal x9654=(r00*x9652);
IkReal x9655=(r01*x9652);
IkReal x9656=(r10*x9652);
IkReal x9657=(r20*r21*x9652);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9653))+((r01*x9653*(r21*r21)))+((r10*r20*r21*x9655))+((r10*x9654*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9659=gconst2*gconst2;
IkReal x9660=gconst1*gconst1;
IkReal x9661=((1.0)*cj3);
IkReal x9662=((1.0)*sj3);
IkReal x9663=(r11*sj3);
IkReal x9664=(r10*sj3);
IkReal x9665=(gconst1*gconst2*r00);
IkReal x9666=(gconst1*gconst2*r01);
IkReal x9667=(r00*x9659);
IkReal x9668=(r01*x9660);
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9666))+(((-1.0)*r10*x9661*x9667))+(((-1.0)*r02*r12*x9661))+(((-1.0)*r11*x9661*x9668))+((cj3*r11*x9665)))),-1);
if(!x9669.valid){
continue;
}
CheckValue<IkReal> x9670 = IKatan2WithCheck(IkReal((((gconst1*r02*x9664))+((gconst2*r02*x9663)))),IkReal(((((-1.0)*r11*x9662*x9667))+((x9664*x9668))+((x9663*x9666))+(((-1.0)*r10*x9662*x9665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9669.value)))+(x9670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9671=IKsin(j4);
IkReal x9672=IKcos(j4);
IkReal x9673=(cj2*sj1);
IkReal x9674=(cj1*sj2);
IkReal x9675=(gconst1*sj3);
IkReal x9676=(cj3*gconst1);
IkReal x9677=(sj1*sj2);
IkReal x9678=(cj3*gconst2);
IkReal x9679=(cj1*cj2);
IkReal x9680=(gconst2*sj3);
IkReal x9681=((1.0)*x9672);
IkReal x9682=((1.0)*x9671);
IkReal x9683=(gconst1*x9671);
IkReal x9684=(cj3*x9671);
IkReal x9685=(x9674+x9673);
IkReal x9686=(x9672*x9680);
evalcond[0]=(((r21*x9683))+(((-1.0)*r22*x9681))+(((-1.0)*gconst2*r20*x9682)));
evalcond[1]=((((-1.0)*r02*x9681))+(((-1.0)*gconst2*r00*x9682))+((r01*x9683)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9682))+(((-1.0)*r12*x9681))+((r11*x9683)));
evalcond[3]=((((-1.0)*r10*x9678*x9681))+((r10*x9675))+((r12*x9684))+((r11*x9672*x9676))+((r11*x9680)));
evalcond[4]=(((r11*x9678))+((r10*x9676))+(((-1.0)*r11*x9675*x9681))+((r10*x9686))+(((-1.0)*r12*sj3*x9682)));
evalcond[5]=(((r22*x9684))+((r20*x9675))+(((-1.0)*r20*x9678*x9681))+((r21*x9680))+x9685+((r21*x9672*x9676)));
evalcond[6]=(((r02*x9684))+((r00*x9675))+x9679+(((-1.0)*x9677))+((r01*x9672*x9676))+(((-1.0)*r00*x9678*x9681))+((r01*x9680)));
evalcond[7]=(((r01*x9678))+((r00*x9676))+(((-1.0)*r02*sj3*x9682))+x9685+(((-1.0)*r01*x9675*x9681))+((r00*x9686)));
evalcond[8]=((((-1.0)*r21*x9675*x9681))+((r21*x9678))+(((-1.0)*r22*sj3*x9682))+((r20*x9676))+x9677+(((-1.0)*x9679))+((r20*x9686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9687=gconst2*gconst2;
IkReal x9688=gconst1*gconst1;
IkReal x9689=(gconst2*r11);
IkReal x9690=(cj3*r02);
IkReal x9691=(gconst1*r01);
IkReal x9692=(cj3*r10);
IkReal x9693=(r10*sj3);
IkReal x9694=((1.0)*gconst1*r00);
IkReal x9695=(r01*x9688);
IkReal x9696=(r00*x9687);
CheckValue<IkReal> x9697=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9691*x9693))+((r11*sj3*x9695))+(((-1.0)*sj3*x9689*x9694))+((x9693*x9696)))),-1);
if(!x9697.valid){
continue;
}
CheckValue<IkReal> x9698 = IKatan2WithCheck(IkReal((((x9689*x9690))+((gconst1*r10*x9690)))),IkReal(((((-1.0)*cj3*r11*x9696))+((cj3*x9689*x9691))+(((-1.0)*gconst2*x9692*x9694))+((x9692*x9695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9697.value)))+(x9698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9699=IKsin(j4);
IkReal x9700=IKcos(j4);
IkReal x9701=(cj2*sj1);
IkReal x9702=(cj1*sj2);
IkReal x9703=(gconst1*sj3);
IkReal x9704=(cj3*gconst1);
IkReal x9705=(sj1*sj2);
IkReal x9706=(cj3*gconst2);
IkReal x9707=(cj1*cj2);
IkReal x9708=(gconst2*sj3);
IkReal x9709=((1.0)*x9700);
IkReal x9710=((1.0)*x9699);
IkReal x9711=(gconst1*x9699);
IkReal x9712=(cj3*x9699);
IkReal x9713=(x9701+x9702);
IkReal x9714=(x9700*x9708);
evalcond[0]=((((-1.0)*r22*x9709))+(((-1.0)*gconst2*r20*x9710))+((r21*x9711)));
evalcond[1]=((((-1.0)*r02*x9709))+(((-1.0)*gconst2*r00*x9710))+((r01*x9711)));
evalcond[2]=((-1.0)+((r11*x9711))+(((-1.0)*gconst2*r10*x9710))+(((-1.0)*r12*x9709)));
evalcond[3]=((((-1.0)*r10*x9706*x9709))+((r10*x9703))+((r11*x9700*x9704))+((r12*x9712))+((r11*x9708)));
evalcond[4]=(((r10*x9704))+(((-1.0)*r12*sj3*x9710))+((r11*x9706))+((r10*x9714))+(((-1.0)*r11*x9703*x9709)));
evalcond[5]=(((r22*x9712))+((r20*x9703))+((r21*x9700*x9704))+((r21*x9708))+x9713+(((-1.0)*r20*x9706*x9709)));
evalcond[6]=((((-1.0)*x9705))+((r02*x9712))+((r01*x9708))+((r00*x9703))+x9707+((r01*x9700*x9704))+(((-1.0)*r00*x9706*x9709)));
evalcond[7]=((((-1.0)*r02*sj3*x9710))+((r01*x9706))+((r00*x9704))+x9713+((r00*x9714))+(((-1.0)*r01*x9703*x9709)));
evalcond[8]=((((-1.0)*x9707))+(((-1.0)*r21*x9703*x9709))+((r20*x9704))+(((-1.0)*r22*sj3*x9710))+((r21*x9706))+x9705+((r20*x9714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9715 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9715.valid){
continue;
}
CheckValue<IkReal> x9716=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9715.value)+(((1.5707963267949)*(x9716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9717=IKsin(j4);
IkReal x9718=IKcos(j4);
IkReal x9719=(cj2*sj1);
IkReal x9720=(cj1*sj2);
IkReal x9721=(gconst1*sj3);
IkReal x9722=(cj3*gconst1);
IkReal x9723=(sj1*sj2);
IkReal x9724=(cj3*gconst2);
IkReal x9725=(cj1*cj2);
IkReal x9726=(gconst2*sj3);
IkReal x9727=((1.0)*x9718);
IkReal x9728=((1.0)*x9717);
IkReal x9729=(gconst1*x9717);
IkReal x9730=(cj3*x9717);
IkReal x9731=(x9719+x9720);
IkReal x9732=(x9718*x9726);
evalcond[0]=((((-1.0)*gconst2*r20*x9728))+(((-1.0)*r22*x9727))+((r21*x9729)));
evalcond[1]=(((r01*x9729))+(((-1.0)*r02*x9727))+(((-1.0)*gconst2*r00*x9728)));
evalcond[2]=((-1.0)+((r11*x9729))+(((-1.0)*r12*x9727))+(((-1.0)*gconst2*r10*x9728)));
evalcond[3]=(((r11*x9726))+((r12*x9730))+((r11*x9718*x9722))+(((-1.0)*r10*x9724*x9727))+((r10*x9721)));
evalcond[4]=(((r11*x9724))+(((-1.0)*r12*sj3*x9728))+(((-1.0)*r11*x9721*x9727))+((r10*x9722))+((r10*x9732)));
evalcond[5]=(x9731+((r20*x9721))+((r21*x9718*x9722))+(((-1.0)*r20*x9724*x9727))+((r21*x9726))+((r22*x9730)));
evalcond[6]=(((r01*x9726))+((r02*x9730))+((r01*x9718*x9722))+x9725+(((-1.0)*r00*x9724*x9727))+(((-1.0)*x9723))+((r00*x9721)));
evalcond[7]=(((r01*x9724))+(((-1.0)*r02*sj3*x9728))+x9731+(((-1.0)*r01*x9721*x9727))+((r00*x9722))+((r00*x9732)));
evalcond[8]=(((r20*x9732))+x9723+((r20*x9722))+(((-1.0)*r22*sj3*x9728))+(((-1.0)*r21*x9721*x9727))+((r21*x9724))+(((-1.0)*x9725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9733=((-1.0)*r20);
IkReal x9734=x8906;
CheckValue<IkReal> x9736 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9733),IKFAST_ATAN2_MAGTHRESH);
if(!x9736.valid){
continue;
}
IkReal x9735=((-1.0)*(x9736.value));
sj5=gconst1;
cj5=gconst2;
j5=x9735;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9735;
IkReal gconst1=(r21*x9734);
IkReal gconst2=(x9733*x9734);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9737=((-1.0)*r20);
IkReal x9738=x8906;
CheckValue<IkReal> x9740 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9737),IKFAST_ATAN2_MAGTHRESH);
if(!x9740.valid){
continue;
}
IkReal x9739=((-1.0)*(x9740.value));
sj5=gconst1;
cj5=gconst2;
j5=x9739;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9739;
IkReal gconst1=(r21*x9738);
IkReal gconst2=(x9737*x9738);
CheckValue<IkReal> x9748=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9748.valid){
continue;
}
IkReal x9741=x9748.value;
IkReal x9742=(sj3*x9741);
IkReal x9743=(r11*x9742);
IkReal x9744=(r00*x9742);
IkReal x9745=(r01*x9742);
IkReal x9746=(r10*x9742);
IkReal x9747=(r20*r21*x9742);
j4eval[0]=IKsign((((r01*x9743*(r21*r21)))+((r02*r12*sj3))+((r10*r20*r21*x9745))+((r10*x9744*(r20*r20)))+((r00*r20*r21*x9743))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9749=gconst1*gconst1;
IkReal x9750=gconst2*gconst2;
IkReal x9751=((1.0)*cj3);
IkReal x9752=(gconst2*r10);
IkReal x9753=(r01*sj3);
IkReal x9754=(gconst1*r00*sj3);
IkReal x9755=(gconst1*gconst2*r11);
IkReal x9756=(r10*x9750);
IkReal x9757=(r11*x9749);
CheckValue<IkReal> x9758=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9755))+(((-1.0)*r01*x9751*x9757))+(((-1.0)*r00*x9751*x9756))+((cj3*gconst1*r01*x9752))+(((-1.0)*r02*r12*x9751)))),-1);
if(!x9758.valid){
continue;
}
CheckValue<IkReal> x9759 = IKatan2WithCheck(IkReal((((gconst2*r12*x9753))+((r12*x9754)))),IkReal(((((-1.0)*x9752*x9754))+((r00*sj3*x9757))+(((-1.0)*x9753*x9756))+((x9753*x9755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9758.value)))+(x9759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9760=IKsin(j4);
IkReal x9761=IKcos(j4);
IkReal x9762=(sj1*sj2);
IkReal x9763=(gconst1*sj3);
IkReal x9764=(cj3*gconst1);
IkReal x9765=(cj3*gconst2);
IkReal x9766=((1.0)*cj2);
IkReal x9767=(cj1*sj2);
IkReal x9768=(gconst2*sj3);
IkReal x9769=(cj1*x9766);
IkReal x9770=((1.0)*x9761);
IkReal x9771=((1.0)*x9760);
IkReal x9772=(gconst1*x9760);
IkReal x9773=(cj3*x9760);
IkReal x9774=(x9761*x9768);
evalcond[0]=((((-1.0)*r22*x9770))+(((-1.0)*gconst2*r20*x9771))+((r21*x9772)));
evalcond[1]=((((-1.0)*gconst2*r10*x9771))+(((-1.0)*r12*x9770))+((r11*x9772)));
evalcond[2]=((-1.0)+((r01*x9772))+(((-1.0)*gconst2*r00*x9771))+(((-1.0)*r02*x9770)));
evalcond[3]=(((r00*x9763))+((r01*x9768))+((r02*x9773))+(((-1.0)*r00*x9765*x9770))+((r01*x9761*x9764)));
evalcond[4]=(((r00*x9764))+(((-1.0)*r01*x9763*x9770))+((r00*x9774))+((r01*x9765))+(((-1.0)*r02*sj3*x9771)));
evalcond[5]=(((cj2*sj1))+((r22*x9773))+(((-1.0)*r20*x9765*x9770))+x9767+((r21*x9768))+((r20*x9763))+((r21*x9761*x9764)));
evalcond[6]=(((r12*x9773))+((r10*x9763))+((r11*x9761*x9764))+x9762+(((-1.0)*r10*x9765*x9770))+((r11*x9768))+(((-1.0)*x9769)));
evalcond[7]=((((-1.0)*r21*x9763*x9770))+x9762+((r21*x9765))+((r20*x9774))+((r20*x9764))+(((-1.0)*r22*sj3*x9771))+(((-1.0)*x9769)));
evalcond[8]=(((r10*x9764))+(((-1.0)*x9767))+((r10*x9774))+(((-1.0)*r12*sj3*x9771))+(((-1.0)*sj1*x9766))+((r11*x9765))+(((-1.0)*r11*x9763*x9770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9775=gconst2*gconst2;
IkReal x9776=gconst1*gconst1;
IkReal x9777=(gconst1*r00);
IkReal x9778=(r11*sj3);
IkReal x9779=((1.0)*gconst2);
IkReal x9780=(cj3*r12);
IkReal x9781=(cj3*r11);
IkReal x9782=(gconst2*r01);
IkReal x9783=(cj3*r10);
IkReal x9784=(r10*sj3);
CheckValue<IkReal> x9785=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9777*x9778*x9779))+((r00*x9775*x9784))+((r01*x9776*x9778))+(((-1.0)*gconst1*r01*x9779*x9784)))),-1);
if(!x9785.valid){
continue;
}
CheckValue<IkReal> x9786 = IKatan2WithCheck(IkReal((((x9780*x9782))+((x9777*x9780)))),IkReal(((((-1.0)*x9777*x9779*x9783))+((r00*x9776*x9781))+((gconst1*x9781*x9782))+(((-1.0)*r01*x9775*x9783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9785.value)))+(x9786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9787=IKsin(j4);
IkReal x9788=IKcos(j4);
IkReal x9789=(sj1*sj2);
IkReal x9790=(gconst1*sj3);
IkReal x9791=(cj3*gconst1);
IkReal x9792=(cj3*gconst2);
IkReal x9793=((1.0)*cj2);
IkReal x9794=(cj1*sj2);
IkReal x9795=(gconst2*sj3);
IkReal x9796=(cj1*x9793);
IkReal x9797=((1.0)*x9788);
IkReal x9798=((1.0)*x9787);
IkReal x9799=(gconst1*x9787);
IkReal x9800=(cj3*x9787);
IkReal x9801=(x9788*x9795);
evalcond[0]=(((r21*x9799))+(((-1.0)*gconst2*r20*x9798))+(((-1.0)*r22*x9797)));
evalcond[1]=(((r11*x9799))+(((-1.0)*gconst2*r10*x9798))+(((-1.0)*r12*x9797)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9797))+(((-1.0)*gconst2*r00*x9798))+((r01*x9799)));
evalcond[3]=(((r00*x9790))+((r02*x9800))+((r01*x9795))+((r01*x9788*x9791))+(((-1.0)*r00*x9792*x9797)));
evalcond[4]=((((-1.0)*r01*x9790*x9797))+((r00*x9801))+(((-1.0)*r02*sj3*x9798))+((r00*x9791))+((r01*x9792)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9792*x9797))+((r20*x9790))+((r21*x9788*x9791))+((r22*x9800))+x9794+((r21*x9795)));
evalcond[6]=(((r12*x9800))+((r11*x9795))+((r10*x9790))+(((-1.0)*x9796))+x9789+(((-1.0)*r10*x9792*x9797))+((r11*x9788*x9791)));
evalcond[7]=(((r20*x9791))+(((-1.0)*x9796))+x9789+((r21*x9792))+(((-1.0)*r22*sj3*x9798))+((r20*x9801))+(((-1.0)*r21*x9790*x9797)));
evalcond[8]=(((r10*x9801))+(((-1.0)*sj1*x9793))+((r11*x9792))+((r10*x9791))+(((-1.0)*r12*sj3*x9798))+(((-1.0)*x9794))+(((-1.0)*r11*x9790*x9797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9802=((1.0)*gconst2);
CheckValue<IkReal> x9803=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9802)))),-1);
if(!x9803.valid){
continue;
}
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9802))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9803.value)))+(x9804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9805=IKsin(j4);
IkReal x9806=IKcos(j4);
IkReal x9807=(sj1*sj2);
IkReal x9808=(gconst1*sj3);
IkReal x9809=(cj3*gconst1);
IkReal x9810=(cj3*gconst2);
IkReal x9811=((1.0)*cj2);
IkReal x9812=(cj1*sj2);
IkReal x9813=(gconst2*sj3);
IkReal x9814=(cj1*x9811);
IkReal x9815=((1.0)*x9806);
IkReal x9816=((1.0)*x9805);
IkReal x9817=(gconst1*x9805);
IkReal x9818=(cj3*x9805);
IkReal x9819=(x9806*x9813);
evalcond[0]=(((r21*x9817))+(((-1.0)*r22*x9815))+(((-1.0)*gconst2*r20*x9816)));
evalcond[1]=((((-1.0)*gconst2*r10*x9816))+((r11*x9817))+(((-1.0)*r12*x9815)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9816))+(((-1.0)*r02*x9815))+((r01*x9817)));
evalcond[3]=(((r00*x9808))+(((-1.0)*r00*x9810*x9815))+((r01*x9806*x9809))+((r02*x9818))+((r01*x9813)));
evalcond[4]=(((r00*x9809))+(((-1.0)*r02*sj3*x9816))+(((-1.0)*r01*x9808*x9815))+((r00*x9819))+((r01*x9810)));
evalcond[5]=(((cj2*sj1))+((r21*x9813))+((r21*x9806*x9809))+((r22*x9818))+((r20*x9808))+x9812+(((-1.0)*r20*x9810*x9815)));
evalcond[6]=(((r10*x9808))+(((-1.0)*x9814))+((r12*x9818))+((r11*x9813))+((r11*x9806*x9809))+x9807+(((-1.0)*r10*x9810*x9815)));
evalcond[7]=(((r21*x9810))+(((-1.0)*x9814))+(((-1.0)*r22*sj3*x9816))+(((-1.0)*r21*x9808*x9815))+((r20*x9809))+x9807+((r20*x9819)));
evalcond[8]=(((r10*x9809))+(((-1.0)*x9812))+((r11*x9810))+(((-1.0)*r12*sj3*x9816))+(((-1.0)*sj1*x9811))+(((-1.0)*r11*x9808*x9815))+((r10*x9819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9820=((-1.0)*r20);
IkReal x9821=x8906;
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9820),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
IkReal x9822=((-1.0)*(x9823.value));
sj5=gconst1;
cj5=gconst2;
j5=x9822;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9822;
IkReal gconst1=(r21*x9821);
IkReal gconst2=(x9820*x9821);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9824=((-1.0)*r20);
IkReal x9825=x8906;
CheckValue<IkReal> x9827 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9824),IKFAST_ATAN2_MAGTHRESH);
if(!x9827.valid){
continue;
}
IkReal x9826=((-1.0)*(x9827.value));
sj5=gconst1;
cj5=gconst2;
j5=x9826;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9826;
IkReal gconst1=(r21*x9825);
IkReal gconst2=(x9824*x9825);
CheckValue<IkReal> x9835=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9835.valid){
continue;
}
IkReal x9828=x9835.value;
IkReal x9829=(sj3*x9828);
IkReal x9830=(r11*x9829);
IkReal x9831=(r00*x9829);
IkReal x9832=(r01*x9829);
IkReal x9833=(r10*x9829);
IkReal x9834=(r20*r21*x9829);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9832))+((r00*r20*r21*x9830))+((r01*x9830*(r21*r21)))+((r10*x9831*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9836=gconst1*gconst1;
IkReal x9837=gconst2*gconst2;
IkReal x9838=((1.0)*cj3);
IkReal x9839=(gconst2*r10);
IkReal x9840=(r01*sj3);
IkReal x9841=(gconst1*r00*sj3);
IkReal x9842=(gconst1*gconst2*r11);
IkReal x9843=(r10*x9837);
IkReal x9844=(r11*x9836);
CheckValue<IkReal> x9845=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9842))+(((-1.0)*r01*x9838*x9844))+(((-1.0)*r00*x9838*x9843))+((cj3*gconst1*r01*x9839))+(((-1.0)*r02*r12*x9838)))),-1);
if(!x9845.valid){
continue;
}
CheckValue<IkReal> x9846 = IKatan2WithCheck(IkReal((((gconst2*r12*x9840))+((r12*x9841)))),IkReal(((((-1.0)*x9839*x9841))+((x9840*x9842))+((r00*sj3*x9844))+(((-1.0)*x9840*x9843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9845.value)))+(x9846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9847=IKsin(j4);
IkReal x9848=IKcos(j4);
IkReal x9849=(cj2*sj1);
IkReal x9850=(cj1*sj2);
IkReal x9851=(gconst1*sj3);
IkReal x9852=(cj3*gconst1);
IkReal x9853=(sj1*sj2);
IkReal x9854=(cj3*gconst2);
IkReal x9855=(cj1*cj2);
IkReal x9856=(gconst2*sj3);
IkReal x9857=((1.0)*x9848);
IkReal x9858=((1.0)*x9847);
IkReal x9859=(gconst1*x9847);
IkReal x9860=(cj3*x9847);
IkReal x9861=(x9850+x9849);
IkReal x9862=(x9848*x9856);
evalcond[0]=(((r21*x9859))+(((-1.0)*gconst2*r20*x9858))+(((-1.0)*r22*x9857)));
evalcond[1]=(((r11*x9859))+(((-1.0)*gconst2*r10*x9858))+(((-1.0)*r12*x9857)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9857))+((r01*x9859))+(((-1.0)*gconst2*r00*x9858)));
evalcond[3]=(((r02*x9860))+((r00*x9851))+((r01*x9856))+((r01*x9848*x9852))+(((-1.0)*r00*x9854*x9857)));
evalcond[4]=((((-1.0)*r02*sj3*x9858))+((r00*x9862))+((r00*x9852))+((r01*x9854))+(((-1.0)*r01*x9851*x9857)));
evalcond[5]=(((r21*x9856))+((r22*x9860))+((r20*x9851))+x9861+(((-1.0)*r20*x9854*x9857))+((r21*x9848*x9852)));
evalcond[6]=(((r10*x9851))+((r11*x9856))+(((-1.0)*x9853))+((r11*x9848*x9852))+(((-1.0)*r10*x9854*x9857))+((r12*x9860))+x9855);
evalcond[7]=(((r10*x9852))+((r11*x9854))+(((-1.0)*r11*x9851*x9857))+((r10*x9862))+x9861+(((-1.0)*r12*sj3*x9858)));
evalcond[8]=(((r21*x9854))+(((-1.0)*x9855))+(((-1.0)*r21*x9851*x9857))+(((-1.0)*r22*sj3*x9858))+((r20*x9852))+((r20*x9862))+x9853);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9863=gconst2*gconst2;
IkReal x9864=gconst1*gconst1;
IkReal x9865=(gconst1*r00);
IkReal x9866=(r11*sj3);
IkReal x9867=((1.0)*gconst2);
IkReal x9868=(cj3*r12);
IkReal x9869=(cj3*r11);
IkReal x9870=(gconst2*r01);
IkReal x9871=(cj3*r10);
IkReal x9872=(r10*sj3);
CheckValue<IkReal> x9873=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9864*x9866))+(((-1.0)*x9865*x9866*x9867))+(((-1.0)*gconst1*r01*x9867*x9872))+((r00*x9863*x9872)))),-1);
if(!x9873.valid){
continue;
}
CheckValue<IkReal> x9874 = IKatan2WithCheck(IkReal((((x9865*x9868))+((x9868*x9870)))),IkReal((((r00*x9864*x9869))+((gconst1*x9869*x9870))+(((-1.0)*r01*x9863*x9871))+(((-1.0)*x9865*x9867*x9871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9873.value)))+(x9874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9875=IKsin(j4);
IkReal x9876=IKcos(j4);
IkReal x9877=(cj2*sj1);
IkReal x9878=(cj1*sj2);
IkReal x9879=(gconst1*sj3);
IkReal x9880=(cj3*gconst1);
IkReal x9881=(sj1*sj2);
IkReal x9882=(cj3*gconst2);
IkReal x9883=(cj1*cj2);
IkReal x9884=(gconst2*sj3);
IkReal x9885=((1.0)*x9876);
IkReal x9886=((1.0)*x9875);
IkReal x9887=(gconst1*x9875);
IkReal x9888=(cj3*x9875);
IkReal x9889=(x9878+x9877);
IkReal x9890=(x9876*x9884);
evalcond[0]=((((-1.0)*r22*x9885))+((r21*x9887))+(((-1.0)*gconst2*r20*x9886)));
evalcond[1]=(((r11*x9887))+(((-1.0)*gconst2*r10*x9886))+(((-1.0)*r12*x9885)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9886))+((r01*x9887))+(((-1.0)*r02*x9885)));
evalcond[3]=(((r01*x9876*x9880))+((r01*x9884))+((r00*x9879))+(((-1.0)*r00*x9882*x9885))+((r02*x9888)));
evalcond[4]=(((r01*x9882))+((r00*x9890))+((r00*x9880))+(((-1.0)*r02*sj3*x9886))+(((-1.0)*r01*x9879*x9885)));
evalcond[5]=(((r21*x9884))+(((-1.0)*r20*x9882*x9885))+((r20*x9879))+((r22*x9888))+((r21*x9876*x9880))+x9889);
evalcond[6]=(((r12*x9888))+(((-1.0)*r10*x9882*x9885))+((r10*x9879))+((r11*x9884))+((r11*x9876*x9880))+(((-1.0)*x9881))+x9883);
evalcond[7]=(((r11*x9882))+(((-1.0)*r12*sj3*x9886))+((r10*x9880))+((r10*x9890))+(((-1.0)*r11*x9879*x9885))+x9889);
evalcond[8]=((((-1.0)*r22*sj3*x9886))+((r20*x9880))+((r21*x9882))+(((-1.0)*r21*x9879*x9885))+((r20*x9890))+(((-1.0)*x9883))+x9881);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9891 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9891.valid){
continue;
}
CheckValue<IkReal> x9892=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9891.value)+(((1.5707963267949)*(x9892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9893=IKsin(j4);
IkReal x9894=IKcos(j4);
IkReal x9895=(cj2*sj1);
IkReal x9896=(cj1*sj2);
IkReal x9897=(gconst1*sj3);
IkReal x9898=(cj3*gconst1);
IkReal x9899=(sj1*sj2);
IkReal x9900=(cj3*gconst2);
IkReal x9901=(cj1*cj2);
IkReal x9902=(gconst2*sj3);
IkReal x9903=((1.0)*x9894);
IkReal x9904=((1.0)*x9893);
IkReal x9905=(gconst1*x9893);
IkReal x9906=(cj3*x9893);
IkReal x9907=(x9895+x9896);
IkReal x9908=(x9894*x9902);
evalcond[0]=((((-1.0)*gconst2*r20*x9904))+(((-1.0)*r22*x9903))+((r21*x9905)));
evalcond[1]=((((-1.0)*r12*x9903))+((r11*x9905))+(((-1.0)*gconst2*r10*x9904)));
evalcond[2]=((1.0)+((r01*x9905))+(((-1.0)*r02*x9903))+(((-1.0)*gconst2*r00*x9904)));
evalcond[3]=(((r02*x9906))+((r00*x9897))+((r01*x9894*x9898))+((r01*x9902))+(((-1.0)*r00*x9900*x9903)));
evalcond[4]=(((r00*x9898))+((r00*x9908))+((r01*x9900))+(((-1.0)*r02*sj3*x9904))+(((-1.0)*r01*x9897*x9903)));
evalcond[5]=(((r22*x9906))+((r21*x9902))+((r20*x9897))+x9907+((r21*x9894*x9898))+(((-1.0)*r20*x9900*x9903)));
evalcond[6]=((((-1.0)*r10*x9900*x9903))+((r12*x9906))+((r11*x9902))+((r11*x9894*x9898))+(((-1.0)*x9899))+x9901+((r10*x9897)));
evalcond[7]=(((r11*x9900))+x9907+((r10*x9898))+((r10*x9908))+(((-1.0)*r12*sj3*x9904))+(((-1.0)*r11*x9897*x9903)));
evalcond[8]=((((-1.0)*r22*sj3*x9904))+((r20*x9908))+(((-1.0)*x9901))+(((-1.0)*r21*x9897*x9903))+((r21*x9900))+((r20*x9898))+x9899);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9909=((-1.0)*r20);
IkReal x9910=((-1.0)*px);
CheckValue<IkReal> x9912 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9909),IKFAST_ATAN2_MAGTHRESH);
if(!x9912.valid){
continue;
}
IkReal x9911=((-1.0)*(x9912.value));
sj5=gconst1;
cj5=gconst2;
j5=x9911;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9910);
rxp1_1=(px*r21);
rxp1_2=(r11*x9910);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9911;
IkReal gconst1=r21;
IkReal gconst2=x9909;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9913=((-1.0)*r20);
IkReal x9914=((-1.0)*px);
CheckValue<IkReal> x9916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9913),IKFAST_ATAN2_MAGTHRESH);
if(!x9916.valid){
continue;
}
IkReal x9915=((-1.0)*(x9916.value));
sj5=gconst1;
cj5=gconst2;
j5=x9915;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9914);
rxp1_1=(px*r21);
rxp1_2=(r11*x9914);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9915;
IkReal gconst1=r21;
IkReal gconst2=x9913;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9917=((-1.0)*r20);
IkReal x9918=((-1.0)*px);
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9917),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
IkReal x9919=((-1.0)*(x9920.value));
sj5=gconst1;
cj5=gconst2;
j5=x9919;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9918);
rxp1_1=(px*r21);
rxp1_2=(r11*x9918);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9919;
IkReal gconst1=r21;
IkReal gconst2=x9917;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9921=((-1.0)*r20);
IkReal x9922=((-1.0)*px);
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9921),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
IkReal x9923=((-1.0)*(x9924.value));
sj5=gconst1;
cj5=gconst2;
j5=x9923;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9922);
rxp1_1=(px*r21);
rxp1_2=(r11*x9922);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9923;
IkReal gconst1=r21;
IkReal gconst2=x9921;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9925=((-1.0)*r20);
IkReal x9926=((-1.0)*px);
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9925),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
IkReal x9927=((-1.0)*(x9928.value));
sj5=gconst1;
cj5=gconst2;
j5=x9927;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9926);
rxp1_1=(px*r21);
rxp1_2=(r11*x9926);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9927;
IkReal gconst1=r21;
IkReal gconst2=x9925;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9929=((-1.0)*r20);
IkReal x9930=((-1.0)*px);
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9929),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
IkReal x9931=((-1.0)*(x9932.value));
sj5=gconst1;
cj5=gconst2;
j5=x9931;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9930);
rxp1_1=(px*r21);
rxp1_2=(r11*x9930);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9931;
IkReal gconst1=r21;
IkReal gconst2=x9929;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9935=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9935.valid){
continue;
}
IkReal x9933=x9935.value;
IkReal x9934=(sj0*x9933);
cj4array[0]=(((cj1*sj2*x9934))+((cj2*sj1*x9934)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9936=IKsin(j4);
IkReal x9937=IKcos(j4);
IkReal x9938=(gconst1*x9936);
IkReal x9939=((1.0)*x9937);
IkReal x9940=((1.0)*gconst2*x9936);
evalcond[0]=((-1.0)*r02*x9936);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9939)));
evalcond[2]=((((-1.0)*r20*x9940))+((r21*x9938)));
evalcond[3]=(((r11*x9938))+(((-1.0)*r10*x9940)));
evalcond[4]=(((gconst2*r20*x9937))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9942=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9942.valid){
continue;
}
IkReal x9941=x9942.value;
cj4array[0]=(((cj1*cj2*x9941))+(((-1.0)*sj1*sj2*x9941)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9943=IKsin(j4);
IkReal x9944=IKcos(j4);
IkReal x9945=(gconst2*r10);
IkReal x9946=((1.0)*sj0);
IkReal x9947=((1.0)*x9943);
IkReal x9948=(gconst1*x9943);
IkReal x9949=((1.0)*x9944);
evalcond[0]=((-1.0)*r02*x9943);
evalcond[1]=((((-1.0)*x9946))+(((-1.0)*r02*x9949)));
evalcond[2]=((((-1.0)*gconst2*r20*x9947))+((r21*x9948)));
evalcond[3]=((((-1.0)*x9945*x9947))+((r11*x9948)));
evalcond[4]=((((-1.0)*gconst1*r11*x9949))+(((-1.0)*cj2*sj1*x9946))+(((-1.0)*cj1*sj2*x9946))+((x9944*x9945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9950=IKPowWithIntegerCheck(r02,-1);
if(!x9950.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9950.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9951=IKsin(j4);
IkReal x9952=IKcos(j4);
IkReal x9953=(gconst2*r10);
IkReal x9954=((1.0)*sj0);
IkReal x9955=(gconst1*r11);
IkReal x9956=(gconst1*r21);
IkReal x9957=(gconst2*r20);
IkReal x9958=((1.0)*x9951);
IkReal x9959=((1.0)*x9952);
evalcond[0]=((-1.0)*r02*x9951);
evalcond[1]=(((x9951*x9956))+(((-1.0)*x9957*x9958)));
evalcond[2]=(((x9951*x9955))+(((-1.0)*x9953*x9958)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9952*x9957))+(((-1.0)*x9956*x9959)));
evalcond[4]=((((-1.0)*x9955*x9959))+((x9952*x9953))+(((-1.0)*cj2*sj1*x9954))+(((-1.0)*cj1*sj2*x9954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9960=((-1.0)*r20);
IkReal x9961=((-1.0)*px);
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9960),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
IkReal x9962=((-1.0)*(x9963.value));
sj5=gconst1;
cj5=gconst2;
j5=x9962;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9961);
rxp1_1=(px*r21);
rxp1_2=(r11*x9961);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9962;
IkReal gconst1=r21;
IkReal gconst2=x9960;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9964=((-1.0)*r20);
IkReal x9965=((-1.0)*px);
CheckValue<IkReal> x9967 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9964),IKFAST_ATAN2_MAGTHRESH);
if(!x9967.valid){
continue;
}
IkReal x9966=((-1.0)*(x9967.value));
sj5=gconst1;
cj5=gconst2;
j5=x9966;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9965);
rxp1_1=(px*r21);
rxp1_2=(r11*x9965);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9966;
IkReal gconst1=r21;
IkReal gconst2=x9964;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9968=((-1.0)*r20);
IkReal x9969=((-1.0)*px);
CheckValue<IkReal> x9971 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9968),IKFAST_ATAN2_MAGTHRESH);
if(!x9971.valid){
continue;
}
IkReal x9970=((-1.0)*(x9971.value));
sj5=gconst1;
cj5=gconst2;
j5=x9970;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9969);
rxp1_1=(px*r21);
rxp1_2=(r11*x9969);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9970;
IkReal gconst1=r21;
IkReal gconst2=x9968;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9974=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9974.valid){
continue;
}
IkReal x9972=x9974.value;
IkReal x9973=(sj0*x9972);
cj4array[0]=(((cj2*sj1*x9973))+((cj1*sj2*x9973)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9975=IKsin(j4);
IkReal x9976=IKcos(j4);
IkReal x9977=((1.0)*gconst2);
IkReal x9978=(gconst1*r21);
evalcond[0]=(r02*x9975);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9976)));
evalcond[2]=((((-1.0)*r20*x9975*x9977))+((x9975*x9978)));
evalcond[3]=((((-1.0)*r10*x9975*x9977))+((gconst1*r11*x9975)));
evalcond[4]=((((-1.0)*r20*x9976*x9977))+((x9976*x9978))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9980=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9980.valid){
continue;
}
IkReal x9979=x9980.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9979))+((cj1*cj2*x9979)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9981=IKsin(j4);
IkReal x9982=IKcos(j4);
IkReal x9983=((1.0)*sj0);
IkReal x9984=(gconst1*x9981);
IkReal x9985=((1.0)*x9982);
IkReal x9986=((1.0)*gconst2*x9981);
evalcond[0]=(r02*x9981);
evalcond[1]=((((-1.0)*r02*x9985))+(((-1.0)*x9983)));
evalcond[2]=(((r21*x9984))+(((-1.0)*r20*x9986)));
evalcond[3]=(((r11*x9984))+(((-1.0)*r10*x9986)));
evalcond[4]=(((gconst1*r11*x9982))+(((-1.0)*gconst2*r10*x9985))+(((-1.0)*cj2*sj1*x9983))+(((-1.0)*cj1*sj2*x9983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9987=IKPowWithIntegerCheck(r02,-1);
if(!x9987.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9987.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9988=IKsin(j4);
IkReal x9989=IKcos(j4);
IkReal x9990=(gconst1*r21);
IkReal x9991=((1.0)*sj0);
IkReal x9992=(gconst1*r11);
IkReal x9993=((1.0)*gconst2*r10);
IkReal x9994=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9988);
evalcond[1]=((((-1.0)*x9988*x9994))+((x9988*x9990)));
evalcond[2]=((((-1.0)*x9988*x9993))+((x9988*x9992)));
evalcond[3]=(((x9989*x9990))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9989*x9994)));
evalcond[4]=((((-1.0)*cj2*sj1*x9991))+((x9989*x9992))+(((-1.0)*cj1*sj2*x9991))+(((-1.0)*x9989*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9996=IKPowWithIntegerCheck(r02,-1);
if(!x9996.valid){
continue;
}
IkReal x9995=x9996.value;
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(cj3,-1);
if(!x9997.valid){
continue;
}
if( IKabs((x9995*(x9997.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9995)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9995*(x9997.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9995))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9995*(x9997.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9995));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9998=IKsin(j4);
IkReal x9999=IKcos(j4);
IkReal x10000=(gconst2*r10);
IkReal x10001=(gconst1*r11);
IkReal x10002=(sj1*sj2);
IkReal x10003=(gconst2*r20);
IkReal x10004=(cj2*sj1);
IkReal x10005=((1.0)*sj0);
IkReal x10006=(gconst1*r20);
IkReal x10007=(gconst2*r11);
IkReal x10008=(gconst1*r21);
IkReal x10009=((1.0)*cj0);
IkReal x10010=(gconst1*r10);
IkReal x10011=(cj1*sj2);
IkReal x10012=(gconst2*r21);
IkReal x10013=(sj3*x9999);
IkReal x10014=((1.0)*cj1*cj2);
IkReal x10015=(cj3*x9999);
IkReal x10016=(r02*x9998);
IkReal x10017=((1.0)*x9998);
evalcond[0]=((((-1.0)*r02*x9999))+(((-1.0)*x10005)));
evalcond[1]=(((x10008*x9998))+(((-1.0)*x10003*x10017)));
evalcond[2]=(cj0+((x10001*x9998))+(((-1.0)*x10000*x10017)));
evalcond[3]=(((cj0*x10002))+((cj3*x10016))+(((-1.0)*cj1*cj2*x10009)));
evalcond[4]=((((-1.0)*x10009*x10011))+(((-1.0)*x10004*x10009))+(((-1.0)*sj3*x10016)));
evalcond[5]=((((-1.0)*x10003*x10015))+x10011+x10004+((sj3*x10012))+((sj3*x10006))+((x10008*x10015)));
evalcond[6]=((((-1.0)*x10008*x10013))+((cj3*x10012))+((cj3*x10006))+x10002+((x10003*x10013))+(((-1.0)*x10014)));
evalcond[7]=(((x10001*x10015))+(((-1.0)*cj1*cj2*x10005))+(((-1.0)*x10000*x10015))+((sj3*x10010))+((sj3*x10007))+((sj0*x10002)));
evalcond[8]=((((-1.0)*x10005*x10011))+(((-1.0)*x10004*x10005))+((cj3*x10010))+((x10000*x10013))+((cj3*x10007))+(((-1.0)*x10001*x10013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10018=((1.0)*sj3);
IkReal x10019=((1.0)*gconst2);
CheckValue<IkReal> x10020=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10019))),-1);
if(!x10020.valid){
continue;
}
CheckValue<IkReal> x10021=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10019))),-1);
if(!x10021.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10020.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10021.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10018))+(((-1.0)*gconst1*r20*x10018)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10020.value)))+IKsqr(((x10021.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10018))+(((-1.0)*gconst1*r20*x10018))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10020.value)), ((x10021.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x10018))+(((-1.0)*gconst1*r20*x10018))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10022=IKsin(j4);
IkReal x10023=IKcos(j4);
IkReal x10024=(gconst2*r10);
IkReal x10025=(gconst1*r11);
IkReal x10026=(sj1*sj2);
IkReal x10027=(gconst2*r20);
IkReal x10028=(cj2*sj1);
IkReal x10029=((1.0)*sj0);
IkReal x10030=(gconst1*r20);
IkReal x10031=(gconst2*r11);
IkReal x10032=(gconst1*r21);
IkReal x10033=((1.0)*cj0);
IkReal x10034=(gconst1*r10);
IkReal x10035=(cj1*sj2);
IkReal x10036=(gconst2*r21);
IkReal x10037=(sj3*x10023);
IkReal x10038=((1.0)*cj1*cj2);
IkReal x10039=(cj3*x10023);
IkReal x10040=(r02*x10022);
IkReal x10041=((1.0)*x10022);
evalcond[0]=((((-1.0)*r02*x10023))+(((-1.0)*x10029)));
evalcond[1]=((((-1.0)*x10027*x10041))+((x10022*x10032)));
evalcond[2]=(cj0+(((-1.0)*x10024*x10041))+((x10022*x10025)));
evalcond[3]=(((cj0*x10026))+(((-1.0)*cj1*cj2*x10033))+((cj3*x10040)));
evalcond[4]=((((-1.0)*sj3*x10040))+(((-1.0)*x10028*x10033))+(((-1.0)*x10033*x10035)));
evalcond[5]=((((-1.0)*x10027*x10039))+((sj3*x10030))+((sj3*x10036))+((x10032*x10039))+x10035+x10028);
evalcond[6]=(((x10027*x10037))+x10026+((cj3*x10036))+((cj3*x10030))+(((-1.0)*x10038))+(((-1.0)*x10032*x10037)));
evalcond[7]=(((sj0*x10026))+((sj3*x10034))+((sj3*x10031))+(((-1.0)*cj1*cj2*x10029))+(((-1.0)*x10024*x10039))+((x10025*x10039)));
evalcond[8]=(((x10024*x10037))+((cj3*x10034))+((cj3*x10031))+(((-1.0)*x10029*x10035))+(((-1.0)*x10028*x10029))+(((-1.0)*x10025*x10037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10042=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10042.valid){
continue;
}
CheckValue<IkReal> x10043=IKPowWithIntegerCheck(r02,-1);
if(!x10043.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10042.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10043.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10042.value)))+IKsqr(((-1.0)*sj0*(x10043.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10042.value)), ((-1.0)*sj0*(x10043.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10044=IKsin(j4);
IkReal x10045=IKcos(j4);
IkReal x10046=(gconst2*r10);
IkReal x10047=(gconst1*r11);
IkReal x10048=(sj1*sj2);
IkReal x10049=(gconst2*r20);
IkReal x10050=(cj2*sj1);
IkReal x10051=((1.0)*sj0);
IkReal x10052=(gconst1*r20);
IkReal x10053=(gconst2*r11);
IkReal x10054=(gconst1*r21);
IkReal x10055=((1.0)*cj0);
IkReal x10056=(gconst1*r10);
IkReal x10057=(cj1*sj2);
IkReal x10058=(gconst2*r21);
IkReal x10059=(sj3*x10045);
IkReal x10060=((1.0)*cj1*cj2);
IkReal x10061=(cj3*x10045);
IkReal x10062=(r02*x10044);
IkReal x10063=((1.0)*x10044);
evalcond[0]=((((-1.0)*r02*x10045))+(((-1.0)*x10051)));
evalcond[1]=(((x10044*x10054))+(((-1.0)*x10049*x10063)));
evalcond[2]=(cj0+((x10044*x10047))+(((-1.0)*x10046*x10063)));
evalcond[3]=((((-1.0)*cj1*cj2*x10055))+((cj3*x10062))+((cj0*x10048)));
evalcond[4]=((((-1.0)*x10050*x10055))+(((-1.0)*sj3*x10062))+(((-1.0)*x10055*x10057)));
evalcond[5]=(((sj3*x10058))+((sj3*x10052))+(((-1.0)*x10049*x10061))+((x10054*x10061))+x10057+x10050);
evalcond[6]=((((-1.0)*x10054*x10059))+(((-1.0)*x10060))+x10048+((x10049*x10059))+((cj3*x10058))+((cj3*x10052)));
evalcond[7]=(((sj3*x10056))+((sj3*x10053))+((sj0*x10048))+(((-1.0)*x10046*x10061))+(((-1.0)*cj1*cj2*x10051))+((x10047*x10061)));
evalcond[8]=((((-1.0)*x10047*x10059))+(((-1.0)*x10050*x10051))+(((-1.0)*x10051*x10057))+((cj3*x10056))+((cj3*x10053))+((x10046*x10059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10064=gconst1*gconst1;
IkReal x10065=r21*r21;
IkReal x10066=gconst2*gconst2;
IkReal x10067=r20*r20;
IkReal x10068=(gconst2*r20);
IkReal x10069=(cj1*cj2);
IkReal x10070=(sj1*sj2);
IkReal x10071=(gconst1*r21);
IkReal x10072=(cj3*gconst2);
IkReal x10073=(cj3*r20);
CheckValue<IkReal> x10074 = IKatan2WithCheck(IkReal((((r21*r22*x10072))+((gconst1*r22*x10073))+(((-1.0)*r22*x10069))+((r22*x10070)))),IkReal((((x10070*x10071))+((r21*x10064*x10073))+((gconst1*x10065*x10072))+(((-1.0)*x10069*x10071))+((x10068*x10069))+(((-1.0)*r21*x10066*x10073))+(((-1.0)*x10068*x10070))+(((-1.0)*gconst1*x10067*x10072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10074.valid){
continue;
}
CheckValue<IkReal> x10075=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10068*x10071))+((sj3*x10066*x10067))+((sj3*x10064*x10065)))),-1);
if(!x10075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10074.value)+(((1.5707963267949)*(x10075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10076=IKsin(j4);
IkReal x10077=IKcos(j4);
IkReal x10078=(cj3*gconst1);
IkReal x10079=(gconst1*r01);
IkReal x10080=(gconst1*r11);
IkReal x10081=(sj1*sj2);
IkReal x10082=(cj3*gconst2);
IkReal x10083=(gconst1*sj3);
IkReal x10084=(gconst2*sj3);
IkReal x10085=((1.0)*sj0);
IkReal x10086=(cj1*sj2);
IkReal x10087=((1.0)*x10077);
IkReal x10088=((1.0)*x10076);
IkReal x10089=((1.0)*cj1*cj2);
IkReal x10090=(cj3*x10076);
IkReal x10091=((1.0)*cj2*sj1);
IkReal x10092=(x10077*x10084);
evalcond[0]=((((-1.0)*gconst2*r20*x10088))+((gconst1*r21*x10076))+(((-1.0)*r22*x10087)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10088))+(((-1.0)*r12*x10087))+((x10076*x10080)));
evalcond[2]=(((x10076*x10079))+(((-1.0)*x10085))+(((-1.0)*r02*x10087))+(((-1.0)*gconst2*r00*x10088)));
evalcond[3]=(((cj2*sj1))+((r21*x10077*x10078))+((r20*x10083))+x10086+((r22*x10090))+((r21*x10084))+(((-1.0)*r20*x10082*x10087)));
evalcond[4]=((((-1.0)*r21*x10083*x10087))+((r20*x10078))+(((-1.0)*x10089))+x10081+((r21*x10082))+((r20*x10092))+(((-1.0)*r22*sj3*x10088)));
evalcond[5]=(((r00*x10083))+((r01*x10084))+((r02*x10090))+((r01*x10077*x10078))+((cj0*x10081))+(((-1.0)*r00*x10082*x10087))+(((-1.0)*cj0*x10089)));
evalcond[6]=(((r11*x10077*x10078))+(((-1.0)*cj1*cj2*x10085))+((r12*x10090))+((sj0*x10081))+(((-1.0)*r10*x10082*x10087))+((r10*x10083))+((r11*x10084)));
evalcond[7]=(((r01*x10082))+((r00*x10078))+(((-1.0)*cj0*x10086))+(((-1.0)*sj3*x10079*x10087))+(((-1.0)*r02*sj3*x10088))+(((-1.0)*cj0*x10091))+((r00*x10092)));
evalcond[8]=(((r10*x10078))+(((-1.0)*r12*sj3*x10088))+(((-1.0)*sj3*x10080*x10087))+(((-1.0)*x10085*x10086))+(((-1.0)*cj2*sj1*x10085))+((r10*x10092))+((r11*x10082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10093=((1.0)*gconst2);
CheckValue<IkReal> x10094=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10093)))),-1);
if(!x10094.valid){
continue;
}
CheckValue<IkReal> x10095 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10093))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10094.value)))+(x10095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10096=IKsin(j4);
IkReal x10097=IKcos(j4);
IkReal x10098=(cj3*gconst1);
IkReal x10099=(gconst1*r01);
IkReal x10100=(gconst1*r11);
IkReal x10101=(sj1*sj2);
IkReal x10102=(cj3*gconst2);
IkReal x10103=(gconst1*sj3);
IkReal x10104=(gconst2*sj3);
IkReal x10105=((1.0)*sj0);
IkReal x10106=(cj1*sj2);
IkReal x10107=((1.0)*x10097);
IkReal x10108=((1.0)*x10096);
IkReal x10109=((1.0)*cj1*cj2);
IkReal x10110=(cj3*x10096);
IkReal x10111=((1.0)*cj2*sj1);
IkReal x10112=(x10097*x10104);
evalcond[0]=((((-1.0)*gconst2*r20*x10108))+(((-1.0)*r22*x10107))+((gconst1*r21*x10096)));
evalcond[1]=((((-1.0)*r12*x10107))+cj0+((x10096*x10100))+(((-1.0)*gconst2*r10*x10108)));
evalcond[2]=((((-1.0)*r02*x10107))+(((-1.0)*gconst2*r00*x10108))+((x10096*x10099))+(((-1.0)*x10105)));
evalcond[3]=((((-1.0)*r20*x10102*x10107))+((r21*x10104))+((cj2*sj1))+((r20*x10103))+((r21*x10097*x10098))+x10106+((r22*x10110)));
evalcond[4]=(((r21*x10102))+((r20*x10112))+(((-1.0)*r21*x10103*x10107))+x10101+(((-1.0)*r22*sj3*x10108))+((r20*x10098))+(((-1.0)*x10109)));
evalcond[5]=((((-1.0)*r00*x10102*x10107))+((cj0*x10101))+((r01*x10104))+((r00*x10103))+(((-1.0)*cj0*x10109))+((r02*x10110))+((r01*x10097*x10098)));
evalcond[6]=((((-1.0)*cj1*cj2*x10105))+(((-1.0)*r10*x10102*x10107))+((r11*x10097*x10098))+((sj0*x10101))+((r11*x10104))+((r12*x10110))+((r10*x10103)));
evalcond[7]=(((r01*x10102))+((r00*x10112))+(((-1.0)*cj0*x10111))+(((-1.0)*cj0*x10106))+(((-1.0)*r02*sj3*x10108))+(((-1.0)*sj3*x10099*x10107))+((r00*x10098)));
evalcond[8]=((((-1.0)*sj3*x10100*x10107))+(((-1.0)*x10105*x10106))+(((-1.0)*r12*sj3*x10108))+(((-1.0)*cj2*sj1*x10105))+((r11*x10102))+((r10*x10098))+((r10*x10112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10113=((1.0)*gconst2);
CheckValue<IkReal> x10114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10114.valid){
continue;
}
CheckValue<IkReal> x10115=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10113)))),-1);
if(!x10115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10114.value)+(((1.5707963267949)*(x10115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10116=IKsin(j4);
IkReal x10117=IKcos(j4);
IkReal x10118=(cj3*gconst1);
IkReal x10119=(gconst1*r01);
IkReal x10120=(gconst1*r11);
IkReal x10121=(sj1*sj2);
IkReal x10122=(cj3*gconst2);
IkReal x10123=(gconst1*sj3);
IkReal x10124=(gconst2*sj3);
IkReal x10125=((1.0)*sj0);
IkReal x10126=(cj1*sj2);
IkReal x10127=((1.0)*x10117);
IkReal x10128=((1.0)*x10116);
IkReal x10129=((1.0)*cj1*cj2);
IkReal x10130=(cj3*x10116);
IkReal x10131=((1.0)*cj2*sj1);
IkReal x10132=(x10117*x10124);
evalcond[0]=(((gconst1*r21*x10116))+(((-1.0)*gconst2*r20*x10128))+(((-1.0)*r22*x10127)));
evalcond[1]=(cj0+((x10116*x10120))+(((-1.0)*gconst2*r10*x10128))+(((-1.0)*r12*x10127)));
evalcond[2]=((((-1.0)*gconst2*r00*x10128))+((x10116*x10119))+(((-1.0)*r02*x10127))+(((-1.0)*x10125)));
evalcond[3]=(((cj2*sj1))+((r20*x10123))+(((-1.0)*r20*x10122*x10127))+((r21*x10124))+((r21*x10117*x10118))+x10126+((r22*x10130)));
evalcond[4]=(((r20*x10132))+((r20*x10118))+((r21*x10122))+(((-1.0)*r22*sj3*x10128))+(((-1.0)*r21*x10123*x10127))+x10121+(((-1.0)*x10129)));
evalcond[5]=(((r01*x10117*x10118))+((r02*x10130))+(((-1.0)*r00*x10122*x10127))+((r00*x10123))+((cj0*x10121))+((r01*x10124))+(((-1.0)*cj0*x10129)));
evalcond[6]=(((r11*x10117*x10118))+((r10*x10123))+(((-1.0)*r10*x10122*x10127))+((r12*x10130))+((sj0*x10121))+(((-1.0)*cj1*cj2*x10125))+((r11*x10124)));
evalcond[7]=(((r00*x10118))+(((-1.0)*sj3*x10119*x10127))+(((-1.0)*cj0*x10126))+((r00*x10132))+((r01*x10122))+(((-1.0)*cj0*x10131))+(((-1.0)*r02*sj3*x10128)));
evalcond[8]=((((-1.0)*sj3*x10120*x10127))+((r10*x10132))+(((-1.0)*cj2*sj1*x10125))+(((-1.0)*r12*sj3*x10128))+((r10*x10118))+(((-1.0)*x10125*x10126))+((r11*x10122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10133=((-1.0)*r21);
IkReal x10135 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10135)==0){
continue;
}
IkReal x10134=pow(x10135,-0.5);
CheckValue<IkReal> x10136 = IKatan2WithCheck(IkReal(x10133),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10136.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10136.value))));
IkReal gconst4=(x10133*x10134);
IkReal gconst5=((1.0)*r20*x10134);
CheckValue<IkReal> x10137 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10137.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10137.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10138=((-1.0)*r21);
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal(x10138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
IkReal x10139=((1.0)*(x10141.value));
IkReal x10140=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10139)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10139)));
IkReal gconst4=(x10138*x10140);
IkReal gconst5=((1.0)*r20*x10140);
IkReal x10142=r22*r22;
IkReal x10143=((1.0)*x10142);
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(((-1.0)+x10142),-1);
if(!x10147.valid){
continue;
}
IkReal x10144=x10147.value;
if((((1.0)+(((-1.0)*x10143)))) < -0.00001)
continue;
IkReal x10145=IKsqrt(((1.0)+(((-1.0)*x10143))));
IkReal x10146=(cj0*x10144*x10145);
j4eval[0]=((IKabs(((((-1.0)*x10143*x10146))+x10146)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10148=((-1.0)*r21);
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal(x10148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
IkReal x10149=((1.0)*(x10151.value));
IkReal x10150=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10149)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10149)));
IkReal gconst4=(x10148*x10150);
IkReal gconst5=((1.0)*r20*x10150);
IkReal x10152=r22*r22;
IkReal x10153=((1.0)*x10152);
CheckValue<IkReal> x10157=IKPowWithIntegerCheck(((-1.0)+x10152),-1);
if(!x10157.valid){
continue;
}
IkReal x10154=x10157.value;
if((((1.0)+(((-1.0)*x10153)))) < -0.00001)
continue;
IkReal x10155=IKsqrt(((1.0)+(((-1.0)*x10153))));
IkReal x10156=(sj0*x10154*x10155);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10153*x10156))+x10156))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10158=((-1.0)*r21);
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(x10158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
IkReal x10159=((1.0)*(x10161.value));
IkReal x10160=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10159)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10159)));
IkReal gconst4=(x10158*x10160);
IkReal gconst5=((1.0)*r20*x10160);
IkReal x10162=r22*r22;
IkReal x10163=(r12*sj0);
IkReal x10164=(cj0*r02);
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(((-1.0)+x10162),-1);
if(!x10168.valid){
continue;
}
IkReal x10165=x10168.value;
if((((1.0)+(((-1.0)*x10162)))) < -0.00001)
continue;
IkReal x10166=IKsqrt(((1.0)+(((-1.0)*x10162))));
IkReal x10167=(r22*x10165*x10166);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10164*x10167))+((x10163*x10167)))))+(IKabs(((((-1.0)*x10163))+(((-1.0)*x10164))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10169=((-1.0)*r21);
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(x10169),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
IkReal x10170=((1.0)*(x10172.value));
IkReal x10171=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10170)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10170)));
IkReal gconst4=(x10169*x10171);
IkReal gconst5=((1.0)*r20*x10171);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10173=((-1.0)*r21);
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal(x10173),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
IkReal x10174=((1.0)*(x10176.value));
IkReal x10175=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10174)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10174)));
IkReal gconst4=(x10173*x10175);
IkReal gconst5=((1.0)*r20*x10175);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10177=((-1.0)*r21);
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(x10177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
IkReal x10178=((1.0)*(x10180.value));
IkReal x10179=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10178)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10178)));
IkReal gconst4=(x10177*x10179);
IkReal gconst5=((1.0)*r20*x10179);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10181=((-1.0)*r21);
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(x10181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10182=((1.0)*(x10184.value));
IkReal x10183=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10182)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10182)));
IkReal gconst4=(x10181*x10183);
IkReal gconst5=((1.0)*r20*x10183);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10185=((-1.0)*r21);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(x10185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
IkReal x10186=((1.0)*(x10188.value));
IkReal x10187=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10186)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10186)));
IkReal gconst4=(x10185*x10187);
IkReal gconst5=((1.0)*r20*x10187);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10189=((-1.0)*r21);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(x10189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
IkReal x10190=((1.0)*(x10192.value));
IkReal x10191=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10190)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10190)));
IkReal gconst4=(x10189*x10191);
IkReal gconst5=((1.0)*r20*x10191);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10193=(gconst5*r10);
IkReal x10194=(gconst4*r11);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal((x10193+(((-1.0)*x10194)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
CheckValue<IkReal> x10196=IKPowWithIntegerCheck(IKsign(((x10194*x10194)+(r12*r12)+(((-2.0)*x10193*x10194))+(x10193*x10193))),-1);
if(!x10196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10195.value)+(((1.5707963267949)*(x10196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10197=IKsin(j4);
IkReal x10198=IKcos(j4);
IkReal x10199=(gconst4*r11);
IkReal x10200=((1.0)*cj1);
IkReal x10201=(gconst5*r10);
IkReal x10202=(gconst4*r01);
IkReal x10203=(gconst5*r00);
IkReal x10204=(gconst4*r21);
IkReal x10205=(gconst5*r20);
IkReal x10206=((1.0)*x10198);
IkReal x10207=((1.0)*x10197);
evalcond[0]=((((-1.0)*r22*x10206))+(((-1.0)*x10205*x10207))+((x10197*x10204)));
evalcond[1]=((((-1.0)*r02*x10206))+(((-1.0)*x10203*x10207))+((x10197*x10202)));
evalcond[2]=((((-1.0)*x10199*x10206))+((x10198*x10201))+(((-1.0)*r12*x10207)));
evalcond[3]=((1.0)+((x10197*x10199))+(((-1.0)*x10201*x10207))+(((-1.0)*r12*x10206)));
evalcond[4]=((((-1.0)*r22*x10207))+(((-1.0)*cj2*x10200))+((sj1*sj2))+((x10198*x10205))+(((-1.0)*x10204*x10206)));
evalcond[5]=((((-1.0)*r02*x10207))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10200))+((x10198*x10203))+(((-1.0)*x10202*x10206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10208=((1.0)*gconst5);
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10208)))),-1);
if(!x10209.valid){
continue;
}
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10208))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10209.value)))+(x10210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10211=IKsin(j4);
IkReal x10212=IKcos(j4);
IkReal x10213=(gconst4*r11);
IkReal x10214=((1.0)*cj1);
IkReal x10215=(gconst5*r10);
IkReal x10216=(gconst4*r01);
IkReal x10217=(gconst5*r00);
IkReal x10218=(gconst4*r21);
IkReal x10219=(gconst5*r20);
IkReal x10220=((1.0)*x10212);
IkReal x10221=((1.0)*x10211);
evalcond[0]=((((-1.0)*x10219*x10221))+(((-1.0)*r22*x10220))+((x10211*x10218)));
evalcond[1]=((((-1.0)*r02*x10220))+(((-1.0)*x10217*x10221))+((x10211*x10216)));
evalcond[2]=((((-1.0)*x10213*x10220))+(((-1.0)*r12*x10221))+((x10212*x10215)));
evalcond[3]=((1.0)+(((-1.0)*x10215*x10221))+(((-1.0)*r12*x10220))+((x10211*x10213)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10214))+(((-1.0)*r22*x10221))+(((-1.0)*x10218*x10220))+((x10212*x10219)));
evalcond[5]=((((-1.0)*x10216*x10220))+(((-1.0)*r02*x10221))+(((-1.0)*sj2*x10214))+(((-1.0)*cj2*sj1))+((x10212*x10217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
CheckValue<IkReal> x10223=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10222.value)+(((1.5707963267949)*(x10223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10224=IKsin(j4);
IkReal x10225=IKcos(j4);
IkReal x10226=(gconst4*r11);
IkReal x10227=((1.0)*cj1);
IkReal x10228=(gconst5*r10);
IkReal x10229=(gconst4*r01);
IkReal x10230=(gconst5*r00);
IkReal x10231=(gconst4*r21);
IkReal x10232=(gconst5*r20);
IkReal x10233=((1.0)*x10225);
IkReal x10234=((1.0)*x10224);
evalcond[0]=((((-1.0)*x10232*x10234))+(((-1.0)*r22*x10233))+((x10224*x10231)));
evalcond[1]=((((-1.0)*x10230*x10234))+((x10224*x10229))+(((-1.0)*r02*x10233)));
evalcond[2]=((((-1.0)*x10226*x10233))+((x10225*x10228))+(((-1.0)*r12*x10234)));
evalcond[3]=((1.0)+((x10224*x10226))+(((-1.0)*r12*x10233))+(((-1.0)*x10228*x10234)));
evalcond[4]=(((x10225*x10232))+(((-1.0)*cj2*x10227))+((sj1*sj2))+(((-1.0)*r22*x10234))+(((-1.0)*x10231*x10233)));
evalcond[5]=(((x10225*x10230))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10227))+(((-1.0)*x10229*x10233))+(((-1.0)*r02*x10234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10235=((-1.0)*r21);
CheckValue<IkReal> x10238 = IKatan2WithCheck(IkReal(x10235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10238.valid){
continue;
}
IkReal x10236=((1.0)*(x10238.value));
IkReal x10237=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10236)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10236)));
IkReal gconst4=(x10235*x10237);
IkReal gconst5=((1.0)*r20*x10237);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10239=((-1.0)*r21);
CheckValue<IkReal> x10242 = IKatan2WithCheck(IkReal(x10239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10242.valid){
continue;
}
IkReal x10240=((1.0)*(x10242.value));
IkReal x10241=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10240)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10240)));
IkReal gconst4=(x10239*x10241);
IkReal gconst5=((1.0)*r20*x10241);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10243=((-1.0)*r21);
CheckValue<IkReal> x10246 = IKatan2WithCheck(IkReal(x10243),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10246.valid){
continue;
}
IkReal x10244=((1.0)*(x10246.value));
IkReal x10245=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10244)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10244)));
IkReal gconst4=(x10243*x10245);
IkReal gconst5=((1.0)*r20*x10245);
IkReal x10247=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(x10247,-1);
if(!x10251.valid){
continue;
}
IkReal x10248=x10251.value;
IkReal x10249=((1.0)*x10248);
IkReal x10250=((((-2.0)*r10*r11*r20*r21*x10248))+(((-1.0)*(r12*r12)))+(((-1.0)*x10249*(r10*r10)*(r20*r20)))+(((-1.0)*x10249*(r11*r11)*(r21*r21))));
j4eval[0]=x10250;
j4eval[1]=r12;
j4eval[2]=x10247;
j4eval[3]=IKsign(x10250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10252=(gconst5*r10);
IkReal x10253=(gconst4*r11);
CheckValue<IkReal> x10254=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x10253*x10253)))+(((2.0)*x10252*x10253))+(((-1.0)*(x10252*x10252))))),-1);
if(!x10254.valid){
continue;
}
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal((x10253+(((-1.0)*x10252)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10254.value)))+(x10255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10256=IKcos(j4);
IkReal x10257=IKsin(j4);
IkReal x10258=(gconst4*r11);
IkReal x10259=(gconst5*r10);
IkReal x10260=((1.0)*cj1);
IkReal x10261=(gconst5*r00);
IkReal x10262=(gconst5*r20);
IkReal x10263=((1.0)*x10256);
IkReal x10264=(gconst4*x10256);
IkReal x10265=((1.0)*x10257);
IkReal x10266=(gconst4*x10257);
evalcond[0]=(((r12*x10257))+((x10256*x10258))+(((-1.0)*x10259*x10263)));
evalcond[1]=((((-1.0)*r22*x10263))+(((-1.0)*x10262*x10265))+((r21*x10266)));
evalcond[2]=((((-1.0)*x10261*x10265))+((r01*x10266))+(((-1.0)*r02*x10263)));
evalcond[3]=((1.0)+((x10257*x10258))+(((-1.0)*r12*x10263))+(((-1.0)*x10259*x10265)));
evalcond[4]=(((r22*x10257))+((sj1*sj2))+(((-1.0)*x10262*x10263))+((r21*x10264))+(((-1.0)*cj2*x10260)));
evalcond[5]=((((-1.0)*x10261*x10263))+((r02*x10257))+(((-1.0)*cj2*sj1))+((r01*x10264))+(((-1.0)*sj2*x10260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10267=((1.0)*gconst5);
CheckValue<IkReal> x10268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10267)))),-1);
if(!x10268.valid){
continue;
}
CheckValue<IkReal> x10269 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10267))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10268.value)))+(x10269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10270=IKcos(j4);
IkReal x10271=IKsin(j4);
IkReal x10272=(gconst4*r11);
IkReal x10273=(gconst5*r10);
IkReal x10274=((1.0)*cj1);
IkReal x10275=(gconst5*r00);
IkReal x10276=(gconst5*r20);
IkReal x10277=((1.0)*x10270);
IkReal x10278=(gconst4*x10270);
IkReal x10279=((1.0)*x10271);
IkReal x10280=(gconst4*x10271);
evalcond[0]=(((r12*x10271))+((x10270*x10272))+(((-1.0)*x10273*x10277)));
evalcond[1]=((((-1.0)*r22*x10277))+((r21*x10280))+(((-1.0)*x10276*x10279)));
evalcond[2]=(((r01*x10280))+(((-1.0)*r02*x10277))+(((-1.0)*x10275*x10279)));
evalcond[3]=((1.0)+((x10271*x10272))+(((-1.0)*x10273*x10279))+(((-1.0)*r12*x10277)));
evalcond[4]=(((sj1*sj2))+((r21*x10278))+(((-1.0)*cj2*x10274))+(((-1.0)*x10276*x10277))+((r22*x10271)));
evalcond[5]=(((r01*x10278))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10274))+((r02*x10271))+(((-1.0)*x10275*x10277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10281 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10281.valid){
continue;
}
CheckValue<IkReal> x10282=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10281.value)+(((1.5707963267949)*(x10282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10283=IKcos(j4);
IkReal x10284=IKsin(j4);
IkReal x10285=(gconst4*r11);
IkReal x10286=(gconst5*r10);
IkReal x10287=((1.0)*cj1);
IkReal x10288=(gconst5*r00);
IkReal x10289=(gconst5*r20);
IkReal x10290=((1.0)*x10283);
IkReal x10291=(gconst4*x10283);
IkReal x10292=((1.0)*x10284);
IkReal x10293=(gconst4*x10284);
evalcond[0]=(((x10283*x10285))+((r12*x10284))+(((-1.0)*x10286*x10290)));
evalcond[1]=(((r21*x10293))+(((-1.0)*x10289*x10292))+(((-1.0)*r22*x10290)));
evalcond[2]=((((-1.0)*r02*x10290))+(((-1.0)*x10288*x10292))+((r01*x10293)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10290))+(((-1.0)*x10286*x10292))+((x10284*x10285)));
evalcond[4]=(((sj1*sj2))+((r22*x10284))+((r21*x10291))+(((-1.0)*x10289*x10290))+(((-1.0)*cj2*x10287)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10284))+(((-1.0)*x10288*x10290))+((r01*x10291))+(((-1.0)*sj2*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10294=((-1.0)*r21);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(x10294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
IkReal x10295=((1.0)*(x10297.value));
IkReal x10296=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10295)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10295)));
IkReal gconst4=(x10294*x10296);
IkReal gconst5=((1.0)*r20*x10296);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10298=((-1.0)*r21);
CheckValue<IkReal> x10301 = IKatan2WithCheck(IkReal(x10298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10301.valid){
continue;
}
IkReal x10299=((1.0)*(x10301.value));
IkReal x10300=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10299)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10299)));
IkReal gconst4=(x10298*x10300);
IkReal gconst5=((1.0)*r20*x10300);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10302=((-1.0)*r21);
CheckValue<IkReal> x10305 = IKatan2WithCheck(IkReal(x10302),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10305.valid){
continue;
}
IkReal x10303=((1.0)*(x10305.value));
IkReal x10304=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10303)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10303)));
IkReal gconst4=(x10302*x10304);
IkReal gconst5=((1.0)*r20*x10304);
IkReal x10306=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10310=IKPowWithIntegerCheck(x10306,-1);
if(!x10310.valid){
continue;
}
IkReal x10307=x10310.value;
IkReal x10308=((1.0)*x10307);
IkReal x10309=((((-1.0)*x10308*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10308*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10307)));
j4eval[0]=x10309;
j4eval[1]=r12;
j4eval[2]=x10306;
j4eval[3]=IKsign(x10309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10311=(gconst5*r10);
IkReal x10312=(gconst4*r11);
CheckValue<IkReal> x10313=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10312*x10312)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10311*x10311)))+(((2.0)*x10311*x10312)))),-1);
if(!x10313.valid){
continue;
}
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal((x10312+(((-1.0)*x10311)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10313.value)))+(x10314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10315=IKcos(j4);
IkReal x10316=IKsin(j4);
IkReal x10317=(gconst4*r11);
IkReal x10318=(gconst5*r10);
IkReal x10319=(gconst5*r00);
IkReal x10320=(gconst5*r20);
IkReal x10321=((1.0)*x10315);
IkReal x10322=(gconst4*x10315);
IkReal x10323=((1.0)*x10316);
IkReal x10324=(gconst4*x10316);
evalcond[0]=(((r12*x10316))+(((-1.0)*x10318*x10321))+((x10315*x10317)));
evalcond[1]=((((-1.0)*r22*x10321))+((r21*x10324))+(((-1.0)*x10320*x10323)));
evalcond[2]=((((-1.0)*r02*x10321))+((r01*x10324))+(((-1.0)*x10319*x10323)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10321))+(((-1.0)*x10318*x10323))+((x10316*x10317)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10316))+((r21*x10322))+(((-1.0)*x10320*x10321)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r01*x10322))+((sj1*sj2))+(((-1.0)*x10319*x10321))+((r02*x10316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10325=((1.0)*gconst5);
CheckValue<IkReal> x10326 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10326.valid){
continue;
}
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10325)))),-1);
if(!x10327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10326.value)+(((1.5707963267949)*(x10327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10328=IKcos(j4);
IkReal x10329=IKsin(j4);
IkReal x10330=(gconst4*r11);
IkReal x10331=(gconst5*r10);
IkReal x10332=(gconst5*r00);
IkReal x10333=(gconst5*r20);
IkReal x10334=((1.0)*x10328);
IkReal x10335=(gconst4*x10328);
IkReal x10336=((1.0)*x10329);
IkReal x10337=(gconst4*x10329);
evalcond[0]=(((x10328*x10330))+((r12*x10329))+(((-1.0)*x10331*x10334)));
evalcond[1]=((((-1.0)*x10333*x10336))+(((-1.0)*r22*x10334))+((r21*x10337)));
evalcond[2]=(((r01*x10337))+(((-1.0)*x10332*x10336))+(((-1.0)*r02*x10334)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10334))+((x10329*x10330))+(((-1.0)*x10331*x10336)));
evalcond[4]=(((cj2*sj1))+((r22*x10329))+(((-1.0)*x10333*x10334))+((cj1*sj2))+((r21*x10335)));
evalcond[5]=(((r02*x10329))+((r01*x10335))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10332*x10334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10338 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10338.valid){
continue;
}
CheckValue<IkReal> x10339=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10338.value)+(((1.5707963267949)*(x10339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10340=IKcos(j4);
IkReal x10341=IKsin(j4);
IkReal x10342=(gconst4*r11);
IkReal x10343=(gconst5*r10);
IkReal x10344=(gconst5*r00);
IkReal x10345=(gconst5*r20);
IkReal x10346=((1.0)*x10340);
IkReal x10347=(gconst4*x10340);
IkReal x10348=((1.0)*x10341);
IkReal x10349=(gconst4*x10341);
evalcond[0]=((((-1.0)*x10343*x10346))+((r12*x10341))+((x10340*x10342)));
evalcond[1]=(((r21*x10349))+(((-1.0)*r22*x10346))+(((-1.0)*x10345*x10348)));
evalcond[2]=(((r01*x10349))+(((-1.0)*x10344*x10348))+(((-1.0)*r02*x10346)));
evalcond[3]=((1.0)+((x10341*x10342))+(((-1.0)*x10343*x10348))+(((-1.0)*r12*x10346)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10341))+((r21*x10347))+(((-1.0)*x10345*x10346)));
evalcond[5]=(((r01*x10347))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10344*x10346))+((r02*x10341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10350=((-1.0)*r21);
CheckValue<IkReal> x10353 = IKatan2WithCheck(IkReal(x10350),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10353.valid){
continue;
}
IkReal x10351=((1.0)*(x10353.value));
IkReal x10352=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10351)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10351)));
IkReal gconst4=(x10350*x10352);
IkReal gconst5=((1.0)*r20*x10352);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10354=((-1.0)*r21);
CheckValue<IkReal> x10357 = IKatan2WithCheck(IkReal(x10354),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10357.valid){
continue;
}
IkReal x10355=((1.0)*(x10357.value));
IkReal x10356=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10355)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10355)));
IkReal gconst4=(x10354*x10356);
IkReal gconst5=((1.0)*r20*x10356);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10358=((-1.0)*r21);
CheckValue<IkReal> x10361 = IKatan2WithCheck(IkReal(x10358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10361.valid){
continue;
}
IkReal x10359=((1.0)*(x10361.value));
IkReal x10360=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10359)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10359)));
IkReal gconst4=(x10358*x10360);
IkReal gconst5=((1.0)*r20*x10360);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10362=(gconst5*r10);
IkReal x10363=(gconst4*r11);
CheckValue<IkReal> x10364=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10362*x10362)+(((-2.0)*x10362*x10363))+(x10363*x10363))),-1);
if(!x10364.valid){
continue;
}
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal(((((-1.0)*x10363))+x10362)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10364.value)))+(x10365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10366=IKsin(j4);
IkReal x10367=IKcos(j4);
IkReal x10368=(gconst4*r11);
IkReal x10369=(gconst5*r10);
IkReal x10370=(gconst4*r01);
IkReal x10371=(gconst5*r00);
IkReal x10372=(gconst4*r21);
IkReal x10373=(gconst5*r20);
IkReal x10374=((1.0)*x10367);
IkReal x10375=((1.0)*x10366);
evalcond[0]=(((x10366*x10372))+(((-1.0)*x10373*x10375))+(((-1.0)*r22*x10374)));
evalcond[1]=((((-1.0)*r02*x10374))+((x10366*x10370))+(((-1.0)*x10371*x10375)));
evalcond[2]=((((-1.0)*x10368*x10374))+((x10367*x10369))+(((-1.0)*r12*x10375)));
evalcond[3]=((1.0)+(((-1.0)*x10369*x10375))+((x10366*x10368))+(((-1.0)*r12*x10374)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10367*x10373))+(((-1.0)*x10372*x10374))+(((-1.0)*r22*x10375)));
evalcond[5]=((((-1.0)*r02*x10375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10367*x10371))+(((-1.0)*x10370*x10374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10376=((1.0)*gconst5);
CheckValue<IkReal> x10377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10376)))),-1);
if(!x10377.valid){
continue;
}
CheckValue<IkReal> x10378 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10377.value)))+(x10378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10379=IKsin(j4);
IkReal x10380=IKcos(j4);
IkReal x10381=(gconst4*r11);
IkReal x10382=(gconst5*r10);
IkReal x10383=(gconst4*r01);
IkReal x10384=(gconst5*r00);
IkReal x10385=(gconst4*r21);
IkReal x10386=(gconst5*r20);
IkReal x10387=((1.0)*x10380);
IkReal x10388=((1.0)*x10379);
evalcond[0]=(((x10379*x10385))+(((-1.0)*x10386*x10388))+(((-1.0)*r22*x10387)));
evalcond[1]=((((-1.0)*x10384*x10388))+((x10379*x10383))+(((-1.0)*r02*x10387)));
evalcond[2]=((((-1.0)*x10381*x10387))+((x10380*x10382))+(((-1.0)*r12*x10388)));
evalcond[3]=((1.0)+((x10379*x10381))+(((-1.0)*r12*x10387))+(((-1.0)*x10382*x10388)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10385*x10387))+((cj1*sj2))+((x10380*x10386))+(((-1.0)*r22*x10388)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10388))+((x10380*x10384))+(((-1.0)*x10383*x10387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10389.value)+(((1.5707963267949)*(x10390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10391=IKsin(j4);
IkReal x10392=IKcos(j4);
IkReal x10393=(gconst4*r11);
IkReal x10394=(gconst5*r10);
IkReal x10395=(gconst4*r01);
IkReal x10396=(gconst5*r00);
IkReal x10397=(gconst4*r21);
IkReal x10398=(gconst5*r20);
IkReal x10399=((1.0)*x10392);
IkReal x10400=((1.0)*x10391);
evalcond[0]=((((-1.0)*x10398*x10400))+(((-1.0)*r22*x10399))+((x10391*x10397)));
evalcond[1]=((((-1.0)*x10396*x10400))+(((-1.0)*r02*x10399))+((x10391*x10395)));
evalcond[2]=(((x10392*x10394))+(((-1.0)*x10393*x10399))+(((-1.0)*r12*x10400)));
evalcond[3]=((1.0)+(((-1.0)*x10394*x10400))+(((-1.0)*r12*x10399))+((x10391*x10393)));
evalcond[4]=(((cj2*sj1))+((x10392*x10398))+((cj1*sj2))+(((-1.0)*r22*x10400))+(((-1.0)*x10397*x10399)));
evalcond[5]=(((x10392*x10396))+(((-1.0)*x10395*x10399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10401=gconst4*gconst4;
IkReal x10402=gconst5*gconst5;
IkReal x10403=(r10*r21);
IkReal x10404=((1.0)*cj3);
IkReal x10405=(r11*r21);
IkReal x10406=(r11*r20);
IkReal x10407=(r22*sj3);
IkReal x10408=(gconst4*r10);
IkReal x10409=((1.0)*sj3);
IkReal x10410=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10411 = IKatan2WithCheck(IkReal((((x10407*x10408))+((gconst5*r11*x10407)))),IkReal(((((-1.0)*x10402*x10406*x10409))+((gconst4*gconst5*sj3*x10405))+(((-1.0)*gconst5*r20*x10408*x10409))+((sj3*x10401*x10403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10411.valid){
continue;
}
CheckValue<IkReal> x10412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10402*x10404))+((x10406*x10410))+(((-1.0)*x10401*x10404*x10405))+(((-1.0)*r12*r22*x10404))+((x10403*x10410)))),-1);
if(!x10412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10411.value)+(((1.5707963267949)*(x10412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10413=IKsin(j4);
IkReal x10414=IKcos(j4);
IkReal x10415=(sj1*sj2);
IkReal x10416=(gconst5*sj3);
IkReal x10417=(cj3*gconst5);
IkReal x10418=(gconst4*r11);
IkReal x10419=((1.0)*cj1);
IkReal x10420=(gconst4*r01);
IkReal x10421=(cj2*sj1);
IkReal x10422=(gconst4*r21);
IkReal x10423=(gconst4*sj3);
IkReal x10424=(cj3*gconst4);
IkReal x10425=(cj2*x10419);
IkReal x10426=((1.0)*x10414);
IkReal x10427=((1.0)*x10413);
IkReal x10428=(cj3*x10413);
IkReal x10429=(cj3*x10414);
evalcond[0]=(((x10413*x10422))+(((-1.0)*gconst5*r20*x10427))+(((-1.0)*r22*x10426)));
evalcond[1]=((((-1.0)*gconst5*r00*x10427))+((x10413*x10420))+(((-1.0)*r02*x10426)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10427))+((x10413*x10418))+(((-1.0)*r12*x10426)));
evalcond[3]=(((r12*x10428))+((r11*x10416))+((r10*x10423))+((x10418*x10429))+(((-1.0)*r10*x10417*x10426)));
evalcond[4]=(((r10*x10414*x10416))+(((-1.0)*sj3*x10418*x10426))+(((-1.0)*r12*sj3*x10427))+((r11*x10417))+((r10*x10424)));
evalcond[5]=(((r21*x10416))+((cj1*sj2))+((r22*x10428))+((x10422*x10429))+x10421+((r20*x10423))+(((-1.0)*r20*x10417*x10426)));
evalcond[6]=(((r00*x10423))+((x10420*x10429))+((r01*x10416))+(((-1.0)*r00*x10417*x10426))+((r02*x10428))+(((-1.0)*x10425))+x10415);
evalcond[7]=(((r21*x10417))+(((-1.0)*sj3*x10422*x10426))+(((-1.0)*x10425))+x10415+((r20*x10424))+((r20*x10414*x10416))+(((-1.0)*r22*sj3*x10427)));
evalcond[8]=(((r00*x10424))+((r00*x10414*x10416))+((r01*x10417))+(((-1.0)*sj2*x10419))+(((-1.0)*sj3*x10420*x10426))+(((-1.0)*x10421))+(((-1.0)*r02*sj3*x10427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10430=((1.0)*gconst5);
CheckValue<IkReal> x10431 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10430))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10431.valid){
continue;
}
CheckValue<IkReal> x10432=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10430)))),-1);
if(!x10432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10431.value)+(((1.5707963267949)*(x10432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10433=IKsin(j4);
IkReal x10434=IKcos(j4);
IkReal x10435=(sj1*sj2);
IkReal x10436=(gconst5*sj3);
IkReal x10437=(cj3*gconst5);
IkReal x10438=(gconst4*r11);
IkReal x10439=((1.0)*cj1);
IkReal x10440=(gconst4*r01);
IkReal x10441=(cj2*sj1);
IkReal x10442=(gconst4*r21);
IkReal x10443=(gconst4*sj3);
IkReal x10444=(cj3*gconst4);
IkReal x10445=(cj2*x10439);
IkReal x10446=((1.0)*x10434);
IkReal x10447=((1.0)*x10433);
IkReal x10448=(cj3*x10433);
IkReal x10449=(cj3*x10434);
evalcond[0]=((((-1.0)*gconst5*r20*x10447))+((x10433*x10442))+(((-1.0)*r22*x10446)));
evalcond[1]=((((-1.0)*r02*x10446))+(((-1.0)*gconst5*r00*x10447))+((x10433*x10440)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10446))+((x10433*x10438))+(((-1.0)*gconst5*r10*x10447)));
evalcond[3]=(((x10438*x10449))+((r12*x10448))+(((-1.0)*r10*x10437*x10446))+((r11*x10436))+((r10*x10443)));
evalcond[4]=((((-1.0)*sj3*x10438*x10446))+(((-1.0)*r12*sj3*x10447))+((r10*x10434*x10436))+((r11*x10437))+((r10*x10444)));
evalcond[5]=(((r22*x10448))+((x10442*x10449))+((cj1*sj2))+((r20*x10443))+x10441+(((-1.0)*r20*x10437*x10446))+((r21*x10436)));
evalcond[6]=(((r01*x10436))+(((-1.0)*x10445))+((r02*x10448))+(((-1.0)*r00*x10437*x10446))+((r00*x10443))+x10435+((x10440*x10449)));
evalcond[7]=((((-1.0)*r22*sj3*x10447))+(((-1.0)*sj3*x10442*x10446))+(((-1.0)*x10445))+((r20*x10434*x10436))+((r20*x10444))+x10435+((r21*x10437)));
evalcond[8]=((((-1.0)*x10441))+((r01*x10437))+(((-1.0)*r02*sj3*x10447))+(((-1.0)*sj2*x10439))+((r00*x10444))+(((-1.0)*sj3*x10440*x10446))+((r00*x10434*x10436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10450 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10450.valid){
continue;
}
CheckValue<IkReal> x10451=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10450.value)+(((1.5707963267949)*(x10451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10452=IKsin(j4);
IkReal x10453=IKcos(j4);
IkReal x10454=(sj1*sj2);
IkReal x10455=(gconst5*sj3);
IkReal x10456=(cj3*gconst5);
IkReal x10457=(gconst4*r11);
IkReal x10458=((1.0)*cj1);
IkReal x10459=(gconst4*r01);
IkReal x10460=(cj2*sj1);
IkReal x10461=(gconst4*r21);
IkReal x10462=(gconst4*sj3);
IkReal x10463=(cj3*gconst4);
IkReal x10464=(cj2*x10458);
IkReal x10465=((1.0)*x10453);
IkReal x10466=((1.0)*x10452);
IkReal x10467=(cj3*x10452);
IkReal x10468=(cj3*x10453);
evalcond[0]=((((-1.0)*gconst5*r20*x10466))+((x10452*x10461))+(((-1.0)*r22*x10465)));
evalcond[1]=((((-1.0)*r02*x10465))+((x10452*x10459))+(((-1.0)*gconst5*r00*x10466)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10466))+((x10452*x10457))+(((-1.0)*r12*x10465)));
evalcond[3]=(((r12*x10467))+((r11*x10455))+(((-1.0)*r10*x10456*x10465))+((x10457*x10468))+((r10*x10462)));
evalcond[4]=(((r11*x10456))+(((-1.0)*sj3*x10457*x10465))+((r10*x10453*x10455))+(((-1.0)*r12*sj3*x10466))+((r10*x10463)));
evalcond[5]=(((r20*x10462))+((cj1*sj2))+((x10461*x10468))+((r22*x10467))+x10460+((r21*x10455))+(((-1.0)*r20*x10456*x10465)));
evalcond[6]=(((x10459*x10468))+(((-1.0)*r00*x10456*x10465))+((r00*x10462))+((r01*x10455))+x10454+((r02*x10467))+(((-1.0)*x10464)));
evalcond[7]=(((r20*x10463))+(((-1.0)*r22*sj3*x10466))+x10454+(((-1.0)*sj3*x10461*x10465))+((r21*x10456))+((r20*x10453*x10455))+(((-1.0)*x10464)));
evalcond[8]=((((-1.0)*x10460))+(((-1.0)*sj3*x10459*x10465))+((r00*x10463))+((r01*x10456))+(((-1.0)*r02*sj3*x10466))+(((-1.0)*sj2*x10458))+((r00*x10453*x10455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10469=((-1.0)*r21);
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(x10469),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
IkReal x10470=((1.0)*(x10472.value));
IkReal x10471=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10470)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10470)));
IkReal gconst4=(x10469*x10471);
IkReal gconst5=((1.0)*r20*x10471);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10473=((-1.0)*r21);
CheckValue<IkReal> x10476 = IKatan2WithCheck(IkReal(x10473),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10476.valid){
continue;
}
IkReal x10474=((1.0)*(x10476.value));
IkReal x10475=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10474)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10474)));
IkReal gconst4=(x10473*x10475);
IkReal gconst5=((1.0)*r20*x10475);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10477=((-1.0)*r21);
CheckValue<IkReal> x10480 = IKatan2WithCheck(IkReal(x10477),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10480.valid){
continue;
}
IkReal x10478=((1.0)*(x10480.value));
IkReal x10479=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10478)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10478)));
IkReal gconst4=(x10477*x10479);
IkReal gconst5=((1.0)*r20*x10479);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10481=((-1.0)*r21);
CheckValue<IkReal> x10484 = IKatan2WithCheck(IkReal(x10481),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10484.valid){
continue;
}
IkReal x10482=((1.0)*(x10484.value));
IkReal x10483=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10482)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10482)));
IkReal gconst4=(x10481*x10483);
IkReal gconst5=((1.0)*r20*x10483);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10485=((-1.0)*r21);
CheckValue<IkReal> x10488 = IKatan2WithCheck(IkReal(x10485),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10488.valid){
continue;
}
IkReal x10486=((1.0)*(x10488.value));
IkReal x10487=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10486)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10486)));
IkReal gconst4=(x10485*x10487);
IkReal gconst5=((1.0)*r20*x10487);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10489=((-1.0)*r21);
CheckValue<IkReal> x10492 = IKatan2WithCheck(IkReal(x10489),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10492.valid){
continue;
}
IkReal x10490=((1.0)*(x10492.value));
IkReal x10491=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10490)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10490)));
IkReal gconst4=(x10489*x10491);
IkReal gconst5=((1.0)*r20*x10491);
IkReal x10493=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10497=IKPowWithIntegerCheck(x10493,-1);
if(!x10497.valid){
continue;
}
IkReal x10494=x10497.value;
IkReal x10495=((1.0)*x10494);
IkReal x10496=((((-1.0)*x10495*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10494))+(((-1.0)*(r12*r12)))+(((-1.0)*x10495*(r10*r10)*(r20*r20))));
j4eval[0]=x10496;
j4eval[1]=r12;
j4eval[2]=x10493;
j4eval[3]=IKsign(x10496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10498=(gconst5*r10);
IkReal x10499=(gconst4*r11);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(((((-1.0)*x10499))+x10498)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
CheckValue<IkReal> x10501=IKPowWithIntegerCheck(IKsign(((((2.0)*x10498*x10499))+(((-1.0)*(x10499*x10499)))+(((-1.0)*(x10498*x10498)))+(((-1.0)*(r12*r12))))),-1);
if(!x10501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10500.value)+(((1.5707963267949)*(x10501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10502=IKsin(j4);
IkReal x10503=IKcos(j4);
IkReal x10504=(gconst4*r11);
IkReal x10505=(gconst5*r10);
IkReal x10506=(gconst4*r01);
IkReal x10507=(gconst5*r00);
IkReal x10508=(gconst4*r21);
IkReal x10509=(gconst5*r20);
IkReal x10510=((1.0)*x10503);
IkReal x10511=((1.0)*x10502);
evalcond[0]=((((-1.0)*r22*x10510))+(((-1.0)*x10509*x10511))+((x10502*x10508)));
evalcond[1]=((((-1.0)*r02*x10510))+((x10502*x10506))+(((-1.0)*x10507*x10511)));
evalcond[2]=((((-1.0)*x10504*x10510))+(((-1.0)*r12*x10511))+((x10503*x10505)));
evalcond[3]=((-1.0)+(((-1.0)*x10505*x10511))+(((-1.0)*r12*x10510))+((x10502*x10504)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10511))+((cj1*sj2))+((x10503*x10507))+(((-1.0)*x10506*x10510)));
evalcond[5]=((((-1.0)*r22*x10511))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10508*x10510))+((x10503*x10509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10512=((1.0)*gconst5);
CheckValue<IkReal> x10513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10512))+(((-1.0)*gconst4*r20)))),-1);
if(!x10513.valid){
continue;
}
CheckValue<IkReal> x10514 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10512))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10513.value)))+(x10514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10515=IKsin(j4);
IkReal x10516=IKcos(j4);
IkReal x10517=(gconst4*r11);
IkReal x10518=(gconst5*r10);
IkReal x10519=(gconst4*r01);
IkReal x10520=(gconst5*r00);
IkReal x10521=(gconst4*r21);
IkReal x10522=(gconst5*r20);
IkReal x10523=((1.0)*x10516);
IkReal x10524=((1.0)*x10515);
evalcond[0]=((((-1.0)*r22*x10523))+(((-1.0)*x10522*x10524))+((x10515*x10521)));
evalcond[1]=((((-1.0)*x10520*x10524))+(((-1.0)*r02*x10523))+((x10515*x10519)));
evalcond[2]=((((-1.0)*r12*x10524))+((x10516*x10518))+(((-1.0)*x10517*x10523)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10523))+(((-1.0)*x10518*x10524))+((x10515*x10517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10524))+((x10516*x10520))+(((-1.0)*x10519*x10523)));
evalcond[5]=((((-1.0)*x10521*x10523))+(((-1.0)*r22*x10524))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10516*x10522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10525=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10525.valid){
continue;
}
CheckValue<IkReal> x10526 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10525.value)))+(x10526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10527=IKsin(j4);
IkReal x10528=IKcos(j4);
IkReal x10529=(gconst4*r11);
IkReal x10530=(gconst5*r10);
IkReal x10531=(gconst4*r01);
IkReal x10532=(gconst5*r00);
IkReal x10533=(gconst4*r21);
IkReal x10534=(gconst5*r20);
IkReal x10535=((1.0)*x10528);
IkReal x10536=((1.0)*x10527);
evalcond[0]=((((-1.0)*r22*x10535))+((x10527*x10533))+(((-1.0)*x10534*x10536)));
evalcond[1]=((((-1.0)*r02*x10535))+((x10527*x10531))+(((-1.0)*x10532*x10536)));
evalcond[2]=(((x10528*x10530))+(((-1.0)*r12*x10536))+(((-1.0)*x10529*x10535)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10535))+(((-1.0)*x10530*x10536))+((x10527*x10529)));
evalcond[4]=(((cj2*sj1))+((x10528*x10532))+((cj1*sj2))+(((-1.0)*r02*x10536))+(((-1.0)*x10531*x10535)));
evalcond[5]=((((-1.0)*r22*x10536))+((x10528*x10534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10533*x10535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10537=((-1.0)*r21);
CheckValue<IkReal> x10540 = IKatan2WithCheck(IkReal(x10537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10540.valid){
continue;
}
IkReal x10538=((1.0)*(x10540.value));
IkReal x10539=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10538)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10538)));
IkReal gconst4=(x10537*x10539);
IkReal gconst5=((1.0)*r20*x10539);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10541=((-1.0)*r21);
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(x10541),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
IkReal x10542=((1.0)*(x10544.value));
IkReal x10543=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10542)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10542)));
IkReal gconst4=(x10541*x10543);
IkReal gconst5=((1.0)*r20*x10543);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10545=((-1.0)*r21);
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(x10545),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
IkReal x10546=((1.0)*(x10548.value));
IkReal x10547=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10546)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10546)));
IkReal gconst4=(x10545*x10547);
IkReal gconst5=((1.0)*r20*x10547);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10549=(gconst5*r10);
IkReal x10550=(gconst4*r11);
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(((((-1.0)*x10549))+x10550)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
CheckValue<IkReal> x10552=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10549*x10549)+(x10550*x10550)+(((-2.0)*x10549*x10550)))),-1);
if(!x10552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10551.value)+(((1.5707963267949)*(x10552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10553=IKcos(j4);
IkReal x10554=IKsin(j4);
IkReal x10555=(gconst4*r11);
IkReal x10556=(gconst5*r10);
IkReal x10557=(gconst5*r00);
IkReal x10558=(gconst5*r20);
IkReal x10559=((1.0)*x10553);
IkReal x10560=(gconst4*x10553);
IkReal x10561=((1.0)*x10554);
IkReal x10562=(gconst4*x10554);
evalcond[0]=((((-1.0)*x10556*x10559))+((r12*x10554))+((x10553*x10555)));
evalcond[1]=(((r21*x10562))+(((-1.0)*x10558*x10561))+(((-1.0)*r22*x10559)));
evalcond[2]=(((r01*x10562))+(((-1.0)*x10557*x10561))+(((-1.0)*r02*x10559)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10559))+(((-1.0)*x10556*x10561))+((x10554*x10555)));
evalcond[4]=(((r01*x10560))+((cj2*sj1))+((r02*x10554))+((cj1*sj2))+(((-1.0)*x10557*x10559)));
evalcond[5]=(((r22*x10554))+(((-1.0)*x10558*x10559))+((r21*x10560))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10563=((1.0)*gconst5);
CheckValue<IkReal> x10564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10563))+(((-1.0)*gconst4*r20)))),-1);
if(!x10564.valid){
continue;
}
CheckValue<IkReal> x10565 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10563))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10564.value)))+(x10565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10566=IKcos(j4);
IkReal x10567=IKsin(j4);
IkReal x10568=(gconst4*r11);
IkReal x10569=(gconst5*r10);
IkReal x10570=(gconst5*r00);
IkReal x10571=(gconst5*r20);
IkReal x10572=((1.0)*x10566);
IkReal x10573=(gconst4*x10566);
IkReal x10574=((1.0)*x10567);
IkReal x10575=(gconst4*x10567);
evalcond[0]=((((-1.0)*x10569*x10572))+((x10566*x10568))+((r12*x10567)));
evalcond[1]=((((-1.0)*x10571*x10574))+(((-1.0)*r22*x10572))+((r21*x10575)));
evalcond[2]=(((r01*x10575))+(((-1.0)*r02*x10572))+(((-1.0)*x10570*x10574)));
evalcond[3]=((-1.0)+(((-1.0)*x10569*x10574))+(((-1.0)*r12*x10572))+((x10567*x10568)));
evalcond[4]=(((cj2*sj1))+((r01*x10573))+((cj1*sj2))+((r02*x10567))+(((-1.0)*x10570*x10572)));
evalcond[5]=((((-1.0)*x10571*x10572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10573))+((r22*x10567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10576=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10576.valid){
continue;
}
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10576.value)))+(x10577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10578=IKcos(j4);
IkReal x10579=IKsin(j4);
IkReal x10580=(gconst4*r11);
IkReal x10581=(gconst5*r10);
IkReal x10582=(gconst5*r00);
IkReal x10583=(gconst5*r20);
IkReal x10584=((1.0)*x10578);
IkReal x10585=(gconst4*x10578);
IkReal x10586=((1.0)*x10579);
IkReal x10587=(gconst4*x10579);
evalcond[0]=((((-1.0)*x10581*x10584))+((x10578*x10580))+((r12*x10579)));
evalcond[1]=((((-1.0)*r22*x10584))+((r21*x10587))+(((-1.0)*x10583*x10586)));
evalcond[2]=((((-1.0)*x10582*x10586))+(((-1.0)*r02*x10584))+((r01*x10587)));
evalcond[3]=((-1.0)+((x10579*x10580))+(((-1.0)*x10581*x10586))+(((-1.0)*r12*x10584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10582*x10584))+((cj1*sj2))+((r02*x10579))+((r01*x10585)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10585))+((r22*x10579))+(((-1.0)*x10583*x10584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10588=((-1.0)*r21);
CheckValue<IkReal> x10591 = IKatan2WithCheck(IkReal(x10588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10591.valid){
continue;
}
IkReal x10589=((1.0)*(x10591.value));
IkReal x10590=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10589)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10589)));
IkReal gconst4=(x10588*x10590);
IkReal gconst5=((1.0)*r20*x10590);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10592=((-1.0)*r21);
CheckValue<IkReal> x10595 = IKatan2WithCheck(IkReal(x10592),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10595.valid){
continue;
}
IkReal x10593=((1.0)*(x10595.value));
IkReal x10594=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10593)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10593)));
IkReal gconst4=(x10592*x10594);
IkReal gconst5=((1.0)*r20*x10594);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10596=((-1.0)*r21);
CheckValue<IkReal> x10599 = IKatan2WithCheck(IkReal(x10596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10599.valid){
continue;
}
IkReal x10597=((1.0)*(x10599.value));
IkReal x10598=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10597)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10597)));
IkReal gconst4=(x10596*x10598);
IkReal gconst5=((1.0)*r20*x10598);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10600=(gconst5*r10);
IkReal x10601=(gconst4*r11);
CheckValue<IkReal> x10602=IKPowWithIntegerCheck(IKsign(((x10600*x10600)+(r12*r12)+(x10601*x10601)+(((-2.0)*x10600*x10601)))),-1);
if(!x10602.valid){
continue;
}
CheckValue<IkReal> x10603 = IKatan2WithCheck(IkReal(((((-1.0)*x10600))+x10601)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10602.value)))+(x10603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10604=IKcos(j4);
IkReal x10605=IKsin(j4);
IkReal x10606=(gconst5*r10);
IkReal x10607=(gconst5*r00);
IkReal x10608=(gconst5*r20);
IkReal x10609=((1.0)*x10604);
IkReal x10610=(gconst4*x10605);
IkReal x10611=(gconst4*x10604);
IkReal x10612=((1.0)*x10605);
evalcond[0]=(((r12*x10605))+(((-1.0)*x10606*x10609))+((r11*x10611)));
evalcond[1]=((((-1.0)*x10608*x10612))+(((-1.0)*r22*x10609))+((r21*x10610)));
evalcond[2]=(((r01*x10610))+(((-1.0)*x10607*x10612))+(((-1.0)*r02*x10609)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10609))+(((-1.0)*x10606*x10612))+((r11*x10610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10608*x10609))+((r22*x10605))+((r21*x10611)));
evalcond[5]=(((r02*x10605))+(((-1.0)*x10607*x10609))+(((-1.0)*sj1*sj2))+((r01*x10611))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10613=((1.0)*gconst5);
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
CheckValue<IkReal> x10615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10613))+(((-1.0)*gconst4*r20)))),-1);
if(!x10615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10614.value)+(((1.5707963267949)*(x10615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10616=IKcos(j4);
IkReal x10617=IKsin(j4);
IkReal x10618=(gconst5*r10);
IkReal x10619=(gconst5*r00);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10616);
IkReal x10622=(gconst4*x10617);
IkReal x10623=(gconst4*x10616);
IkReal x10624=((1.0)*x10617);
evalcond[0]=(((r12*x10617))+(((-1.0)*x10618*x10621))+((r11*x10623)));
evalcond[1]=(((r21*x10622))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10624)));
evalcond[2]=((((-1.0)*r02*x10621))+((r01*x10622))+(((-1.0)*x10619*x10624)));
evalcond[3]=((-1.0)+(((-1.0)*x10618*x10624))+(((-1.0)*r12*x10621))+((r11*x10622)));
evalcond[4]=(((r21*x10623))+((cj2*sj1))+((r22*x10617))+((cj1*sj2))+(((-1.0)*x10620*x10621)));
evalcond[5]=(((r02*x10617))+(((-1.0)*sj1*sj2))+((r01*x10623))+(((-1.0)*x10619*x10621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10625=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10625.valid){
continue;
}
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10625.value)))+(x10626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10627=IKcos(j4);
IkReal x10628=IKsin(j4);
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst5*r00);
IkReal x10631=(gconst5*r20);
IkReal x10632=((1.0)*x10627);
IkReal x10633=(gconst4*x10628);
IkReal x10634=(gconst4*x10627);
IkReal x10635=((1.0)*x10628);
evalcond[0]=((((-1.0)*x10629*x10632))+((r11*x10634))+((r12*x10628)));
evalcond[1]=((((-1.0)*x10631*x10635))+(((-1.0)*r22*x10632))+((r21*x10633)));
evalcond[2]=((((-1.0)*r02*x10632))+((r01*x10633))+(((-1.0)*x10630*x10635)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10632))+(((-1.0)*x10629*x10635))+((r11*x10633)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10631*x10632))+((r22*x10628))+((r21*x10634)));
evalcond[5]=(((r01*x10634))+(((-1.0)*sj1*sj2))+((r02*x10628))+((cj1*cj2))+(((-1.0)*x10630*x10632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10636=((-1.0)*r21);
CheckValue<IkReal> x10639 = IKatan2WithCheck(IkReal(x10636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10639.valid){
continue;
}
IkReal x10637=((1.0)*(x10639.value));
IkReal x10638=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10637)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10637)));
IkReal gconst4=(x10636*x10638);
IkReal gconst5=((1.0)*r20*x10638);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10640=((-1.0)*r21);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(x10640),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
IkReal x10641=((1.0)*(x10643.value));
IkReal x10642=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10641)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10641)));
IkReal gconst4=(x10640*x10642);
IkReal gconst5=((1.0)*r20*x10642);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10644=((-1.0)*r21);
CheckValue<IkReal> x10647 = IKatan2WithCheck(IkReal(x10644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10647.valid){
continue;
}
IkReal x10645=((1.0)*(x10647.value));
IkReal x10646=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10645)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10645)));
IkReal gconst4=(x10644*x10646);
IkReal gconst5=((1.0)*r20*x10646);
IkReal x10648=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10652=IKPowWithIntegerCheck(x10648,-1);
if(!x10652.valid){
continue;
}
IkReal x10649=x10652.value;
IkReal x10650=((1.0)*x10649);
IkReal x10651=((((-1.0)*x10650*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10649))+(((-1.0)*(r12*r12)))+(((-1.0)*x10650*(r10*r10)*(r20*r20))));
j4eval[0]=x10651;
j4eval[1]=r12;
j4eval[2]=x10648;
j4eval[3]=IKsign(x10651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10653=(gconst5*r10);
IkReal x10654=(gconst4*r11);
CheckValue<IkReal> x10655=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10654*x10654)))+(((-1.0)*(r12*r12)))+(((2.0)*x10653*x10654))+(((-1.0)*(x10653*x10653))))),-1);
if(!x10655.valid){
continue;
}
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(((((-1.0)*x10654))+x10653)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10655.value)))+(x10656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10657=IKsin(j4);
IkReal x10658=IKcos(j4);
IkReal x10659=(gconst4*r11);
IkReal x10660=(gconst5*r10);
IkReal x10661=(gconst5*r00);
IkReal x10662=(gconst5*r20);
IkReal x10663=((1.0)*x10658);
IkReal x10664=(gconst4*x10657);
IkReal x10665=((1.0)*x10657);
evalcond[0]=((((-1.0)*r22*x10663))+(((-1.0)*x10662*x10665))+((r21*x10664)));
evalcond[1]=((((-1.0)*x10661*x10665))+(((-1.0)*r02*x10663))+((r01*x10664)));
evalcond[2]=(((x10658*x10660))+(((-1.0)*x10659*x10663))+(((-1.0)*r12*x10665)));
evalcond[3]=((-1.0)+((x10657*x10659))+(((-1.0)*x10660*x10665))+(((-1.0)*r12*x10663)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10658*x10662))+(((-1.0)*gconst4*r21*x10663))+(((-1.0)*r22*x10665)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10658*x10661))+(((-1.0)*r02*x10665))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10666=((1.0)*gconst5);
CheckValue<IkReal> x10667 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10667.valid){
continue;
}
CheckValue<IkReal> x10668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10666))+(((-1.0)*gconst4*r20)))),-1);
if(!x10668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10667.value)+(((1.5707963267949)*(x10668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10669=IKsin(j4);
IkReal x10670=IKcos(j4);
IkReal x10671=(gconst4*r11);
IkReal x10672=(gconst5*r10);
IkReal x10673=(gconst5*r00);
IkReal x10674=(gconst5*r20);
IkReal x10675=((1.0)*x10670);
IkReal x10676=(gconst4*x10669);
IkReal x10677=((1.0)*x10669);
evalcond[0]=((((-1.0)*x10674*x10677))+(((-1.0)*r22*x10675))+((r21*x10676)));
evalcond[1]=((((-1.0)*r02*x10675))+(((-1.0)*x10673*x10677))+((r01*x10676)));
evalcond[2]=(((x10670*x10672))+(((-1.0)*x10671*x10675))+(((-1.0)*r12*x10677)));
evalcond[3]=((-1.0)+((x10669*x10671))+(((-1.0)*x10672*x10677))+(((-1.0)*r12*x10675)));
evalcond[4]=(((cj2*sj1))+((x10670*x10674))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10675))+(((-1.0)*r22*x10677)));
evalcond[5]=(((x10670*x10673))+(((-1.0)*r02*x10677))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10678=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10678.valid){
continue;
}
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10678.value)))+(x10679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10680=IKsin(j4);
IkReal x10681=IKcos(j4);
IkReal x10682=(gconst4*r11);
IkReal x10683=(gconst5*r10);
IkReal x10684=(gconst5*r00);
IkReal x10685=(gconst5*r20);
IkReal x10686=((1.0)*x10681);
IkReal x10687=(gconst4*x10680);
IkReal x10688=((1.0)*x10680);
evalcond[0]=((((-1.0)*r22*x10686))+(((-1.0)*x10685*x10688))+((r21*x10687)));
evalcond[1]=((((-1.0)*r02*x10686))+(((-1.0)*x10684*x10688))+((r01*x10687)));
evalcond[2]=(((x10681*x10683))+(((-1.0)*x10682*x10686))+(((-1.0)*r12*x10688)));
evalcond[3]=((-1.0)+(((-1.0)*x10683*x10688))+((x10680*x10682))+(((-1.0)*r12*x10686)));
evalcond[4]=(((cj2*sj1))+((x10681*x10685))+(((-1.0)*r22*x10688))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10686)));
evalcond[5]=(((x10681*x10684))+(((-1.0)*gconst4*r01*x10686))+(((-1.0)*r02*x10688))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10689=((-1.0)*r21);
IkReal x10690=((-1.0)*px);
CheckValue<IkReal> x10692 = IKatan2WithCheck(IkReal(x10689),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10692.valid){
continue;
}
IkReal x10691=((1.0)*(x10692.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10691)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10690);
rxp1_1=(px*r21);
rxp1_2=(r11*x10690);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10691)));
IkReal gconst4=x10689;
IkReal gconst5=((1.0)*r20);
IkReal x10693=((1.0)*cj3);
IkReal x10694=(r10*r20);
IkReal x10695=(r11*r21);
j4eval[0]=((((-1.0)*x10694))+(((-1.0)*x10695)));
j4eval[1]=((((-1.0)*x10693*x10695))+(((-1.0)*x10693*x10694)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10696=((-1.0)*r21);
IkReal x10697=((-1.0)*px);
CheckValue<IkReal> x10699 = IKatan2WithCheck(IkReal(x10696),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10699.valid){
continue;
}
IkReal x10698=((1.0)*(x10699.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10698)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10697);
rxp1_1=(px*r21);
rxp1_2=(r11*x10697);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10698)));
IkReal gconst4=x10696;
IkReal gconst5=((1.0)*r20);
IkReal x10700=((1.0)*r11*r21);
IkReal x10701=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10700))+(((-1.0)*x10701)));
j4eval[1]=(((sj3*x10700))+((sj3*x10701)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10702=((-1.0)*r21);
IkReal x10703=((-1.0)*px);
CheckValue<IkReal> x10705 = IKatan2WithCheck(IkReal(x10702),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10705.valid){
continue;
}
IkReal x10704=((1.0)*(x10705.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10704)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10703);
rxp1_1=(px*r21);
rxp1_2=(r11*x10703);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10704)));
IkReal gconst4=x10702;
IkReal gconst5=((1.0)*r20);
IkReal x10706=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10706))+(((-1.0)*r11*r21*x10706)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10707=((1.0)*r10);
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(cj3,-1);
if(!x10708.valid){
continue;
}
CheckValue<IkReal> x10709=IKPowWithIntegerCheck(r02,-1);
if(!x10709.valid){
continue;
}
CheckValue<IkReal> x10710=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10707))),-1);
if(!x10710.valid){
continue;
}
if( IKabs(((x10708.value)*(x10709.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10710.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10707)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10708.value)*(x10709.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10710.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10707))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10708.value)*(x10709.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10710.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10707))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10711=IKsin(j4);
IkReal x10712=IKcos(j4);
IkReal x10713=(cj2*sj1);
IkReal x10714=(cj1*sj2);
IkReal x10715=(gconst5*sj3);
IkReal x10716=(gconst4*r11);
IkReal x10717=(sj1*sj2);
IkReal x10718=((1.0)*gconst5);
IkReal x10719=(cj1*cj2);
IkReal x10720=(gconst4*r21);
IkReal x10721=(cj3*gconst4);
IkReal x10722=(gconst4*sj3);
IkReal x10723=(cj3*gconst5);
IkReal x10724=(r20*x10712);
IkReal x10725=(r10*x10712);
IkReal x10726=(cj3*x10712);
IkReal x10727=(r02*x10711);
IkReal x10728=(x10714+x10713);
IkReal x10729=((1.0)*sj3*x10712);
evalcond[0]=((-1.0)*r02*x10712);
evalcond[1]=((((-1.0)*r20*x10711*x10718))+((x10711*x10720)));
evalcond[2]=((((-1.0)*x10717))+x10719+((cj3*x10727)));
evalcond[3]=(x10728+(((-1.0)*sj3*x10727)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10711*x10718))+((x10711*x10716)));
evalcond[5]=(((r10*x10722))+((x10716*x10726))+((r11*x10715))+(((-1.0)*cj3*x10718*x10725)));
evalcond[6]=((((-1.0)*x10716*x10729))+((r10*x10721))+((x10715*x10725))+((r11*x10723)));
evalcond[7]=(((x10720*x10726))+((r21*x10715))+((r20*x10722))+(((-1.0)*cj3*x10718*x10724))+x10728);
evalcond[8]=((((-1.0)*x10719))+((x10715*x10724))+((r21*x10723))+(((-1.0)*x10720*x10729))+((r20*x10721))+x10717);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10730=((1.0)*gconst5);
IkReal x10731=(gconst4*r11);
CheckValue<IkReal> x10732=IKPowWithIntegerCheck((x10731+(((-1.0)*r10*x10730))),-1);
if(!x10732.valid){
continue;
}
CheckValue<IkReal> x10733=IKPowWithIntegerCheck(((((-1.0)*sj3*x10731))+((gconst5*r10*sj3))),-1);
if(!x10733.valid){
continue;
}
if( IKabs(x10732.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10733.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10730)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10732.value)+IKsqr(((x10733.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10730))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10732.value, ((x10733.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10730))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10734=IKsin(j4);
IkReal x10735=IKcos(j4);
IkReal x10736=(cj2*sj1);
IkReal x10737=(cj1*sj2);
IkReal x10738=(gconst5*sj3);
IkReal x10739=(gconst4*r11);
IkReal x10740=(sj1*sj2);
IkReal x10741=((1.0)*gconst5);
IkReal x10742=(cj1*cj2);
IkReal x10743=(gconst4*r21);
IkReal x10744=(cj3*gconst4);
IkReal x10745=(gconst4*sj3);
IkReal x10746=(cj3*gconst5);
IkReal x10747=(r20*x10735);
IkReal x10748=(r10*x10735);
IkReal x10749=(cj3*x10735);
IkReal x10750=(r02*x10734);
IkReal x10751=(x10736+x10737);
IkReal x10752=((1.0)*sj3*x10735);
evalcond[0]=((-1.0)*r02*x10735);
evalcond[1]=(((x10734*x10743))+(((-1.0)*r20*x10734*x10741)));
evalcond[2]=((((-1.0)*x10740))+((cj3*x10750))+x10742);
evalcond[3]=((((-1.0)*sj3*x10750))+x10751);
evalcond[4]=((-1.0)+((x10734*x10739))+(((-1.0)*r10*x10734*x10741)));
evalcond[5]=((((-1.0)*cj3*x10741*x10748))+((r10*x10745))+((x10739*x10749))+((r11*x10738)));
evalcond[6]=(((r10*x10744))+(((-1.0)*x10739*x10752))+((r11*x10746))+((x10738*x10748)));
evalcond[7]=((((-1.0)*cj3*x10741*x10747))+((x10743*x10749))+((r21*x10738))+((r20*x10745))+x10751);
evalcond[8]=((((-1.0)*x10742))+((r20*x10744))+x10740+(((-1.0)*x10743*x10752))+((x10738*x10747))+((r21*x10746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10753=((1.0)*sj3);
IkReal x10754=(gconst4*r11);
IkReal x10755=((1.0)*gconst5*r10);
CheckValue<IkReal> x10756=IKPowWithIntegerCheck(((((-1.0)*x10755))+x10754),-1);
if(!x10756.valid){
continue;
}
CheckValue<IkReal> x10757=IKPowWithIntegerCheck(((((-1.0)*cj3*x10755))+((cj3*x10754))),-1);
if(!x10757.valid){
continue;
}
if( IKabs(x10756.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10757.value)*(((((-1.0)*gconst4*r10*x10753))+(((-1.0)*gconst5*r11*x10753)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10756.value)+IKsqr(((x10757.value)*(((((-1.0)*gconst4*r10*x10753))+(((-1.0)*gconst5*r11*x10753))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10756.value, ((x10757.value)*(((((-1.0)*gconst4*r10*x10753))+(((-1.0)*gconst5*r11*x10753))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10758=IKsin(j4);
IkReal x10759=IKcos(j4);
IkReal x10760=(cj2*sj1);
IkReal x10761=(cj1*sj2);
IkReal x10762=(gconst5*sj3);
IkReal x10763=(gconst4*r11);
IkReal x10764=(sj1*sj2);
IkReal x10765=((1.0)*gconst5);
IkReal x10766=(cj1*cj2);
IkReal x10767=(gconst4*r21);
IkReal x10768=(cj3*gconst4);
IkReal x10769=(gconst4*sj3);
IkReal x10770=(cj3*gconst5);
IkReal x10771=(r20*x10759);
IkReal x10772=(r10*x10759);
IkReal x10773=(cj3*x10759);
IkReal x10774=(r02*x10758);
IkReal x10775=(x10761+x10760);
IkReal x10776=((1.0)*sj3*x10759);
evalcond[0]=((-1.0)*r02*x10759);
evalcond[1]=((((-1.0)*r20*x10758*x10765))+((x10758*x10767)));
evalcond[2]=(((cj3*x10774))+(((-1.0)*x10764))+x10766);
evalcond[3]=((((-1.0)*sj3*x10774))+x10775);
evalcond[4]=((-1.0)+((x10758*x10763))+(((-1.0)*r10*x10758*x10765)));
evalcond[5]=(((r11*x10762))+(((-1.0)*cj3*x10765*x10772))+((x10763*x10773))+((r10*x10769)));
evalcond[6]=(((r11*x10770))+(((-1.0)*x10763*x10776))+((x10762*x10772))+((r10*x10768)));
evalcond[7]=(((r20*x10769))+(((-1.0)*cj3*x10765*x10771))+((x10767*x10773))+((r21*x10762))+x10775);
evalcond[8]=((((-1.0)*x10766))+((r20*x10768))+(((-1.0)*x10767*x10776))+((x10762*x10771))+((r21*x10770))+x10764);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10777=gconst4*gconst4;
IkReal x10778=gconst5*gconst5;
IkReal x10779=(r10*r21);
IkReal x10780=((1.0)*cj3);
IkReal x10781=(r11*r21);
IkReal x10782=(r11*r20);
IkReal x10783=(r22*sj3);
IkReal x10784=(gconst4*r10);
IkReal x10785=((1.0)*sj3);
IkReal x10786=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10787=IKPowWithIntegerCheck(IKsign((((x10779*x10786))+((x10782*x10786))+(((-1.0)*r12*r22*x10780))+(((-1.0)*r10*r20*x10778*x10780))+(((-1.0)*x10777*x10780*x10781)))),-1);
if(!x10787.valid){
continue;
}
CheckValue<IkReal> x10788 = IKatan2WithCheck(IkReal((((x10783*x10784))+((gconst5*r11*x10783)))),IkReal(((((-1.0)*gconst5*r20*x10784*x10785))+(((-1.0)*x10778*x10782*x10785))+((sj3*x10777*x10779))+((gconst4*gconst5*sj3*x10781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10787.value)))+(x10788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10789=IKsin(j4);
IkReal x10790=IKcos(j4);
IkReal x10791=(cj2*sj1);
IkReal x10792=(cj1*sj2);
IkReal x10793=(gconst5*sj3);
IkReal x10794=(gconst4*r11);
IkReal x10795=(sj1*sj2);
IkReal x10796=(gconst5*r10);
IkReal x10797=(cj1*cj2);
IkReal x10798=(gconst4*r01);
IkReal x10799=(gconst4*r21);
IkReal x10800=(gconst5*r00);
IkReal x10801=(gconst4*sj3);
IkReal x10802=(cj3*gconst5);
IkReal x10803=(cj3*gconst4);
IkReal x10804=((1.0)*x10790);
IkReal x10805=((1.0)*x10789);
IkReal x10806=(cj3*x10789);
IkReal x10807=(cj3*x10790);
IkReal x10808=(x10792+x10791);
evalcond[0]=((((-1.0)*r22*x10804))+(((-1.0)*gconst5*r20*x10805))+((x10789*x10799)));
evalcond[1]=((((-1.0)*x10800*x10805))+(((-1.0)*r02*x10804))+((x10789*x10798)));
evalcond[2]=((-1.0)+(((-1.0)*x10796*x10805))+((x10789*x10794))+(((-1.0)*r12*x10804)));
evalcond[3]=((((-1.0)*cj3*x10796*x10804))+((r10*x10801))+((r12*x10806))+((x10794*x10807))+((r11*x10793)));
evalcond[4]=(((r10*x10803))+((r10*x10790*x10793))+(((-1.0)*sj3*x10794*x10804))+(((-1.0)*r12*sj3*x10805))+((r11*x10802)));
evalcond[5]=(((r20*x10801))+(((-1.0)*r20*x10802*x10804))+((r21*x10793))+((r22*x10806))+((x10799*x10807))+x10808);
evalcond[6]=(((r00*x10801))+((r02*x10806))+((x10798*x10807))+(((-1.0)*x10795))+x10797+((r01*x10793))+(((-1.0)*cj3*x10800*x10804)));
evalcond[7]=((((-1.0)*r02*sj3*x10805))+((r01*x10802))+((r00*x10803))+(((-1.0)*sj3*x10798*x10804))+((r00*x10790*x10793))+x10808);
evalcond[8]=(((r20*x10803))+((r20*x10790*x10793))+((r21*x10802))+(((-1.0)*x10797))+x10795+(((-1.0)*r22*sj3*x10805))+(((-1.0)*sj3*x10799*x10804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10809=((1.0)*gconst5);
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
CheckValue<IkReal> x10811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10809))+(((-1.0)*gconst4*r20)))),-1);
if(!x10811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10810.value)+(((1.5707963267949)*(x10811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10812=IKsin(j4);
IkReal x10813=IKcos(j4);
IkReal x10814=(cj2*sj1);
IkReal x10815=(cj1*sj2);
IkReal x10816=(gconst5*sj3);
IkReal x10817=(gconst4*r11);
IkReal x10818=(sj1*sj2);
IkReal x10819=(gconst5*r10);
IkReal x10820=(cj1*cj2);
IkReal x10821=(gconst4*r01);
IkReal x10822=(gconst4*r21);
IkReal x10823=(gconst5*r00);
IkReal x10824=(gconst4*sj3);
IkReal x10825=(cj3*gconst5);
IkReal x10826=(cj3*gconst4);
IkReal x10827=((1.0)*x10813);
IkReal x10828=((1.0)*x10812);
IkReal x10829=(cj3*x10812);
IkReal x10830=(cj3*x10813);
IkReal x10831=(x10815+x10814);
evalcond[0]=(((x10812*x10822))+(((-1.0)*gconst5*r20*x10828))+(((-1.0)*r22*x10827)));
evalcond[1]=((((-1.0)*r02*x10827))+((x10812*x10821))+(((-1.0)*x10823*x10828)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10827))+((x10812*x10817))+(((-1.0)*x10819*x10828)));
evalcond[3]=(((r12*x10829))+((r10*x10824))+(((-1.0)*cj3*x10819*x10827))+((r11*x10816))+((x10817*x10830)));
evalcond[4]=((((-1.0)*sj3*x10817*x10827))+((r10*x10813*x10816))+((r10*x10826))+(((-1.0)*r12*sj3*x10828))+((r11*x10825)));
evalcond[5]=((((-1.0)*r20*x10825*x10827))+((r20*x10824))+((x10822*x10830))+((r22*x10829))+((r21*x10816))+x10831);
evalcond[6]=((((-1.0)*x10818))+((r02*x10829))+(((-1.0)*cj3*x10823*x10827))+((r01*x10816))+((r00*x10824))+((x10821*x10830))+x10820);
evalcond[7]=((((-1.0)*sj3*x10821*x10827))+((r00*x10813*x10816))+(((-1.0)*r02*sj3*x10828))+((r00*x10826))+((r01*x10825))+x10831);
evalcond[8]=(((r21*x10825))+(((-1.0)*x10820))+(((-1.0)*r22*sj3*x10828))+((r20*x10826))+(((-1.0)*sj3*x10822*x10827))+((r20*x10813*x10816))+x10818);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10832=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10832.valid){
continue;
}
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10832.value)))+(x10833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10834=IKsin(j4);
IkReal x10835=IKcos(j4);
IkReal x10836=(cj2*sj1);
IkReal x10837=(cj1*sj2);
IkReal x10838=(gconst5*sj3);
IkReal x10839=(gconst4*r11);
IkReal x10840=(sj1*sj2);
IkReal x10841=(gconst5*r10);
IkReal x10842=(cj1*cj2);
IkReal x10843=(gconst4*r01);
IkReal x10844=(gconst4*r21);
IkReal x10845=(gconst5*r00);
IkReal x10846=(gconst4*sj3);
IkReal x10847=(cj3*gconst5);
IkReal x10848=(cj3*gconst4);
IkReal x10849=((1.0)*x10835);
IkReal x10850=((1.0)*x10834);
IkReal x10851=(cj3*x10834);
IkReal x10852=(cj3*x10835);
IkReal x10853=(x10837+x10836);
evalcond[0]=((((-1.0)*r22*x10849))+(((-1.0)*gconst5*r20*x10850))+((x10834*x10844)));
evalcond[1]=((((-1.0)*r02*x10849))+(((-1.0)*x10845*x10850))+((x10834*x10843)));
evalcond[2]=((-1.0)+(((-1.0)*x10841*x10850))+(((-1.0)*r12*x10849))+((x10834*x10839)));
evalcond[3]=(((r12*x10851))+((x10839*x10852))+(((-1.0)*cj3*x10841*x10849))+((r10*x10846))+((r11*x10838)));
evalcond[4]=((((-1.0)*sj3*x10839*x10849))+((r10*x10835*x10838))+(((-1.0)*r12*sj3*x10850))+((r11*x10847))+((r10*x10848)));
evalcond[5]=((((-1.0)*r20*x10847*x10849))+((x10844*x10852))+((r20*x10846))+((r22*x10851))+((r21*x10838))+x10853);
evalcond[6]=(((x10843*x10852))+((r00*x10846))+(((-1.0)*x10840))+(((-1.0)*cj3*x10845*x10849))+((r01*x10838))+((r02*x10851))+x10842);
evalcond[7]=(((r01*x10847))+((r00*x10848))+((r00*x10835*x10838))+(((-1.0)*r02*sj3*x10850))+(((-1.0)*sj3*x10843*x10849))+x10853);
evalcond[8]=((((-1.0)*r22*sj3*x10850))+(((-1.0)*sj3*x10844*x10849))+(((-1.0)*x10842))+((r20*x10835*x10838))+((r21*x10847))+((r20*x10848))+x10840);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10854=((-1.0)*r21);
CheckValue<IkReal> x10857 = IKatan2WithCheck(IkReal(x10854),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10857.valid){
continue;
}
IkReal x10855=((1.0)*(x10857.value));
IkReal x10856=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10855)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10855)));
IkReal gconst4=(x10854*x10856);
IkReal gconst5=((1.0)*r20*x10856);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10858=((-1.0)*r21);
CheckValue<IkReal> x10861 = IKatan2WithCheck(IkReal(x10858),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10861.valid){
continue;
}
IkReal x10859=((1.0)*(x10861.value));
IkReal x10860=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10859)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10859)));
IkReal gconst4=(x10858*x10860);
IkReal gconst5=((1.0)*r20*x10860);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10862=((-1.0)*r21);
CheckValue<IkReal> x10865 = IKatan2WithCheck(IkReal(x10862),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10865.valid){
continue;
}
IkReal x10863=((1.0)*(x10865.value));
IkReal x10864=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10863)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10863)));
IkReal gconst4=(x10862*x10864);
IkReal gconst5=((1.0)*r20*x10864);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10866=((-1.0)*r21);
CheckValue<IkReal> x10869 = IKatan2WithCheck(IkReal(x10866),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10869.valid){
continue;
}
IkReal x10867=((1.0)*(x10869.value));
IkReal x10868=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10867)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10867)));
IkReal gconst4=(x10866*x10868);
IkReal gconst5=((1.0)*r20*x10868);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10870=((-1.0)*r21);
CheckValue<IkReal> x10873 = IKatan2WithCheck(IkReal(x10870),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10873.valid){
continue;
}
IkReal x10871=((1.0)*(x10873.value));
IkReal x10872=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10871)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10871)));
IkReal gconst4=(x10870*x10872);
IkReal gconst5=((1.0)*r20*x10872);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10874=((-1.0)*r21);
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal(x10874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
IkReal x10875=((1.0)*(x10877.value));
IkReal x10876=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10875)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10875)));
IkReal gconst4=(x10874*x10876);
IkReal gconst5=((1.0)*r20*x10876);
IkReal x10878=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10882=IKPowWithIntegerCheck(x10878,-1);
if(!x10882.valid){
continue;
}
IkReal x10879=x10882.value;
IkReal x10880=((1.0)*x10879);
IkReal x10881=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10879))+(((-1.0)*x10880*(r01*r01)*(r21*r21)))+(((-1.0)*x10880*(r00*r00)*(r20*r20))));
j4eval[0]=x10881;
j4eval[1]=r02;
j4eval[2]=x10878;
j4eval[3]=IKsign(x10881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10883=(gconst5*r00);
IkReal x10884=(gconst4*r01);
CheckValue<IkReal> x10885=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10883*x10884))+(((-1.0)*(x10884*x10884)))+(((-1.0)*(x10883*x10883))))),-1);
if(!x10885.valid){
continue;
}
CheckValue<IkReal> x10886 = IKatan2WithCheck(IkReal(((((-1.0)*x10884))+x10883)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10885.value)))+(x10886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10887=IKsin(j4);
IkReal x10888=IKcos(j4);
IkReal x10889=(gconst4*r11);
IkReal x10890=((1.0)*cj1);
IkReal x10891=(gconst5*r10);
IkReal x10892=(gconst4*r01);
IkReal x10893=(gconst5*r00);
IkReal x10894=(gconst4*r21);
IkReal x10895=(gconst5*r20);
IkReal x10896=((1.0)*x10888);
IkReal x10897=((1.0)*x10887);
evalcond[0]=((((-1.0)*x10895*x10897))+((x10887*x10894))+(((-1.0)*r22*x10896)));
evalcond[1]=((((-1.0)*x10891*x10897))+((x10887*x10889))+(((-1.0)*r12*x10896)));
evalcond[2]=((((-1.0)*x10892*x10896))+(((-1.0)*r02*x10897))+((x10888*x10893)));
evalcond[3]=((-1.0)+(((-1.0)*x10893*x10897))+(((-1.0)*r02*x10896))+((x10887*x10892)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x10890))+(((-1.0)*r22*x10897))+((x10888*x10895))+(((-1.0)*x10894*x10896)));
evalcond[5]=((((-1.0)*sj2*x10890))+(((-1.0)*x10889*x10896))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10897))+((x10888*x10891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10898=((1.0)*gconst5);
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10898))+(((-1.0)*gconst4*r10)))),-1);
if(!x10900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10899.value)+(((1.5707963267949)*(x10900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10901=IKsin(j4);
IkReal x10902=IKcos(j4);
IkReal x10903=(gconst4*r11);
IkReal x10904=((1.0)*cj1);
IkReal x10905=(gconst5*r10);
IkReal x10906=(gconst4*r01);
IkReal x10907=(gconst5*r00);
IkReal x10908=(gconst4*r21);
IkReal x10909=(gconst5*r20);
IkReal x10910=((1.0)*x10902);
IkReal x10911=((1.0)*x10901);
evalcond[0]=(((x10901*x10908))+(((-1.0)*r22*x10910))+(((-1.0)*x10909*x10911)));
evalcond[1]=((((-1.0)*r12*x10910))+((x10901*x10903))+(((-1.0)*x10905*x10911)));
evalcond[2]=((((-1.0)*r02*x10911))+((x10902*x10907))+(((-1.0)*x10906*x10910)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10910))+((x10901*x10906))+(((-1.0)*x10907*x10911)));
evalcond[4]=((((-1.0)*x10908*x10910))+((x10902*x10909))+(((-1.0)*r22*x10911))+((sj1*sj2))+(((-1.0)*cj2*x10904)));
evalcond[5]=((((-1.0)*r12*x10911))+((x10902*x10905))+(((-1.0)*cj2*sj1))+(((-1.0)*x10903*x10910))+(((-1.0)*sj2*x10904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
CheckValue<IkReal> x10913=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10912.value)+(((1.5707963267949)*(x10913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10914=IKsin(j4);
IkReal x10915=IKcos(j4);
IkReal x10916=(gconst4*r11);
IkReal x10917=((1.0)*cj1);
IkReal x10918=(gconst5*r10);
IkReal x10919=(gconst4*r01);
IkReal x10920=(gconst5*r00);
IkReal x10921=(gconst4*r21);
IkReal x10922=(gconst5*r20);
IkReal x10923=((1.0)*x10915);
IkReal x10924=((1.0)*x10914);
evalcond[0]=((((-1.0)*r22*x10923))+((x10914*x10921))+(((-1.0)*x10922*x10924)));
evalcond[1]=((((-1.0)*r12*x10923))+(((-1.0)*x10918*x10924))+((x10914*x10916)));
evalcond[2]=((((-1.0)*r02*x10924))+((x10915*x10920))+(((-1.0)*x10919*x10923)));
evalcond[3]=((-1.0)+(((-1.0)*x10920*x10924))+(((-1.0)*r02*x10923))+((x10914*x10919)));
evalcond[4]=((((-1.0)*r22*x10924))+((x10915*x10922))+((sj1*sj2))+(((-1.0)*x10921*x10923))+(((-1.0)*cj2*x10917)));
evalcond[5]=((((-1.0)*sj2*x10917))+(((-1.0)*r12*x10924))+(((-1.0)*cj2*sj1))+((x10915*x10918))+(((-1.0)*x10916*x10923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10925=((-1.0)*r21);
CheckValue<IkReal> x10928 = IKatan2WithCheck(IkReal(x10925),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10928.valid){
continue;
}
IkReal x10926=((1.0)*(x10928.value));
IkReal x10927=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10926)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10926)));
IkReal gconst4=(x10925*x10927);
IkReal gconst5=((1.0)*r20*x10927);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10929=((-1.0)*r21);
CheckValue<IkReal> x10932 = IKatan2WithCheck(IkReal(x10929),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10932.valid){
continue;
}
IkReal x10930=((1.0)*(x10932.value));
IkReal x10931=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10930)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10930)));
IkReal gconst4=(x10929*x10931);
IkReal gconst5=((1.0)*r20*x10931);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10933=((-1.0)*r21);
CheckValue<IkReal> x10936 = IKatan2WithCheck(IkReal(x10933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10936.valid){
continue;
}
IkReal x10934=((1.0)*(x10936.value));
IkReal x10935=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10934)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10934)));
IkReal gconst4=(x10933*x10935);
IkReal gconst5=((1.0)*r20*x10935);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10937=(gconst4*r01);
IkReal x10938=(gconst5*r00);
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(((((-1.0)*x10938))+x10937)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
CheckValue<IkReal> x10940=IKPowWithIntegerCheck(IKsign(((x10937*x10937)+(x10938*x10938)+(((-2.0)*x10937*x10938))+(r02*r02))),-1);
if(!x10940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10939.value)+(((1.5707963267949)*(x10940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10941=IKcos(j4);
IkReal x10942=IKsin(j4);
IkReal x10943=(gconst4*r11);
IkReal x10944=(gconst5*r10);
IkReal x10945=((1.0)*cj1);
IkReal x10946=(gconst5*r00);
IkReal x10947=(gconst5*r20);
IkReal x10948=((1.0)*x10941);
IkReal x10949=(gconst4*x10941);
IkReal x10950=((1.0)*x10942);
IkReal x10951=(gconst4*x10942);
evalcond[0]=(((r01*x10949))+((r02*x10942))+(((-1.0)*x10946*x10948)));
evalcond[1]=((((-1.0)*x10947*x10950))+(((-1.0)*r22*x10948))+((r21*x10951)));
evalcond[2]=(((x10942*x10943))+(((-1.0)*x10944*x10950))+(((-1.0)*r12*x10948)));
evalcond[3]=((-1.0)+(((-1.0)*x10946*x10950))+((r01*x10951))+(((-1.0)*r02*x10948)));
evalcond[4]=(((r21*x10949))+((sj1*sj2))+(((-1.0)*x10947*x10948))+((r22*x10942))+(((-1.0)*cj2*x10945)));
evalcond[5]=(((x10941*x10943))+((r12*x10942))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10945))+(((-1.0)*x10944*x10948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10952=((1.0)*gconst5);
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10952))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
CheckValue<IkReal> x10954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10952))+(((-1.0)*gconst4*r10)))),-1);
if(!x10954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10953.value)+(((1.5707963267949)*(x10954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10955=IKcos(j4);
IkReal x10956=IKsin(j4);
IkReal x10957=(gconst4*r11);
IkReal x10958=(gconst5*r10);
IkReal x10959=((1.0)*cj1);
IkReal x10960=(gconst5*r00);
IkReal x10961=(gconst5*r20);
IkReal x10962=((1.0)*x10955);
IkReal x10963=(gconst4*x10955);
IkReal x10964=((1.0)*x10956);
IkReal x10965=(gconst4*x10956);
evalcond[0]=(((r02*x10956))+(((-1.0)*x10960*x10962))+((r01*x10963)));
evalcond[1]=((((-1.0)*x10961*x10964))+(((-1.0)*r22*x10962))+((r21*x10965)));
evalcond[2]=(((x10956*x10957))+(((-1.0)*x10958*x10964))+(((-1.0)*r12*x10962)));
evalcond[3]=((-1.0)+(((-1.0)*x10960*x10964))+((r01*x10965))+(((-1.0)*r02*x10962)));
evalcond[4]=((((-1.0)*x10961*x10962))+(((-1.0)*cj2*x10959))+((r22*x10956))+((sj1*sj2))+((r21*x10963)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10955*x10957))+(((-1.0)*x10958*x10962))+(((-1.0)*sj2*x10959))+((r12*x10956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
CheckValue<IkReal> x10967=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10966.value)+(((1.5707963267949)*(x10967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10968=IKcos(j4);
IkReal x10969=IKsin(j4);
IkReal x10970=(gconst4*r11);
IkReal x10971=(gconst5*r10);
IkReal x10972=((1.0)*cj1);
IkReal x10973=(gconst5*r00);
IkReal x10974=(gconst5*r20);
IkReal x10975=((1.0)*x10968);
IkReal x10976=(gconst4*x10968);
IkReal x10977=((1.0)*x10969);
IkReal x10978=(gconst4*x10969);
evalcond[0]=((((-1.0)*x10973*x10975))+((r02*x10969))+((r01*x10976)));
evalcond[1]=((((-1.0)*r22*x10975))+((r21*x10978))+(((-1.0)*x10974*x10977)));
evalcond[2]=((((-1.0)*x10971*x10977))+((x10969*x10970))+(((-1.0)*r12*x10975)));
evalcond[3]=((-1.0)+(((-1.0)*x10973*x10977))+((r01*x10978))+(((-1.0)*r02*x10975)));
evalcond[4]=((((-1.0)*cj2*x10972))+((r22*x10969))+((sj1*sj2))+((r21*x10976))+(((-1.0)*x10974*x10975)));
evalcond[5]=((((-1.0)*x10971*x10975))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10972))+((r12*x10969))+((x10968*x10970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10979=((-1.0)*r21);
CheckValue<IkReal> x10982 = IKatan2WithCheck(IkReal(x10979),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10982.valid){
continue;
}
IkReal x10980=((1.0)*(x10982.value));
IkReal x10981=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10980)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10980)));
IkReal gconst4=(x10979*x10981);
IkReal gconst5=((1.0)*r20*x10981);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10983=((-1.0)*r21);
CheckValue<IkReal> x10986 = IKatan2WithCheck(IkReal(x10983),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10986.valid){
continue;
}
IkReal x10984=((1.0)*(x10986.value));
IkReal x10985=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10984)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10984)));
IkReal gconst4=(x10983*x10985);
IkReal gconst5=((1.0)*r20*x10985);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10987=((-1.0)*r21);
CheckValue<IkReal> x10990 = IKatan2WithCheck(IkReal(x10987),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10990.valid){
continue;
}
IkReal x10988=((1.0)*(x10990.value));
IkReal x10989=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10988)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10988)));
IkReal gconst4=(x10987*x10989);
IkReal gconst5=((1.0)*r20*x10989);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10991=(gconst4*r01);
IkReal x10992=(gconst5*r00);
CheckValue<IkReal> x10993=IKPowWithIntegerCheck(IKsign(((x10991*x10991)+(((-2.0)*x10991*x10992))+(r02*r02)+(x10992*x10992))),-1);
if(!x10993.valid){
continue;
}
CheckValue<IkReal> x10994 = IKatan2WithCheck(IkReal(((((-1.0)*x10992))+x10991)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10993.value)))+(x10994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10995=IKcos(j4);
IkReal x10996=IKsin(j4);
IkReal x10997=(gconst4*r11);
IkReal x10998=(gconst5*r10);
IkReal x10999=(gconst5*r00);
IkReal x11000=(gconst5*r20);
IkReal x11001=((1.0)*x10995);
IkReal x11002=(gconst4*x10995);
IkReal x11003=((1.0)*x10996);
IkReal x11004=(gconst4*x10996);
evalcond[0]=((((-1.0)*x10999*x11001))+((r01*x11002))+((r02*x10996)));
evalcond[1]=((((-1.0)*r22*x11001))+((r21*x11004))+(((-1.0)*x11000*x11003)));
evalcond[2]=(((x10996*x10997))+(((-1.0)*x10998*x11003))+(((-1.0)*r12*x11001)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11001))+(((-1.0)*x10999*x11003))+((r01*x11004)));
evalcond[4]=(((cj2*sj1))+((r22*x10996))+((cj1*sj2))+((r21*x11002))+(((-1.0)*x11000*x11001)));
evalcond[5]=(((r12*x10996))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10995*x10997))+(((-1.0)*x10998*x11001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11005=((1.0)*gconst5);
CheckValue<IkReal> x11006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11005))+(((-1.0)*gconst4*r10)))),-1);
if(!x11006.valid){
continue;
}
CheckValue<IkReal> x11007 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11006.value)))+(x11007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11008=IKcos(j4);
IkReal x11009=IKsin(j4);
IkReal x11010=(gconst4*r11);
IkReal x11011=(gconst5*r10);
IkReal x11012=(gconst5*r00);
IkReal x11013=(gconst5*r20);
IkReal x11014=((1.0)*x11008);
IkReal x11015=(gconst4*x11008);
IkReal x11016=((1.0)*x11009);
IkReal x11017=(gconst4*x11009);
evalcond[0]=(((r02*x11009))+(((-1.0)*x11012*x11014))+((r01*x11015)));
evalcond[1]=((((-1.0)*r22*x11014))+(((-1.0)*x11013*x11016))+((r21*x11017)));
evalcond[2]=((((-1.0)*x11011*x11016))+(((-1.0)*r12*x11014))+((x11009*x11010)));
evalcond[3]=((-1.0)+(((-1.0)*x11012*x11016))+(((-1.0)*r02*x11014))+((r01*x11017)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11013*x11014))+((cj1*sj2))+((r21*x11015))+((r22*x11009)));
evalcond[5]=((((-1.0)*x11011*x11014))+((x11008*x11010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
CheckValue<IkReal> x11019=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11018.value)+(((1.5707963267949)*(x11019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11020=IKcos(j4);
IkReal x11021=IKsin(j4);
IkReal x11022=(gconst4*r11);
IkReal x11023=(gconst5*r10);
IkReal x11024=(gconst5*r00);
IkReal x11025=(gconst5*r20);
IkReal x11026=((1.0)*x11020);
IkReal x11027=(gconst4*x11020);
IkReal x11028=((1.0)*x11021);
IkReal x11029=(gconst4*x11021);
evalcond[0]=(((r01*x11027))+((r02*x11021))+(((-1.0)*x11024*x11026)));
evalcond[1]=(((r21*x11029))+(((-1.0)*r22*x11026))+(((-1.0)*x11025*x11028)));
evalcond[2]=(((x11021*x11022))+(((-1.0)*x11023*x11028))+(((-1.0)*r12*x11026)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11026))+((r01*x11029))+(((-1.0)*x11024*x11028)));
evalcond[4]=(((cj2*sj1))+((r21*x11027))+((cj1*sj2))+((r22*x11021))+(((-1.0)*x11025*x11026)));
evalcond[5]=(((x11020*x11022))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11023*x11026))+((r12*x11021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11030=((-1.0)*r21);
CheckValue<IkReal> x11033 = IKatan2WithCheck(IkReal(x11030),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11033.valid){
continue;
}
IkReal x11031=((1.0)*(x11033.value));
IkReal x11032=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11031)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11031)));
IkReal gconst4=(x11030*x11032);
IkReal gconst5=((1.0)*r20*x11032);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11034=((-1.0)*r21);
CheckValue<IkReal> x11037 = IKatan2WithCheck(IkReal(x11034),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11037.valid){
continue;
}
IkReal x11035=((1.0)*(x11037.value));
IkReal x11036=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11035)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11035)));
IkReal gconst4=(x11034*x11036);
IkReal gconst5=((1.0)*r20*x11036);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11038=((-1.0)*r21);
CheckValue<IkReal> x11041 = IKatan2WithCheck(IkReal(x11038),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11041.valid){
continue;
}
IkReal x11039=((1.0)*(x11041.value));
IkReal x11040=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11039)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11039)));
IkReal gconst4=(x11038*x11040);
IkReal gconst5=((1.0)*r20*x11040);
IkReal x11042=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11046=IKPowWithIntegerCheck(x11042,-1);
if(!x11046.valid){
continue;
}
IkReal x11043=x11046.value;
IkReal x11044=((1.0)*x11043);
IkReal x11045=((((-1.0)*x11044*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11043))+(((-1.0)*x11044*(r01*r01)*(r21*r21))));
j4eval[0]=x11045;
j4eval[1]=r02;
j4eval[2]=x11042;
j4eval[3]=IKsign(x11045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11047=(gconst5*r00);
IkReal x11048=(gconst4*r01);
CheckValue<IkReal> x11049 = IKatan2WithCheck(IkReal((x11047+(((-1.0)*x11048)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11049.valid){
continue;
}
CheckValue<IkReal> x11050=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11047*x11047)))+(((-1.0)*(r02*r02)))+(((2.0)*x11047*x11048))+(((-1.0)*(x11048*x11048))))),-1);
if(!x11050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11049.value)+(((1.5707963267949)*(x11050.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11051=IKsin(j4);
IkReal x11052=IKcos(j4);
IkReal x11053=(gconst4*r11);
IkReal x11054=(gconst5*r10);
IkReal x11055=(gconst4*r01);
IkReal x11056=(gconst5*r00);
IkReal x11057=(gconst4*r21);
IkReal x11058=(gconst5*r20);
IkReal x11059=((1.0)*x11052);
IkReal x11060=((1.0)*x11051);
evalcond[0]=((((-1.0)*r22*x11059))+(((-1.0)*x11058*x11060))+((x11051*x11057)));
evalcond[1]=((((-1.0)*r12*x11059))+((x11051*x11053))+(((-1.0)*x11054*x11060)));
evalcond[2]=((((-1.0)*r02*x11060))+((x11052*x11056))+(((-1.0)*x11055*x11059)));
evalcond[3]=((-1.0)+((x11051*x11055))+(((-1.0)*x11056*x11060))+(((-1.0)*r02*x11059)));
evalcond[4]=((((-1.0)*r22*x11060))+((cj2*sj1))+((cj1*sj2))+((x11052*x11058))+(((-1.0)*x11057*x11059)));
evalcond[5]=(((x11052*x11054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11053*x11059))+(((-1.0)*r12*x11060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11061=((1.0)*gconst5);
CheckValue<IkReal> x11062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11061))+(((-1.0)*gconst4*r10)))),-1);
if(!x11062.valid){
continue;
}
CheckValue<IkReal> x11063 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11062.value)))+(x11063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11064=IKsin(j4);
IkReal x11065=IKcos(j4);
IkReal x11066=(gconst4*r11);
IkReal x11067=(gconst5*r10);
IkReal x11068=(gconst4*r01);
IkReal x11069=(gconst5*r00);
IkReal x11070=(gconst4*r21);
IkReal x11071=(gconst5*r20);
IkReal x11072=((1.0)*x11065);
IkReal x11073=((1.0)*x11064);
evalcond[0]=((((-1.0)*x11071*x11073))+((x11064*x11070))+(((-1.0)*r22*x11072)));
evalcond[1]=(((x11064*x11066))+(((-1.0)*x11067*x11073))+(((-1.0)*r12*x11072)));
evalcond[2]=(((x11065*x11069))+(((-1.0)*r02*x11073))+(((-1.0)*x11068*x11072)));
evalcond[3]=((-1.0)+((x11064*x11068))+(((-1.0)*r02*x11072))+(((-1.0)*x11069*x11073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11070*x11072))+((x11065*x11071))+(((-1.0)*r22*x11073)));
evalcond[5]=(((x11065*x11067))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11066*x11072))+(((-1.0)*r12*x11073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11074 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11074.valid){
continue;
}
CheckValue<IkReal> x11075=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11074.value)+(((1.5707963267949)*(x11075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11076=IKsin(j4);
IkReal x11077=IKcos(j4);
IkReal x11078=(gconst4*r11);
IkReal x11079=(gconst5*r10);
IkReal x11080=(gconst4*r01);
IkReal x11081=(gconst5*r00);
IkReal x11082=(gconst4*r21);
IkReal x11083=(gconst5*r20);
IkReal x11084=((1.0)*x11077);
IkReal x11085=((1.0)*x11076);
evalcond[0]=((((-1.0)*r22*x11084))+((x11076*x11082))+(((-1.0)*x11083*x11085)));
evalcond[1]=((((-1.0)*r12*x11084))+((x11076*x11078))+(((-1.0)*x11079*x11085)));
evalcond[2]=((((-1.0)*x11080*x11084))+(((-1.0)*r02*x11085))+((x11077*x11081)));
evalcond[3]=((-1.0)+(((-1.0)*x11081*x11085))+(((-1.0)*r02*x11084))+((x11076*x11080)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11082*x11084))+(((-1.0)*r22*x11085))+((x11077*x11083)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11078*x11084))+((x11077*x11079))+(((-1.0)*r12*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11086=gconst4*gconst4;
IkReal x11087=gconst5*gconst5;
IkReal x11088=(r01*r20);
IkReal x11089=(gconst4*sj3);
IkReal x11090=(r01*r21);
IkReal x11091=((1.0)*cj3);
IkReal x11092=(r00*r21);
IkReal x11093=(r00*r20);
IkReal x11094=(cj3*gconst4*gconst5);
IkReal x11095=((1.0)*x11087);
CheckValue<IkReal> x11096=IKPowWithIntegerCheck(IKsign((((x11092*x11094))+(((-1.0)*x11086*x11090*x11091))+((x11088*x11094))+(((-1.0)*r02*r22*x11091))+(((-1.0)*x11087*x11091*x11093)))),-1);
if(!x11096.valid){
continue;
}
CheckValue<IkReal> x11097 = IKatan2WithCheck(IkReal((((r00*r22*x11089))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11086*x11092))+((gconst5*x11089*x11090))+(((-1.0)*gconst5*x11089*x11093))+(((-1.0)*sj3*x11088*x11095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11096.value)))+(x11097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11098=IKsin(j4);
IkReal x11099=IKcos(j4);
IkReal x11100=(sj1*sj2);
IkReal x11101=(gconst5*sj3);
IkReal x11102=(gconst4*r11);
IkReal x11103=(gconst5*r10);
IkReal x11104=((1.0)*cj1);
IkReal x11105=(gconst4*r01);
IkReal x11106=(cj2*sj1);
IkReal x11107=(gconst5*r00);
IkReal x11108=(gconst4*sj3);
IkReal x11109=(cj3*gconst5);
IkReal x11110=(cj3*gconst4);
IkReal x11111=(gconst4*r21);
IkReal x11112=(cj2*x11104);
IkReal x11113=((1.0)*x11099);
IkReal x11114=((1.0)*x11098);
IkReal x11115=(cj3*x11098);
IkReal x11116=(cj3*x11099);
evalcond[0]=((((-1.0)*gconst5*r20*x11114))+(((-1.0)*r22*x11113))+((x11098*x11111)));
evalcond[1]=((((-1.0)*x11103*x11114))+(((-1.0)*r12*x11113))+((x11098*x11102)));
evalcond[2]=((-1.0)+(((-1.0)*x11107*x11114))+(((-1.0)*r02*x11113))+((x11098*x11105)));
evalcond[3]=(((x11105*x11116))+((r02*x11115))+(((-1.0)*cj3*x11107*x11113))+((r00*x11108))+((r01*x11101)));
evalcond[4]=((((-1.0)*r02*sj3*x11114))+(((-1.0)*sj3*x11105*x11113))+((r00*x11099*x11101))+((r00*x11110))+((r01*x11109)));
evalcond[5]=(((cj1*sj2))+x11106+((r21*x11101))+(((-1.0)*r20*x11109*x11113))+((r20*x11108))+((r21*x11099*x11110))+((r22*x11115)));
evalcond[6]=(((x11102*x11116))+((r10*x11108))+x11100+(((-1.0)*cj3*x11103*x11113))+((r11*x11101))+(((-1.0)*x11112))+((r12*x11115)));
evalcond[7]=(((r20*x11099*x11101))+x11100+(((-1.0)*r21*x11108*x11113))+((r21*x11109))+(((-1.0)*r22*sj3*x11114))+((r20*x11110))+(((-1.0)*x11112)));
evalcond[8]=((((-1.0)*x11106))+(((-1.0)*r12*sj3*x11114))+(((-1.0)*sj3*x11102*x11113))+((r10*x11110))+((r10*x11099*x11101))+(((-1.0)*sj2*x11104))+((r11*x11109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11117=((1.0)*gconst5);
CheckValue<IkReal> x11118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11117))+(((-1.0)*gconst4*r10)))),-1);
if(!x11118.valid){
continue;
}
CheckValue<IkReal> x11119 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11118.value)))+(x11119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11120=IKsin(j4);
IkReal x11121=IKcos(j4);
IkReal x11122=(sj1*sj2);
IkReal x11123=(gconst5*sj3);
IkReal x11124=(gconst4*r11);
IkReal x11125=(gconst5*r10);
IkReal x11126=((1.0)*cj1);
IkReal x11127=(gconst4*r01);
IkReal x11128=(cj2*sj1);
IkReal x11129=(gconst5*r00);
IkReal x11130=(gconst4*sj3);
IkReal x11131=(cj3*gconst5);
IkReal x11132=(cj3*gconst4);
IkReal x11133=(gconst4*r21);
IkReal x11134=(cj2*x11126);
IkReal x11135=((1.0)*x11121);
IkReal x11136=((1.0)*x11120);
IkReal x11137=(cj3*x11120);
IkReal x11138=(cj3*x11121);
evalcond[0]=(((x11120*x11133))+(((-1.0)*r22*x11135))+(((-1.0)*gconst5*r20*x11136)));
evalcond[1]=(((x11120*x11124))+(((-1.0)*x11125*x11136))+(((-1.0)*r12*x11135)));
evalcond[2]=((-1.0)+(((-1.0)*x11129*x11136))+((x11120*x11127))+(((-1.0)*r02*x11135)));
evalcond[3]=(((r02*x11137))+(((-1.0)*cj3*x11129*x11135))+((x11127*x11138))+((r01*x11123))+((r00*x11130)));
evalcond[4]=((((-1.0)*r02*sj3*x11136))+((r00*x11121*x11123))+(((-1.0)*sj3*x11127*x11135))+((r01*x11131))+((r00*x11132)));
evalcond[5]=(((r22*x11137))+((r21*x11123))+((r21*x11121*x11132))+((cj1*sj2))+x11128+((r20*x11130))+(((-1.0)*r20*x11131*x11135)));
evalcond[6]=(((x11124*x11138))+(((-1.0)*cj3*x11125*x11135))+x11122+((r10*x11130))+((r11*x11123))+(((-1.0)*x11134))+((r12*x11137)));
evalcond[7]=((((-1.0)*r21*x11130*x11135))+((r21*x11131))+x11122+(((-1.0)*r22*sj3*x11136))+((r20*x11132))+(((-1.0)*x11134))+((r20*x11121*x11123)));
evalcond[8]=((((-1.0)*x11128))+(((-1.0)*r12*sj3*x11136))+((r10*x11121*x11123))+((r10*x11132))+((r11*x11131))+(((-1.0)*sj2*x11126))+(((-1.0)*sj3*x11124*x11135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11139 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11139.valid){
continue;
}
CheckValue<IkReal> x11140=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11139.value)+(((1.5707963267949)*(x11140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11141=IKsin(j4);
IkReal x11142=IKcos(j4);
IkReal x11143=(sj1*sj2);
IkReal x11144=(gconst5*sj3);
IkReal x11145=(gconst4*r11);
IkReal x11146=(gconst5*r10);
IkReal x11147=((1.0)*cj1);
IkReal x11148=(gconst4*r01);
IkReal x11149=(cj2*sj1);
IkReal x11150=(gconst5*r00);
IkReal x11151=(gconst4*sj3);
IkReal x11152=(cj3*gconst5);
IkReal x11153=(cj3*gconst4);
IkReal x11154=(gconst4*r21);
IkReal x11155=(cj2*x11147);
IkReal x11156=((1.0)*x11142);
IkReal x11157=((1.0)*x11141);
IkReal x11158=(cj3*x11141);
IkReal x11159=(cj3*x11142);
evalcond[0]=((((-1.0)*gconst5*r20*x11157))+(((-1.0)*r22*x11156))+((x11141*x11154)));
evalcond[1]=(((x11141*x11145))+(((-1.0)*x11146*x11157))+(((-1.0)*r12*x11156)));
evalcond[2]=((-1.0)+(((-1.0)*x11150*x11157))+((x11141*x11148))+(((-1.0)*r02*x11156)));
evalcond[3]=(((r01*x11144))+((r00*x11151))+(((-1.0)*cj3*x11150*x11156))+((r02*x11158))+((x11148*x11159)));
evalcond[4]=(((r00*x11153))+((r01*x11152))+((r00*x11142*x11144))+(((-1.0)*sj3*x11148*x11156))+(((-1.0)*r02*sj3*x11157)));
evalcond[5]=(((r22*x11158))+((r21*x11144))+((cj1*sj2))+x11149+((r20*x11151))+(((-1.0)*r20*x11152*x11156))+((r21*x11142*x11153)));
evalcond[6]=(((r11*x11144))+x11143+((r12*x11158))+((r10*x11151))+(((-1.0)*cj3*x11146*x11156))+((x11145*x11159))+(((-1.0)*x11155)));
evalcond[7]=(((r21*x11152))+x11143+((r20*x11142*x11144))+((r20*x11153))+(((-1.0)*r22*sj3*x11157))+(((-1.0)*x11155))+(((-1.0)*r21*x11151*x11156)));
evalcond[8]=(((r10*x11142*x11144))+((r11*x11152))+(((-1.0)*r12*sj3*x11157))+(((-1.0)*x11149))+(((-1.0)*sj3*x11145*x11156))+((r10*x11153))+(((-1.0)*sj2*x11147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11160=((-1.0)*r21);
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(x11160),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
IkReal x11161=((1.0)*(x11163.value));
IkReal x11162=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11161)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11161)));
IkReal gconst4=(x11160*x11162);
IkReal gconst5=((1.0)*r20*x11162);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11164=((-1.0)*r21);
CheckValue<IkReal> x11167 = IKatan2WithCheck(IkReal(x11164),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11167.valid){
continue;
}
IkReal x11165=((1.0)*(x11167.value));
IkReal x11166=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11165)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11165)));
IkReal gconst4=(x11164*x11166);
IkReal gconst5=((1.0)*r20*x11166);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11168=((-1.0)*r21);
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(x11168),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
IkReal x11169=((1.0)*(x11171.value));
IkReal x11170=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11169)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11169)));
IkReal gconst4=(x11168*x11170);
IkReal gconst5=((1.0)*r20*x11170);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11172=((-1.0)*r21);
CheckValue<IkReal> x11175 = IKatan2WithCheck(IkReal(x11172),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11175.valid){
continue;
}
IkReal x11173=((1.0)*(x11175.value));
IkReal x11174=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11173)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11173)));
IkReal gconst4=(x11172*x11174);
IkReal gconst5=((1.0)*r20*x11174);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11176=((-1.0)*r21);
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal(x11176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
IkReal x11177=((1.0)*(x11179.value));
IkReal x11178=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11177)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11177)));
IkReal gconst4=(x11176*x11178);
IkReal gconst5=((1.0)*r20*x11178);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11180=((-1.0)*r21);
CheckValue<IkReal> x11183 = IKatan2WithCheck(IkReal(x11180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11183.valid){
continue;
}
IkReal x11181=((1.0)*(x11183.value));
IkReal x11182=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11181)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11181)));
IkReal gconst4=(x11180*x11182);
IkReal gconst5=((1.0)*r20*x11182);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11184=(gconst5*r00);
IkReal x11185=(gconst4*r01);
CheckValue<IkReal> x11186=IKPowWithIntegerCheck(IKsign(((x11184*x11184)+(((-2.0)*x11184*x11185))+(r02*r02)+(x11185*x11185))),-1);
if(!x11186.valid){
continue;
}
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal((x11184+(((-1.0)*x11185)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11186.value)))+(x11187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11188=IKsin(j4);
IkReal x11189=IKcos(j4);
IkReal x11190=(gconst4*r11);
IkReal x11191=(gconst5*r10);
IkReal x11192=(gconst4*r01);
IkReal x11193=(gconst5*r00);
IkReal x11194=(gconst4*r21);
IkReal x11195=(gconst5*r20);
IkReal x11196=((1.0)*x11189);
IkReal x11197=((1.0)*x11188);
evalcond[0]=((((-1.0)*x11195*x11197))+(((-1.0)*r22*x11196))+((x11188*x11194)));
evalcond[1]=((((-1.0)*r12*x11196))+(((-1.0)*x11191*x11197))+((x11188*x11190)));
evalcond[2]=((((-1.0)*r02*x11197))+((x11189*x11193))+(((-1.0)*x11192*x11196)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11196))+((x11188*x11192))+(((-1.0)*x11193*x11197)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11197))+((cj1*sj2))+(((-1.0)*x11190*x11196))+((x11189*x11191)));
evalcond[5]=((((-1.0)*r22*x11197))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11189*x11195))+(((-1.0)*x11194*x11196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11198=((1.0)*gconst5);
CheckValue<IkReal> x11199 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11199.valid){
continue;
}
CheckValue<IkReal> x11200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11198))+(((-1.0)*gconst4*r20)))),-1);
if(!x11200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11199.value)+(((1.5707963267949)*(x11200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11201=IKsin(j4);
IkReal x11202=IKcos(j4);
IkReal x11203=(gconst4*r11);
IkReal x11204=(gconst5*r10);
IkReal x11205=(gconst4*r01);
IkReal x11206=(gconst5*r00);
IkReal x11207=(gconst4*r21);
IkReal x11208=(gconst5*r20);
IkReal x11209=((1.0)*x11202);
IkReal x11210=((1.0)*x11201);
evalcond[0]=((((-1.0)*r22*x11209))+((x11201*x11207))+(((-1.0)*x11208*x11210)));
evalcond[1]=(((x11201*x11203))+(((-1.0)*r12*x11209))+(((-1.0)*x11204*x11210)));
evalcond[2]=(((x11202*x11206))+(((-1.0)*r02*x11210))+(((-1.0)*x11205*x11209)));
evalcond[3]=((1.0)+((x11201*x11205))+(((-1.0)*r02*x11209))+(((-1.0)*x11206*x11210)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11203*x11209))+((cj1*sj2))+((x11202*x11204))+(((-1.0)*r12*x11210)));
evalcond[5]=(((x11202*x11208))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11207*x11209))+(((-1.0)*r22*x11210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11211=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11211.valid){
continue;
}
CheckValue<IkReal> x11212 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11211.value)))+(x11212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11213=IKsin(j4);
IkReal x11214=IKcos(j4);
IkReal x11215=(gconst4*r11);
IkReal x11216=(gconst5*r10);
IkReal x11217=(gconst4*r01);
IkReal x11218=(gconst5*r00);
IkReal x11219=(gconst4*r21);
IkReal x11220=(gconst5*r20);
IkReal x11221=((1.0)*x11214);
IkReal x11222=((1.0)*x11213);
evalcond[0]=((((-1.0)*x11220*x11222))+((x11213*x11219))+(((-1.0)*r22*x11221)));
evalcond[1]=((((-1.0)*x11216*x11222))+((x11213*x11215))+(((-1.0)*r12*x11221)));
evalcond[2]=((((-1.0)*x11217*x11221))+((x11214*x11218))+(((-1.0)*r02*x11222)));
evalcond[3]=((1.0)+(((-1.0)*x11218*x11222))+((x11213*x11217))+(((-1.0)*r02*x11221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11215*x11221))+((x11214*x11216))+(((-1.0)*r12*x11222)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11219*x11221))+((x11214*x11220))+(((-1.0)*r22*x11222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11223=((-1.0)*r21);
CheckValue<IkReal> x11226 = IKatan2WithCheck(IkReal(x11223),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11226.valid){
continue;
}
IkReal x11224=((1.0)*(x11226.value));
IkReal x11225=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11224)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11224)));
IkReal gconst4=(x11223*x11225);
IkReal gconst5=((1.0)*r20*x11225);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11227=((-1.0)*r21);
CheckValue<IkReal> x11230 = IKatan2WithCheck(IkReal(x11227),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11230.valid){
continue;
}
IkReal x11228=((1.0)*(x11230.value));
IkReal x11229=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11228)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11228)));
IkReal gconst4=(x11227*x11229);
IkReal gconst5=((1.0)*r20*x11229);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11231=((-1.0)*r21);
CheckValue<IkReal> x11234 = IKatan2WithCheck(IkReal(x11231),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11234.valid){
continue;
}
IkReal x11232=((1.0)*(x11234.value));
IkReal x11233=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11232)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11232)));
IkReal gconst4=(x11231*x11233);
IkReal gconst5=((1.0)*r20*x11233);
IkReal x11235=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11239=IKPowWithIntegerCheck(x11235,-1);
if(!x11239.valid){
continue;
}
IkReal x11236=x11239.value;
IkReal x11237=((1.0)*x11236);
IkReal x11238=((((-2.0)*r00*r01*r20*r21*x11236))+(((-1.0)*(r02*r02)))+(((-1.0)*x11237*(r00*r00)*(r20*r20)))+(((-1.0)*x11237*(r01*r01)*(r21*r21))));
j4eval[0]=x11238;
j4eval[1]=IKsign(x11238);
j4eval[2]=r02;
j4eval[3]=x11235;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11240=(gconst4*r01);
IkReal x11241=(gconst5*r00);
CheckValue<IkReal> x11242 = IKatan2WithCheck(IkReal(((((-1.0)*x11241))+x11240)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11242.valid){
continue;
}
CheckValue<IkReal> x11243=IKPowWithIntegerCheck(IKsign(((((2.0)*x11240*x11241))+(((-1.0)*(x11241*x11241)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11240*x11240))))),-1);
if(!x11243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11242.value)+(((1.5707963267949)*(x11243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11244=IKcos(j4);
IkReal x11245=IKsin(j4);
IkReal x11246=(gconst4*r11);
IkReal x11247=(gconst5*r10);
IkReal x11248=(gconst5*r00);
IkReal x11249=(gconst5*r20);
IkReal x11250=((1.0)*x11244);
IkReal x11251=(gconst4*x11244);
IkReal x11252=((1.0)*x11245);
IkReal x11253=(gconst4*x11245);
evalcond[0]=(((r02*x11245))+(((-1.0)*x11248*x11250))+((r01*x11251)));
evalcond[1]=((((-1.0)*x11249*x11252))+((r21*x11253))+(((-1.0)*r22*x11250)));
evalcond[2]=((((-1.0)*x11247*x11252))+((x11245*x11246))+(((-1.0)*r12*x11250)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11250))+(((-1.0)*x11248*x11252))+((r01*x11253)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11244*x11246))+((r12*x11245))+(((-1.0)*x11247*x11250)));
evalcond[5]=(((r22*x11245))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11249*x11250))+((r21*x11251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11254=((1.0)*gconst5);
CheckValue<IkReal> x11255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11254))+(((-1.0)*gconst4*r20)))),-1);
if(!x11255.valid){
continue;
}
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11255.value)))+(x11256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11257=IKcos(j4);
IkReal x11258=IKsin(j4);
IkReal x11259=(gconst4*r11);
IkReal x11260=(gconst5*r10);
IkReal x11261=(gconst5*r00);
IkReal x11262=(gconst5*r20);
IkReal x11263=((1.0)*x11257);
IkReal x11264=(gconst4*x11257);
IkReal x11265=((1.0)*x11258);
IkReal x11266=(gconst4*x11258);
evalcond[0]=(((r02*x11258))+(((-1.0)*x11261*x11263))+((r01*x11264)));
evalcond[1]=(((r21*x11266))+(((-1.0)*r22*x11263))+(((-1.0)*x11262*x11265)));
evalcond[2]=(((x11258*x11259))+(((-1.0)*x11260*x11265))+(((-1.0)*r12*x11263)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11263))+(((-1.0)*x11261*x11265))+((r01*x11266)));
evalcond[4]=(((cj2*sj1))+((x11257*x11259))+(((-1.0)*x11260*x11263))+((cj1*sj2))+((r12*x11258)));
evalcond[5]=(((r22*x11258))+((r21*x11264))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11262*x11263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11267.valid){
continue;
}
CheckValue<IkReal> x11268 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11267.value)))+(x11268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11269=IKcos(j4);
IkReal x11270=IKsin(j4);
IkReal x11271=(gconst4*r11);
IkReal x11272=(gconst5*r10);
IkReal x11273=(gconst5*r00);
IkReal x11274=(gconst5*r20);
IkReal x11275=((1.0)*x11269);
IkReal x11276=(gconst4*x11269);
IkReal x11277=((1.0)*x11270);
IkReal x11278=(gconst4*x11270);
evalcond[0]=(((r01*x11276))+((r02*x11270))+(((-1.0)*x11273*x11275)));
evalcond[1]=((((-1.0)*x11274*x11277))+((r21*x11278))+(((-1.0)*r22*x11275)));
evalcond[2]=((((-1.0)*r12*x11275))+((x11270*x11271))+(((-1.0)*x11272*x11277)));
evalcond[3]=((1.0)+((r01*x11278))+(((-1.0)*r02*x11275))+(((-1.0)*x11273*x11277)));
evalcond[4]=(((cj2*sj1))+((r12*x11270))+((cj1*sj2))+((x11269*x11271))+(((-1.0)*x11272*x11275)));
evalcond[5]=(((r22*x11270))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11274*x11275))+((r21*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11279=((-1.0)*r21);
CheckValue<IkReal> x11282 = IKatan2WithCheck(IkReal(x11279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11282.valid){
continue;
}
IkReal x11280=((1.0)*(x11282.value));
IkReal x11281=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11280)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11280)));
IkReal gconst4=(x11279*x11281);
IkReal gconst5=((1.0)*r20*x11281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11283=((-1.0)*r21);
CheckValue<IkReal> x11286 = IKatan2WithCheck(IkReal(x11283),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11286.valid){
continue;
}
IkReal x11284=((1.0)*(x11286.value));
IkReal x11285=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11284)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11284)));
IkReal gconst4=(x11283*x11285);
IkReal gconst5=((1.0)*r20*x11285);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11287=((-1.0)*r21);
CheckValue<IkReal> x11290 = IKatan2WithCheck(IkReal(x11287),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11290.valid){
continue;
}
IkReal x11288=((1.0)*(x11290.value));
IkReal x11289=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11288)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11288)));
IkReal gconst4=(x11287*x11289);
IkReal gconst5=((1.0)*r20*x11289);
IkReal x11291=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11295=IKPowWithIntegerCheck(x11291,-1);
if(!x11295.valid){
continue;
}
IkReal x11292=x11295.value;
IkReal x11293=((1.0)*x11292);
IkReal x11294=((((-1.0)*x11293*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11292))+(((-1.0)*x11293*(r01*r01)*(r21*r21))));
j4eval[0]=x11294;
j4eval[1]=IKsign(x11294);
j4eval[2]=r02;
j4eval[3]=x11291;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11296=(gconst4*r01);
IkReal x11297=(gconst5*r00);
CheckValue<IkReal> x11298 = IKatan2WithCheck(IkReal((x11296+(((-1.0)*x11297)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11298.valid){
continue;
}
CheckValue<IkReal> x11299=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11297*x11297)))+(((2.0)*x11296*x11297))+(((-1.0)*(x11296*x11296))))),-1);
if(!x11299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11298.value)+(((1.5707963267949)*(x11299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11300=IKcos(j4);
IkReal x11301=IKsin(j4);
IkReal x11302=(gconst5*r10);
IkReal x11303=(gconst5*r00);
IkReal x11304=(gconst5*r20);
IkReal x11305=((1.0)*x11300);
IkReal x11306=(gconst4*x11301);
IkReal x11307=(gconst4*x11300);
IkReal x11308=((1.0)*x11301);
evalcond[0]=(((r02*x11301))+((r01*x11307))+(((-1.0)*x11303*x11305)));
evalcond[1]=((((-1.0)*x11304*x11308))+(((-1.0)*r22*x11305))+((r21*x11306)));
evalcond[2]=((((-1.0)*x11302*x11308))+((r11*x11306))+(((-1.0)*r12*x11305)));
evalcond[3]=((1.0)+((r01*x11306))+(((-1.0)*x11303*x11308))+(((-1.0)*r02*x11305)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11304*x11305))+((cj1*sj2))+((r21*x11307))+((r22*x11301)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x11301))+(((-1.0)*x11302*x11305))+((r11*x11307))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11309=((1.0)*gconst5);
CheckValue<IkReal> x11310 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11309))+(((-1.0)*gconst4*r20)))),-1);
if(!x11311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11310.value)+(((1.5707963267949)*(x11311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11312=IKcos(j4);
IkReal x11313=IKsin(j4);
IkReal x11314=(gconst5*r10);
IkReal x11315=(gconst5*r00);
IkReal x11316=(gconst5*r20);
IkReal x11317=((1.0)*x11312);
IkReal x11318=(gconst4*x11313);
IkReal x11319=(gconst4*x11312);
IkReal x11320=((1.0)*x11313);
evalcond[0]=(((r02*x11313))+(((-1.0)*x11315*x11317))+((r01*x11319)));
evalcond[1]=((((-1.0)*r22*x11317))+((r21*x11318))+(((-1.0)*x11316*x11320)));
evalcond[2]=(((r11*x11318))+(((-1.0)*r12*x11317))+(((-1.0)*x11314*x11320)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11317))+(((-1.0)*x11315*x11320))+((r01*x11318)));
evalcond[4]=(((cj2*sj1))+((r22*x11313))+((cj1*sj2))+((r21*x11319))+(((-1.0)*x11316*x11317)));
evalcond[5]=(((r11*x11319))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11314*x11317))+((r12*x11313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11321=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11321.valid){
continue;
}
CheckValue<IkReal> x11322 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11321.value)))+(x11322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11323=IKcos(j4);
IkReal x11324=IKsin(j4);
IkReal x11325=(gconst5*r10);
IkReal x11326=(gconst5*r00);
IkReal x11327=(gconst5*r20);
IkReal x11328=((1.0)*x11323);
IkReal x11329=(gconst4*x11324);
IkReal x11330=(gconst4*x11323);
IkReal x11331=((1.0)*x11324);
evalcond[0]=((((-1.0)*x11326*x11328))+((r02*x11324))+((r01*x11330)));
evalcond[1]=((((-1.0)*r22*x11328))+((r21*x11329))+(((-1.0)*x11327*x11331)));
evalcond[2]=((((-1.0)*x11325*x11331))+(((-1.0)*r12*x11328))+((r11*x11329)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11328))+((r01*x11329))+(((-1.0)*x11326*x11331)));
evalcond[4]=(((cj2*sj1))+((r22*x11324))+((cj1*sj2))+(((-1.0)*x11327*x11328))+((r21*x11330)));
evalcond[5]=(((r11*x11330))+(((-1.0)*x11325*x11328))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x11324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11332=((-1.0)*r21);
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(x11332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
IkReal x11333=((1.0)*(x11335.value));
IkReal x11334=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11333)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11333)));
IkReal gconst4=(x11332*x11334);
IkReal gconst5=((1.0)*r20*x11334);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11336=((-1.0)*r21);
CheckValue<IkReal> x11339 = IKatan2WithCheck(IkReal(x11336),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11339.valid){
continue;
}
IkReal x11337=((1.0)*(x11339.value));
IkReal x11338=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11337)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11337)));
IkReal gconst4=(x11336*x11338);
IkReal gconst5=((1.0)*r20*x11338);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11340=((-1.0)*r21);
CheckValue<IkReal> x11343 = IKatan2WithCheck(IkReal(x11340),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11343.valid){
continue;
}
IkReal x11341=((1.0)*(x11343.value));
IkReal x11342=x10134;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11341)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11341)));
IkReal gconst4=(x11340*x11342);
IkReal gconst5=((1.0)*r20*x11342);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11344=(gconst5*r00);
IkReal x11345=(gconst4*r01);
CheckValue<IkReal> x11346 = IKatan2WithCheck(IkReal((x11344+(((-1.0)*x11345)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11346.valid){
continue;
}
CheckValue<IkReal> x11347=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11344*x11345))+(x11344*x11344)+(x11345*x11345)+(r02*r02))),-1);
if(!x11347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11346.value)+(((1.5707963267949)*(x11347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11348=IKsin(j4);
IkReal x11349=IKcos(j4);
IkReal x11350=(gconst4*r11);
IkReal x11351=(gconst5*r10);
IkReal x11352=(gconst5*r00);
IkReal x11353=(gconst5*r20);
IkReal x11354=((1.0)*x11349);
IkReal x11355=(gconst4*x11348);
IkReal x11356=((1.0)*x11348);
evalcond[0]=((((-1.0)*x11353*x11356))+(((-1.0)*r22*x11354))+((r21*x11355)));
evalcond[1]=((((-1.0)*r12*x11354))+(((-1.0)*x11351*x11356))+((x11348*x11350)));
evalcond[2]=(((x11349*x11352))+(((-1.0)*gconst4*r01*x11354))+(((-1.0)*r02*x11356)));
evalcond[3]=((1.0)+((r01*x11355))+(((-1.0)*r02*x11354))+(((-1.0)*x11352*x11356)));
evalcond[4]=(((cj2*sj1))+((x11349*x11353))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11354))+(((-1.0)*r22*x11356)));
evalcond[5]=((((-1.0)*r12*x11356))+((x11349*x11351))+(((-1.0)*x11350*x11354))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11357=((1.0)*gconst5);
CheckValue<IkReal> x11358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11357))+(((-1.0)*gconst4*r20)))),-1);
if(!x11358.valid){
continue;
}
CheckValue<IkReal> x11359 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11358.value)))+(x11359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11360=IKsin(j4);
IkReal x11361=IKcos(j4);
IkReal x11362=(gconst4*r11);
IkReal x11363=(gconst5*r10);
IkReal x11364=(gconst5*r00);
IkReal x11365=(gconst5*r20);
IkReal x11366=((1.0)*x11361);
IkReal x11367=(gconst4*x11360);
IkReal x11368=((1.0)*x11360);
evalcond[0]=(((r21*x11367))+(((-1.0)*r22*x11366))+(((-1.0)*x11365*x11368)));
evalcond[1]=((((-1.0)*x11363*x11368))+(((-1.0)*r12*x11366))+((x11360*x11362)));
evalcond[2]=(((x11361*x11364))+(((-1.0)*gconst4*r01*x11366))+(((-1.0)*r02*x11368)));
evalcond[3]=((1.0)+((r01*x11367))+(((-1.0)*r02*x11366))+(((-1.0)*x11364*x11368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11368))+((x11361*x11365))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11366)));
evalcond[5]=((((-1.0)*x11362*x11366))+((x11361*x11363))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11368))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11369=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11369.valid){
continue;
}
CheckValue<IkReal> x11370 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11369.value)))+(x11370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11371=IKsin(j4);
IkReal x11372=IKcos(j4);
IkReal x11373=(gconst4*r11);
IkReal x11374=(gconst5*r10);
IkReal x11375=(gconst5*r00);
IkReal x11376=(gconst5*r20);
IkReal x11377=((1.0)*x11372);
IkReal x11378=(gconst4*x11371);
IkReal x11379=((1.0)*x11371);
evalcond[0]=(((r21*x11378))+(((-1.0)*r22*x11377))+(((-1.0)*x11376*x11379)));
evalcond[1]=((((-1.0)*x11374*x11379))+(((-1.0)*r12*x11377))+((x11371*x11373)));
evalcond[2]=((((-1.0)*gconst4*r01*x11377))+(((-1.0)*r02*x11379))+((x11372*x11375)));
evalcond[3]=((1.0)+(((-1.0)*x11375*x11379))+((r01*x11378))+(((-1.0)*r02*x11377)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11379))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11377))+((x11372*x11376)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11373*x11377))+(((-1.0)*r12*x11379))+((x11372*x11374))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11380=((-1.0)*r21);
IkReal x11381=((-1.0)*r20);
CheckValue<IkReal> x11383 = IKatan2WithCheck(IkReal(x11380),IkReal(x11381),IKFAST_ATAN2_MAGTHRESH);
if(!x11383.valid){
continue;
}
IkReal x11382=((1.0)*(x11383.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11382)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11381);
rxp0_2=(py*r00);
rxp1_0=(py*x11380);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11382)));
IkReal gconst4=x11380;
IkReal gconst5=((1.0)*r20);
IkReal x11384=((1.0)*r01*r21);
IkReal x11385=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11385))+(((-1.0)*x11384)));
j4eval[1]=((((-1.0)*cj3*x11384))+(((-1.0)*cj3*x11385)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11386=((-1.0)*r21);
IkReal x11387=((-1.0)*r20);
CheckValue<IkReal> x11389 = IKatan2WithCheck(IkReal(x11386),IkReal(x11387),IKFAST_ATAN2_MAGTHRESH);
if(!x11389.valid){
continue;
}
IkReal x11388=((1.0)*(x11389.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11388)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11387);
rxp0_2=(py*r00);
rxp1_0=(py*x11386);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11388)));
IkReal gconst4=x11386;
IkReal gconst5=((1.0)*r20);
IkReal x11390=((1.0)*r01*r21);
IkReal x11391=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11390))+(((-1.0)*x11391)));
j4eval[1]=(((sj3*x11391))+((sj3*x11390)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11392=((-1.0)*r21);
IkReal x11393=((-1.0)*r20);
CheckValue<IkReal> x11395 = IKatan2WithCheck(IkReal(x11392),IkReal(x11393),IKFAST_ATAN2_MAGTHRESH);
if(!x11395.valid){
continue;
}
IkReal x11394=((1.0)*(x11395.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11394)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11393);
rxp0_2=(py*r00);
rxp1_0=(py*x11392);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11394)));
IkReal gconst4=x11392;
IkReal gconst5=((1.0)*r20);
IkReal x11396=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11396))+(((-1.0)*r01*r21*x11396)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11397=((1.0)*gconst5);
CheckValue<IkReal> x11398=IKPowWithIntegerCheck(cj3,-1);
if(!x11398.valid){
continue;
}
CheckValue<IkReal> x11399=IKPowWithIntegerCheck(r12,-1);
if(!x11399.valid){
continue;
}
CheckValue<IkReal> x11400=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11397))+((cj3*gconst4*r01))),-1);
if(!x11400.valid){
continue;
}
if( IKabs(((x11398.value)*(x11399.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11400.value)*(((((-1.0)*r01*sj3*x11397))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11398.value)*(x11399.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11400.value)*(((((-1.0)*r01*sj3*x11397))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11398.value)*(x11399.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11400.value)*(((((-1.0)*r01*sj3*x11397))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11401=IKsin(j4);
IkReal x11402=IKcos(j4);
IkReal x11403=(cj2*sj1);
IkReal x11404=(cj1*sj2);
IkReal x11405=(sj1*sj2);
IkReal x11406=(gconst5*sj3);
IkReal x11407=(gconst5*r00);
IkReal x11408=(cj3*gconst5);
IkReal x11409=(gconst4*sj3);
IkReal x11410=(cj3*gconst4);
IkReal x11411=(cj1*cj2);
IkReal x11412=((1.0)*x11401);
IkReal x11413=(gconst4*x11401);
IkReal x11414=((1.0)*x11402);
IkReal x11415=(x11404+x11403);
IkReal x11416=(x11402*x11406);
IkReal x11417=(x11402*x11410);
evalcond[0]=((-1.0)*r12*x11402);
evalcond[1]=((((-1.0)*gconst5*r20*x11412))+((r21*x11413)));
evalcond[2]=(x11411+((cj3*r12*x11401))+(((-1.0)*x11405)));
evalcond[3]=(x11415+(((-1.0)*r12*sj3*x11412)));
evalcond[4]=((1.0)+((r01*x11413))+(((-1.0)*x11407*x11412)));
evalcond[5]=(((r01*x11417))+(((-1.0)*cj3*x11407*x11414))+((r01*x11406))+((r00*x11409)));
evalcond[6]=(((r00*x11410))+((r00*x11416))+(((-1.0)*r01*x11409*x11414))+((r01*x11408)));
evalcond[7]=((((-1.0)*r20*x11408*x11414))+((r21*x11406))+x11415+((r21*x11417))+((r20*x11409)));
evalcond[8]=(((r21*x11408))+x11405+(((-1.0)*x11411))+(((-1.0)*r21*x11409*x11414))+((r20*x11410))+((r20*x11416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11418=((1.0)*gconst4);
IkReal x11419=(gconst5*r00);
CheckValue<IkReal> x11420=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11419))),-1);
if(!x11420.valid){
continue;
}
CheckValue<IkReal> x11421=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11418))+((sj3*x11419))),-1);
if(!x11421.valid){
continue;
}
if( IKabs(((-1.0)*(x11420.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11421.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11418)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11420.value)))+IKsqr(((x11421.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11418))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11420.value)), ((x11421.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11418))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11422=IKsin(j4);
IkReal x11423=IKcos(j4);
IkReal x11424=(cj2*sj1);
IkReal x11425=(cj1*sj2);
IkReal x11426=(sj1*sj2);
IkReal x11427=(gconst5*sj3);
IkReal x11428=(gconst5*r00);
IkReal x11429=(cj3*gconst5);
IkReal x11430=(gconst4*sj3);
IkReal x11431=(cj3*gconst4);
IkReal x11432=(cj1*cj2);
IkReal x11433=((1.0)*x11422);
IkReal x11434=(gconst4*x11422);
IkReal x11435=((1.0)*x11423);
IkReal x11436=(x11425+x11424);
IkReal x11437=(x11423*x11427);
IkReal x11438=(x11423*x11431);
evalcond[0]=((-1.0)*r12*x11423);
evalcond[1]=(((r21*x11434))+(((-1.0)*gconst5*r20*x11433)));
evalcond[2]=(x11432+((cj3*r12*x11422))+(((-1.0)*x11426)));
evalcond[3]=(x11436+(((-1.0)*r12*sj3*x11433)));
evalcond[4]=((1.0)+(((-1.0)*x11428*x11433))+((r01*x11434)));
evalcond[5]=((((-1.0)*cj3*x11428*x11435))+((r01*x11438))+((r01*x11427))+((r00*x11430)));
evalcond[6]=(((r01*x11429))+((r00*x11431))+((r00*x11437))+(((-1.0)*r01*x11430*x11435)));
evalcond[7]=(((r20*x11430))+(((-1.0)*r20*x11429*x11435))+x11436+((r21*x11427))+((r21*x11438)));
evalcond[8]=(((r20*x11431))+((r20*x11437))+x11426+((r21*x11429))+(((-1.0)*x11432))+(((-1.0)*r21*x11430*x11435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11439=((1.0)*gconst5);
IkReal x11440=(gconst4*r01);
CheckValue<IkReal> x11441=IKPowWithIntegerCheck((x11440+(((-1.0)*r00*x11439))),-1);
if(!x11441.valid){
continue;
}
CheckValue<IkReal> x11442=IKPowWithIntegerCheck((((cj3*x11440))+(((-1.0)*cj3*r00*x11439))),-1);
if(!x11442.valid){
continue;
}
if( IKabs(((-1.0)*(x11441.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11442.value)*(((((-1.0)*r01*sj3*x11439))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11441.value)))+IKsqr(((x11442.value)*(((((-1.0)*r01*sj3*x11439))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11441.value)), ((x11442.value)*(((((-1.0)*r01*sj3*x11439))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11443=IKsin(j4);
IkReal x11444=IKcos(j4);
IkReal x11445=(cj2*sj1);
IkReal x11446=(cj1*sj2);
IkReal x11447=(sj1*sj2);
IkReal x11448=(gconst5*sj3);
IkReal x11449=(gconst5*r00);
IkReal x11450=(cj3*gconst5);
IkReal x11451=(gconst4*sj3);
IkReal x11452=(cj3*gconst4);
IkReal x11453=(cj1*cj2);
IkReal x11454=((1.0)*x11443);
IkReal x11455=(gconst4*x11443);
IkReal x11456=((1.0)*x11444);
IkReal x11457=(x11445+x11446);
IkReal x11458=(x11444*x11448);
IkReal x11459=(x11444*x11452);
evalcond[0]=((-1.0)*r12*x11444);
evalcond[1]=(((r21*x11455))+(((-1.0)*gconst5*r20*x11454)));
evalcond[2]=((((-1.0)*x11447))+((cj3*r12*x11443))+x11453);
evalcond[3]=(x11457+(((-1.0)*r12*sj3*x11454)));
evalcond[4]=((1.0)+(((-1.0)*x11449*x11454))+((r01*x11455)));
evalcond[5]=((((-1.0)*cj3*x11449*x11456))+((r01*x11459))+((r00*x11451))+((r01*x11448)));
evalcond[6]=(((r01*x11450))+(((-1.0)*r01*x11451*x11456))+((r00*x11452))+((r00*x11458)));
evalcond[7]=(x11457+((r20*x11451))+(((-1.0)*r20*x11450*x11456))+((r21*x11459))+((r21*x11448)));
evalcond[8]=(x11447+((r20*x11452))+((r20*x11458))+((r21*x11450))+(((-1.0)*x11453))+(((-1.0)*r21*x11451*x11456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11460=gconst4*gconst4;
IkReal x11461=gconst5*gconst5;
IkReal x11462=(r01*r20);
IkReal x11463=(gconst4*sj3);
IkReal x11464=(r01*r21);
IkReal x11465=((1.0)*cj3);
IkReal x11466=(r00*r21);
IkReal x11467=(r00*r20);
IkReal x11468=(cj3*gconst4*gconst5);
IkReal x11469=((1.0)*x11461);
CheckValue<IkReal> x11470=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11460*x11464*x11465))+(((-1.0)*x11461*x11465*x11467))+((x11466*x11468))+(((-1.0)*r02*r22*x11465))+((x11462*x11468)))),-1);
if(!x11470.valid){
continue;
}
CheckValue<IkReal> x11471 = IKatan2WithCheck(IkReal((((r00*r22*x11463))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11463*x11464))+((sj3*x11460*x11466))+(((-1.0)*sj3*x11462*x11469))+(((-1.0)*gconst5*x11463*x11467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11470.value)))+(x11471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11472=IKsin(j4);
IkReal x11473=IKcos(j4);
IkReal x11474=(cj2*sj1);
IkReal x11475=(cj1*sj2);
IkReal x11476=(gconst5*sj3);
IkReal x11477=(gconst4*r11);
IkReal x11478=(sj1*sj2);
IkReal x11479=(gconst5*r10);
IkReal x11480=(cj1*cj2);
IkReal x11481=(gconst4*r01);
IkReal x11482=(gconst5*r00);
IkReal x11483=(gconst4*sj3);
IkReal x11484=(cj3*gconst5);
IkReal x11485=(cj3*gconst4);
IkReal x11486=(gconst4*r21);
IkReal x11487=((1.0)*x11473);
IkReal x11488=((1.0)*x11472);
IkReal x11489=(cj3*x11472);
IkReal x11490=(cj3*x11473);
IkReal x11491=(x11474+x11475);
evalcond[0]=((((-1.0)*r22*x11487))+(((-1.0)*gconst5*r20*x11488))+((x11472*x11486)));
evalcond[1]=((((-1.0)*r12*x11487))+((x11472*x11477))+(((-1.0)*x11479*x11488)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11487))+(((-1.0)*x11482*x11488))+((x11472*x11481)));
evalcond[3]=((((-1.0)*cj3*x11482*x11487))+((r00*x11483))+((r02*x11489))+((x11481*x11490))+((r01*x11476)));
evalcond[4]=((((-1.0)*r02*sj3*x11488))+(((-1.0)*sj3*x11481*x11487))+((r00*x11485))+((r01*x11484))+((r00*x11473*x11476)));
evalcond[5]=(((r20*x11483))+x11491+((r22*x11489))+((r21*x11473*x11485))+(((-1.0)*r20*x11484*x11487))+((r21*x11476)));
evalcond[6]=((((-1.0)*x11478))+x11480+((r11*x11476))+((x11477*x11490))+(((-1.0)*cj3*x11479*x11487))+((r12*x11489))+((r10*x11483)));
evalcond[7]=(x11491+((r10*x11473*x11476))+((r11*x11484))+(((-1.0)*sj3*x11477*x11487))+((r10*x11485))+(((-1.0)*r12*sj3*x11488)));
evalcond[8]=(((r20*x11485))+x11478+(((-1.0)*r22*sj3*x11488))+(((-1.0)*x11480))+(((-1.0)*r21*x11483*x11487))+((r20*x11473*x11476))+((r21*x11484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11492=((1.0)*gconst5);
CheckValue<IkReal> x11493 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11492))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11493.valid){
continue;
}
CheckValue<IkReal> x11494=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x11492)))),-1);
if(!x11494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11493.value)+(((1.5707963267949)*(x11494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11495=IKsin(j4);
IkReal x11496=IKcos(j4);
IkReal x11497=(cj2*sj1);
IkReal x11498=(cj1*sj2);
IkReal x11499=(gconst5*sj3);
IkReal x11500=(gconst4*r11);
IkReal x11501=(sj1*sj2);
IkReal x11502=(gconst5*r10);
IkReal x11503=(cj1*cj2);
IkReal x11504=(gconst4*r01);
IkReal x11505=(gconst5*r00);
IkReal x11506=(gconst4*sj3);
IkReal x11507=(cj3*gconst5);
IkReal x11508=(cj3*gconst4);
IkReal x11509=(gconst4*r21);
IkReal x11510=((1.0)*x11496);
IkReal x11511=((1.0)*x11495);
IkReal x11512=(cj3*x11495);
IkReal x11513=(cj3*x11496);
IkReal x11514=(x11498+x11497);
evalcond[0]=((((-1.0)*r22*x11510))+((x11495*x11509))+(((-1.0)*gconst5*r20*x11511)));
evalcond[1]=((((-1.0)*x11502*x11511))+(((-1.0)*r12*x11510))+((x11495*x11500)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11510))+(((-1.0)*x11505*x11511))+((x11495*x11504)));
evalcond[3]=((((-1.0)*cj3*x11505*x11510))+((x11504*x11513))+((r00*x11506))+((r02*x11512))+((r01*x11499)));
evalcond[4]=((((-1.0)*sj3*x11504*x11510))+((r00*x11496*x11499))+((r00*x11508))+((r01*x11507))+(((-1.0)*r02*sj3*x11511)));
evalcond[5]=(x11514+((r21*x11499))+((r21*x11496*x11508))+(((-1.0)*r20*x11507*x11510))+((r22*x11512))+((r20*x11506)));
evalcond[6]=(x11503+((r11*x11499))+((r10*x11506))+(((-1.0)*x11501))+((r12*x11512))+((x11500*x11513))+(((-1.0)*cj3*x11502*x11510)));
evalcond[7]=(((r10*x11496*x11499))+x11514+((r11*x11507))+(((-1.0)*r12*sj3*x11511))+((r10*x11508))+(((-1.0)*sj3*x11500*x11510)));
evalcond[8]=(x11501+((r21*x11507))+(((-1.0)*r22*sj3*x11511))+((r20*x11496*x11499))+(((-1.0)*x11503))+((r20*x11508))+(((-1.0)*r21*x11506*x11510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11515=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11515.valid){
continue;
}
CheckValue<IkReal> x11516 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11515.value)))+(x11516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11517=IKsin(j4);
IkReal x11518=IKcos(j4);
IkReal x11519=(cj2*sj1);
IkReal x11520=(cj1*sj2);
IkReal x11521=(gconst5*sj3);
IkReal x11522=(gconst4*r11);
IkReal x11523=(sj1*sj2);
IkReal x11524=(gconst5*r10);
IkReal x11525=(cj1*cj2);
IkReal x11526=(gconst4*r01);
IkReal x11527=(gconst5*r00);
IkReal x11528=(gconst4*sj3);
IkReal x11529=(cj3*gconst5);
IkReal x11530=(cj3*gconst4);
IkReal x11531=(gconst4*r21);
IkReal x11532=((1.0)*x11518);
IkReal x11533=((1.0)*x11517);
IkReal x11534=(cj3*x11517);
IkReal x11535=(cj3*x11518);
IkReal x11536=(x11520+x11519);
evalcond[0]=((((-1.0)*gconst5*r20*x11533))+((x11517*x11531))+(((-1.0)*r22*x11532)));
evalcond[1]=((((-1.0)*r12*x11532))+((x11517*x11522))+(((-1.0)*x11524*x11533)));
evalcond[2]=((1.0)+((x11517*x11526))+(((-1.0)*x11527*x11533))+(((-1.0)*r02*x11532)));
evalcond[3]=((((-1.0)*cj3*x11527*x11532))+((r01*x11521))+((r00*x11528))+((x11526*x11535))+((r02*x11534)));
evalcond[4]=((((-1.0)*r02*sj3*x11533))+((r00*x11530))+((r01*x11529))+(((-1.0)*sj3*x11526*x11532))+((r00*x11518*x11521)));
evalcond[5]=(((r22*x11534))+x11536+((r21*x11521))+((r20*x11528))+(((-1.0)*r20*x11529*x11532))+((r21*x11518*x11530)));
evalcond[6]=(x11525+((r12*x11534))+((r11*x11521))+((r10*x11528))+(((-1.0)*x11523))+(((-1.0)*cj3*x11524*x11532))+((x11522*x11535)));
evalcond[7]=(((r10*x11518*x11521))+(((-1.0)*r12*sj3*x11533))+x11536+((r11*x11529))+(((-1.0)*sj3*x11522*x11532))+((r10*x11530)));
evalcond[8]=(x11523+((r21*x11529))+((r20*x11530))+(((-1.0)*r22*sj3*x11533))+((r20*x11518*x11521))+(((-1.0)*x11525))+(((-1.0)*r21*x11528*x11532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11537=((-1.0)*r21);
IkReal x11538=((-1.0)*px);
CheckValue<IkReal> x11540 = IKatan2WithCheck(IkReal(x11537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11540.valid){
continue;
}
IkReal x11539=((1.0)*(x11540.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11539)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11538);
rxp1_1=(px*r21);
rxp1_2=(r11*x11538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11539)));
IkReal gconst4=x11537;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11541=((-1.0)*r21);
IkReal x11542=((-1.0)*px);
CheckValue<IkReal> x11544 = IKatan2WithCheck(IkReal(x11541),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11544.valid){
continue;
}
IkReal x11543=((1.0)*(x11544.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11543)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11542);
rxp1_1=(px*r21);
rxp1_2=(r11*x11542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11543)));
IkReal gconst4=x11541;
IkReal gconst5=((1.0)*r20);
IkReal x11545=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11545*(r21*r21)))+((x11545*(r10*r10)))+(((-1.0)*x11545)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11546=((-1.0)*r21);
IkReal x11547=((-1.0)*px);
CheckValue<IkReal> x11549 = IKatan2WithCheck(IkReal(x11546),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11549.valid){
continue;
}
IkReal x11548=((1.0)*(x11549.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11548)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11547);
rxp1_1=(px*r21);
rxp1_2=(r11*x11547);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11548)));
IkReal gconst4=x11546;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11550=((-1.0)*r21);
IkReal x11551=((-1.0)*px);
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(x11550),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
IkReal x11552=((1.0)*(x11553.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11552)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11551);
rxp1_1=(px*r21);
rxp1_2=(r11*x11551);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11552)));
IkReal gconst4=x11550;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11554=((-1.0)*r21);
IkReal x11555=((-1.0)*px);
CheckValue<IkReal> x11557 = IKatan2WithCheck(IkReal(x11554),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11557.valid){
continue;
}
IkReal x11556=((1.0)*(x11557.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11556)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11555);
rxp1_1=(px*r21);
rxp1_2=(r11*x11555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11556)));
IkReal gconst4=x11554;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11558=((-1.0)*r21);
IkReal x11559=((-1.0)*px);
CheckValue<IkReal> x11561 = IKatan2WithCheck(IkReal(x11558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11561.valid){
continue;
}
IkReal x11560=((1.0)*(x11561.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11560)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11559);
rxp1_1=(px*r21);
rxp1_2=(r11*x11559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11560)));
IkReal gconst4=x11558;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11564=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11564.valid){
continue;
}
IkReal x11562=x11564.value;
IkReal x11563=(sj0*x11562);
cj4array[0]=(((cj1*sj2*x11563))+((cj2*sj1*x11563)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11565=IKsin(j4);
IkReal x11566=IKcos(j4);
IkReal x11567=(gconst5*r20);
IkReal x11568=(gconst4*x11565);
IkReal x11569=((1.0)*x11566);
IkReal x11570=((1.0)*x11565);
evalcond[0]=((-1.0)*r02*x11565);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11569)));
evalcond[2]=((((-1.0)*x11567*x11570))+((r21*x11568)));
evalcond[3]=((((-1.0)*gconst5*r10*x11570))+((r11*x11568)));
evalcond[4]=(((x11566*x11567))+(((-1.0)*gconst4*r21*x11569))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11572=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11572.valid){
continue;
}
IkReal x11571=x11572.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11571))+((cj1*cj2*x11571)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11573=IKsin(j4);
IkReal x11574=IKcos(j4);
IkReal x11575=(gconst5*r10);
IkReal x11576=((1.0)*sj0);
IkReal x11577=(gconst4*x11573);
IkReal x11578=((1.0)*x11574);
IkReal x11579=((1.0)*x11573);
evalcond[0]=((-1.0)*r02*x11573);
evalcond[1]=((((-1.0)*r02*x11578))+(((-1.0)*x11576)));
evalcond[2]=((((-1.0)*gconst5*r20*x11579))+((r21*x11577)));
evalcond[3]=(((r11*x11577))+(((-1.0)*x11575*x11579)));
evalcond[4]=(((x11574*x11575))+(((-1.0)*cj2*sj1*x11576))+(((-1.0)*cj1*sj2*x11576))+(((-1.0)*gconst4*r11*x11578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11580=IKPowWithIntegerCheck(r02,-1);
if(!x11580.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11580.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11581=IKsin(j4);
IkReal x11582=IKcos(j4);
IkReal x11583=((1.0)*sj0);
IkReal x11584=(gconst5*x11582);
IkReal x11585=(gconst4*x11581);
IkReal x11586=((1.0)*gconst4*x11582);
IkReal x11587=((1.0)*gconst5*x11581);
evalcond[0]=((-1.0)*r02*x11581);
evalcond[1]=(((r21*x11585))+(((-1.0)*r20*x11587)));
evalcond[2]=((((-1.0)*r10*x11587))+((r11*x11585)));
evalcond[3]=(((r20*x11584))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11586)));
evalcond[4]=((((-1.0)*cj2*sj1*x11583))+(((-1.0)*cj1*sj2*x11583))+((r10*x11584))+(((-1.0)*r11*x11586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11588=((-1.0)*r21);
IkReal x11589=((-1.0)*px);
CheckValue<IkReal> x11591 = IKatan2WithCheck(IkReal(x11588),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11591.valid){
continue;
}
IkReal x11590=((1.0)*(x11591.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11590)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11589);
rxp1_1=(px*r21);
rxp1_2=(r11*x11589);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11590)));
IkReal gconst4=x11588;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11592=((-1.0)*r21);
IkReal x11593=((-1.0)*px);
CheckValue<IkReal> x11595 = IKatan2WithCheck(IkReal(x11592),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11595.valid){
continue;
}
IkReal x11594=((1.0)*(x11595.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11594)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11593);
rxp1_1=(px*r21);
rxp1_2=(r11*x11593);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11594)));
IkReal gconst4=x11592;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11596=((-1.0)*r21);
IkReal x11597=((-1.0)*px);
CheckValue<IkReal> x11599 = IKatan2WithCheck(IkReal(x11596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11599.valid){
continue;
}
IkReal x11598=((1.0)*(x11599.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11598)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11597);
rxp1_1=(px*r21);
rxp1_2=(r11*x11597);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11598)));
IkReal gconst4=x11596;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11602=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11602.valid){
continue;
}
IkReal x11600=x11602.value;
IkReal x11601=(sj0*x11600);
cj4array[0]=(((cj2*sj1*x11601))+((cj1*sj2*x11601)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11603=IKsin(j4);
IkReal x11604=IKcos(j4);
IkReal x11605=(gconst5*r20);
IkReal x11606=(gconst4*x11603);
IkReal x11607=((1.0)*x11604);
IkReal x11608=((1.0)*x11603);
evalcond[0]=(r02*x11603);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11607)));
evalcond[2]=((((-1.0)*x11605*x11608))+((r21*x11606)));
evalcond[3]=((((-1.0)*gconst5*r10*x11608))+((r11*x11606)));
evalcond[4]=((((-1.0)*x11605*x11607))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11610=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11610.valid){
continue;
}
IkReal x11609=x11610.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11609))+((cj1*cj2*x11609)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11611=IKsin(j4);
IkReal x11612=IKcos(j4);
IkReal x11613=(gconst4*r11);
IkReal x11614=((1.0)*sj0);
IkReal x11615=(gconst5*r10);
IkReal x11616=((1.0)*x11612);
IkReal x11617=((1.0)*x11611);
evalcond[0]=(r02*x11611);
evalcond[1]=((((-1.0)*x11614))+(((-1.0)*r02*x11616)));
evalcond[2]=(((gconst4*r21*x11611))+(((-1.0)*gconst5*r20*x11617)));
evalcond[3]=(((x11611*x11613))+(((-1.0)*x11615*x11617)));
evalcond[4]=(((x11612*x11613))+(((-1.0)*cj1*sj2*x11614))+(((-1.0)*cj2*sj1*x11614))+(((-1.0)*x11615*x11616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11618=IKPowWithIntegerCheck(r02,-1);
if(!x11618.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11618.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11619=IKsin(j4);
IkReal x11620=IKcos(j4);
IkReal x11621=(gconst4*r11);
IkReal x11622=((1.0)*cj1);
IkReal x11623=(gconst4*r21);
IkReal x11624=((1.0)*gconst5*x11620);
IkReal x11625=((1.0)*gconst5*x11619);
evalcond[0]=(r02*x11619);
evalcond[1]=(((x11619*x11623))+(((-1.0)*r20*x11625)));
evalcond[2]=((((-1.0)*r10*x11625))+((x11619*x11621)));
evalcond[3]=((((-1.0)*cj2*x11622))+((sj1*sj2))+(((-1.0)*r20*x11624))+((x11620*x11623)));
evalcond[4]=((((-1.0)*r10*x11624))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11622))+((x11620*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11627=IKPowWithIntegerCheck(r02,-1);
if(!x11627.valid){
continue;
}
IkReal x11626=x11627.value;
CheckValue<IkReal> x11628=IKPowWithIntegerCheck(cj3,-1);
if(!x11628.valid){
continue;
}
if( IKabs((x11626*(x11628.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11626)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11626*(x11628.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11626))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11626*(x11628.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11626));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11629=IKsin(j4);
IkReal x11630=IKcos(j4);
IkReal x11631=(gconst5*sj3);
IkReal x11632=(gconst4*r11);
IkReal x11633=(sj1*sj2);
IkReal x11634=((1.0)*gconst5);
IkReal x11635=(cj2*sj1);
IkReal x11636=((1.0)*sj0);
IkReal x11637=((1.0)*cj0);
IkReal x11638=(gconst4*r21);
IkReal x11639=(cj1*sj2);
IkReal x11640=(cj3*gconst4);
IkReal x11641=(gconst4*sj3);
IkReal x11642=(cj3*gconst5);
IkReal x11643=(r20*x11630);
IkReal x11644=((1.0)*cj1*cj2);
IkReal x11645=(r10*x11630);
IkReal x11646=(cj3*x11630);
IkReal x11647=(r02*x11629);
IkReal x11648=((1.0)*sj3*x11630);
evalcond[0]=((((-1.0)*x11636))+(((-1.0)*r02*x11630)));
evalcond[1]=((((-1.0)*r20*x11629*x11634))+((x11629*x11638)));
evalcond[2]=((((-1.0)*r10*x11629*x11634))+cj0+((x11629*x11632)));
evalcond[3]=(((cj3*x11647))+(((-1.0)*cj1*cj2*x11637))+((cj0*x11633)));
evalcond[4]=((((-1.0)*sj3*x11647))+(((-1.0)*x11637*x11639))+(((-1.0)*x11635*x11637)));
evalcond[5]=(x11639+x11635+((r21*x11631))+((r20*x11641))+((x11638*x11646))+(((-1.0)*cj3*x11634*x11643)));
evalcond[6]=(x11633+(((-1.0)*x11638*x11648))+((r21*x11642))+((x11631*x11643))+((r20*x11640))+(((-1.0)*x11644)));
evalcond[7]=(((r11*x11631))+((r10*x11641))+(((-1.0)*cj1*cj2*x11636))+((sj0*x11633))+((x11632*x11646))+(((-1.0)*cj3*x11634*x11645)));
evalcond[8]=(((r11*x11642))+((r10*x11640))+(((-1.0)*x11636*x11639))+((x11631*x11645))+(((-1.0)*x11632*x11648))+(((-1.0)*x11635*x11636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11649=((1.0)*gconst5);
CheckValue<IkReal> x11650=IKPowWithIntegerCheck(((((-1.0)*r10*x11649))+((gconst4*r11))),-1);
if(!x11650.valid){
continue;
}
CheckValue<IkReal> x11651=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11649))+((cj3*gconst4*r21))),-1);
if(!x11651.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11650.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11651.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11649))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11650.value)))+IKsqr(((x11651.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11649))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11650.value)), ((x11651.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x11649))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11652=IKsin(j4);
IkReal x11653=IKcos(j4);
IkReal x11654=(gconst5*sj3);
IkReal x11655=(gconst4*r11);
IkReal x11656=(sj1*sj2);
IkReal x11657=((1.0)*gconst5);
IkReal x11658=(cj2*sj1);
IkReal x11659=((1.0)*sj0);
IkReal x11660=((1.0)*cj0);
IkReal x11661=(gconst4*r21);
IkReal x11662=(cj1*sj2);
IkReal x11663=(cj3*gconst4);
IkReal x11664=(gconst4*sj3);
IkReal x11665=(cj3*gconst5);
IkReal x11666=(r20*x11653);
IkReal x11667=((1.0)*cj1*cj2);
IkReal x11668=(r10*x11653);
IkReal x11669=(cj3*x11653);
IkReal x11670=(r02*x11652);
IkReal x11671=((1.0)*sj3*x11653);
evalcond[0]=((((-1.0)*x11659))+(((-1.0)*r02*x11653)));
evalcond[1]=((((-1.0)*r20*x11652*x11657))+((x11652*x11661)));
evalcond[2]=((((-1.0)*r10*x11652*x11657))+cj0+((x11652*x11655)));
evalcond[3]=(((cj0*x11656))+((cj3*x11670))+(((-1.0)*cj1*cj2*x11660)));
evalcond[4]=((((-1.0)*sj3*x11670))+(((-1.0)*x11658*x11660))+(((-1.0)*x11660*x11662)));
evalcond[5]=(x11662+x11658+((r20*x11664))+((r21*x11654))+((x11661*x11669))+(((-1.0)*cj3*x11657*x11666)));
evalcond[6]=(((r21*x11665))+x11656+((r20*x11663))+(((-1.0)*x11667))+((x11654*x11666))+(((-1.0)*x11661*x11671)));
evalcond[7]=((((-1.0)*cj1*cj2*x11659))+((r11*x11654))+((sj0*x11656))+((r10*x11664))+((x11655*x11669))+(((-1.0)*cj3*x11657*x11668)));
evalcond[8]=((((-1.0)*x11659*x11662))+(((-1.0)*x11658*x11659))+((r11*x11665))+((r10*x11663))+((x11654*x11668))+(((-1.0)*x11655*x11671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11672=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(r02,-1);
if(!x11673.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11672.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11673.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11672.value)))+IKsqr(((-1.0)*sj0*(x11673.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11672.value)), ((-1.0)*sj0*(x11673.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=(gconst5*sj3);
IkReal x11677=(gconst4*r11);
IkReal x11678=(sj1*sj2);
IkReal x11679=((1.0)*gconst5);
IkReal x11680=(cj2*sj1);
IkReal x11681=((1.0)*sj0);
IkReal x11682=((1.0)*cj0);
IkReal x11683=(gconst4*r21);
IkReal x11684=(cj1*sj2);
IkReal x11685=(cj3*gconst4);
IkReal x11686=(gconst4*sj3);
IkReal x11687=(cj3*gconst5);
IkReal x11688=(r20*x11675);
IkReal x11689=((1.0)*cj1*cj2);
IkReal x11690=(r10*x11675);
IkReal x11691=(cj3*x11675);
IkReal x11692=(r02*x11674);
IkReal x11693=((1.0)*sj3*x11675);
evalcond[0]=((((-1.0)*x11681))+(((-1.0)*r02*x11675)));
evalcond[1]=((((-1.0)*r20*x11674*x11679))+((x11674*x11683)));
evalcond[2]=(cj0+((x11674*x11677))+(((-1.0)*r10*x11674*x11679)));
evalcond[3]=(((cj0*x11678))+(((-1.0)*cj1*cj2*x11682))+((cj3*x11692)));
evalcond[4]=((((-1.0)*x11680*x11682))+(((-1.0)*sj3*x11692))+(((-1.0)*x11682*x11684)));
evalcond[5]=(x11684+x11680+((x11683*x11691))+((r21*x11676))+(((-1.0)*cj3*x11679*x11688))+((r20*x11686)));
evalcond[6]=(((x11676*x11688))+x11678+(((-1.0)*x11689))+((r21*x11687))+(((-1.0)*x11683*x11693))+((r20*x11685)));
evalcond[7]=((((-1.0)*cj3*x11679*x11690))+((r10*x11686))+((r11*x11676))+((x11677*x11691))+((sj0*x11678))+(((-1.0)*cj1*cj2*x11681)));
evalcond[8]=((((-1.0)*x11680*x11681))+(((-1.0)*x11681*x11684))+((r11*x11687))+((r10*x11685))+((x11676*x11690))+(((-1.0)*x11677*x11693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11694=((1.0)*sj0);
IkReal x11695=((1.0)*gconst4);
CheckValue<IkReal> x11696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11695))+(((-1.0)*gconst5*r21)))),-1);
if(!x11696.valid){
continue;
}
CheckValue<IkReal> x11697 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11694)))),IkReal(((((-1.0)*gconst4*r11*x11694))+((cj0*gconst5*r00))+(((-1.0)*cj0*r01*x11695))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11696.value)))+(x11697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11698=IKsin(j4);
IkReal x11699=IKcos(j4);
IkReal x11700=(gconst5*sj3);
IkReal x11701=(cj3*gconst5);
IkReal x11702=(gconst4*r11);
IkReal x11703=(sj1*sj2);
IkReal x11704=(cj2*sj1);
IkReal x11705=((1.0)*sj0);
IkReal x11706=(gconst4*r01);
IkReal x11707=(gconst4*r21);
IkReal x11708=((1.0)*cj0);
IkReal x11709=(cj1*sj2);
IkReal x11710=(gconst4*sj3);
IkReal x11711=(cj3*gconst4);
IkReal x11712=((1.0)*x11699);
IkReal x11713=((1.0)*cj1*cj2);
IkReal x11714=(cj3*x11698);
IkReal x11715=(cj3*x11699);
IkReal x11716=((1.0)*gconst5*x11698);
IkReal x11717=((1.0)*sj3*x11698);
evalcond[0]=((((-1.0)*r20*x11716))+(((-1.0)*r22*x11712))+((x11698*x11707)));
evalcond[1]=(cj0+(((-1.0)*r10*x11716))+(((-1.0)*r12*x11712))+((x11698*x11702)));
evalcond[2]=((((-1.0)*r00*x11716))+(((-1.0)*x11705))+((x11698*x11706))+(((-1.0)*r02*x11712)));
evalcond[3]=(x11709+x11704+((r21*x11700))+((r20*x11710))+((x11707*x11715))+(((-1.0)*r20*x11701*x11712))+((r22*x11714)));
evalcond[4]=(x11703+(((-1.0)*x11713))+(((-1.0)*sj3*x11707*x11712))+(((-1.0)*r22*x11717))+((r21*x11701))+((r20*x11711))+((r20*x11699*x11700)));
evalcond[5]=((((-1.0)*r00*x11701*x11712))+((r00*x11710))+((r01*x11700))+((r02*x11714))+((x11706*x11715))+((cj0*x11703))+(((-1.0)*cj1*cj2*x11708)));
evalcond[6]=(((x11702*x11715))+(((-1.0)*r10*x11701*x11712))+((r10*x11710))+((sj0*x11703))+(((-1.0)*cj1*cj2*x11705))+((r11*x11700))+((r12*x11714)));
evalcond[7]=((((-1.0)*sj3*x11706*x11712))+(((-1.0)*x11704*x11708))+((r00*x11711))+((r01*x11701))+((r00*x11699*x11700))+(((-1.0)*x11708*x11709))+(((-1.0)*r02*x11717)));
evalcond[8]=(((r10*x11699*x11700))+(((-1.0)*x11704*x11705))+(((-1.0)*r12*x11717))+(((-1.0)*x11705*x11709))+((r10*x11711))+(((-1.0)*sj3*x11702*x11712))+((r11*x11701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11718=((1.0)*gconst5);
CheckValue<IkReal> x11719 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11718))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11719.valid){
continue;
}
CheckValue<IkReal> x11720=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11718))+(((-1.0)*gconst4*r10)))),-1);
if(!x11720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11719.value)+(((1.5707963267949)*(x11720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11721=IKsin(j4);
IkReal x11722=IKcos(j4);
IkReal x11723=(gconst5*sj3);
IkReal x11724=(cj3*gconst5);
IkReal x11725=(gconst4*r11);
IkReal x11726=(sj1*sj2);
IkReal x11727=(cj2*sj1);
IkReal x11728=((1.0)*sj0);
IkReal x11729=(gconst4*r01);
IkReal x11730=(gconst4*r21);
IkReal x11731=((1.0)*cj0);
IkReal x11732=(cj1*sj2);
IkReal x11733=(gconst4*sj3);
IkReal x11734=(cj3*gconst4);
IkReal x11735=((1.0)*x11722);
IkReal x11736=((1.0)*cj1*cj2);
IkReal x11737=(cj3*x11721);
IkReal x11738=(cj3*x11722);
IkReal x11739=((1.0)*gconst5*x11721);
IkReal x11740=((1.0)*sj3*x11721);
evalcond[0]=((((-1.0)*r20*x11739))+(((-1.0)*r22*x11735))+((x11721*x11730)));
evalcond[1]=(cj0+(((-1.0)*r10*x11739))+(((-1.0)*r12*x11735))+((x11721*x11725)));
evalcond[2]=((((-1.0)*x11728))+(((-1.0)*r00*x11739))+((x11721*x11729))+(((-1.0)*r02*x11735)));
evalcond[3]=(x11732+x11727+(((-1.0)*r20*x11724*x11735))+((r20*x11733))+((x11730*x11738))+((r21*x11723))+((r22*x11737)));
evalcond[4]=(x11726+(((-1.0)*x11736))+((r20*x11734))+(((-1.0)*r22*x11740))+(((-1.0)*sj3*x11730*x11735))+((r21*x11724))+((r20*x11722*x11723)));
evalcond[5]=(((r00*x11733))+((r01*x11723))+((x11729*x11738))+(((-1.0)*cj1*cj2*x11731))+((cj0*x11726))+((r02*x11737))+(((-1.0)*r00*x11724*x11735)));
evalcond[6]=(((sj0*x11726))+((r10*x11733))+(((-1.0)*cj1*cj2*x11728))+((x11725*x11738))+((r12*x11737))+((r11*x11723))+(((-1.0)*r10*x11724*x11735)));
evalcond[7]=(((r00*x11734))+((r01*x11724))+(((-1.0)*sj3*x11729*x11735))+(((-1.0)*x11731*x11732))+(((-1.0)*r02*x11740))+(((-1.0)*x11727*x11731))+((r00*x11722*x11723)));
evalcond[8]=((((-1.0)*x11728*x11732))+(((-1.0)*sj3*x11725*x11735))+((r10*x11722*x11723))+(((-1.0)*r12*x11740))+((r10*x11734))+(((-1.0)*x11727*x11728))+((r11*x11724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11741=((1.0)*gconst5);
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11741))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
CheckValue<IkReal> x11743=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11741)))),-1);
if(!x11743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11742.value)+(((1.5707963267949)*(x11743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11744=IKsin(j4);
IkReal x11745=IKcos(j4);
IkReal x11746=(gconst5*sj3);
IkReal x11747=(cj3*gconst5);
IkReal x11748=(gconst4*r11);
IkReal x11749=(sj1*sj2);
IkReal x11750=(cj2*sj1);
IkReal x11751=((1.0)*sj0);
IkReal x11752=(gconst4*r01);
IkReal x11753=(gconst4*r21);
IkReal x11754=((1.0)*cj0);
IkReal x11755=(cj1*sj2);
IkReal x11756=(gconst4*sj3);
IkReal x11757=(cj3*gconst4);
IkReal x11758=((1.0)*x11745);
IkReal x11759=((1.0)*cj1*cj2);
IkReal x11760=(cj3*x11744);
IkReal x11761=(cj3*x11745);
IkReal x11762=((1.0)*gconst5*x11744);
IkReal x11763=((1.0)*sj3*x11744);
evalcond[0]=(((x11744*x11753))+(((-1.0)*r22*x11758))+(((-1.0)*r20*x11762)));
evalcond[1]=((((-1.0)*r12*x11758))+cj0+(((-1.0)*r10*x11762))+((x11744*x11748)));
evalcond[2]=(((x11744*x11752))+(((-1.0)*r02*x11758))+(((-1.0)*x11751))+(((-1.0)*r00*x11762)));
evalcond[3]=(x11755+x11750+(((-1.0)*r20*x11747*x11758))+((x11753*x11761))+((r22*x11760))+((r21*x11746))+((r20*x11756)));
evalcond[4]=(x11749+(((-1.0)*r22*x11763))+(((-1.0)*sj3*x11753*x11758))+(((-1.0)*x11759))+((r21*x11747))+((r20*x11745*x11746))+((r20*x11757)));
evalcond[5]=((((-1.0)*cj1*cj2*x11754))+(((-1.0)*r00*x11747*x11758))+((r01*x11746))+((cj0*x11749))+((r02*x11760))+((x11752*x11761))+((r00*x11756)));
evalcond[6]=((((-1.0)*cj1*cj2*x11751))+((x11748*x11761))+((sj0*x11749))+((r10*x11756))+((r12*x11760))+(((-1.0)*r10*x11747*x11758))+((r11*x11746)));
evalcond[7]=((((-1.0)*x11754*x11755))+((r01*x11747))+((r00*x11745*x11746))+(((-1.0)*sj3*x11752*x11758))+(((-1.0)*r02*x11763))+(((-1.0)*x11750*x11754))+((r00*x11757)));
evalcond[8]=((((-1.0)*r12*x11763))+((r10*x11757))+(((-1.0)*x11751*x11755))+((r10*x11745*x11746))+(((-1.0)*x11750*x11751))+(((-1.0)*sj3*x11748*x11758))+((r11*x11747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11764=((-1.0)*r10);
IkReal x11766 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11766)==0){
continue;
}
IkReal x11765=pow(x11766,-0.5);
CheckValue<IkReal> x11767 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11764),IKFAST_ATAN2_MAGTHRESH);
if(!x11767.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11767.value));
IkReal gconst7=(r11*x11765);
IkReal gconst8=(x11764*x11765);
CheckValue<IkReal> x11768 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11768.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11768.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11769=((-1.0)*r10);
IkReal x11770=x11765;
CheckValue<IkReal> x11772 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11769),IKFAST_ATAN2_MAGTHRESH);
if(!x11772.valid){
continue;
}
IkReal x11771=((-1.0)*(x11772.value));
sj5=gconst7;
cj5=gconst8;
j5=x11771;
IkReal gconst6=x11771;
IkReal gconst7=(r11*x11770);
IkReal gconst8=(x11769*x11770);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11773=((1.0)*sj0);
IkReal x11774=((1.0)*gconst7);
CheckValue<IkReal> x11775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11774))+(((-1.0)*gconst8*r21)))),-1);
if(!x11775.valid){
continue;
}
CheckValue<IkReal> x11776 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11773))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11773))+(((-1.0)*cj0*r01*x11774))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11775.value)))+(x11776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11777=IKsin(j4);
IkReal x11778=IKcos(j4);
IkReal x11779=(gconst7*sj3);
IkReal x11780=(cj3*gconst8);
IkReal x11781=(cj3*gconst7);
IkReal x11782=(sj1*sj2);
IkReal x11783=(cj2*sj1);
IkReal x11784=((1.0)*sj0);
IkReal x11785=((1.0)*cj0);
IkReal x11786=(gconst8*sj3);
IkReal x11787=(cj1*sj2);
IkReal x11788=((1.0)*x11778);
IkReal x11789=((1.0)*x11777);
IkReal x11790=((1.0)*cj1*cj2);
IkReal x11791=(cj3*x11777);
IkReal x11792=(gconst7*x11777);
IkReal x11793=(x11778*x11786);
evalcond[0]=((((-1.0)*gconst8*r20*x11789))+(((-1.0)*r22*x11788))+((r21*x11792)));
evalcond[1]=(cj0+((r11*x11792))+(((-1.0)*r12*x11788))+(((-1.0)*gconst8*r10*x11789)));
evalcond[2]=((((-1.0)*gconst8*r00*x11789))+((r01*x11792))+(((-1.0)*r02*x11788))+(((-1.0)*x11784)));
evalcond[3]=(((r21*x11786))+x11787+x11783+((r20*x11779))+(((-1.0)*r20*x11780*x11788))+((r21*x11778*x11781))+((r22*x11791)));
evalcond[4]=(((r21*x11780))+x11782+(((-1.0)*r21*x11779*x11788))+((r20*x11781))+((r20*x11793))+(((-1.0)*r22*sj3*x11789))+(((-1.0)*x11790)));
evalcond[5]=((((-1.0)*r00*x11780*x11788))+((cj0*x11782))+(((-1.0)*cj1*cj2*x11785))+((r02*x11791))+((r00*x11779))+((r01*x11778*x11781))+((r01*x11786)));
evalcond[6]=(((r12*x11791))+((r11*x11786))+((r10*x11779))+(((-1.0)*cj1*cj2*x11784))+((sj0*x11782))+(((-1.0)*r10*x11780*x11788))+((r11*x11778*x11781)));
evalcond[7]=((((-1.0)*x11785*x11787))+(((-1.0)*r02*sj3*x11789))+(((-1.0)*r01*x11779*x11788))+(((-1.0)*x11783*x11785))+((r00*x11793))+((r00*x11781))+((r01*x11780)));
evalcond[8]=(((r11*x11780))+((r10*x11793))+((r10*x11781))+(((-1.0)*x11784*x11787))+(((-1.0)*x11783*x11784))+(((-1.0)*r12*sj3*x11789))+(((-1.0)*r11*x11779*x11788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11794=((1.0)*gconst8);
CheckValue<IkReal> x11795=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11794)))),-1);
if(!x11795.valid){
continue;
}
CheckValue<IkReal> x11796 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11795.value)))+(x11796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11797=IKsin(j4);
IkReal x11798=IKcos(j4);
IkReal x11799=(gconst7*sj3);
IkReal x11800=(cj3*gconst8);
IkReal x11801=(cj3*gconst7);
IkReal x11802=(sj1*sj2);
IkReal x11803=(cj2*sj1);
IkReal x11804=((1.0)*sj0);
IkReal x11805=((1.0)*cj0);
IkReal x11806=(gconst8*sj3);
IkReal x11807=(cj1*sj2);
IkReal x11808=((1.0)*x11798);
IkReal x11809=((1.0)*x11797);
IkReal x11810=((1.0)*cj1*cj2);
IkReal x11811=(cj3*x11797);
IkReal x11812=(gconst7*x11797);
IkReal x11813=(x11798*x11806);
evalcond[0]=(((r21*x11812))+(((-1.0)*gconst8*r20*x11809))+(((-1.0)*r22*x11808)));
evalcond[1]=((((-1.0)*gconst8*r10*x11809))+cj0+(((-1.0)*r12*x11808))+((r11*x11812)));
evalcond[2]=((((-1.0)*gconst8*r00*x11809))+((r01*x11812))+(((-1.0)*x11804))+(((-1.0)*r02*x11808)));
evalcond[3]=(((r21*x11806))+((r20*x11799))+((r22*x11811))+(((-1.0)*r20*x11800*x11808))+x11803+x11807+((r21*x11798*x11801)));
evalcond[4]=(((r21*x11800))+(((-1.0)*r21*x11799*x11808))+(((-1.0)*r22*sj3*x11809))+((r20*x11801))+(((-1.0)*x11810))+((r20*x11813))+x11802);
evalcond[5]=(((r02*x11811))+((cj0*x11802))+((r01*x11798*x11801))+(((-1.0)*r00*x11800*x11808))+(((-1.0)*cj1*cj2*x11805))+((r01*x11806))+((r00*x11799)));
evalcond[6]=(((r10*x11799))+((r11*x11806))+((r11*x11798*x11801))+((sj0*x11802))+(((-1.0)*r10*x11800*x11808))+(((-1.0)*cj1*cj2*x11804))+((r12*x11811)));
evalcond[7]=(((r00*x11801))+(((-1.0)*r02*sj3*x11809))+(((-1.0)*x11803*x11805))+(((-1.0)*r01*x11799*x11808))+((r00*x11813))+(((-1.0)*x11805*x11807))+((r01*x11800)));
evalcond[8]=((((-1.0)*x11803*x11804))+((r11*x11800))+((r10*x11801))+((r10*x11813))+(((-1.0)*r11*x11799*x11808))+(((-1.0)*r12*sj3*x11809))+(((-1.0)*x11804*x11807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11814=((-1.0)*r11);
IkReal x11816 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11816)==0){
continue;
}
IkReal x11815=pow(x11816,-0.5);
CheckValue<IkReal> x11817 = IKatan2WithCheck(IkReal(x11814),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11817.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11817.value))));
IkReal gconst10=(x11814*x11815);
IkReal gconst11=((1.0)*r10*x11815);
CheckValue<IkReal> x11818 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11818.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11818.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11819=((-1.0)*r11);
CheckValue<IkReal> x11822 = IKatan2WithCheck(IkReal(x11819),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11822.valid){
continue;
}
IkReal x11820=((1.0)*(x11822.value));
IkReal x11821=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11820)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11820)));
IkReal gconst10=(x11819*x11821);
IkReal gconst11=((1.0)*r10*x11821);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11823=((-1.0)*r11);
CheckValue<IkReal> x11826 = IKatan2WithCheck(IkReal(x11823),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11826.valid){
continue;
}
IkReal x11824=((1.0)*(x11826.value));
IkReal x11825=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11824)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11824)));
IkReal gconst10=(x11823*x11825);
IkReal gconst11=((1.0)*r10*x11825);
IkReal x11827=r12*r12;
IkReal x11828=((1.0)*sj0);
IkReal x11829=(cj0*r02);
IkReal x11830=x11815;
j4eval[0]=((IKabs(((((-1.0)*x11829))+(((-1.0)*r12*x11828)))))+(IKabs((((sj0*x11827*x11830))+(((-1.0)*x11828*x11830))+((r12*x11829*x11830))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11831=((-1.0)*r11);
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(x11831),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
IkReal x11832=((1.0)*(x11834.value));
IkReal x11833=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11832)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11832)));
IkReal gconst10=(x11831*x11833);
IkReal gconst11=((1.0)*r10*x11833);
IkReal x11835=((1.0)*cj3);
CheckValue<IkReal> x11840=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11840.valid){
continue;
}
IkReal x11836=x11840.value;
IkReal x11837=(cj3*x11836);
IkReal x11838=(x11835*x11836);
IkReal x11839=((((-1.0)*x11835*(r22*r22)))+(((-1.0)*x11838*(r11*r11)*(r21*r21)))+(((-1.0)*x11838*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11837)));
j4eval[0]=x11839;
j4eval[1]=IKsign(x11839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11841=((-1.0)*r11);
CheckValue<IkReal> x11844 = IKatan2WithCheck(IkReal(x11841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11844.valid){
continue;
}
IkReal x11842=((1.0)*(x11844.value));
IkReal x11843=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11842)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11842)));
IkReal gconst10=(x11841*x11843);
IkReal gconst11=((1.0)*r10*x11843);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11845=((-1.0)*r11);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal(x11845),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
IkReal x11846=((1.0)*(x11848.value));
IkReal x11847=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11846)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11846)));
IkReal gconst10=(x11845*x11847);
IkReal gconst11=((1.0)*r10*x11847);
IkReal x11849=r12*r12;
IkReal x11850=((1.0)*sj0);
IkReal x11851=(cj0*r02);
IkReal x11852=x11815;
j4eval[0]=((IKabs((((sj0*x11849*x11852))+((r12*x11851*x11852))+(((-1.0)*x11850*x11852)))))+(IKabs(((((-1.0)*x11851))+(((-1.0)*r12*x11850))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11853=((-1.0)*r11);
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(x11853),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal x11854=((1.0)*(x11856.value));
IkReal x11855=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11854)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst10=(x11853*x11855);
IkReal gconst11=((1.0)*r10*x11855);
IkReal x11857=r12*r12;
IkReal x11858=(cj1*cj2*r22);
IkReal x11859=(r22*sj1*sj2);
CheckValue<IkReal> x11863=IKPowWithIntegerCheck(((-1.0)+x11857),-1);
if(!x11863.valid){
continue;
}
IkReal x11860=x11863.value;
if((((1.0)+(((-1.0)*x11857)))) < -0.00001)
continue;
IkReal x11861=IKsqrt(((1.0)+(((-1.0)*x11857))));
IkReal x11862=(r12*x11860*x11861);
j4eval[0]=((IKabs(((((-1.0)*x11858))+x11859)))+(IKabs(((((-1.0)*x11859*x11862))+((x11858*x11862))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11864=((-1.0)*r11);
CheckValue<IkReal> x11867 = IKatan2WithCheck(IkReal(x11864),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11867.valid){
continue;
}
IkReal x11865=((1.0)*(x11867.value));
IkReal x11866=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11865)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11865)));
IkReal gconst10=(x11864*x11866);
IkReal gconst11=((1.0)*r10*x11866);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11868=((-1.0)*r11);
CheckValue<IkReal> x11871 = IKatan2WithCheck(IkReal(x11868),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11871.valid){
continue;
}
IkReal x11869=((1.0)*(x11871.value));
IkReal x11870=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11869)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11869)));
IkReal gconst10=(x11868*x11870);
IkReal gconst11=((1.0)*r10*x11870);
IkReal x11872=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11876=IKPowWithIntegerCheck(x11872,-1);
if(!x11876.valid){
continue;
}
IkReal x11873=x11876.value;
IkReal x11874=((1.0)*x11873);
IkReal x11875=((((-1.0)*x11874*(r00*r00)*(r10*r10)))+(((-1.0)*x11874*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11873)));
j4eval[0]=x11875;
j4eval[1]=IKsign(x11875);
j4eval[2]=r02;
j4eval[3]=x11872;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11877=((-1.0)*r11);
CheckValue<IkReal> x11880 = IKatan2WithCheck(IkReal(x11877),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11880.valid){
continue;
}
IkReal x11878=((1.0)*(x11880.value));
IkReal x11879=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11878)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11878)));
IkReal gconst10=(x11877*x11879);
IkReal gconst11=((1.0)*r10*x11879);
IkReal x11881=r12*r12;
IkReal x11882=(cj1*cj2*r22);
IkReal x11883=(r22*sj1*sj2);
CheckValue<IkReal> x11887=IKPowWithIntegerCheck(((-1.0)+x11881),-1);
if(!x11887.valid){
continue;
}
IkReal x11884=x11887.value;
if((((1.0)+(((-1.0)*x11881)))) < -0.00001)
continue;
IkReal x11885=IKsqrt(((1.0)+(((-1.0)*x11881))));
IkReal x11886=(r12*x11884*x11885);
j4eval[0]=((IKabs(((((-1.0)*x11882))+x11883)))+(IKabs((((x11882*x11886))+(((-1.0)*x11883*x11886))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11888=(gconst10*r21);
IkReal x11889=(gconst11*r20);
IkReal x11890=(sj1*sj2);
IkReal x11891=(cj1*cj2);
CheckValue<IkReal> x11892 = IKatan2WithCheck(IkReal((((r22*x11890))+(((-1.0)*r22*x11891)))),IkReal((((x11888*x11890))+((x11889*x11891))+(((-1.0)*x11888*x11891))+(((-1.0)*x11889*x11890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11892.valid){
continue;
}
CheckValue<IkReal> x11893=IKPowWithIntegerCheck(IKsign(((x11888*x11888)+(x11889*x11889)+(r22*r22)+(((-2.0)*x11888*x11889)))),-1);
if(!x11893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11892.value)+(((1.5707963267949)*(x11893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11894=IKsin(j4);
IkReal x11895=IKcos(j4);
IkReal x11896=((1.0)*cj2);
IkReal x11897=((1.0)*x11895);
IkReal x11898=(gconst10*x11894);
IkReal x11899=((1.0)*x11894);
IkReal x11900=(gconst11*x11895);
IkReal x11901=(gconst11*x11899);
evalcond[0]=((((-1.0)*r22*x11897))+((r21*x11898))+(((-1.0)*r20*x11901)));
evalcond[1]=((((-1.0)*r12*x11897))+(((-1.0)*r10*x11901))+((r11*x11898)));
evalcond[2]=((((-1.0)*gconst10*r01*x11897))+((r00*x11900))+(((-1.0)*r02*x11899)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11901))+((r01*x11898))+(((-1.0)*r02*x11897)));
evalcond[4]=((((-1.0)*cj1*x11896))+(((-1.0)*r22*x11899))+((sj1*sj2))+((r20*x11900))+(((-1.0)*gconst10*r21*x11897)));
evalcond[5]=((((-1.0)*gconst10*r11*x11897))+(((-1.0)*r12*x11899))+(((-1.0)*cj1*sj2))+((r10*x11900))+(((-1.0)*sj1*x11896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11902=(gconst11*r00);
IkReal x11903=(gconst10*r01);
CheckValue<IkReal> x11904=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11902*x11903))+(((-1.0)*(x11902*x11902)))+(((-1.0)*(x11903*x11903))))),-1);
if(!x11904.valid){
continue;
}
CheckValue<IkReal> x11905 = IKatan2WithCheck(IkReal((x11902+(((-1.0)*x11903)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11904.value)))+(x11905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11906=IKsin(j4);
IkReal x11907=IKcos(j4);
IkReal x11908=((1.0)*cj2);
IkReal x11909=((1.0)*x11907);
IkReal x11910=(gconst10*x11906);
IkReal x11911=((1.0)*x11906);
IkReal x11912=(gconst11*x11907);
IkReal x11913=(gconst11*x11911);
evalcond[0]=((((-1.0)*r22*x11909))+(((-1.0)*r20*x11913))+((r21*x11910)));
evalcond[1]=(((r11*x11910))+(((-1.0)*r12*x11909))+(((-1.0)*r10*x11913)));
evalcond[2]=(((r00*x11912))+(((-1.0)*gconst10*r01*x11909))+(((-1.0)*r02*x11911)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11909))+((r01*x11910))+(((-1.0)*r00*x11913)));
evalcond[4]=((((-1.0)*gconst10*r21*x11909))+(((-1.0)*r22*x11911))+(((-1.0)*cj1*x11908))+((sj1*sj2))+((r20*x11912)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11908))+((r10*x11912))+(((-1.0)*gconst10*r11*x11909))+(((-1.0)*r12*x11911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11914 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11914.valid){
continue;
}
CheckValue<IkReal> x11915=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11914.value)+(((1.5707963267949)*(x11915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11916=IKsin(j4);
IkReal x11917=IKcos(j4);
IkReal x11918=((1.0)*cj2);
IkReal x11919=((1.0)*x11917);
IkReal x11920=(gconst10*x11916);
IkReal x11921=((1.0)*x11916);
IkReal x11922=(gconst11*x11917);
IkReal x11923=(gconst11*x11921);
evalcond[0]=((((-1.0)*r20*x11923))+((r21*x11920))+(((-1.0)*r22*x11919)));
evalcond[1]=((((-1.0)*r10*x11923))+((r11*x11920))+(((-1.0)*r12*x11919)));
evalcond[2]=((((-1.0)*r02*x11921))+(((-1.0)*gconst10*r01*x11919))+((r00*x11922)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11923))+((r01*x11920))+(((-1.0)*r02*x11919)));
evalcond[4]=((((-1.0)*gconst10*r21*x11919))+(((-1.0)*cj1*x11918))+((r20*x11922))+((sj1*sj2))+(((-1.0)*r22*x11921)));
evalcond[5]=(((r10*x11922))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11919))+(((-1.0)*sj1*x11918))+(((-1.0)*r12*x11921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11924=((-1.0)*r11);
CheckValue<IkReal> x11927 = IKatan2WithCheck(IkReal(x11924),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11927.valid){
continue;
}
IkReal x11925=((1.0)*(x11927.value));
IkReal x11926=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11925)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11925)));
IkReal gconst10=(x11924*x11926);
IkReal gconst11=((1.0)*r10*x11926);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11928=((-1.0)*r11);
CheckValue<IkReal> x11931 = IKatan2WithCheck(IkReal(x11928),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11931.valid){
continue;
}
IkReal x11929=((1.0)*(x11931.value));
IkReal x11930=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11929)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11929)));
IkReal gconst10=(x11928*x11930);
IkReal gconst11=((1.0)*r10*x11930);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11932=((-1.0)*r11);
CheckValue<IkReal> x11935 = IKatan2WithCheck(IkReal(x11932),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11935.valid){
continue;
}
IkReal x11933=((1.0)*(x11935.value));
IkReal x11934=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11933)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11933)));
IkReal gconst10=(x11932*x11934);
IkReal gconst11=((1.0)*r10*x11934);
IkReal x11936=r12*r12;
CheckValue<IkReal> x11939=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11936))),-1);
if(!x11939.valid){
continue;
}
IkReal x11937=x11939.value;
IkReal x11938=((1.0)*x11937);
j4eval[0]=IKsign((x11936+(((2.0)*x11937*(r10*r10)*(r11*r11)))+((x11938*(r10*r10*r10*r10)))+((x11938*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11940=(cj2*sj1);
IkReal x11941=(gconst10*r11);
IkReal x11942=(gconst11*r10);
IkReal x11943=(cj1*sj2);
CheckValue<IkReal> x11944 = IKatan2WithCheck(IkReal((((r12*x11940))+((r12*x11943)))),IkReal(((((-1.0)*x11940*x11942))+(((-1.0)*x11942*x11943))+((x11940*x11941))+((x11941*x11943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11944.valid){
continue;
}
CheckValue<IkReal> x11945=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11941*x11942))+(x11941*x11941)+(x11942*x11942))),-1);
if(!x11945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11944.value)+(((1.5707963267949)*(x11945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11946=IKsin(j4);
IkReal x11947=IKcos(j4);
IkReal x11948=((1.0)*x11947);
IkReal x11949=(gconst10*x11946);
IkReal x11950=((1.0)*x11946);
IkReal x11951=(gconst11*x11947);
IkReal x11952=(gconst11*x11950);
evalcond[0]=((((-1.0)*r20*x11952))+(((-1.0)*r22*x11948))+((r21*x11949)));
evalcond[1]=(((r11*x11949))+(((-1.0)*r10*x11952))+(((-1.0)*r12*x11948)));
evalcond[2]=((((-1.0)*r02*x11950))+((r00*x11951))+(((-1.0)*gconst10*r01*x11948)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11948))+(((-1.0)*r00*x11952))+((r01*x11949)));
evalcond[4]=((((-1.0)*r12*x11950))+((cj2*sj1))+(((-1.0)*gconst10*r11*x11948))+((cj1*sj2))+((r10*x11951)));
evalcond[5]=((((-1.0)*gconst10*r21*x11948))+((r20*x11951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11953=(gconst11*r00);
IkReal x11954=(gconst10*r01);
CheckValue<IkReal> x11955=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11953*x11954))+(x11953*x11953)+(x11954*x11954)+(r02*r02))),-1);
if(!x11955.valid){
continue;
}
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal((x11953+(((-1.0)*x11954)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11955.value)))+(x11956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11957=IKsin(j4);
IkReal x11958=IKcos(j4);
IkReal x11959=((1.0)*x11958);
IkReal x11960=(gconst10*x11957);
IkReal x11961=((1.0)*x11957);
IkReal x11962=(gconst11*x11958);
IkReal x11963=(gconst11*x11961);
evalcond[0]=((((-1.0)*r20*x11963))+(((-1.0)*r22*x11959))+((r21*x11960)));
evalcond[1]=((((-1.0)*r12*x11959))+(((-1.0)*r10*x11963))+((r11*x11960)));
evalcond[2]=((((-1.0)*gconst10*r01*x11959))+((r00*x11962))+(((-1.0)*r02*x11961)));
evalcond[3]=((1.0)+((r01*x11960))+(((-1.0)*r02*x11959))+(((-1.0)*r00*x11963)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11959))+(((-1.0)*r12*x11961))+((cj1*sj2))+((r10*x11962)));
evalcond[5]=((((-1.0)*gconst10*r21*x11959))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11962))+(((-1.0)*r22*x11961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11964=((1.0)*gconst11);
CheckValue<IkReal> x11965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11964))+(((-1.0)*gconst10*r20)))),-1);
if(!x11965.valid){
continue;
}
CheckValue<IkReal> x11966 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11964)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11965.value)))+(x11966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11967=IKsin(j4);
IkReal x11968=IKcos(j4);
IkReal x11969=((1.0)*x11968);
IkReal x11970=(gconst10*x11967);
IkReal x11971=((1.0)*x11967);
IkReal x11972=(gconst11*x11968);
IkReal x11973=(gconst11*x11971);
evalcond[0]=((((-1.0)*r20*x11973))+(((-1.0)*r22*x11969))+((r21*x11970)));
evalcond[1]=((((-1.0)*r10*x11973))+((r11*x11970))+(((-1.0)*r12*x11969)));
evalcond[2]=(((r00*x11972))+(((-1.0)*gconst10*r01*x11969))+(((-1.0)*r02*x11971)));
evalcond[3]=((1.0)+((r01*x11970))+(((-1.0)*r00*x11973))+(((-1.0)*r02*x11969)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11971))+((cj1*sj2))+((r10*x11972))+(((-1.0)*gconst10*r11*x11969)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11972))+(((-1.0)*r22*x11971))+(((-1.0)*gconst10*r21*x11969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11974=((-1.0)*r11);
IkReal x11975=((-1.0)*r10);
CheckValue<IkReal> x11977 = IKatan2WithCheck(IkReal(x11974),IkReal(x11975),IKFAST_ATAN2_MAGTHRESH);
if(!x11977.valid){
continue;
}
IkReal x11976=((1.0)*(x11977.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11976)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11975);
rxp1_1=(px*r21);
rxp1_2=(px*x11974);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11976)));
IkReal gconst10=x11974;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11978=((-1.0)*r11);
IkReal x11979=((-1.0)*r10);
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal(x11978),IkReal(x11979),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
IkReal x11980=((1.0)*(x11981.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11980)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11979);
rxp1_1=(px*r21);
rxp1_2=(px*x11978);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11980)));
IkReal gconst10=x11978;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11982=((-1.0)*r11);
IkReal x11983=((-1.0)*r10);
CheckValue<IkReal> x11985 = IKatan2WithCheck(IkReal(x11982),IkReal(x11983),IKFAST_ATAN2_MAGTHRESH);
if(!x11985.valid){
continue;
}
IkReal x11984=((1.0)*(x11985.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11984)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11983);
rxp1_1=(px*r21);
rxp1_2=(px*x11982);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11984)));
IkReal gconst10=x11982;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11988=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11988.valid){
continue;
}
IkReal x11986=x11988.value;
IkReal x11987=(sj0*x11986);
cj4array[0]=(((cj1*sj2*x11987))+((cj2*sj1*x11987)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11989=IKsin(j4);
IkReal x11990=IKcos(j4);
IkReal x11991=(gconst10*r21);
IkReal x11992=(gconst11*r20);
IkReal x11993=((1.0)*x11989);
IkReal x11994=((1.0)*x11990);
evalcond[0]=((-1.0)*r02*x11989);
evalcond[1]=((((-1.0)*r02*x11994))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x11992*x11993))+((x11989*x11991)));
evalcond[3]=((((-1.0)*gconst11*r10*x11993))+((gconst10*r11*x11989)));
evalcond[4]=(((x11990*x11992))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11991*x11994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11996=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11996.valid){
continue;
}
IkReal x11995=x11996.value;
cj4array[0]=(((cj1*cj2*x11995))+(((-1.0)*sj1*sj2*x11995)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11997=IKsin(j4);
IkReal x11998=IKcos(j4);
IkReal x11999=((1.0)*sj0);
IkReal x12000=(gconst10*x11997);
IkReal x12001=((1.0)*x11998);
IkReal x12002=((1.0)*gconst11*x11997);
evalcond[0]=((-1.0)*r02*x11997);
evalcond[1]=((((-1.0)*r02*x12001))+(((-1.0)*x11999)));
evalcond[2]=(((r21*x12000))+(((-1.0)*r20*x12002)));
evalcond[3]=((((-1.0)*r10*x12002))+((r11*x12000)));
evalcond[4]=((((-1.0)*cj1*sj2*x11999))+((gconst11*r10*x11998))+(((-1.0)*gconst10*r11*x12001))+(((-1.0)*cj2*sj1*x11999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12003=IKPowWithIntegerCheck(r02,-1);
if(!x12003.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12003.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12004=IKsin(j4);
IkReal x12005=IKcos(j4);
IkReal x12006=(gconst10*r21);
IkReal x12007=((1.0)*sj0);
IkReal x12008=(gconst10*r11);
IkReal x12009=(gconst11*x12005);
IkReal x12010=((1.0)*x12005);
IkReal x12011=((1.0)*gconst11*x12004);
evalcond[0]=((-1.0)*r02*x12004);
evalcond[1]=((((-1.0)*r20*x12011))+((x12004*x12006)));
evalcond[2]=((((-1.0)*r10*x12011))+((x12004*x12008)));
evalcond[3]=(((r20*x12009))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12006*x12010)));
evalcond[4]=((((-1.0)*cj1*sj2*x12007))+(((-1.0)*x12008*x12010))+((r10*x12009))+(((-1.0)*cj2*sj1*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12012=((1.0)*gconst11);
CheckValue<IkReal> x12013 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12012))+(((-1.0)*cj0*r00*x12012))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12013.valid){
continue;
}
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12013.value)+(((1.5707963267949)*(x12014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12015=IKsin(j4);
IkReal x12016=IKcos(j4);
IkReal x12017=((1.0)*cj2);
IkReal x12018=((1.0)*sj0);
IkReal x12019=(cj1*sj2);
IkReal x12020=(gconst10*x12015);
IkReal x12021=((1.0)*x12016);
IkReal x12022=(gconst11*x12016);
IkReal x12023=((1.0)*x12015);
IkReal x12024=(gconst11*x12023);
evalcond[0]=((((-1.0)*r20*x12024))+((r21*x12020)));
evalcond[1]=(cj0+((r11*x12020))+(((-1.0)*r12*x12021))+(((-1.0)*r10*x12024)));
evalcond[2]=(((r20*x12022))+(((-1.0)*cj1*x12017))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12021)));
evalcond[3]=(((r01*x12020))+(((-1.0)*r00*x12024))+(((-1.0)*r02*x12021))+(((-1.0)*x12018)));
evalcond[4]=((((-1.0)*cj0*sj1*x12017))+(((-1.0)*cj0*x12019))+((r00*x12022))+(((-1.0)*r02*x12023))+(((-1.0)*gconst10*r01*x12021)));
evalcond[5]=((((-1.0)*x12018*x12019))+(((-1.0)*gconst10*r11*x12021))+(((-1.0)*sj0*sj1*x12017))+(((-1.0)*r12*x12023))+((r10*x12022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12025=(gconst10*r21);
IkReal x12026=(gconst11*r20);
IkReal x12027=(sj1*sj2);
IkReal x12028=(cj1*cj2);
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12028))+((r22*x12027)))),IkReal(((((-1.0)*x12026*x12027))+((x12026*x12028))+((x12025*x12027))+(((-1.0)*x12025*x12028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
CheckValue<IkReal> x12030=IKPowWithIntegerCheck(IKsign(((x12025*x12025)+(r22*r22)+(((-2.0)*x12025*x12026))+(x12026*x12026))),-1);
if(!x12030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12029.value)+(((1.5707963267949)*(x12030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12031=IKsin(j4);
IkReal x12032=IKcos(j4);
IkReal x12033=((1.0)*cj2);
IkReal x12034=((1.0)*sj0);
IkReal x12035=(cj1*sj2);
IkReal x12036=((1.0)*x12032);
IkReal x12037=(gconst10*x12031);
IkReal x12038=((1.0)*x12031);
IkReal x12039=(gconst11*x12032);
IkReal x12040=(gconst11*x12038);
evalcond[0]=((((-1.0)*r20*x12040))+((r21*x12037))+(((-1.0)*r22*x12036)));
evalcond[1]=(cj0+(((-1.0)*r10*x12040))+(((-1.0)*r12*x12036))+((r11*x12037)));
evalcond[2]=((((-1.0)*r00*x12040))+(((-1.0)*x12034))+((r01*x12037))+(((-1.0)*r02*x12036)));
evalcond[3]=((((-1.0)*cj1*x12033))+((r20*x12039))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12036))+(((-1.0)*r22*x12038)));
evalcond[4]=((((-1.0)*gconst10*r01*x12036))+((r00*x12039))+(((-1.0)*r02*x12038))+(((-1.0)*cj0*sj1*x12033))+(((-1.0)*cj0*x12035)));
evalcond[5]=((((-1.0)*x12034*x12035))+(((-1.0)*gconst10*r11*x12036))+(((-1.0)*r12*x12038))+((r10*x12039))+(((-1.0)*sj0*sj1*x12033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12041=((1.0)*sj0);
IkReal x12042=((1.0)*gconst10);
CheckValue<IkReal> x12043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12042))+(((-1.0)*gconst11*r21)))),-1);
if(!x12043.valid){
continue;
}
CheckValue<IkReal> x12044 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12041))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12041))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12043.value)))+(x12044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12045=IKsin(j4);
IkReal x12046=IKcos(j4);
IkReal x12047=((1.0)*cj2);
IkReal x12048=((1.0)*sj0);
IkReal x12049=(cj1*sj2);
IkReal x12050=((1.0)*x12046);
IkReal x12051=(gconst10*x12045);
IkReal x12052=((1.0)*x12045);
IkReal x12053=(gconst11*x12046);
IkReal x12054=(gconst11*x12052);
evalcond[0]=((((-1.0)*r20*x12054))+(((-1.0)*r22*x12050))+((r21*x12051)));
evalcond[1]=((((-1.0)*r10*x12054))+cj0+(((-1.0)*r12*x12050))+((r11*x12051)));
evalcond[2]=(((r01*x12051))+(((-1.0)*x12048))+(((-1.0)*r02*x12050))+(((-1.0)*r00*x12054)));
evalcond[3]=(((r20*x12053))+(((-1.0)*cj1*x12047))+((sj1*sj2))+(((-1.0)*r22*x12052))+(((-1.0)*gconst10*r21*x12050)));
evalcond[4]=((((-1.0)*cj0*x12049))+((r00*x12053))+(((-1.0)*r02*x12052))+(((-1.0)*cj0*sj1*x12047))+(((-1.0)*gconst10*r01*x12050)));
evalcond[5]=(((r10*x12053))+(((-1.0)*x12048*x12049))+(((-1.0)*sj0*sj1*x12047))+(((-1.0)*gconst10*r11*x12050))+(((-1.0)*r12*x12052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12055=((1.0)*gconst11);
CheckValue<IkReal> x12056=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12055)))),-1);
if(!x12056.valid){
continue;
}
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12055))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12056.value)))+(x12057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12058=IKsin(j4);
IkReal x12059=IKcos(j4);
IkReal x12060=((1.0)*cj2);
IkReal x12061=((1.0)*sj0);
IkReal x12062=(cj1*sj2);
IkReal x12063=((1.0)*x12059);
IkReal x12064=(gconst10*x12058);
IkReal x12065=((1.0)*x12058);
IkReal x12066=(gconst11*x12059);
IkReal x12067=(gconst11*x12065);
evalcond[0]=(((r21*x12064))+(((-1.0)*r20*x12067))+(((-1.0)*r22*x12063)));
evalcond[1]=(cj0+(((-1.0)*r10*x12067))+(((-1.0)*r12*x12063))+((r11*x12064)));
evalcond[2]=(((r01*x12064))+(((-1.0)*r02*x12063))+(((-1.0)*x12061))+(((-1.0)*r00*x12067)));
evalcond[3]=((((-1.0)*gconst10*r21*x12063))+((sj1*sj2))+((r20*x12066))+(((-1.0)*r22*x12065))+(((-1.0)*cj1*x12060)));
evalcond[4]=(((r00*x12066))+(((-1.0)*cj0*x12062))+(((-1.0)*cj0*sj1*x12060))+(((-1.0)*r02*x12065))+(((-1.0)*gconst10*r01*x12063)));
evalcond[5]=((((-1.0)*sj0*sj1*x12060))+(((-1.0)*x12061*x12062))+((r10*x12066))+(((-1.0)*gconst10*r11*x12063))+(((-1.0)*r12*x12065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12068=((-1.0)*r11);
CheckValue<IkReal> x12071 = IKatan2WithCheck(IkReal(x12068),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12071.valid){
continue;
}
IkReal x12069=((1.0)*(x12071.value));
IkReal x12070=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12069)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12069)));
IkReal gconst10=(x12068*x12070);
IkReal gconst11=((1.0)*r10*x12070);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12072=((-1.0)*r11);
CheckValue<IkReal> x12075 = IKatan2WithCheck(IkReal(x12072),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12075.valid){
continue;
}
IkReal x12073=((1.0)*(x12075.value));
IkReal x12074=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12073)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12073)));
IkReal gconst10=(x12072*x12074);
IkReal gconst11=((1.0)*r10*x12074);
IkReal x12076=r12*r12;
IkReal x12077=((1.0)*sj0);
IkReal x12078=(cj0*r02);
IkReal x12079=x11815;
j4eval[0]=((IKabs((((sj0*x12076*x12079))+((r12*x12078*x12079))+(((-1.0)*x12077*x12079)))))+(IKabs(((((-1.0)*x12078))+(((-1.0)*r12*x12077))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12080=((-1.0)*r11);
CheckValue<IkReal> x12083 = IKatan2WithCheck(IkReal(x12080),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12083.valid){
continue;
}
IkReal x12081=((1.0)*(x12083.value));
IkReal x12082=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12081)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12081)));
IkReal gconst10=(x12080*x12082);
IkReal gconst11=((1.0)*r10*x12082);
IkReal x12084=r12*r12;
IkReal x12085=((1.0)+(((-1.0)*x12084)));
IkReal x12086=(r22*sj1*sj2);
IkReal x12087=(cj1*cj2*r22);
CheckValue<IkReal> x12094=IKPowWithIntegerCheck(x12085,-1);
if(!x12094.valid){
continue;
}
IkReal x12088=x12094.value;
CheckValue<IkReal> x12095=IKPowWithIntegerCheck(((-1.0)+x12084),-1);
if(!x12095.valid){
continue;
}
IkReal x12089=x12095.value;
IkReal x12090=((1.0)*x12088);
if((x12085) < -0.00001)
continue;
IkReal x12091=IKsqrt(x12085);
IkReal x12092=(r12*x12089*x12091);
IkReal x12093=((((-1.0)*x12090*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12090*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x12088)));
j4eval[0]=x12093;
j4eval[1]=((IKabs(((((-1.0)*x12087))+x12086)))+(IKabs((((x12087*x12092))+(((-1.0)*x12086*x12092))))));
j4eval[2]=IKsign(x12093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12096=((-1.0)*r11);
CheckValue<IkReal> x12099 = IKatan2WithCheck(IkReal(x12096),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12099.valid){
continue;
}
IkReal x12097=((1.0)*(x12099.value));
IkReal x12098=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12097)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12097)));
IkReal gconst10=(x12096*x12098);
IkReal gconst11=((1.0)*r10*x12098);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12100=((-1.0)*r11);
CheckValue<IkReal> x12103 = IKatan2WithCheck(IkReal(x12100),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12103.valid){
continue;
}
IkReal x12101=((1.0)*(x12103.value));
IkReal x12102=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12101)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12101)));
IkReal gconst10=(x12100*x12102);
IkReal gconst11=((1.0)*r10*x12102);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12104=((-1.0)*r11);
CheckValue<IkReal> x12107 = IKatan2WithCheck(IkReal(x12104),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12107.valid){
continue;
}
IkReal x12105=((1.0)*(x12107.value));
IkReal x12106=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12105)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12105)));
IkReal gconst10=(x12104*x12106);
IkReal gconst11=((1.0)*r10*x12106);
IkReal x12108=(cj1*r02*sj2);
IkReal x12109=(cj2*r02*sj1);
IkReal x12110=x11815;
IkReal x12111=(r12*x12110);
j4eval[0]=((IKabs((((x12108*x12111))+((x12109*x12111)))))+(IKabs((x12109+x12108))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12112=(cj1*sj2);
IkReal x12113=(cj2*sj1);
IkReal x12114=(gconst11*r00);
IkReal x12115=((1.0)*gconst10*r01);
CheckValue<IkReal> x12116=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12116.valid){
continue;
}
CheckValue<IkReal> x12117 = IKatan2WithCheck(IkReal((((x12112*x12114))+(((-1.0)*x12112*x12115))+((x12113*x12114))+(((-1.0)*x12113*x12115)))),IkReal((((r02*x12113))+((r02*x12112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12116.value)))+(x12117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12118=IKcos(j4);
IkReal x12119=IKsin(j4);
IkReal x12120=((1.0)*cj2);
IkReal x12121=((1.0)*x12118);
IkReal x12122=(gconst10*x12118);
IkReal x12123=(gconst10*x12119);
IkReal x12124=((1.0)*gconst11*x12119);
evalcond[0]=(((r02*x12119))+((r01*x12122))+(((-1.0)*gconst11*r00*x12121)));
evalcond[1]=((((-1.0)*r20*x12124))+((r21*x12123))+(((-1.0)*r22*x12121)));
evalcond[2]=((((-1.0)*r12*x12121))+(((-1.0)*r10*x12124))+((r11*x12123)));
evalcond[3]=((-1.0)+((r01*x12123))+(((-1.0)*r02*x12121))+(((-1.0)*r00*x12124)));
evalcond[4]=(((r21*x12122))+(((-1.0)*cj1*x12120))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12121))+((r22*x12119)));
evalcond[5]=((((-1.0)*sj1*x12120))+(((-1.0)*cj1*sj2))+((r12*x12119))+(((-1.0)*gconst11*r10*x12121))+((r11*x12122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12125=(gconst10*r01);
IkReal x12126=(gconst11*r00);
CheckValue<IkReal> x12127 = IKatan2WithCheck(IkReal((x12125+(((-1.0)*x12126)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12127.valid){
continue;
}
CheckValue<IkReal> x12128=IKPowWithIntegerCheck(IKsign(((x12126*x12126)+(r02*r02)+(x12125*x12125)+(((-2.0)*x12125*x12126)))),-1);
if(!x12128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12127.value)+(((1.5707963267949)*(x12128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12129=IKcos(j4);
IkReal x12130=IKsin(j4);
IkReal x12131=((1.0)*cj2);
IkReal x12132=((1.0)*x12129);
IkReal x12133=(gconst10*x12129);
IkReal x12134=(gconst10*x12130);
IkReal x12135=((1.0)*gconst11*x12130);
evalcond[0]=((((-1.0)*gconst11*r00*x12132))+((r01*x12133))+((r02*x12130)));
evalcond[1]=((((-1.0)*r20*x12135))+((r21*x12134))+(((-1.0)*r22*x12132)));
evalcond[2]=((((-1.0)*r12*x12132))+(((-1.0)*r10*x12135))+((r11*x12134)));
evalcond[3]=((-1.0)+((r01*x12134))+(((-1.0)*r00*x12135))+(((-1.0)*r02*x12132)));
evalcond[4]=((((-1.0)*cj1*x12131))+((sj1*sj2))+((r21*x12133))+((r22*x12130))+(((-1.0)*gconst11*r20*x12132)));
evalcond[5]=(((r12*x12130))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12132))+((r11*x12133))+(((-1.0)*sj1*x12131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12136 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12136.valid){
continue;
}
CheckValue<IkReal> x12137=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12136.value)+(((1.5707963267949)*(x12137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12138=IKcos(j4);
IkReal x12139=IKsin(j4);
IkReal x12140=((1.0)*cj2);
IkReal x12141=((1.0)*x12138);
IkReal x12142=(gconst10*x12138);
IkReal x12143=(gconst10*x12139);
IkReal x12144=((1.0)*gconst11*x12139);
evalcond[0]=(((r01*x12142))+((r02*x12139))+(((-1.0)*gconst11*r00*x12141)));
evalcond[1]=((((-1.0)*r22*x12141))+(((-1.0)*r20*x12144))+((r21*x12143)));
evalcond[2]=((((-1.0)*r12*x12141))+((r11*x12143))+(((-1.0)*r10*x12144)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12144))+(((-1.0)*r02*x12141))+((r01*x12143)));
evalcond[4]=((((-1.0)*gconst11*r20*x12141))+((sj1*sj2))+((r22*x12139))+(((-1.0)*cj1*x12140))+((r21*x12142)));
evalcond[5]=((((-1.0)*gconst11*r10*x12141))+((r12*x12139))+(((-1.0)*cj1*sj2))+((r11*x12142))+(((-1.0)*sj1*x12140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12145=((-1.0)*r11);
CheckValue<IkReal> x12148 = IKatan2WithCheck(IkReal(x12145),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12148.valid){
continue;
}
IkReal x12146=((1.0)*(x12148.value));
IkReal x12147=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12146)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12146)));
IkReal gconst10=(x12145*x12147);
IkReal gconst11=((1.0)*r10*x12147);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12149=((-1.0)*r11);
CheckValue<IkReal> x12152 = IKatan2WithCheck(IkReal(x12149),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12152.valid){
continue;
}
IkReal x12150=((1.0)*(x12152.value));
IkReal x12151=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12150)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12150)));
IkReal gconst10=(x12149*x12151);
IkReal gconst11=((1.0)*r10*x12151);
IkReal x12153=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12157=IKPowWithIntegerCheck(x12153,-1);
if(!x12157.valid){
continue;
}
IkReal x12154=x12157.value;
IkReal x12155=((1.0)*x12154);
IkReal x12156=((((-2.0)*r00*r01*r10*r11*x12154))+(((-1.0)*x12155*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x12155*(r00*r00)*(r10*r10))));
j4eval[0]=x12156;
j4eval[1]=r02;
j4eval[2]=x12153;
j4eval[3]=IKsign(x12156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12158=((-1.0)*r11);
CheckValue<IkReal> x12161 = IKatan2WithCheck(IkReal(x12158),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12161.valid){
continue;
}
IkReal x12159=((1.0)*(x12161.value));
IkReal x12160=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12159)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12159)));
IkReal gconst10=(x12158*x12160);
IkReal gconst11=((1.0)*r10*x12160);
IkReal x12162=r12*r12;
IkReal x12163=((1.0)*r02);
IkReal x12164=(cj1*sj2);
IkReal x12165=(cj2*sj1);
CheckValue<IkReal> x12169=IKPowWithIntegerCheck(((-1.0)+x12162),-1);
if(!x12169.valid){
continue;
}
IkReal x12166=x12169.value;
if((((1.0)+(((-1.0)*x12162)))) < -0.00001)
continue;
IkReal x12167=IKsqrt(((1.0)+(((-1.0)*x12162))));
IkReal x12168=(r12*x12166*x12167);
j4eval[0]=((IKabs(((((-1.0)*x12163*x12164*x12168))+(((-1.0)*x12163*x12165*x12168)))))+(IKabs(((((-1.0)*x12163*x12164))+(((-1.0)*x12163*x12165))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12170=(cj1*sj2);
IkReal x12171=(gconst10*r01);
IkReal x12172=(cj2*sj1);
IkReal x12173=((1.0)*r02);
IkReal x12174=((1.0)*gconst11*r00);
CheckValue<IkReal> x12175=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12175.valid){
continue;
}
CheckValue<IkReal> x12176 = IKatan2WithCheck(IkReal(((((-1.0)*x12170*x12174))+((x12170*x12171))+((x12171*x12172))+(((-1.0)*x12172*x12174)))),IkReal(((((-1.0)*x12170*x12173))+(((-1.0)*x12172*x12173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12175.value)))+(x12176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12177=IKcos(j4);
IkReal x12178=IKsin(j4);
IkReal x12179=((1.0)*x12177);
IkReal x12180=(gconst10*x12177);
IkReal x12181=(gconst10*x12178);
IkReal x12182=((1.0)*gconst11*x12178);
evalcond[0]=((((-1.0)*gconst11*r00*x12179))+((r01*x12180))+((r02*x12178)));
evalcond[1]=((((-1.0)*r22*x12179))+((r21*x12181))+(((-1.0)*r20*x12182)));
evalcond[2]=(((r11*x12181))+(((-1.0)*r10*x12182))+(((-1.0)*r12*x12179)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12182))+((r01*x12181))+(((-1.0)*r02*x12179)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12179))+((r11*x12180))+((cj1*sj2))+((r12*x12178)));
evalcond[5]=((((-1.0)*gconst11*r20*x12179))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12180))+((r22*x12178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12183=(gconst10*r01);
IkReal x12184=(gconst11*r00);
CheckValue<IkReal> x12185=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12183*x12183)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12184*x12184)))+(((2.0)*x12183*x12184)))),-1);
if(!x12185.valid){
continue;
}
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal((x12183+(((-1.0)*x12184)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12185.value)))+(x12186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12187=IKcos(j4);
IkReal x12188=IKsin(j4);
IkReal x12189=((1.0)*x12187);
IkReal x12190=(gconst10*x12187);
IkReal x12191=(gconst10*x12188);
IkReal x12192=((1.0)*gconst11*x12188);
evalcond[0]=((((-1.0)*gconst11*r00*x12189))+((r02*x12188))+((r01*x12190)));
evalcond[1]=((((-1.0)*r20*x12192))+((r21*x12191))+(((-1.0)*r22*x12189)));
evalcond[2]=(((r11*x12191))+(((-1.0)*r10*x12192))+(((-1.0)*r12*x12189)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12189))+((r01*x12191))+(((-1.0)*r00*x12192)));
evalcond[4]=(((cj2*sj1))+((r12*x12188))+((cj1*sj2))+((r11*x12190))+(((-1.0)*gconst11*r10*x12189)));
evalcond[5]=(((r21*x12190))+(((-1.0)*cj1*cj2))+((r22*x12188))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12193=((1.0)*gconst11);
CheckValue<IkReal> x12194=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12193)))),-1);
if(!x12194.valid){
continue;
}
CheckValue<IkReal> x12195 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12194.value)))+(x12195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12196=IKcos(j4);
IkReal x12197=IKsin(j4);
IkReal x12198=((1.0)*x12196);
IkReal x12199=(gconst10*x12196);
IkReal x12200=(gconst10*x12197);
IkReal x12201=((1.0)*gconst11*x12197);
evalcond[0]=((((-1.0)*gconst11*r00*x12198))+((r02*x12197))+((r01*x12199)));
evalcond[1]=(((r21*x12200))+(((-1.0)*r22*x12198))+(((-1.0)*r20*x12201)));
evalcond[2]=((((-1.0)*r10*x12201))+(((-1.0)*r12*x12198))+((r11*x12200)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12198))+(((-1.0)*r00*x12201))+((r01*x12200)));
evalcond[4]=(((cj2*sj1))+((r12*x12197))+((cj1*sj2))+((r11*x12199))+(((-1.0)*gconst11*r10*x12198)));
evalcond[5]=(((r21*x12199))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12197))+(((-1.0)*gconst11*r20*x12198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12202=((-1.0)*r11);
IkReal x12203=((-1.0)*r10);
CheckValue<IkReal> x12205 = IKatan2WithCheck(IkReal(x12202),IkReal(x12203),IKFAST_ATAN2_MAGTHRESH);
if(!x12205.valid){
continue;
}
IkReal x12204=((1.0)*(x12205.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12204)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12203);
rxp1_1=(px*r21);
rxp1_2=(px*x12202);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12204)));
IkReal gconst10=x12202;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12206=((-1.0)*r11);
IkReal x12207=((-1.0)*r10);
CheckValue<IkReal> x12209 = IKatan2WithCheck(IkReal(x12206),IkReal(x12207),IKFAST_ATAN2_MAGTHRESH);
if(!x12209.valid){
continue;
}
IkReal x12208=((1.0)*(x12209.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12208)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12207);
rxp1_1=(px*r21);
rxp1_2=(px*x12206);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12208)));
IkReal gconst10=x12206;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12210=((-1.0)*r11);
IkReal x12211=((-1.0)*r10);
CheckValue<IkReal> x12213 = IKatan2WithCheck(IkReal(x12210),IkReal(x12211),IKFAST_ATAN2_MAGTHRESH);
if(!x12213.valid){
continue;
}
IkReal x12212=((1.0)*(x12213.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12212)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12211);
rxp1_1=(px*r21);
rxp1_2=(px*x12210);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12212)));
IkReal gconst10=x12210;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12216=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12216.valid){
continue;
}
IkReal x12214=x12216.value;
IkReal x12215=(sj0*x12214);
cj4array[0]=(((cj1*sj2*x12215))+((cj2*sj1*x12215)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12217=IKsin(j4);
IkReal x12218=IKcos(j4);
IkReal x12219=(gconst10*r21);
IkReal x12220=((1.0)*x12218);
IkReal x12221=((1.0)*gconst11*x12217);
evalcond[0]=(r02*x12217);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12220)));
evalcond[2]=(((x12217*x12219))+(((-1.0)*r20*x12221)));
evalcond[3]=((((-1.0)*r10*x12221))+((gconst10*r11*x12217)));
evalcond[4]=(((x12218*x12219))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12223=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12223.valid){
continue;
}
IkReal x12222=x12223.value;
cj4array[0]=(((cj1*cj2*x12222))+(((-1.0)*sj1*sj2*x12222)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12224=IKsin(j4);
IkReal x12225=IKcos(j4);
IkReal x12226=((1.0)*sj0);
IkReal x12227=(gconst10*x12224);
IkReal x12228=((1.0)*x12225);
IkReal x12229=((1.0)*gconst11*x12224);
evalcond[0]=(r02*x12224);
evalcond[1]=((((-1.0)*x12226))+(((-1.0)*r02*x12228)));
evalcond[2]=(((r21*x12227))+(((-1.0)*r20*x12229)));
evalcond[3]=(((r11*x12227))+(((-1.0)*r10*x12229)));
evalcond[4]=(((gconst10*r11*x12225))+(((-1.0)*cj2*sj1*x12226))+(((-1.0)*cj1*sj2*x12226))+(((-1.0)*gconst11*r10*x12228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12230=IKPowWithIntegerCheck(r02,-1);
if(!x12230.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12230.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12231=IKsin(j4);
IkReal x12232=IKcos(j4);
IkReal x12233=(gconst10*r21);
IkReal x12234=((1.0)*cj1);
IkReal x12235=(gconst10*r11);
IkReal x12236=((1.0)*gconst11*x12231);
IkReal x12237=((1.0)*gconst11*x12232);
evalcond[0]=(r02*x12231);
evalcond[1]=(((x12231*x12233))+(((-1.0)*r20*x12236)));
evalcond[2]=(((x12231*x12235))+(((-1.0)*r10*x12236)));
evalcond[3]=((((-1.0)*cj2*x12234))+(((-1.0)*r20*x12237))+((sj1*sj2))+((x12232*x12233)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12232*x12235))+(((-1.0)*sj0*sj2*x12234))+(((-1.0)*r10*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12238=((1.0)*gconst11);
CheckValue<IkReal> x12239 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12238))+(((-1.0)*r10*sj0*x12238))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12239.valid){
continue;
}
CheckValue<IkReal> x12240=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12239.value)+(((1.5707963267949)*(x12240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12241=IKsin(j4);
IkReal x12242=IKcos(j4);
IkReal x12243=((1.0)*gconst11);
IkReal x12244=((1.0)*cj2);
IkReal x12245=((1.0)*sj0);
IkReal x12246=(cj1*sj2);
IkReal x12247=(gconst10*x12242);
IkReal x12248=(gconst10*x12241);
IkReal x12249=((1.0)*x12242);
evalcond[0]=((((-1.0)*r20*x12241*x12243))+((r21*x12248)));
evalcond[1]=((((-1.0)*r12*x12249))+cj0+((r11*x12248))+(((-1.0)*r10*x12241*x12243)));
evalcond[2]=((((-1.0)*cj1*x12244))+(((-1.0)*r20*x12242*x12243))+((sj1*sj2))+((r21*x12247)));
evalcond[3]=(((r01*x12248))+(((-1.0)*x12245))+(((-1.0)*r00*x12241*x12243))+(((-1.0)*r02*x12249)));
evalcond[4]=((((-1.0)*cj0*sj1*x12244))+(((-1.0)*r00*x12242*x12243))+((r01*x12247))+((r02*x12241))+(((-1.0)*cj0*x12246)));
evalcond[5]=(((r11*x12247))+((r12*x12241))+(((-1.0)*r10*x12242*x12243))+(((-1.0)*x12245*x12246))+(((-1.0)*sj0*sj1*x12244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12250=(gconst10*r21);
IkReal x12251=(gconst11*r20);
IkReal x12252=(sj1*sj2);
IkReal x12253=(cj1*cj2);
CheckValue<IkReal> x12254 = IKatan2WithCheck(IkReal((((r22*x12252))+(((-1.0)*r22*x12253)))),IkReal((((x12251*x12253))+(((-1.0)*x12250*x12253))+((x12250*x12252))+(((-1.0)*x12251*x12252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12254.valid){
continue;
}
CheckValue<IkReal> x12255=IKPowWithIntegerCheck(IKsign(((((2.0)*x12250*x12251))+(((-1.0)*(x12251*x12251)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12250*x12250))))),-1);
if(!x12255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12254.value)+(((1.5707963267949)*(x12255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12256=IKsin(j4);
IkReal x12257=IKcos(j4);
IkReal x12258=((1.0)*cj2);
IkReal x12259=((1.0)*sj0);
IkReal x12260=(cj1*sj2);
IkReal x12261=((1.0)*x12257);
IkReal x12262=(gconst10*x12257);
IkReal x12263=(gconst10*x12256);
IkReal x12264=((1.0)*gconst11*x12256);
evalcond[0]=((((-1.0)*r20*x12264))+((r21*x12263))+(((-1.0)*r22*x12261)));
evalcond[1]=((((-1.0)*r12*x12261))+cj0+((r11*x12263))+(((-1.0)*r10*x12264)));
evalcond[2]=(((r01*x12263))+(((-1.0)*r02*x12261))+(((-1.0)*x12259))+(((-1.0)*r00*x12264)));
evalcond[3]=(((r22*x12256))+(((-1.0)*gconst11*r20*x12261))+((sj1*sj2))+((r21*x12262))+(((-1.0)*cj1*x12258)));
evalcond[4]=((((-1.0)*gconst11*r00*x12261))+(((-1.0)*cj0*sj1*x12258))+((r01*x12262))+(((-1.0)*cj0*x12260))+((r02*x12256)));
evalcond[5]=(((r12*x12256))+((r11*x12262))+(((-1.0)*gconst11*r10*x12261))+(((-1.0)*sj0*sj1*x12258))+(((-1.0)*x12259*x12260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12265=((1.0)*sj0);
IkReal x12266=((1.0)*gconst10);
CheckValue<IkReal> x12267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12266))+(((-1.0)*gconst11*r21)))),-1);
if(!x12267.valid){
continue;
}
CheckValue<IkReal> x12268 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12265))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12265))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*cj0*r01*x12266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12267.value)))+(x12268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12269=IKsin(j4);
IkReal x12270=IKcos(j4);
IkReal x12271=((1.0)*cj2);
IkReal x12272=((1.0)*sj0);
IkReal x12273=(cj1*sj2);
IkReal x12274=((1.0)*x12270);
IkReal x12275=(gconst10*x12270);
IkReal x12276=(gconst10*x12269);
IkReal x12277=((1.0)*gconst11*x12269);
evalcond[0]=(((r21*x12276))+(((-1.0)*r22*x12274))+(((-1.0)*r20*x12277)));
evalcond[1]=(cj0+(((-1.0)*r10*x12277))+(((-1.0)*r12*x12274))+((r11*x12276)));
evalcond[2]=((((-1.0)*r02*x12274))+(((-1.0)*x12272))+(((-1.0)*r00*x12277))+((r01*x12276)));
evalcond[3]=(((r21*x12275))+(((-1.0)*cj1*x12271))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12274))+((r22*x12269)));
evalcond[4]=((((-1.0)*cj0*x12273))+(((-1.0)*gconst11*r00*x12274))+(((-1.0)*cj0*sj1*x12271))+((r01*x12275))+((r02*x12269)));
evalcond[5]=((((-1.0)*x12272*x12273))+((r12*x12269))+(((-1.0)*sj0*sj1*x12271))+((r11*x12275))+(((-1.0)*gconst11*r10*x12274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12278=((1.0)*gconst11);
CheckValue<IkReal> x12279 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12279.valid){
continue;
}
CheckValue<IkReal> x12280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12278)))),-1);
if(!x12280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12279.value)+(((1.5707963267949)*(x12280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12281=IKsin(j4);
IkReal x12282=IKcos(j4);
IkReal x12283=((1.0)*cj2);
IkReal x12284=((1.0)*sj0);
IkReal x12285=(cj1*sj2);
IkReal x12286=((1.0)*x12282);
IkReal x12287=(gconst10*x12282);
IkReal x12288=(gconst10*x12281);
IkReal x12289=((1.0)*gconst11*x12281);
evalcond[0]=((((-1.0)*r22*x12286))+(((-1.0)*r20*x12289))+((r21*x12288)));
evalcond[1]=((((-1.0)*r10*x12289))+cj0+(((-1.0)*r12*x12286))+((r11*x12288)));
evalcond[2]=(((r01*x12288))+(((-1.0)*r00*x12289))+(((-1.0)*r02*x12286))+(((-1.0)*x12284)));
evalcond[3]=(((r22*x12281))+(((-1.0)*gconst11*r20*x12286))+(((-1.0)*cj1*x12283))+((sj1*sj2))+((r21*x12287)));
evalcond[4]=(((r02*x12281))+(((-1.0)*gconst11*r00*x12286))+(((-1.0)*cj0*sj1*x12283))+((r01*x12287))+(((-1.0)*cj0*x12285)));
evalcond[5]=((((-1.0)*sj0*sj1*x12283))+(((-1.0)*gconst11*r10*x12286))+(((-1.0)*x12284*x12285))+((r12*x12281))+((r11*x12287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12290=((-1.0)*r11);
CheckValue<IkReal> x12293 = IKatan2WithCheck(IkReal(x12290),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12293.valid){
continue;
}
IkReal x12291=((1.0)*(x12293.value));
IkReal x12292=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12291)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12291)));
IkReal gconst10=(x12290*x12292);
IkReal gconst11=((1.0)*r10*x12292);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12294=gconst10*gconst10;
IkReal x12295=gconst11*gconst11;
IkReal x12296=(gconst10*r21);
IkReal x12297=(cj3*r00);
IkReal x12298=(r00*sj3);
IkReal x12299=((1.0)*gconst11);
IkReal x12300=(gconst10*r20);
IkReal x12301=(r01*sj3);
IkReal x12302=(cj3*gconst11*r01);
IkReal x12303=(r21*x12294);
IkReal x12304=(r20*x12295);
CheckValue<IkReal> x12305 = IKatan2WithCheck(IkReal((((gconst10*r22*x12297))+((r22*x12302)))),IkReal(((((-1.0)*cj3*r01*x12304))+((x12296*x12302))+(((-1.0)*x12297*x12299*x12300))+((x12297*x12303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12305.valid){
continue;
}
CheckValue<IkReal> x12306=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12299*x12300*x12301))+(((-1.0)*x12296*x12298*x12299))+((x12298*x12304))+((x12301*x12303))+((r02*r22*sj3)))),-1);
if(!x12306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12305.value)+(((1.5707963267949)*(x12306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12307=IKsin(j4);
IkReal x12308=IKcos(j4);
IkReal x12309=(sj1*sj2);
IkReal x12310=(gconst10*sj3);
IkReal x12311=(cj3*gconst10);
IkReal x12312=(gconst11*r20);
IkReal x12313=(gconst11*r21);
IkReal x12314=(gconst11*r00);
IkReal x12315=(cj3*gconst11);
IkReal x12316=(gconst11*r10);
IkReal x12317=((1.0)*cj1);
IkReal x12318=(cj2*sj1);
IkReal x12319=(gconst11*sj3);
IkReal x12320=(cj2*x12317);
IkReal x12321=((1.0)*x12308);
IkReal x12322=((1.0)*x12307);
IkReal x12323=(gconst10*x12307);
IkReal x12324=(cj3*x12307);
IkReal x12325=(sj3*x12308);
evalcond[0]=((((-1.0)*r22*x12321))+(((-1.0)*x12312*x12322))+((r21*x12323)));
evalcond[1]=((((-1.0)*x12316*x12322))+(((-1.0)*r12*x12321))+((r11*x12323)));
evalcond[2]=((-1.0)+((r01*x12323))+(((-1.0)*x12314*x12322))+(((-1.0)*r02*x12321)));
evalcond[3]=((((-1.0)*cj3*x12314*x12321))+((r00*x12310))+((r01*x12319))+((r02*x12324))+((r01*x12308*x12311)));
evalcond[4]=(((x12314*x12325))+(((-1.0)*r01*x12310*x12321))+((r00*x12311))+((r01*x12315))+(((-1.0)*r02*sj3*x12322)));
evalcond[5]=(((r21*x12308*x12311))+((sj3*x12313))+((cj1*sj2))+x12318+(((-1.0)*cj3*x12312*x12321))+((r22*x12324))+((r20*x12310)));
evalcond[6]=(((r10*x12310))+((r11*x12319))+((r11*x12308*x12311))+x12309+(((-1.0)*x12320))+(((-1.0)*r10*x12315*x12321))+((r12*x12324)));
evalcond[7]=(((x12312*x12325))+x12309+(((-1.0)*r21*x12310*x12321))+(((-1.0)*x12320))+(((-1.0)*r22*sj3*x12322))+((r20*x12311))+((cj3*x12313)));
evalcond[8]=((((-1.0)*sj2*x12317))+((r10*x12311))+((r11*x12315))+(((-1.0)*x12318))+((x12316*x12325))+(((-1.0)*r11*x12310*x12321))+(((-1.0)*r12*sj3*x12322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12326.value)+(((1.5707963267949)*(x12327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12328=IKsin(j4);
IkReal x12329=IKcos(j4);
IkReal x12330=(sj1*sj2);
IkReal x12331=(gconst10*sj3);
IkReal x12332=(cj3*gconst10);
IkReal x12333=(gconst11*r20);
IkReal x12334=(gconst11*r21);
IkReal x12335=(gconst11*r00);
IkReal x12336=(cj3*gconst11);
IkReal x12337=(gconst11*r10);
IkReal x12338=((1.0)*cj1);
IkReal x12339=(cj2*sj1);
IkReal x12340=(gconst11*sj3);
IkReal x12341=(cj2*x12338);
IkReal x12342=((1.0)*x12329);
IkReal x12343=((1.0)*x12328);
IkReal x12344=(gconst10*x12328);
IkReal x12345=(cj3*x12328);
IkReal x12346=(sj3*x12329);
evalcond[0]=(((r21*x12344))+(((-1.0)*x12333*x12343))+(((-1.0)*r22*x12342)));
evalcond[1]=((((-1.0)*x12337*x12343))+(((-1.0)*r12*x12342))+((r11*x12344)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12342))+(((-1.0)*x12335*x12343))+((r01*x12344)));
evalcond[3]=((((-1.0)*cj3*x12335*x12342))+((r00*x12331))+((r01*x12340))+((r02*x12345))+((r01*x12329*x12332)));
evalcond[4]=((((-1.0)*r01*x12331*x12342))+((x12335*x12346))+((r01*x12336))+((r00*x12332))+(((-1.0)*r02*sj3*x12343)));
evalcond[5]=(((r20*x12331))+((cj1*sj2))+x12339+(((-1.0)*cj3*x12333*x12342))+((r22*x12345))+((sj3*x12334))+((r21*x12329*x12332)));
evalcond[6]=((((-1.0)*r10*x12336*x12342))+x12330+(((-1.0)*x12341))+((r11*x12329*x12332))+((r11*x12340))+((r10*x12331))+((r12*x12345)));
evalcond[7]=(((x12333*x12346))+(((-1.0)*r21*x12331*x12342))+((r20*x12332))+x12330+(((-1.0)*x12341))+((cj3*x12334))+(((-1.0)*r22*sj3*x12343)));
evalcond[8]=(((x12337*x12346))+((r10*x12332))+(((-1.0)*r11*x12331*x12342))+(((-1.0)*sj2*x12338))+(((-1.0)*r12*sj3*x12343))+((r11*x12336))+(((-1.0)*x12339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12347=((-1.0)*r11);
CheckValue<IkReal> x12350 = IKatan2WithCheck(IkReal(x12347),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12350.valid){
continue;
}
IkReal x12348=((1.0)*(x12350.value));
IkReal x12349=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12348)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12348)));
IkReal gconst10=(x12347*x12349);
IkReal gconst11=((1.0)*r10*x12349);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12351=gconst10*gconst10;
IkReal x12352=gconst11*gconst11;
IkReal x12353=(gconst10*r21);
IkReal x12354=(cj3*r00);
IkReal x12355=(r00*sj3);
IkReal x12356=((1.0)*gconst11);
IkReal x12357=(gconst10*r20);
IkReal x12358=(r01*sj3);
IkReal x12359=(cj3*gconst11*r01);
IkReal x12360=(r21*x12351);
IkReal x12361=(r20*x12352);
CheckValue<IkReal> x12362=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12353*x12355*x12356))+(((-1.0)*x12356*x12357*x12358))+((x12358*x12360))+((x12355*x12361))+((r02*r22*sj3)))),-1);
if(!x12362.valid){
continue;
}
CheckValue<IkReal> x12363 = IKatan2WithCheck(IkReal((((r22*x12359))+((gconst10*r22*x12354)))),IkReal(((((-1.0)*cj3*r01*x12361))+((x12353*x12359))+(((-1.0)*x12354*x12356*x12357))+((x12354*x12360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12362.value)))+(x12363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12364=IKsin(j4);
IkReal x12365=IKcos(j4);
IkReal x12366=(cj2*sj1);
IkReal x12367=(cj1*sj2);
IkReal x12368=(gconst10*sj3);
IkReal x12369=(cj3*gconst10);
IkReal x12370=(gconst11*r20);
IkReal x12371=(gconst11*r21);
IkReal x12372=(gconst11*r00);
IkReal x12373=(sj1*sj2);
IkReal x12374=(cj3*gconst11);
IkReal x12375=(gconst11*r10);
IkReal x12376=(cj1*cj2);
IkReal x12377=(gconst11*sj3);
IkReal x12378=((1.0)*x12365);
IkReal x12379=((1.0)*x12364);
IkReal x12380=(gconst10*x12364);
IkReal x12381=(cj3*x12364);
IkReal x12382=(sj3*x12365);
IkReal x12383=(x12367+x12366);
evalcond[0]=((((-1.0)*r22*x12378))+((r21*x12380))+(((-1.0)*x12370*x12379)));
evalcond[1]=(((r11*x12380))+(((-1.0)*x12375*x12379))+(((-1.0)*r12*x12378)));
evalcond[2]=((1.0)+((r01*x12380))+(((-1.0)*r02*x12378))+(((-1.0)*x12372*x12379)));
evalcond[3]=(((r02*x12381))+(((-1.0)*cj3*x12372*x12378))+((r00*x12368))+((r01*x12377))+((r01*x12365*x12369)));
evalcond[4]=((((-1.0)*r02*sj3*x12379))+((x12372*x12382))+((r00*x12369))+((r01*x12374))+(((-1.0)*r01*x12368*x12378)));
evalcond[5]=((((-1.0)*cj3*x12370*x12378))+((r21*x12365*x12369))+x12383+((sj3*x12371))+((r22*x12381))+((r20*x12368)));
evalcond[6]=(((r12*x12381))+((r11*x12377))+((r11*x12365*x12369))+((r10*x12368))+x12376+(((-1.0)*x12373))+(((-1.0)*r10*x12374*x12378)));
evalcond[7]=((((-1.0)*r12*sj3*x12379))+((r11*x12374))+(((-1.0)*r11*x12368*x12378))+((r10*x12369))+x12383+((x12375*x12382)));
evalcond[8]=(((x12370*x12382))+x12373+((cj3*x12371))+(((-1.0)*r22*sj3*x12379))+(((-1.0)*x12376))+(((-1.0)*r21*x12368*x12378))+((r20*x12369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12384=((1.0)*gconst11);
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
CheckValue<IkReal> x12386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12384))+(((-1.0)*gconst10*r20)))),-1);
if(!x12386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12385.value)+(((1.5707963267949)*(x12386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12387=IKsin(j4);
IkReal x12388=IKcos(j4);
IkReal x12389=(cj2*sj1);
IkReal x12390=(cj1*sj2);
IkReal x12391=(gconst10*sj3);
IkReal x12392=(cj3*gconst10);
IkReal x12393=(gconst11*r20);
IkReal x12394=(gconst11*r21);
IkReal x12395=(gconst11*r00);
IkReal x12396=(sj1*sj2);
IkReal x12397=(cj3*gconst11);
IkReal x12398=(gconst11*r10);
IkReal x12399=(cj1*cj2);
IkReal x12400=(gconst11*sj3);
IkReal x12401=((1.0)*x12388);
IkReal x12402=((1.0)*x12387);
IkReal x12403=(gconst10*x12387);
IkReal x12404=(cj3*x12387);
IkReal x12405=(sj3*x12388);
IkReal x12406=(x12389+x12390);
evalcond[0]=((((-1.0)*x12393*x12402))+(((-1.0)*r22*x12401))+((r21*x12403)));
evalcond[1]=((((-1.0)*r12*x12401))+(((-1.0)*x12398*x12402))+((r11*x12403)));
evalcond[2]=((1.0)+(((-1.0)*x12395*x12402))+(((-1.0)*r02*x12401))+((r01*x12403)));
evalcond[3]=(((r02*x12404))+((r01*x12388*x12392))+(((-1.0)*cj3*x12395*x12401))+((r00*x12391))+((r01*x12400)));
evalcond[4]=(((r01*x12397))+((r00*x12392))+((x12395*x12405))+(((-1.0)*r01*x12391*x12401))+(((-1.0)*r02*sj3*x12402)));
evalcond[5]=(((r21*x12388*x12392))+((r22*x12404))+((r20*x12391))+((sj3*x12394))+x12406+(((-1.0)*cj3*x12393*x12401)));
evalcond[6]=(x12399+((r10*x12391))+(((-1.0)*r10*x12397*x12401))+(((-1.0)*x12396))+((r11*x12388*x12392))+((r11*x12400))+((r12*x12404)));
evalcond[7]=(((r11*x12397))+(((-1.0)*r11*x12391*x12401))+(((-1.0)*r12*sj3*x12402))+((r10*x12392))+x12406+((x12398*x12405)));
evalcond[8]=(((cj3*x12394))+x12396+((r20*x12392))+((x12393*x12405))+(((-1.0)*x12399))+(((-1.0)*r22*sj3*x12402))+(((-1.0)*r21*x12391*x12401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12407=((-1.0)*r11);
IkReal x12408=((-1.0)*r10);
CheckValue<IkReal> x12410 = IKatan2WithCheck(IkReal(x12407),IkReal(x12408),IKFAST_ATAN2_MAGTHRESH);
if(!x12410.valid){
continue;
}
IkReal x12409=((1.0)*(x12410.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12409)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12408);
rxp1_1=(px*r21);
rxp1_2=(px*x12407);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12409)));
IkReal gconst10=x12407;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12411=((-1.0)*r11);
IkReal x12412=((-1.0)*r10);
CheckValue<IkReal> x12414 = IKatan2WithCheck(IkReal(x12411),IkReal(x12412),IKFAST_ATAN2_MAGTHRESH);
if(!x12414.valid){
continue;
}
IkReal x12413=((1.0)*(x12414.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12413)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12412);
rxp1_1=(px*r21);
rxp1_2=(px*x12411);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12413)));
IkReal gconst10=x12411;
IkReal gconst11=((1.0)*r10);
IkReal x12415=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12415))+(((-1.0)*r11*r21*x12415)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12416=((-1.0)*r11);
IkReal x12417=((-1.0)*r10);
CheckValue<IkReal> x12419 = IKatan2WithCheck(IkReal(x12416),IkReal(x12417),IKFAST_ATAN2_MAGTHRESH);
if(!x12419.valid){
continue;
}
IkReal x12418=((1.0)*(x12419.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12418)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12417);
rxp1_1=(px*r21);
rxp1_2=(px*x12416);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12418)));
IkReal gconst10=x12416;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12421=IKPowWithIntegerCheck(r02,-1);
if(!x12421.valid){
continue;
}
IkReal x12420=x12421.value;
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(cj3,-1);
if(!x12422.valid){
continue;
}
if( IKabs((x12420*(x12422.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12420)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12420*(x12422.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12420))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12420*(x12422.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12420));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12423=IKsin(j4);
IkReal x12424=IKcos(j4);
IkReal x12425=(cj3*r10);
IkReal x12426=((1.0)*gconst11);
IkReal x12427=(sj1*sj2);
IkReal x12428=(gconst11*sj3);
IkReal x12429=(cj3*r11);
IkReal x12430=(cj2*sj1);
IkReal x12431=(gconst10*r20);
IkReal x12432=(gconst10*sj3);
IkReal x12433=((1.0)*cj0);
IkReal x12434=((1.0)*sj0);
IkReal x12435=(cj1*sj2);
IkReal x12436=(cj3*r21);
IkReal x12437=((1.0)*cj1*cj2);
IkReal x12438=(r20*x12424);
IkReal x12439=(gconst10*x12423);
IkReal x12440=(gconst10*x12424);
IkReal x12441=(r02*x12423);
IkReal x12442=((1.0)*x12424);
evalcond[0]=((((-1.0)*r02*x12442))+(((-1.0)*x12434)));
evalcond[1]=(((r21*x12439))+(((-1.0)*r20*x12423*x12426)));
evalcond[2]=(cj0+(((-1.0)*r10*x12423*x12426))+((r11*x12439)));
evalcond[3]=(((cj3*x12441))+(((-1.0)*cj1*cj2*x12433))+((cj0*x12427)));
evalcond[4]=((((-1.0)*x12430*x12433))+(((-1.0)*x12433*x12435))+(((-1.0)*sj3*x12441)));
evalcond[5]=(((r21*x12428))+(((-1.0)*cj3*x12426*x12438))+x12435+x12430+((x12436*x12440))+((sj3*x12431)));
evalcond[6]=(((x12428*x12438))+((cj3*x12431))+(((-1.0)*x12437))+((gconst11*x12436))+x12427+(((-1.0)*r21*x12432*x12442)));
evalcond[7]=(((sj0*x12427))+((x12429*x12440))+((r10*x12432))+(((-1.0)*cj1*cj2*x12434))+((r11*x12428))+(((-1.0)*x12424*x12425*x12426)));
evalcond[8]=((((-1.0)*r11*x12432*x12442))+(((-1.0)*x12430*x12434))+((gconst10*x12425))+(((-1.0)*x12434*x12435))+((r10*x12424*x12428))+((gconst11*x12429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12443=((1.0)*r20);
IkReal x12444=((1.0)*gconst11);
CheckValue<IkReal> x12445=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12444))),-1);
if(!x12445.valid){
continue;
}
CheckValue<IkReal> x12446=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12443))+((cj3*gconst10*r21))),-1);
if(!x12446.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12445.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12446.value)*(((((-1.0)*gconst10*sj3*x12443))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12444)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12445.value)))+IKsqr(((x12446.value)*(((((-1.0)*gconst10*sj3*x12443))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12444))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12445.value)), ((x12446.value)*(((((-1.0)*gconst10*sj3*x12443))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12444))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12447=IKsin(j4);
IkReal x12448=IKcos(j4);
IkReal x12449=(cj3*r10);
IkReal x12450=((1.0)*gconst11);
IkReal x12451=(sj1*sj2);
IkReal x12452=(gconst11*sj3);
IkReal x12453=(cj3*r11);
IkReal x12454=(cj2*sj1);
IkReal x12455=(gconst10*r20);
IkReal x12456=(gconst10*sj3);
IkReal x12457=((1.0)*cj0);
IkReal x12458=((1.0)*sj0);
IkReal x12459=(cj1*sj2);
IkReal x12460=(cj3*r21);
IkReal x12461=((1.0)*cj1*cj2);
IkReal x12462=(r20*x12448);
IkReal x12463=(gconst10*x12447);
IkReal x12464=(gconst10*x12448);
IkReal x12465=(r02*x12447);
IkReal x12466=((1.0)*x12448);
evalcond[0]=((((-1.0)*r02*x12466))+(((-1.0)*x12458)));
evalcond[1]=((((-1.0)*r20*x12447*x12450))+((r21*x12463)));
evalcond[2]=(cj0+((r11*x12463))+(((-1.0)*r10*x12447*x12450)));
evalcond[3]=(((cj3*x12465))+((cj0*x12451))+(((-1.0)*cj1*cj2*x12457)));
evalcond[4]=((((-1.0)*x12457*x12459))+(((-1.0)*sj3*x12465))+(((-1.0)*x12454*x12457)));
evalcond[5]=((((-1.0)*cj3*x12450*x12462))+((sj3*x12455))+x12454+x12459+((x12460*x12464))+((r21*x12452)));
evalcond[6]=(((gconst11*x12460))+(((-1.0)*r21*x12456*x12466))+((cj3*x12455))+(((-1.0)*x12461))+((x12452*x12462))+x12451);
evalcond[7]=(((x12453*x12464))+((r11*x12452))+(((-1.0)*x12448*x12449*x12450))+(((-1.0)*cj1*cj2*x12458))+((sj0*x12451))+((r10*x12456)));
evalcond[8]=((((-1.0)*x12458*x12459))+((gconst10*x12449))+((r10*x12448*x12452))+(((-1.0)*r11*x12456*x12466))+(((-1.0)*x12454*x12458))+((gconst11*x12453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12467=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12467.valid){
continue;
}
CheckValue<IkReal> x12468=IKPowWithIntegerCheck(r02,-1);
if(!x12468.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12467.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12468.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12467.value)))+IKsqr(((-1.0)*sj0*(x12468.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12467.value)), ((-1.0)*sj0*(x12468.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12469=IKsin(j4);
IkReal x12470=IKcos(j4);
IkReal x12471=(cj3*r10);
IkReal x12472=((1.0)*gconst11);
IkReal x12473=(sj1*sj2);
IkReal x12474=(gconst11*sj3);
IkReal x12475=(cj3*r11);
IkReal x12476=(cj2*sj1);
IkReal x12477=(gconst10*r20);
IkReal x12478=(gconst10*sj3);
IkReal x12479=((1.0)*cj0);
IkReal x12480=((1.0)*sj0);
IkReal x12481=(cj1*sj2);
IkReal x12482=(cj3*r21);
IkReal x12483=((1.0)*cj1*cj2);
IkReal x12484=(r20*x12470);
IkReal x12485=(gconst10*x12469);
IkReal x12486=(gconst10*x12470);
IkReal x12487=(r02*x12469);
IkReal x12488=((1.0)*x12470);
evalcond[0]=((((-1.0)*x12480))+(((-1.0)*r02*x12488)));
evalcond[1]=((((-1.0)*r20*x12469*x12472))+((r21*x12485)));
evalcond[2]=((((-1.0)*r10*x12469*x12472))+cj0+((r11*x12485)));
evalcond[3]=(((cj0*x12473))+((cj3*x12487))+(((-1.0)*cj1*cj2*x12479)));
evalcond[4]=((((-1.0)*x12479*x12481))+(((-1.0)*x12476*x12479))+(((-1.0)*sj3*x12487)));
evalcond[5]=(((x12482*x12486))+((sj3*x12477))+x12476+x12481+(((-1.0)*cj3*x12472*x12484))+((r21*x12474)));
evalcond[6]=((((-1.0)*x12483))+((cj3*x12477))+(((-1.0)*r21*x12478*x12488))+((x12474*x12484))+((gconst11*x12482))+x12473);
evalcond[7]=(((r11*x12474))+(((-1.0)*cj1*cj2*x12480))+(((-1.0)*x12470*x12471*x12472))+((x12475*x12486))+((sj0*x12473))+((r10*x12478)));
evalcond[8]=(((gconst10*x12471))+(((-1.0)*x12480*x12481))+(((-1.0)*r11*x12478*x12488))+((r10*x12470*x12474))+(((-1.0)*x12476*x12480))+((gconst11*x12475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12489=((-1.0)*r11);
CheckValue<IkReal> x12492 = IKatan2WithCheck(IkReal(x12489),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12492.valid){
continue;
}
IkReal x12490=((1.0)*(x12492.value));
IkReal x12491=x11815;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12490)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12490)));
IkReal gconst10=(x12489*x12491);
IkReal gconst11=((1.0)*r10*x12491);
IkReal x12493=r12*r12;
IkReal x12494=((1.0)*sj0);
IkReal x12495=(cj0*r02);
IkReal x12496=x11815;
j4eval[0]=((IKabs((((r12*x12495*x12496))+((sj0*x12493*x12496))+(((-1.0)*x12494*x12496)))))+(IKabs(((((-1.0)*r12*x12494))+(((-1.0)*x12495))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12497=((1.0)*r12);
IkReal x12498=(sj1*sj2);
IkReal x12499=((1.0)*r21);
IkReal x12500=(cj3*gconst11);
IkReal x12501=(r11*sj3);
IkReal x12502=(gconst11*r20);
IkReal x12503=((1.0)*sj3);
IkReal x12504=(cj1*cj2);
IkReal x12505=(gconst10*r21*sj3);
IkReal x12506=(cj3*gconst10*r20);
CheckValue<IkReal> x12507=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12502*x12503))+((gconst11*r10*x12505))+((gconst10*x12501*x12502))+(((-1.0)*x12499*x12501*(gconst10*gconst10)))),-1);
if(!x12507.valid){
continue;
}
CheckValue<IkReal> x12508=IKPowWithIntegerCheck((((sj3*x12502))+(((-1.0)*gconst10*sj3*x12499))),-1);
if(!x12508.valid){
continue;
}
if( IKabs(((x12507.value)*(((((-1.0)*cj0*x12502*x12503))+(((-1.0)*r21*x12497*x12500))+(((-1.0)*x12497*x12506))+(((-1.0)*x12497*x12498))+((cj0*x12505))+((r12*x12504)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12508.value)*(((((-1.0)*x12506))+x12504+(((-1.0)*x12498))+(((-1.0)*x12499*x12500)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12507.value)*(((((-1.0)*cj0*x12502*x12503))+(((-1.0)*r21*x12497*x12500))+(((-1.0)*x12497*x12506))+(((-1.0)*x12497*x12498))+((cj0*x12505))+((r12*x12504))))))+IKsqr(((x12508.value)*(((((-1.0)*x12506))+x12504+(((-1.0)*x12498))+(((-1.0)*x12499*x12500))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12507.value)*(((((-1.0)*cj0*x12502*x12503))+(((-1.0)*r21*x12497*x12500))+(((-1.0)*x12497*x12506))+(((-1.0)*x12497*x12498))+((cj0*x12505))+((r12*x12504))))), ((x12508.value)*(((((-1.0)*x12506))+x12504+(((-1.0)*x12498))+(((-1.0)*x12499*x12500))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12509=IKsin(j4);
IkReal x12510=IKcos(j4);
IkReal x12511=(cj3*r10);
IkReal x12512=(gconst11*r20);
IkReal x12513=(gconst11*sj3);
IkReal x12514=(sj1*sj2);
IkReal x12515=(cj3*r11);
IkReal x12516=(r10*sj3);
IkReal x12517=(gconst10*r01);
IkReal x12518=(gconst10*sj3);
IkReal x12519=(cj2*sj1);
IkReal x12520=((1.0)*sj0);
IkReal x12521=(cj1*sj2);
IkReal x12522=(gconst10*r21);
IkReal x12523=(cj3*gconst10);
IkReal x12524=(cj3*gconst11);
IkReal x12525=((1.0)*cj0);
IkReal x12526=((1.0)*x12509);
IkReal x12527=((1.0)*cj1*cj2);
IkReal x12528=(gconst11*x12510);
IkReal x12529=(sj3*x12510);
IkReal x12530=(gconst10*x12509);
IkReal x12531=((1.0)*x12510);
IkReal x12532=(cj3*x12510);
IkReal x12533=(cj3*x12509);
evalcond[0]=(((x12509*x12522))+(((-1.0)*x12512*x12526)));
evalcond[1]=(((r11*x12530))+cj0+(((-1.0)*gconst11*r10*x12526))+(((-1.0)*r12*x12531)));
evalcond[2]=((((-1.0)*x12520))+(((-1.0)*r02*x12531))+((x12509*x12517))+(((-1.0)*gconst11*r00*x12526)));
evalcond[3]=((((-1.0)*cj3*x12512*x12531))+((r20*x12518))+((r21*x12513))+x12519+x12521+((x12522*x12532)));
evalcond[4]=((((-1.0)*x12527))+((r21*x12524))+((r20*x12523))+((x12512*x12529))+x12514+(((-1.0)*r21*x12518*x12531)));
evalcond[5]=(((r00*x12518))+((x12517*x12532))+((r01*x12513))+((r02*x12533))+((cj0*x12514))+(((-1.0)*r00*x12524*x12531))+(((-1.0)*cj1*cj2*x12525)));
evalcond[6]=((((-1.0)*x12511*x12528))+((sj0*x12514))+((gconst10*x12510*x12515))+((gconst10*x12516))+((r12*x12533))+((r11*x12513))+(((-1.0)*cj1*cj2*x12520)));
evalcond[7]=(((r00*x12510*x12513))+(((-1.0)*r02*sj3*x12526))+(((-1.0)*x12521*x12525))+(((-1.0)*x12519*x12525))+(((-1.0)*x12517*x12529))+((r01*x12524))+((r00*x12523)));
evalcond[8]=((((-1.0)*r11*x12518*x12531))+((gconst11*x12515))+((r10*x12510*x12513))+(((-1.0)*r12*sj3*x12526))+(((-1.0)*x12519*x12520))+((gconst10*x12511))+(((-1.0)*x12520*x12521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12534=((1.0)*sj0);
IkReal x12535=((1.0)*gconst10);
CheckValue<IkReal> x12536 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12534))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12534))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12535))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12536.valid){
continue;
}
CheckValue<IkReal> x12537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12535))+(((-1.0)*gconst11*r21)))),-1);
if(!x12537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12536.value)+(((1.5707963267949)*(x12537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12538=IKsin(j4);
IkReal x12539=IKcos(j4);
IkReal x12540=(cj3*r10);
IkReal x12541=(gconst11*r20);
IkReal x12542=(gconst11*sj3);
IkReal x12543=(sj1*sj2);
IkReal x12544=(cj3*r11);
IkReal x12545=(r10*sj3);
IkReal x12546=(gconst10*r01);
IkReal x12547=(gconst10*sj3);
IkReal x12548=(cj2*sj1);
IkReal x12549=((1.0)*sj0);
IkReal x12550=(cj1*sj2);
IkReal x12551=(gconst10*r21);
IkReal x12552=(cj3*gconst10);
IkReal x12553=(cj3*gconst11);
IkReal x12554=((1.0)*cj0);
IkReal x12555=((1.0)*x12538);
IkReal x12556=((1.0)*cj1*cj2);
IkReal x12557=(gconst11*x12539);
IkReal x12558=(sj3*x12539);
IkReal x12559=(gconst10*x12538);
IkReal x12560=((1.0)*x12539);
IkReal x12561=(cj3*x12539);
IkReal x12562=(cj3*x12538);
evalcond[0]=((((-1.0)*x12541*x12555))+((x12538*x12551)));
evalcond[1]=(cj0+(((-1.0)*r12*x12560))+((r11*x12559))+(((-1.0)*gconst11*r10*x12555)));
evalcond[2]=((((-1.0)*gconst11*r00*x12555))+(((-1.0)*r02*x12560))+((x12538*x12546))+(((-1.0)*x12549)));
evalcond[3]=(((r20*x12547))+x12548+x12550+((r21*x12542))+(((-1.0)*cj3*x12541*x12560))+((x12551*x12561)));
evalcond[4]=(((r20*x12552))+((r21*x12553))+((x12541*x12558))+x12543+(((-1.0)*x12556))+(((-1.0)*r21*x12547*x12560)));
evalcond[5]=(((x12546*x12561))+((r00*x12547))+(((-1.0)*r00*x12553*x12560))+((r01*x12542))+(((-1.0)*cj1*cj2*x12554))+((cj0*x12543))+((r02*x12562)));
evalcond[6]=(((r12*x12562))+((gconst10*x12545))+((r11*x12542))+((gconst10*x12539*x12544))+((sj0*x12543))+(((-1.0)*cj1*cj2*x12549))+(((-1.0)*x12540*x12557)));
evalcond[7]=(((r01*x12553))+(((-1.0)*x12548*x12554))+((r00*x12539*x12542))+((r00*x12552))+(((-1.0)*x12550*x12554))+(((-1.0)*r02*sj3*x12555))+(((-1.0)*x12546*x12558)));
evalcond[8]=((((-1.0)*x12548*x12549))+(((-1.0)*r11*x12547*x12560))+((gconst10*x12540))+(((-1.0)*r12*sj3*x12555))+((r10*x12539*x12542))+((gconst11*x12544))+(((-1.0)*x12549*x12550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12563=gconst10*gconst10;
IkReal x12564=r21*r21;
IkReal x12565=gconst11*gconst11;
IkReal x12566=r20*r20;
IkReal x12567=((1.0)*cj3);
IkReal x12568=(r20*sj3);
IkReal x12569=(gconst10*gconst11);
IkReal x12570=(cj2*sj1);
IkReal x12571=(gconst10*r21);
IkReal x12572=(cj1*sj2);
IkReal x12573=((1.0)*gconst11*r20);
CheckValue<IkReal> x12574 = IKatan2WithCheck(IkReal((((r22*x12570))+((r22*x12572))+((gconst11*r21*r22*sj3))+((gconst10*r22*x12568)))),IkReal(((((-1.0)*sj3*x12566*x12569))+(((-1.0)*x12572*x12573))+(((-1.0)*x12570*x12573))+((x12570*x12571))+((x12571*x12572))+((sj3*x12564*x12569))+(((-1.0)*r21*x12565*x12568))+((r21*x12563*x12568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12574.valid){
continue;
}
CheckValue<IkReal> x12575=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12567*(r22*r22)))+(((2.0)*cj3*r20*r21*x12569))+(((-1.0)*x12563*x12564*x12567))+(((-1.0)*x12565*x12566*x12567)))),-1);
if(!x12575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12574.value)+(((1.5707963267949)*(x12575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12576=IKsin(j4);
IkReal x12577=IKcos(j4);
IkReal x12578=(cj3*r10);
IkReal x12579=(gconst11*r20);
IkReal x12580=(gconst11*sj3);
IkReal x12581=(sj1*sj2);
IkReal x12582=(gconst11*r00);
IkReal x12583=(cj3*r11);
IkReal x12584=(gconst10*sj3);
IkReal x12585=(cj2*sj1);
IkReal x12586=(cj3*r01);
IkReal x12587=((1.0)*sj0);
IkReal x12588=(cj1*sj2);
IkReal x12589=(cj3*r21);
IkReal x12590=(cj3*gconst10);
IkReal x12591=((1.0)*cj0);
IkReal x12592=((1.0)*x12577);
IkReal x12593=((1.0)*x12576);
IkReal x12594=((1.0)*cj1*cj2);
IkReal x12595=(cj3*x12576);
IkReal x12596=(gconst10*x12576);
IkReal x12597=(gconst10*x12577);
evalcond[0]=((((-1.0)*x12579*x12593))+(((-1.0)*r22*x12592))+((r21*x12596)));
evalcond[1]=(cj0+(((-1.0)*r12*x12592))+(((-1.0)*gconst11*r10*x12593))+((r11*x12596)));
evalcond[2]=(((r01*x12596))+(((-1.0)*r02*x12592))+(((-1.0)*x12582*x12593))+(((-1.0)*x12587)));
evalcond[3]=(((r20*x12584))+((x12589*x12597))+((r21*x12580))+((r22*x12595))+x12588+x12585+(((-1.0)*cj3*x12579*x12592)));
evalcond[4]=(((gconst11*x12589))+(((-1.0)*r22*sj3*x12593))+(((-1.0)*x12594))+x12581+(((-1.0)*r21*x12584*x12592))+((sj3*x12577*x12579))+((r20*x12590)));
evalcond[5]=(((r00*x12584))+((r01*x12580))+((cj0*x12581))+((r02*x12595))+(((-1.0)*cj1*cj2*x12591))+((x12586*x12597))+(((-1.0)*cj3*x12582*x12592)));
evalcond[6]=(((r12*x12595))+((sj0*x12581))+(((-1.0)*gconst11*x12578*x12592))+(((-1.0)*cj1*cj2*x12587))+((x12583*x12597))+((r11*x12580))+((r10*x12584)));
evalcond[7]=(((gconst11*x12586))+(((-1.0)*x12588*x12591))+((r00*x12590))+(((-1.0)*x12585*x12591))+(((-1.0)*r01*x12584*x12592))+((r00*x12577*x12580))+(((-1.0)*r02*sj3*x12593)));
evalcond[8]=((((-1.0)*r11*x12584*x12592))+((gconst11*x12583))+((r10*x12577*x12580))+(((-1.0)*x12585*x12587))+(((-1.0)*x12587*x12588))+((gconst10*x12578))+(((-1.0)*r12*sj3*x12593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12598=((1.0)*sj0);
IkReal x12599=((1.0)*gconst10);
CheckValue<IkReal> x12600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12599))+(((-1.0)*gconst11*r21)))),-1);
if(!x12600.valid){
continue;
}
CheckValue<IkReal> x12601 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12598))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12598))+(((-1.0)*cj0*r01*x12599))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12600.value)))+(x12601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12602=IKsin(j4);
IkReal x12603=IKcos(j4);
IkReal x12604=(cj3*r10);
IkReal x12605=(gconst11*r20);
IkReal x12606=(gconst11*sj3);
IkReal x12607=(sj1*sj2);
IkReal x12608=(gconst11*r00);
IkReal x12609=(cj3*r11);
IkReal x12610=(gconst10*sj3);
IkReal x12611=(cj2*sj1);
IkReal x12612=(cj3*r01);
IkReal x12613=((1.0)*sj0);
IkReal x12614=(cj1*sj2);
IkReal x12615=(cj3*r21);
IkReal x12616=(cj3*gconst10);
IkReal x12617=((1.0)*cj0);
IkReal x12618=((1.0)*x12603);
IkReal x12619=((1.0)*x12602);
IkReal x12620=((1.0)*cj1*cj2);
IkReal x12621=(cj3*x12602);
IkReal x12622=(gconst10*x12602);
IkReal x12623=(gconst10*x12603);
evalcond[0]=((((-1.0)*r22*x12618))+((r21*x12622))+(((-1.0)*x12605*x12619)));
evalcond[1]=((((-1.0)*r12*x12618))+cj0+(((-1.0)*gconst11*r10*x12619))+((r11*x12622)));
evalcond[2]=((((-1.0)*r02*x12618))+((r01*x12622))+(((-1.0)*x12608*x12619))+(((-1.0)*x12613)));
evalcond[3]=(((r22*x12621))+(((-1.0)*cj3*x12605*x12618))+((x12615*x12623))+((r20*x12610))+x12614+x12611+((r21*x12606)));
evalcond[4]=((((-1.0)*x12620))+((gconst11*x12615))+(((-1.0)*r22*sj3*x12619))+((sj3*x12603*x12605))+(((-1.0)*r21*x12610*x12618))+((r20*x12616))+x12607);
evalcond[5]=(((r02*x12621))+(((-1.0)*cj3*x12608*x12618))+((r01*x12606))+((cj0*x12607))+((r00*x12610))+((x12612*x12623))+(((-1.0)*cj1*cj2*x12617)));
evalcond[6]=((((-1.0)*gconst11*x12604*x12618))+((r11*x12606))+((r12*x12621))+((sj0*x12607))+(((-1.0)*cj1*cj2*x12613))+((r10*x12610))+((x12609*x12623)));
evalcond[7]=((((-1.0)*x12614*x12617))+(((-1.0)*x12611*x12617))+((gconst11*x12612))+((r00*x12603*x12606))+(((-1.0)*r01*x12610*x12618))+(((-1.0)*r02*sj3*x12619))+((r00*x12616)));
evalcond[8]=(((gconst10*x12604))+(((-1.0)*x12611*x12613))+((r10*x12603*x12606))+(((-1.0)*x12613*x12614))+(((-1.0)*r11*x12610*x12618))+((gconst11*x12609))+(((-1.0)*r12*sj3*x12619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12624=((1.0)*gconst11);
CheckValue<IkReal> x12625=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12624)))),-1);
if(!x12625.valid){
continue;
}
CheckValue<IkReal> x12626 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12625.value)))+(x12626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12627=IKsin(j4);
IkReal x12628=IKcos(j4);
IkReal x12629=(cj3*r10);
IkReal x12630=(gconst11*r20);
IkReal x12631=(gconst11*sj3);
IkReal x12632=(sj1*sj2);
IkReal x12633=(gconst11*r00);
IkReal x12634=(cj3*r11);
IkReal x12635=(gconst10*sj3);
IkReal x12636=(cj2*sj1);
IkReal x12637=(cj3*r01);
IkReal x12638=((1.0)*sj0);
IkReal x12639=(cj1*sj2);
IkReal x12640=(cj3*r21);
IkReal x12641=(cj3*gconst10);
IkReal x12642=((1.0)*cj0);
IkReal x12643=((1.0)*x12628);
IkReal x12644=((1.0)*x12627);
IkReal x12645=((1.0)*cj1*cj2);
IkReal x12646=(cj3*x12627);
IkReal x12647=(gconst10*x12627);
IkReal x12648=(gconst10*x12628);
evalcond[0]=((((-1.0)*r22*x12643))+(((-1.0)*x12630*x12644))+((r21*x12647)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12644))+(((-1.0)*r12*x12643))+((r11*x12647)));
evalcond[2]=((((-1.0)*r02*x12643))+(((-1.0)*x12633*x12644))+((r01*x12647))+(((-1.0)*x12638)));
evalcond[3]=((((-1.0)*cj3*x12630*x12643))+((r20*x12635))+((r22*x12646))+x12636+x12639+((r21*x12631))+((x12640*x12648)));
evalcond[4]=(((r20*x12641))+((sj3*x12628*x12630))+x12632+(((-1.0)*x12645))+(((-1.0)*r21*x12635*x12643))+((gconst11*x12640))+(((-1.0)*r22*sj3*x12644)));
evalcond[5]=(((r01*x12631))+((cj0*x12632))+((r00*x12635))+(((-1.0)*cj1*cj2*x12642))+((x12637*x12648))+(((-1.0)*cj3*x12633*x12643))+((r02*x12646)));
evalcond[6]=(((r11*x12631))+((r12*x12646))+(((-1.0)*cj1*cj2*x12638))+(((-1.0)*gconst11*x12629*x12643))+((sj0*x12632))+((r10*x12635))+((x12634*x12648)));
evalcond[7]=((((-1.0)*x12639*x12642))+(((-1.0)*x12636*x12642))+((r00*x12641))+((r00*x12628*x12631))+(((-1.0)*r01*x12635*x12643))+(((-1.0)*r02*sj3*x12644))+((gconst11*x12637)));
evalcond[8]=((((-1.0)*r11*x12635*x12643))+(((-1.0)*x12636*x12638))+((r10*x12628*x12631))+(((-1.0)*r12*sj3*x12644))+(((-1.0)*x12638*x12639))+((gconst10*x12629))+((gconst11*x12634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12649=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12649;
j4eval[1]=IKsign(x12649);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12650=((1.0)*cj5);
IkReal x12651=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12650)));
j4eval[0]=x12651;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12650)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12652=cj5*cj5;
IkReal x12653=(cj3*r21);
IkReal x12654=(cj5*sj5);
IkReal x12655=((1.0)*cj3);
IkReal x12656=(((r11*x12652*x12653))+(((-1.0)*r12*r22*x12655))+(((-1.0)*r11*x12653))+(((-1.0)*r10*r20*x12652*x12655))+((r10*x12653*x12654))+((cj3*r11*r20*x12654)));
j4eval[0]=x12656;
j4eval[1]=IKsign(x12656);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12657=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12657;
j4eval[1]=IKsign(x12657);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12658=((1.0)*cj5);
IkReal x12659=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12658)));
j4eval[0]=x12659;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12658))))));
j4eval[2]=IKsign(x12659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12660=cj5*cj5;
IkReal x12661=r11*r11;
IkReal x12662=(r11*sj5);
IkReal x12663=(cj5*r10);
IkReal x12664=((r12*r12)+((x12660*(r10*r10)))+(((-1.0)*x12660*x12661))+(((-2.0)*x12662*x12663))+x12661);
j4eval[0]=x12664;
j4eval[1]=IKsign(x12664);
j4eval[2]=((IKabs(((((-1.0)*x12662))+x12663)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12665=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12665);
rxp1_1=(px*r21);
rxp1_2=(r11*x12665);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12666=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12666);
rxp1_1=(px*r21);
rxp1_2=(r11*x12666);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12667=((1.0)*sj1);
CheckValue<IkReal> x12668=IKPowWithIntegerCheck(r02,-1);
if(!x12668.valid){
continue;
}
CheckValue<IkReal> x12669=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12669.valid){
continue;
}
if( IKabs(((x12668.value)*(((((-1.0)*cj2*x12667))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12669.value)*((((cj1*cj2))+(((-1.0)*sj2*x12667)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12668.value)*(((((-1.0)*cj2*x12667))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12669.value)*((((cj1*cj2))+(((-1.0)*sj2*x12667))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12668.value)*(((((-1.0)*cj2*x12667))+(((-1.0)*cj1*sj2))))), ((x12669.value)*((((cj1*cj2))+(((-1.0)*sj2*x12667))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12670=IKsin(j4);
IkReal x12671=IKcos(j4);
IkReal x12672=(cj5*r20);
IkReal x12673=((1.0)*cj2);
IkReal x12674=(cj5*r10);
IkReal x12675=((1.0)*x12670);
IkReal x12676=(sj5*x12670);
IkReal x12677=((1.0)*sj5*x12671);
evalcond[0]=((-1.0)*r02*x12671);
evalcond[1]=(((r21*x12676))+(((-1.0)*x12672*x12675)));
evalcond[2]=((((-1.0)*r11*x12677))+((x12671*x12674)));
evalcond[3]=((1.0)+((r11*x12676))+(((-1.0)*x12674*x12675)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12675))+(((-1.0)*sj1*x12673)));
evalcond[5]=((((-1.0)*cj1*x12673))+((sj1*sj2))+(((-1.0)*r21*x12677))+((x12671*x12672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12679.valid){
continue;
}
if( IKabs(((-1.0)*(x12678.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12679.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12678.value)))+IKsqr(((x12679.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12678.value)), ((x12679.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12680=IKsin(j4);
IkReal x12681=IKcos(j4);
IkReal x12682=(cj5*r20);
IkReal x12683=((1.0)*cj2);
IkReal x12684=(cj5*r10);
IkReal x12685=((1.0)*x12680);
IkReal x12686=(sj5*x12680);
IkReal x12687=((1.0)*sj5*x12681);
evalcond[0]=((-1.0)*r02*x12681);
evalcond[1]=(((r21*x12686))+(((-1.0)*x12682*x12685)));
evalcond[2]=((((-1.0)*r11*x12687))+((x12681*x12684)));
evalcond[3]=((1.0)+((r11*x12686))+(((-1.0)*x12684*x12685)));
evalcond[4]=((((-1.0)*sj1*x12683))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12685)));
evalcond[5]=((((-1.0)*cj1*x12683))+(((-1.0)*r21*x12687))+((sj1*sj2))+((x12681*x12682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12688=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12688);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12688);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12689=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12689);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12689);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(r22,-1);
if(!x12690.valid){
continue;
}
CheckValue<IkReal> x12691=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12691.valid){
continue;
}
if( IKabs(((x12690.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12691.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12690.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12691.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12690.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12691.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12692=IKsin(j4);
IkReal x12693=IKcos(j4);
IkReal x12694=((1.0)*cj2);
IkReal x12695=(cj5*x12693);
IkReal x12696=(sj5*x12692);
IkReal x12697=((1.0)*sj5*x12693);
IkReal x12698=((1.0)*cj5*x12692);
evalcond[0]=((-1.0)*r22*x12693);
evalcond[1]=((((-1.0)*r00*x12698))+((r01*x12696)));
evalcond[2]=((((-1.0)*cj1*x12694))+((sj1*sj2))+(((-1.0)*r22*x12692)));
evalcond[3]=((((-1.0)*r11*x12697))+((r10*x12695)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12698))+((r11*x12696)));
evalcond[5]=(((r00*x12695))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12694))+(((-1.0)*r01*x12697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12699=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12699.valid){
continue;
}
CheckValue<IkReal> x12700=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12700.valid){
continue;
}
if( IKabs(((-1.0)*(x12699.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12700.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12699.value)))+IKsqr(((x12700.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12699.value)), ((x12700.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12701=IKsin(j4);
IkReal x12702=IKcos(j4);
IkReal x12703=((1.0)*cj2);
IkReal x12704=(cj5*x12702);
IkReal x12705=(sj5*x12701);
IkReal x12706=((1.0)*sj5*x12702);
IkReal x12707=((1.0)*cj5*x12701);
evalcond[0]=((-1.0)*r22*x12702);
evalcond[1]=(((r01*x12705))+(((-1.0)*r00*x12707)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12703))+(((-1.0)*r22*x12701)));
evalcond[3]=((((-1.0)*r11*x12706))+((r10*x12704)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12707))+((r11*x12705)));
evalcond[5]=((((-1.0)*r01*x12706))+(((-1.0)*sj1*x12703))+(((-1.0)*cj1*sj2))+((r00*x12704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12708=cj5*cj5;
IkReal x12709=r11*r11;
IkReal x12710=(cj5*r10);
IkReal x12711=(r11*sj5);
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12708*x12709))+((x12708*(r10*r10)))+x12709+(((-2.0)*x12710*x12711)))),-1);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713 = IKatan2WithCheck(IkReal(((((-1.0)*x12711))+x12710)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12712.value)))+(x12713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12714=IKsin(j4);
IkReal x12715=IKcos(j4);
IkReal x12716=(cj5*r10);
IkReal x12717=(r01*sj5);
IkReal x12718=((1.0)*cj2);
IkReal x12719=(cj5*r00);
IkReal x12720=(cj5*r20);
IkReal x12721=((1.0)*x12715);
IkReal x12722=((1.0)*x12714);
IkReal x12723=(sj5*x12714);
evalcond[0]=(((r21*x12723))+(((-1.0)*r22*x12721))+(((-1.0)*x12720*x12722)));
evalcond[1]=((((-1.0)*r02*x12721))+((x12714*x12717))+(((-1.0)*x12719*x12722)));
evalcond[2]=(((x12715*x12716))+(((-1.0)*r11*sj5*x12721))+(((-1.0)*r12*x12722)));
evalcond[3]=((1.0)+((r11*x12723))+(((-1.0)*x12716*x12722))+(((-1.0)*r12*x12721)));
evalcond[4]=(((x12715*x12720))+(((-1.0)*r22*x12722))+((sj1*sj2))+(((-1.0)*cj1*x12718))+(((-1.0)*r21*sj5*x12721)));
evalcond[5]=(((x12715*x12719))+(((-1.0)*r02*x12722))+(((-1.0)*sj1*x12718))+(((-1.0)*cj1*sj2))+(((-1.0)*x12717*x12721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12724=((1.0)*cj5);
CheckValue<IkReal> x12725=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12724))+(((-1.0)*r00*sj5)))),-1);
if(!x12725.valid){
continue;
}
CheckValue<IkReal> x12726 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12725.value)))+(x12726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12727=IKsin(j4);
IkReal x12728=IKcos(j4);
IkReal x12729=(cj5*r10);
IkReal x12730=(r01*sj5);
IkReal x12731=((1.0)*cj2);
IkReal x12732=(cj5*r00);
IkReal x12733=(cj5*r20);
IkReal x12734=((1.0)*x12728);
IkReal x12735=((1.0)*x12727);
IkReal x12736=(sj5*x12727);
evalcond[0]=(((r21*x12736))+(((-1.0)*r22*x12734))+(((-1.0)*x12733*x12735)));
evalcond[1]=(((x12727*x12730))+(((-1.0)*r02*x12734))+(((-1.0)*x12732*x12735)));
evalcond[2]=(((x12728*x12729))+(((-1.0)*r11*sj5*x12734))+(((-1.0)*r12*x12735)));
evalcond[3]=((1.0)+((r11*x12736))+(((-1.0)*x12729*x12735))+(((-1.0)*r12*x12734)));
evalcond[4]=((((-1.0)*r22*x12735))+((x12728*x12733))+((sj1*sj2))+(((-1.0)*r21*sj5*x12734))+(((-1.0)*cj1*x12731)));
evalcond[5]=((((-1.0)*sj1*x12731))+(((-1.0)*r02*x12735))+((x12728*x12732))+(((-1.0)*cj1*sj2))+(((-1.0)*x12730*x12734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12737=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12737.valid){
continue;
}
CheckValue<IkReal> x12738 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12737.value)))+(x12738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12739=IKsin(j4);
IkReal x12740=IKcos(j4);
IkReal x12741=(cj5*r10);
IkReal x12742=(r01*sj5);
IkReal x12743=((1.0)*cj2);
IkReal x12744=(cj5*r00);
IkReal x12745=(cj5*r20);
IkReal x12746=((1.0)*x12740);
IkReal x12747=((1.0)*x12739);
IkReal x12748=(sj5*x12739);
evalcond[0]=((((-1.0)*x12745*x12747))+(((-1.0)*r22*x12746))+((r21*x12748)));
evalcond[1]=((((-1.0)*r02*x12746))+(((-1.0)*x12744*x12747))+((x12739*x12742)));
evalcond[2]=((((-1.0)*r12*x12747))+(((-1.0)*r11*sj5*x12746))+((x12740*x12741)));
evalcond[3]=((1.0)+(((-1.0)*x12741*x12747))+((r11*x12748))+(((-1.0)*r12*x12746)));
evalcond[4]=((((-1.0)*r21*sj5*x12746))+((sj1*sj2))+(((-1.0)*r22*x12747))+(((-1.0)*cj1*x12743))+((x12740*x12745)));
evalcond[5]=((((-1.0)*r02*x12747))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12743))+(((-1.0)*x12742*x12746))+((x12740*x12744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12749=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12749;
j4eval[1]=IKsign(x12749);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12750=((1.0)*cj5);
IkReal x12751=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12750)));
j4eval[0]=x12751;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12750))))));
j4eval[2]=IKsign(x12751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12752=(sj1*sj2);
IkReal x12753=(cj5*r10);
IkReal x12754=(r11*sj5);
IkReal x12755=(cj1*cj2);
IkReal x12756=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12756;
j4eval[1]=((IKabs(((((-1.0)*r12*x12752))+((r12*x12755)))))+(IKabs(((((-1.0)*x12754*x12755))+((x12753*x12755))+((x12752*x12754))+(((-1.0)*x12752*x12753))))));
j4eval[2]=IKsign(x12756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12757=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12757);
rxp1_1=(px*r21);
rxp1_2=(r11*x12757);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12758=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12758);
rxp1_1=(px*r21);
rxp1_2=(r11*x12758);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12759=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12759)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12759)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12760=((1.0)*cj5);
CheckValue<IkReal> x12761=IKPowWithIntegerCheck(((((-1.0)*r10*x12760))+((r11*sj5))),-1);
if(!x12761.valid){
continue;
}
CheckValue<IkReal> x12762=IKPowWithIntegerCheck(((((-1.0)*r20*x12760))+((r21*sj5))),-1);
if(!x12762.valid){
continue;
}
if( IKabs(((-1.0)*(x12761.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12762.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12761.value)))+IKsqr(((x12762.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12761.value)), ((x12762.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12763=IKsin(j4);
IkReal x12764=IKcos(j4);
IkReal x12765=((1.0)*cj2);
IkReal x12766=(r21*sj5);
IkReal x12767=(r11*sj5);
IkReal x12768=((1.0)*cj5*x12763);
IkReal x12769=((1.0)*cj5*x12764);
evalcond[0]=((-1.0)*r02*x12764);
evalcond[1]=((((-1.0)*r20*x12768))+((x12763*x12766)));
evalcond[2]=((((-1.0)*sj1*x12765))+(((-1.0)*cj1*sj2))+((r02*x12763)));
evalcond[3]=((((-1.0)*r10*x12769))+((x12764*x12767)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12768))+((x12763*x12767)));
evalcond[5]=((((-1.0)*r20*x12769))+((x12764*x12766))+((sj1*sj2))+(((-1.0)*cj1*x12765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12770=IKPowWithIntegerCheck(r02,-1);
if(!x12770.valid){
continue;
}
CheckValue<IkReal> x12771=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12771.valid){
continue;
}
if( IKabs(((x12770.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12770.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12770.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12772=IKsin(j4);
IkReal x12773=IKcos(j4);
IkReal x12774=((1.0)*cj2);
IkReal x12775=(r21*sj5);
IkReal x12776=(r11*sj5);
IkReal x12777=((1.0)*cj5*x12772);
IkReal x12778=((1.0)*cj5*x12773);
evalcond[0]=((-1.0)*r02*x12773);
evalcond[1]=(((x12772*x12775))+(((-1.0)*r20*x12777)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12774))+((r02*x12772)));
evalcond[3]=(((x12773*x12776))+(((-1.0)*r10*x12778)));
evalcond[4]=((1.0)+((x12772*x12776))+(((-1.0)*r10*x12777)));
evalcond[5]=(((x12773*x12775))+(((-1.0)*r20*x12778))+(((-1.0)*cj1*x12774))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12779=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12779;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12780=((1.0)*cj5);
IkReal x12781=((((-1.0)*r21*x12780))+(((-1.0)*r20*sj5)));
j4eval[0]=x12781;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12780))))));
j4eval[2]=IKsign(x12781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12782=cj5*cj5;
IkReal x12783=(r11*r21);
IkReal x12784=((1.0)*r20);
IkReal x12785=(cj5*sj5);
IkReal x12786=((((-1.0)*r10*x12782*x12784))+((x12782*x12783))+((r10*r21*x12785))+(((-1.0)*r12*r22))+(((-1.0)*x12783))+((r11*r20*x12785)));
j4eval[0]=x12786;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12784)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12786);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12787=cj5*cj5;
IkReal x12788=(r21*sj5);
IkReal x12789=(r11*r21);
IkReal x12790=((1.0)*r20);
CheckValue<IkReal> x12791=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12788))+((x12787*x12789))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12787*x12790))+(((-1.0)*x12789))+((cj5*r11*r20*sj5)))),-1);
if(!x12791.valid){
continue;
}
CheckValue<IkReal> x12792 = IKatan2WithCheck(IkReal((x12788+(((-1.0)*cj5*x12790)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12791.value)))+(x12792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12793=IKcos(j4);
IkReal x12794=IKsin(j4);
IkReal x12795=(cj5*r00);
IkReal x12796=(cj5*r20);
IkReal x12797=(cj5*r10);
IkReal x12798=((1.0)*x12793);
IkReal x12799=((1.0)*x12794);
IkReal x12800=(sj5*x12793);
IkReal x12801=(sj5*x12794);
evalcond[0]=(((r21*x12800))+((r22*x12794))+(((-1.0)*x12796*x12798)));
evalcond[1]=(((r11*x12800))+((r12*x12794))+(((-1.0)*x12797*x12798)));
evalcond[2]=((((-1.0)*r22*x12798))+((r21*x12801))+(((-1.0)*x12796*x12799)));
evalcond[3]=(((r01*x12801))+(((-1.0)*r02*x12798))+(((-1.0)*x12795*x12799)));
evalcond[4]=((-1.0)+((r02*x12794))+((r01*x12800))+(((-1.0)*x12795*x12798)));
evalcond[5]=((1.0)+((r11*x12801))+(((-1.0)*r12*x12798))+(((-1.0)*x12797*x12799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12802=((1.0)*cj5);
CheckValue<IkReal> x12803 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12802))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12803.valid){
continue;
}
CheckValue<IkReal> x12804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12802))+(((-1.0)*r20*sj5)))),-1);
if(!x12804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12803.value)+(((1.5707963267949)*(x12804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12805=IKcos(j4);
IkReal x12806=IKsin(j4);
IkReal x12807=(cj5*r00);
IkReal x12808=(cj5*r20);
IkReal x12809=(cj5*r10);
IkReal x12810=((1.0)*x12805);
IkReal x12811=((1.0)*x12806);
IkReal x12812=(sj5*x12805);
IkReal x12813=(sj5*x12806);
evalcond[0]=(((r21*x12812))+(((-1.0)*x12808*x12810))+((r22*x12806)));
evalcond[1]=((((-1.0)*x12809*x12810))+((r12*x12806))+((r11*x12812)));
evalcond[2]=(((r21*x12813))+(((-1.0)*r22*x12810))+(((-1.0)*x12808*x12811)));
evalcond[3]=((((-1.0)*r02*x12810))+((r01*x12813))+(((-1.0)*x12807*x12811)));
evalcond[4]=((-1.0)+((r02*x12806))+((r01*x12812))+(((-1.0)*x12807*x12810)));
evalcond[5]=((1.0)+(((-1.0)*x12809*x12811))+(((-1.0)*r12*x12810))+((r11*x12813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
CheckValue<IkReal> x12815=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12814.value)+(((1.5707963267949)*(x12815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12816=IKcos(j4);
IkReal x12817=IKsin(j4);
IkReal x12818=(cj5*r00);
IkReal x12819=(cj5*r20);
IkReal x12820=(cj5*r10);
IkReal x12821=((1.0)*x12816);
IkReal x12822=((1.0)*x12817);
IkReal x12823=(sj5*x12816);
IkReal x12824=(sj5*x12817);
evalcond[0]=(((r21*x12823))+(((-1.0)*x12819*x12821))+((r22*x12817)));
evalcond[1]=(((r12*x12817))+((r11*x12823))+(((-1.0)*x12820*x12821)));
evalcond[2]=((((-1.0)*r22*x12821))+((r21*x12824))+(((-1.0)*x12819*x12822)));
evalcond[3]=((((-1.0)*r02*x12821))+((r01*x12824))+(((-1.0)*x12818*x12822)));
evalcond[4]=((-1.0)+((r01*x12823))+((r02*x12817))+(((-1.0)*x12818*x12821)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12821))+((r11*x12824))+(((-1.0)*x12820*x12822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12825=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12825;
j4eval[1]=IKsign(x12825);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12826=((1.0)*cj5);
IkReal x12827=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12826)));
j4eval[0]=x12827;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12826))))));
j4eval[2]=IKsign(x12827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12828=cj5*cj5;
IkReal x12829=(r11*r21);
IkReal x12830=((1.0)*r20);
IkReal x12831=(cj5*sj5);
IkReal x12832=((((-1.0)*r10*x12828*x12830))+(((-1.0)*r12*r22))+(((-1.0)*x12829))+((x12828*x12829))+((r10*r21*x12831))+((r11*r20*x12831)));
j4eval[0]=x12832;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12830)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12833=cj5*cj5;
IkReal x12834=(r21*sj5);
IkReal x12835=(r11*r21);
IkReal x12836=((1.0)*r20);
CheckValue<IkReal> x12837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12834))+((x12833*x12835))+(((-1.0)*r10*x12833*x12836))+(((-1.0)*x12835))+((cj5*r11*r20*sj5)))),-1);
if(!x12837.valid){
continue;
}
CheckValue<IkReal> x12838 = IKatan2WithCheck(IkReal((x12834+(((-1.0)*cj5*x12836)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12837.value)))+(x12838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12839=IKcos(j4);
IkReal x12840=IKsin(j4);
IkReal x12841=(cj5*r00);
IkReal x12842=(cj5*r20);
IkReal x12843=(cj5*r10);
IkReal x12844=((1.0)*x12839);
IkReal x12845=((1.0)*x12840);
IkReal x12846=(sj5*x12839);
IkReal x12847=(sj5*x12840);
evalcond[0]=(((r22*x12840))+((r21*x12846))+(((-1.0)*x12842*x12844)));
evalcond[1]=((((-1.0)*x12843*x12844))+((r11*x12846))+((r12*x12840)));
evalcond[2]=((((-1.0)*r22*x12844))+((r21*x12847))+(((-1.0)*x12842*x12845)));
evalcond[3]=((((-1.0)*r02*x12844))+((r01*x12847))+(((-1.0)*x12841*x12845)));
evalcond[4]=((1.0)+((r01*x12846))+(((-1.0)*x12841*x12844))+((r02*x12840)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12844))+(((-1.0)*x12843*x12845))+((r11*x12847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12848=((1.0)*cj5);
CheckValue<IkReal> x12849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12848)))),-1);
if(!x12849.valid){
continue;
}
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12848)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12849.value)))+(x12850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12851=IKcos(j4);
IkReal x12852=IKsin(j4);
IkReal x12853=(cj5*r00);
IkReal x12854=(cj5*r20);
IkReal x12855=(cj5*r10);
IkReal x12856=((1.0)*x12851);
IkReal x12857=((1.0)*x12852);
IkReal x12858=(sj5*x12851);
IkReal x12859=(sj5*x12852);
evalcond[0]=((((-1.0)*x12854*x12856))+((r22*x12852))+((r21*x12858)));
evalcond[1]=((((-1.0)*x12855*x12856))+((r11*x12858))+((r12*x12852)));
evalcond[2]=((((-1.0)*x12854*x12857))+(((-1.0)*r22*x12856))+((r21*x12859)));
evalcond[3]=((((-1.0)*x12853*x12857))+(((-1.0)*r02*x12856))+((r01*x12859)));
evalcond[4]=((1.0)+(((-1.0)*x12853*x12856))+((r01*x12858))+((r02*x12852)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12856))+(((-1.0)*x12855*x12857))+((r11*x12859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12860.valid){
continue;
}
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12860.value)))+(x12861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12862=IKcos(j4);
IkReal x12863=IKsin(j4);
IkReal x12864=(cj5*r00);
IkReal x12865=(cj5*r20);
IkReal x12866=(cj5*r10);
IkReal x12867=((1.0)*x12862);
IkReal x12868=((1.0)*x12863);
IkReal x12869=(sj5*x12862);
IkReal x12870=(sj5*x12863);
evalcond[0]=(((r21*x12869))+(((-1.0)*x12865*x12867))+((r22*x12863)));
evalcond[1]=(((r11*x12869))+((r12*x12863))+(((-1.0)*x12866*x12867)));
evalcond[2]=((((-1.0)*x12865*x12868))+(((-1.0)*r22*x12867))+((r21*x12870)));
evalcond[3]=(((r01*x12870))+(((-1.0)*x12864*x12868))+(((-1.0)*r02*x12867)));
evalcond[4]=((1.0)+(((-1.0)*x12864*x12867))+((r01*x12869))+((r02*x12863)));
evalcond[5]=((1.0)+((r11*x12870))+(((-1.0)*x12866*x12868))+(((-1.0)*r12*x12867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12871=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12871;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12872=((1.0)*cj5);
IkReal x12873=((((-1.0)*r21*x12872))+(((-1.0)*r20*sj5)));
j4eval[0]=x12873;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12872))))));
j4eval[2]=IKsign(x12873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12874=cj5*cj5;
IkReal x12875=(r11*r21);
IkReal x12876=((1.0)*r20);
IkReal x12877=(cj5*sj5);
IkReal x12878=(((r11*r20*x12877))+(((-1.0)*r12*r22))+(((-1.0)*x12875))+((r10*r21*x12877))+(((-1.0)*r10*x12874*x12876))+((x12874*x12875)));
j4eval[0]=x12878;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12876)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12879=cj5*cj5;
IkReal x12880=(r21*sj5);
IkReal x12881=(r11*r21);
IkReal x12882=((1.0)*r20);
CheckValue<IkReal> x12883=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12881))+((x12879*x12881))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12879*x12882))+((cj5*r10*x12880))+((cj5*r11*r20*sj5)))),-1);
if(!x12883.valid){
continue;
}
CheckValue<IkReal> x12884 = IKatan2WithCheck(IkReal((x12880+(((-1.0)*cj5*x12882)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12883.value)))+(x12884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12885=IKcos(j4);
IkReal x12886=IKsin(j4);
IkReal x12887=(cj5*r00);
IkReal x12888=(cj5*r20);
IkReal x12889=(cj5*r10);
IkReal x12890=((1.0)*x12885);
IkReal x12891=((1.0)*x12886);
IkReal x12892=(sj5*x12885);
IkReal x12893=(sj5*x12886);
evalcond[0]=(((r21*x12892))+(((-1.0)*x12888*x12890))+((r22*x12886)));
evalcond[1]=((((-1.0)*x12889*x12890))+((r12*x12886))+((r11*x12892)));
evalcond[2]=((((-1.0)*r22*x12890))+((r21*x12893))+(((-1.0)*x12888*x12891)));
evalcond[3]=(((r01*x12893))+(((-1.0)*x12887*x12891))+(((-1.0)*r02*x12890)));
evalcond[4]=((-1.0)+((r01*x12892))+(((-1.0)*x12887*x12890))+((r02*x12886)));
evalcond[5]=((1.0)+(((-1.0)*x12889*x12891))+((r11*x12893))+(((-1.0)*r12*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12894=((1.0)*cj5);
CheckValue<IkReal> x12895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12894))+(((-1.0)*r20*sj5)))),-1);
if(!x12895.valid){
continue;
}
CheckValue<IkReal> x12896 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12894)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12895.value)))+(x12896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12897=IKcos(j4);
IkReal x12898=IKsin(j4);
IkReal x12899=(cj5*r00);
IkReal x12900=(cj5*r20);
IkReal x12901=(cj5*r10);
IkReal x12902=((1.0)*x12897);
IkReal x12903=((1.0)*x12898);
IkReal x12904=(sj5*x12897);
IkReal x12905=(sj5*x12898);
evalcond[0]=(((r22*x12898))+(((-1.0)*x12900*x12902))+((r21*x12904)));
evalcond[1]=(((r12*x12898))+(((-1.0)*x12901*x12902))+((r11*x12904)));
evalcond[2]=((((-1.0)*x12900*x12903))+((r21*x12905))+(((-1.0)*r22*x12902)));
evalcond[3]=(((r01*x12905))+(((-1.0)*x12899*x12903))+(((-1.0)*r02*x12902)));
evalcond[4]=((-1.0)+((r01*x12904))+(((-1.0)*x12899*x12902))+((r02*x12898)));
evalcond[5]=((1.0)+(((-1.0)*x12901*x12903))+(((-1.0)*r12*x12902))+((r11*x12905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12906 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12906.valid){
continue;
}
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12906.value)+(((1.5707963267949)*(x12907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12908=IKcos(j4);
IkReal x12909=IKsin(j4);
IkReal x12910=(cj5*r00);
IkReal x12911=(cj5*r20);
IkReal x12912=(cj5*r10);
IkReal x12913=((1.0)*x12908);
IkReal x12914=((1.0)*x12909);
IkReal x12915=(sj5*x12908);
IkReal x12916=(sj5*x12909);
evalcond[0]=((((-1.0)*x12911*x12913))+((r21*x12915))+((r22*x12909)));
evalcond[1]=((((-1.0)*x12912*x12913))+((r12*x12909))+((r11*x12915)));
evalcond[2]=((((-1.0)*x12911*x12914))+((r21*x12916))+(((-1.0)*r22*x12913)));
evalcond[3]=((((-1.0)*x12910*x12914))+(((-1.0)*r02*x12913))+((r01*x12916)));
evalcond[4]=((-1.0)+(((-1.0)*x12910*x12913))+((r02*x12909))+((r01*x12915)));
evalcond[5]=((1.0)+(((-1.0)*x12912*x12914))+(((-1.0)*r12*x12913))+((r11*x12916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12917=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12917;
j4eval[1]=IKsign(x12917);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12918=((1.0)*cj5);
IkReal x12919=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12918)));
j4eval[0]=x12919;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12918))))));
j4eval[2]=IKsign(x12919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12920=cj5*cj5;
IkReal x12921=(r11*r21);
IkReal x12922=((1.0)*r20);
IkReal x12923=(cj5*sj5);
IkReal x12924=((((-1.0)*r10*x12920*x12922))+(((-1.0)*r12*r22))+(((-1.0)*x12921))+((x12920*x12921))+((r11*r20*x12923))+((r10*r21*x12923)));
j4eval[0]=x12924;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12922)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12925=cj5*cj5;
IkReal x12926=(r21*sj5);
IkReal x12927=(r11*r21);
IkReal x12928=((1.0)*r20);
CheckValue<IkReal> x12929=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12926))+(((-1.0)*r12*r22))+(((-1.0)*x12927))+(((-1.0)*r10*x12925*x12928))+((x12925*x12927))+((cj5*r11*r20*sj5)))),-1);
if(!x12929.valid){
continue;
}
CheckValue<IkReal> x12930 = IKatan2WithCheck(IkReal((x12926+(((-1.0)*cj5*x12928)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12929.value)))+(x12930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12931=IKcos(j4);
IkReal x12932=IKsin(j4);
IkReal x12933=(cj5*r00);
IkReal x12934=(cj5*r20);
IkReal x12935=(cj5*r10);
IkReal x12936=((1.0)*x12931);
IkReal x12937=((1.0)*x12932);
IkReal x12938=(sj5*x12931);
IkReal x12939=(sj5*x12932);
evalcond[0]=(((r22*x12932))+((r21*x12938))+(((-1.0)*x12934*x12936)));
evalcond[1]=(((r11*x12938))+((r12*x12932))+(((-1.0)*x12935*x12936)));
evalcond[2]=((((-1.0)*r22*x12936))+((r21*x12939))+(((-1.0)*x12934*x12937)));
evalcond[3]=((((-1.0)*r02*x12936))+(((-1.0)*x12933*x12937))+((r01*x12939)));
evalcond[4]=((1.0)+((r02*x12932))+(((-1.0)*x12933*x12936))+((r01*x12938)));
evalcond[5]=((1.0)+((r11*x12939))+(((-1.0)*r12*x12936))+(((-1.0)*x12935*x12937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12940=((1.0)*cj5);
CheckValue<IkReal> x12941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12940))+(((-1.0)*r10*sj5)))),-1);
if(!x12941.valid){
continue;
}
CheckValue<IkReal> x12942 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12940)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12941.value)))+(x12942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12943=IKcos(j4);
IkReal x12944=IKsin(j4);
IkReal x12945=(cj5*r00);
IkReal x12946=(cj5*r20);
IkReal x12947=(cj5*r10);
IkReal x12948=((1.0)*x12943);
IkReal x12949=((1.0)*x12944);
IkReal x12950=(sj5*x12943);
IkReal x12951=(sj5*x12944);
evalcond[0]=(((r22*x12944))+((r21*x12950))+(((-1.0)*x12946*x12948)));
evalcond[1]=(((r12*x12944))+((r11*x12950))+(((-1.0)*x12947*x12948)));
evalcond[2]=(((r21*x12951))+(((-1.0)*x12946*x12949))+(((-1.0)*r22*x12948)));
evalcond[3]=(((r01*x12951))+(((-1.0)*x12945*x12949))+(((-1.0)*r02*x12948)));
evalcond[4]=((1.0)+((r01*x12950))+(((-1.0)*x12945*x12948))+((r02*x12944)));
evalcond[5]=((1.0)+((r11*x12951))+(((-1.0)*x12947*x12949))+(((-1.0)*r12*x12948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12952.valid){
continue;
}
CheckValue<IkReal> x12953 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12952.value)))+(x12953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12954=IKcos(j4);
IkReal x12955=IKsin(j4);
IkReal x12956=(cj5*r00);
IkReal x12957=(cj5*r20);
IkReal x12958=(cj5*r10);
IkReal x12959=((1.0)*x12954);
IkReal x12960=((1.0)*x12955);
IkReal x12961=(sj5*x12954);
IkReal x12962=(sj5*x12955);
evalcond[0]=((((-1.0)*x12957*x12959))+((r22*x12955))+((r21*x12961)));
evalcond[1]=((((-1.0)*x12958*x12959))+((r12*x12955))+((r11*x12961)));
evalcond[2]=((((-1.0)*r22*x12959))+(((-1.0)*x12957*x12960))+((r21*x12962)));
evalcond[3]=(((r01*x12962))+(((-1.0)*r02*x12959))+(((-1.0)*x12956*x12960)));
evalcond[4]=((1.0)+((r01*x12961))+(((-1.0)*x12956*x12959))+((r02*x12955)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12959))+(((-1.0)*x12958*x12960))+((r11*x12962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12963=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12963;
j4eval[1]=IKsign(x12963);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12964=((1.0)*cj5);
IkReal x12965=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12964)));
j4eval[0]=x12965;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12964)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12966=cj5*cj5;
IkReal x12967=(r11*r21);
IkReal x12968=((1.0)*r20);
IkReal x12969=(cj5*sj5);
IkReal x12970=(((r11*r20*x12969))+(((-1.0)*r12*r22))+(((-1.0)*x12967))+(((-1.0)*r10*x12966*x12968))+((r10*r21*x12969))+((x12966*x12967)));
j4eval[0]=x12970;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12968))+((r21*sj5))))));
j4eval[2]=IKsign(x12970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12971=cj5*cj5;
IkReal x12972=(r21*sj5);
IkReal x12973=(r11*r21);
IkReal x12974=((1.0)*r20);
CheckValue<IkReal> x12975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12971*x12974))+(((-1.0)*r12*r22))+(((-1.0)*x12973))+((cj5*r10*x12972))+((cj5*r11*r20*sj5))+((x12971*x12973)))),-1);
if(!x12975.valid){
continue;
}
CheckValue<IkReal> x12976 = IKatan2WithCheck(IkReal((x12972+(((-1.0)*cj5*x12974)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12975.value)))+(x12976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12977=IKcos(j4);
IkReal x12978=IKsin(j4);
IkReal x12979=(cj5*r00);
IkReal x12980=(cj5*r20);
IkReal x12981=(cj5*r10);
IkReal x12982=((1.0)*x12977);
IkReal x12983=((1.0)*x12978);
IkReal x12984=(sj5*x12977);
IkReal x12985=(sj5*x12978);
evalcond[0]=((((-1.0)*x12980*x12982))+((r21*x12984))+((r22*x12978)));
evalcond[1]=(((r11*x12984))+((r12*x12978))+(((-1.0)*x12981*x12982)));
evalcond[2]=((((-1.0)*x12980*x12983))+(((-1.0)*r22*x12982))+((r21*x12985)));
evalcond[3]=(((r01*x12985))+(((-1.0)*r02*x12982))+(((-1.0)*x12979*x12983)));
evalcond[4]=((1.0)+((r02*x12978))+((r01*x12984))+(((-1.0)*x12979*x12982)));
evalcond[5]=((1.0)+((r11*x12985))+(((-1.0)*r12*x12982))+(((-1.0)*x12981*x12983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12986=((1.0)*cj5);
CheckValue<IkReal> x12987 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12986)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12987.valid){
continue;
}
CheckValue<IkReal> x12988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12986)))),-1);
if(!x12988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12987.value)+(((1.5707963267949)*(x12988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12989=IKcos(j4);
IkReal x12990=IKsin(j4);
IkReal x12991=(cj5*r00);
IkReal x12992=(cj5*r20);
IkReal x12993=(cj5*r10);
IkReal x12994=((1.0)*x12989);
IkReal x12995=((1.0)*x12990);
IkReal x12996=(sj5*x12989);
IkReal x12997=(sj5*x12990);
evalcond[0]=(((r22*x12990))+(((-1.0)*x12992*x12994))+((r21*x12996)));
evalcond[1]=(((r11*x12996))+((r12*x12990))+(((-1.0)*x12993*x12994)));
evalcond[2]=((((-1.0)*r22*x12994))+(((-1.0)*x12992*x12995))+((r21*x12997)));
evalcond[3]=(((r01*x12997))+(((-1.0)*x12991*x12995))+(((-1.0)*r02*x12994)));
evalcond[4]=((1.0)+((r01*x12996))+(((-1.0)*x12991*x12994))+((r02*x12990)));
evalcond[5]=((1.0)+((r11*x12997))+(((-1.0)*r12*x12994))+(((-1.0)*x12993*x12995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12998=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12998.valid){
continue;
}
CheckValue<IkReal> x12999 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12998.value)))+(x12999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13000=IKcos(j4);
IkReal x13001=IKsin(j4);
IkReal x13002=(cj5*r00);
IkReal x13003=(cj5*r20);
IkReal x13004=(cj5*r10);
IkReal x13005=((1.0)*x13000);
IkReal x13006=((1.0)*x13001);
IkReal x13007=(sj5*x13000);
IkReal x13008=(sj5*x13001);
evalcond[0]=((((-1.0)*x13003*x13005))+((r22*x13001))+((r21*x13007)));
evalcond[1]=((((-1.0)*x13004*x13005))+((r12*x13001))+((r11*x13007)));
evalcond[2]=((((-1.0)*x13003*x13006))+(((-1.0)*r22*x13005))+((r21*x13008)));
evalcond[3]=((((-1.0)*x13002*x13006))+(((-1.0)*r02*x13005))+((r01*x13008)));
evalcond[4]=((1.0)+(((-1.0)*x13002*x13005))+((r02*x13001))+((r01*x13007)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13005))+(((-1.0)*x13004*x13006))+((r11*x13008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13009=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13009;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13010=((1.0)*cj5);
IkReal x13011=((((-1.0)*r21*x13010))+(((-1.0)*r20*sj5)));
j4eval[0]=x13011;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13010))+((r11*sj5))))));
j4eval[2]=IKsign(x13011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13012=cj5*cj5;
IkReal x13013=(r11*r21);
IkReal x13014=((1.0)*r20);
IkReal x13015=(cj5*sj5);
IkReal x13016=((((-1.0)*r10*x13012*x13014))+(((-1.0)*r12*r22))+((x13012*x13013))+((r11*r20*x13015))+(((-1.0)*x13013))+((r10*r21*x13015)));
j4eval[0]=x13016;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13014))))));
j4eval[2]=IKsign(x13016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13017=cj5*cj5;
IkReal x13018=(r21*sj5);
IkReal x13019=(r11*r21);
IkReal x13020=((1.0)*r20);
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign((((x13017*x13019))+((cj5*r10*x13018))+(((-1.0)*r12*r22))+(((-1.0)*x13019))+(((-1.0)*r10*x13017*x13020))+((cj5*r11*r20*sj5)))),-1);
if(!x13021.valid){
continue;
}
CheckValue<IkReal> x13022 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13020))+x13018)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13021.value)))+(x13022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13023=IKcos(j4);
IkReal x13024=IKsin(j4);
IkReal x13025=(cj5*r00);
IkReal x13026=(cj5*r20);
IkReal x13027=(cj5*r10);
IkReal x13028=((1.0)*x13023);
IkReal x13029=((1.0)*x13024);
IkReal x13030=(sj5*x13023);
IkReal x13031=(sj5*x13024);
evalcond[0]=(((r21*x13030))+((r22*x13024))+(((-1.0)*x13026*x13028)));
evalcond[1]=(((r11*x13030))+(((-1.0)*x13027*x13028))+((r12*x13024)));
evalcond[2]=((((-1.0)*r22*x13028))+((r21*x13031))+(((-1.0)*x13026*x13029)));
evalcond[3]=((((-1.0)*x13025*x13029))+((r01*x13031))+(((-1.0)*r02*x13028)));
evalcond[4]=((-1.0)+((r02*x13024))+(((-1.0)*x13025*x13028))+((r01*x13030)));
evalcond[5]=((1.0)+((r11*x13031))+(((-1.0)*x13027*x13029))+(((-1.0)*r12*x13028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13032=((1.0)*cj5);
CheckValue<IkReal> x13033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13032))+(((-1.0)*r20*sj5)))),-1);
if(!x13033.valid){
continue;
}
CheckValue<IkReal> x13034 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13032)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13033.value)))+(x13034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13035=IKcos(j4);
IkReal x13036=IKsin(j4);
IkReal x13037=(cj5*r00);
IkReal x13038=(cj5*r20);
IkReal x13039=(cj5*r10);
IkReal x13040=((1.0)*x13035);
IkReal x13041=((1.0)*x13036);
IkReal x13042=(sj5*x13035);
IkReal x13043=(sj5*x13036);
evalcond[0]=((((-1.0)*x13038*x13040))+((r22*x13036))+((r21*x13042)));
evalcond[1]=(((r11*x13042))+(((-1.0)*x13039*x13040))+((r12*x13036)));
evalcond[2]=((((-1.0)*x13038*x13041))+((r21*x13043))+(((-1.0)*r22*x13040)));
evalcond[3]=((((-1.0)*r02*x13040))+((r01*x13043))+(((-1.0)*x13037*x13041)));
evalcond[4]=((-1.0)+((r01*x13042))+((r02*x13036))+(((-1.0)*x13037*x13040)));
evalcond[5]=((1.0)+((r11*x13043))+(((-1.0)*x13039*x13041))+(((-1.0)*r12*x13040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13044 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13044.valid){
continue;
}
CheckValue<IkReal> x13045=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13044.value)+(((1.5707963267949)*(x13045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13046=IKcos(j4);
IkReal x13047=IKsin(j4);
IkReal x13048=(cj5*r00);
IkReal x13049=(cj5*r20);
IkReal x13050=(cj5*r10);
IkReal x13051=((1.0)*x13046);
IkReal x13052=((1.0)*x13047);
IkReal x13053=(sj5*x13046);
IkReal x13054=(sj5*x13047);
evalcond[0]=((((-1.0)*x13049*x13051))+((r21*x13053))+((r22*x13047)));
evalcond[1]=((((-1.0)*x13050*x13051))+((r12*x13047))+((r11*x13053)));
evalcond[2]=((((-1.0)*x13049*x13052))+((r21*x13054))+(((-1.0)*r22*x13051)));
evalcond[3]=((((-1.0)*x13048*x13052))+(((-1.0)*r02*x13051))+((r01*x13054)));
evalcond[4]=((-1.0)+((r02*x13047))+(((-1.0)*x13048*x13051))+((r01*x13053)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13051))+(((-1.0)*x13050*x13052))+((r11*x13054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13055=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13055;
j4eval[1]=IKsign(x13055);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13056=((1.0)*cj5);
IkReal x13057=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13056)));
j4eval[0]=x13057;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13056))+((r21*sj5))))));
j4eval[2]=IKsign(x13057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13058=cj5*cj5;
IkReal x13059=(r11*r21);
IkReal x13060=((1.0)*r20);
IkReal x13061=(cj5*sj5);
IkReal x13062=(((r10*r21*x13061))+((r11*r20*x13061))+(((-1.0)*x13059))+(((-1.0)*r12*r22))+((x13058*x13059))+(((-1.0)*r10*x13058*x13060)));
j4eval[0]=x13062;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13060))))));
j4eval[2]=IKsign(x13062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13063=cj5*cj5;
IkReal x13064=(r21*sj5);
IkReal x13065=(r11*r21);
IkReal x13066=((1.0)*r20);
CheckValue<IkReal> x13067 = IKatan2WithCheck(IkReal((x13064+(((-1.0)*cj5*x13066)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13067.valid){
continue;
}
CheckValue<IkReal> x13068=IKPowWithIntegerCheck(IKsign((((x13063*x13065))+(((-1.0)*x13065))+(((-1.0)*r12*r22))+((cj5*r10*x13064))+(((-1.0)*r10*x13063*x13066))+((cj5*r11*r20*sj5)))),-1);
if(!x13068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13067.value)+(((1.5707963267949)*(x13068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13069=IKcos(j4);
IkReal x13070=IKsin(j4);
IkReal x13071=(cj5*r00);
IkReal x13072=(cj5*r20);
IkReal x13073=(cj5*r10);
IkReal x13074=((1.0)*x13069);
IkReal x13075=((1.0)*x13070);
IkReal x13076=(sj5*x13069);
IkReal x13077=(sj5*x13070);
evalcond[0]=(((r21*x13076))+(((-1.0)*x13072*x13074))+((r22*x13070)));
evalcond[1]=(((r11*x13076))+(((-1.0)*x13073*x13074))+((r12*x13070)));
evalcond[2]=(((r21*x13077))+(((-1.0)*x13072*x13075))+(((-1.0)*r22*x13074)));
evalcond[3]=((((-1.0)*r02*x13074))+((r01*x13077))+(((-1.0)*x13071*x13075)));
evalcond[4]=((1.0)+((r01*x13076))+((r02*x13070))+(((-1.0)*x13071*x13074)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13074))+((r11*x13077))+(((-1.0)*x13073*x13075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13078=((1.0)*cj5);
CheckValue<IkReal> x13079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13078))+(((-1.0)*r10*sj5)))),-1);
if(!x13079.valid){
continue;
}
CheckValue<IkReal> x13080 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13078)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13079.value)))+(x13080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13081=IKcos(j4);
IkReal x13082=IKsin(j4);
IkReal x13083=(cj5*r00);
IkReal x13084=(cj5*r20);
IkReal x13085=(cj5*r10);
IkReal x13086=((1.0)*x13081);
IkReal x13087=((1.0)*x13082);
IkReal x13088=(sj5*x13081);
IkReal x13089=(sj5*x13082);
evalcond[0]=((((-1.0)*x13084*x13086))+((r22*x13082))+((r21*x13088)));
evalcond[1]=((((-1.0)*x13085*x13086))+((r11*x13088))+((r12*x13082)));
evalcond[2]=((((-1.0)*x13084*x13087))+(((-1.0)*r22*x13086))+((r21*x13089)));
evalcond[3]=((((-1.0)*r02*x13086))+(((-1.0)*x13083*x13087))+((r01*x13089)));
evalcond[4]=((1.0)+((r02*x13082))+(((-1.0)*x13083*x13086))+((r01*x13088)));
evalcond[5]=((1.0)+(((-1.0)*x13085*x13087))+((r11*x13089))+(((-1.0)*r12*x13086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13090=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13090.valid){
continue;
}
CheckValue<IkReal> x13091 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13090.value)))+(x13091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13092=IKcos(j4);
IkReal x13093=IKsin(j4);
IkReal x13094=(cj5*r00);
IkReal x13095=(cj5*r20);
IkReal x13096=(cj5*r10);
IkReal x13097=((1.0)*x13092);
IkReal x13098=((1.0)*x13093);
IkReal x13099=(sj5*x13092);
IkReal x13100=(sj5*x13093);
evalcond[0]=((((-1.0)*x13095*x13097))+((r22*x13093))+((r21*x13099)));
evalcond[1]=(((r11*x13099))+((r12*x13093))+(((-1.0)*x13096*x13097)));
evalcond[2]=((((-1.0)*x13095*x13098))+(((-1.0)*r22*x13097))+((r21*x13100)));
evalcond[3]=(((r01*x13100))+(((-1.0)*x13094*x13098))+(((-1.0)*r02*x13097)));
evalcond[4]=((1.0)+((r02*x13093))+(((-1.0)*x13094*x13097))+((r01*x13099)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13097))+(((-1.0)*x13096*x13098))+((r11*x13100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13101=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13101;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13102=((1.0)*cj5);
IkReal x13103=((((-1.0)*r21*x13102))+(((-1.0)*r20*sj5)));
j4eval[0]=x13103;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13102))))));
j4eval[2]=IKsign(x13103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13104=cj5*cj5;
IkReal x13105=(r11*r21);
IkReal x13106=((1.0)*r20);
IkReal x13107=(cj5*sj5);
IkReal x13108=(((x13104*x13105))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13104*x13106))+((r11*r20*x13107))+(((-1.0)*x13105))+((r10*r21*x13107)));
j4eval[0]=x13108;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13106)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13108);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13109=cj5*cj5;
IkReal x13110=(r21*sj5);
IkReal x13111=(r11*r21);
IkReal x13112=((1.0)*r20);
CheckValue<IkReal> x13113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13109*x13111))+(((-1.0)*x13111))+((cj5*r10*x13110))+(((-1.0)*r10*x13109*x13112))+((cj5*r11*r20*sj5)))),-1);
if(!x13113.valid){
continue;
}
CheckValue<IkReal> x13114 = IKatan2WithCheck(IkReal((x13110+(((-1.0)*cj5*x13112)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13113.value)))+(x13114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13115=IKcos(j4);
IkReal x13116=IKsin(j4);
IkReal x13117=(cj5*r00);
IkReal x13118=(cj5*r20);
IkReal x13119=(cj5*r10);
IkReal x13120=((1.0)*x13115);
IkReal x13121=((1.0)*x13116);
IkReal x13122=(sj5*x13115);
IkReal x13123=(sj5*x13116);
evalcond[0]=(((r22*x13116))+(((-1.0)*x13118*x13120))+((r21*x13122)));
evalcond[1]=(((r12*x13116))+((r11*x13122))+(((-1.0)*x13119*x13120)));
evalcond[2]=((((-1.0)*x13118*x13121))+(((-1.0)*r22*x13120))+((r21*x13123)));
evalcond[3]=((((-1.0)*r02*x13120))+((r01*x13123))+(((-1.0)*x13117*x13121)));
evalcond[4]=((-1.0)+((r02*x13116))+((r01*x13122))+(((-1.0)*x13117*x13120)));
evalcond[5]=((1.0)+((r11*x13123))+(((-1.0)*r12*x13120))+(((-1.0)*x13119*x13121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13124=((1.0)*cj5);
CheckValue<IkReal> x13125 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13124)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13125.valid){
continue;
}
CheckValue<IkReal> x13126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13124))+(((-1.0)*r20*sj5)))),-1);
if(!x13126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13125.value)+(((1.5707963267949)*(x13126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13127=IKcos(j4);
IkReal x13128=IKsin(j4);
IkReal x13129=(cj5*r00);
IkReal x13130=(cj5*r20);
IkReal x13131=(cj5*r10);
IkReal x13132=((1.0)*x13127);
IkReal x13133=((1.0)*x13128);
IkReal x13134=(sj5*x13127);
IkReal x13135=(sj5*x13128);
evalcond[0]=(((r21*x13134))+((r22*x13128))+(((-1.0)*x13130*x13132)));
evalcond[1]=(((r12*x13128))+((r11*x13134))+(((-1.0)*x13131*x13132)));
evalcond[2]=(((r21*x13135))+(((-1.0)*r22*x13132))+(((-1.0)*x13130*x13133)));
evalcond[3]=((((-1.0)*x13129*x13133))+((r01*x13135))+(((-1.0)*r02*x13132)));
evalcond[4]=((-1.0)+(((-1.0)*x13129*x13132))+((r01*x13134))+((r02*x13128)));
evalcond[5]=((1.0)+((r11*x13135))+(((-1.0)*x13131*x13133))+(((-1.0)*r12*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13136 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13136.valid){
continue;
}
CheckValue<IkReal> x13137=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13136.value)+(((1.5707963267949)*(x13137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13138=IKcos(j4);
IkReal x13139=IKsin(j4);
IkReal x13140=(cj5*r00);
IkReal x13141=(cj5*r20);
IkReal x13142=(cj5*r10);
IkReal x13143=((1.0)*x13138);
IkReal x13144=((1.0)*x13139);
IkReal x13145=(sj5*x13138);
IkReal x13146=(sj5*x13139);
evalcond[0]=((((-1.0)*x13141*x13143))+((r21*x13145))+((r22*x13139)));
evalcond[1]=((((-1.0)*x13142*x13143))+((r12*x13139))+((r11*x13145)));
evalcond[2]=((((-1.0)*x13141*x13144))+(((-1.0)*r22*x13143))+((r21*x13146)));
evalcond[3]=((((-1.0)*x13140*x13144))+(((-1.0)*r02*x13143))+((r01*x13146)));
evalcond[4]=((-1.0)+(((-1.0)*x13140*x13143))+((r02*x13139))+((r01*x13145)));
evalcond[5]=((1.0)+(((-1.0)*x13142*x13144))+((r11*x13146))+(((-1.0)*r12*x13143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13147=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13148=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13149=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13149))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13149)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13150=((1.0)*cj5);
CheckValue<IkReal> x13151=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13150))),-1);
if(!x13151.valid){
continue;
}
CheckValue<IkReal> x13152=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13150))),-1);
if(!x13152.valid){
continue;
}
if( IKabs(((-1.0)*(x13151.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13152.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13151.value)))+IKsqr(((x13152.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13151.value)), ((x13152.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13153=IKsin(j4);
IkReal x13154=IKcos(j4);
IkReal x13155=((1.0)*cj5);
IkReal x13156=((1.0)*cj2);
IkReal x13157=(sj5*x13154);
IkReal x13158=(sj5*x13153);
evalcond[0]=((-1.0)*r22*x13154);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13156))+((r22*x13153)));
evalcond[2]=((((-1.0)*r00*x13153*x13155))+((r01*x13158)));
evalcond[3]=(((r11*x13157))+(((-1.0)*r10*x13154*x13155)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13153*x13155))+((r11*x13158)));
evalcond[5]=((((-1.0)*sj1*x13156))+(((-1.0)*r00*x13154*x13155))+(((-1.0)*cj1*sj2))+((r01*x13157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13159=IKPowWithIntegerCheck(r22,-1);
if(!x13159.valid){
continue;
}
CheckValue<IkReal> x13160=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13160.valid){
continue;
}
if( IKabs(((x13159.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13160.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13159.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13160.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13159.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13160.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13161=IKsin(j4);
IkReal x13162=IKcos(j4);
IkReal x13163=((1.0)*cj5);
IkReal x13164=((1.0)*cj2);
IkReal x13165=(sj5*x13162);
IkReal x13166=(sj5*x13161);
evalcond[0]=((-1.0)*r22*x13162);
evalcond[1]=((((-1.0)*cj1*x13164))+((r22*x13161))+((sj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13161*x13163))+((r01*x13166)));
evalcond[3]=(((r11*x13165))+(((-1.0)*r10*x13162*x13163)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13161*x13163))+((r11*x13166)));
evalcond[5]=(((r01*x13165))+(((-1.0)*sj1*x13164))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13162*x13163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13167=(sj1*sj2);
IkReal x13168=(cj5*r10);
IkReal x13169=(r11*sj5);
IkReal x13170=(cj1*cj2);
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13171.valid){
continue;
}
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal((((x13168*x13170))+(((-1.0)*x13167*x13168))+((x13167*x13169))+(((-1.0)*x13169*x13170)))),IkReal(((((-1.0)*r12*x13167))+((r12*x13170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13171.value)))+(x13172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13173=IKcos(j4);
IkReal x13174=IKsin(j4);
IkReal x13175=(cj5*r00);
IkReal x13176=(cj5*r10);
IkReal x13177=(r21*sj5);
IkReal x13178=((1.0)*cj2);
IkReal x13179=(cj5*r20);
IkReal x13180=((1.0)*x13173);
IkReal x13181=((1.0)*x13174);
IkReal x13182=(sj5*x13174);
IkReal x13183=(sj5*x13173);
evalcond[0]=(((r11*x13183))+(((-1.0)*x13176*x13180))+((r12*x13174)));
evalcond[1]=((((-1.0)*x13179*x13181))+(((-1.0)*r22*x13180))+((x13174*x13177)));
evalcond[2]=((((-1.0)*x13175*x13181))+(((-1.0)*r02*x13180))+((r01*x13182)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13180))+((r11*x13182))+(((-1.0)*x13176*x13181)));
evalcond[4]=((((-1.0)*cj1*x13178))+(((-1.0)*x13179*x13180))+((x13173*x13177))+((sj1*sj2))+((r22*x13174)));
evalcond[5]=((((-1.0)*x13175*x13180))+(((-1.0)*sj1*x13178))+(((-1.0)*cj1*sj2))+((r01*x13183))+((r02*x13174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13184=((1.0)*cj5);
CheckValue<IkReal> x13185 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13185.valid){
continue;
}
CheckValue<IkReal> x13186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13184)))),-1);
if(!x13186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13185.value)+(((1.5707963267949)*(x13186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13187=IKcos(j4);
IkReal x13188=IKsin(j4);
IkReal x13189=(cj5*r00);
IkReal x13190=(cj5*r10);
IkReal x13191=(r21*sj5);
IkReal x13192=((1.0)*cj2);
IkReal x13193=(cj5*r20);
IkReal x13194=((1.0)*x13187);
IkReal x13195=((1.0)*x13188);
IkReal x13196=(sj5*x13188);
IkReal x13197=(sj5*x13187);
evalcond[0]=(((r12*x13188))+((r11*x13197))+(((-1.0)*x13190*x13194)));
evalcond[1]=((((-1.0)*r22*x13194))+((x13188*x13191))+(((-1.0)*x13193*x13195)));
evalcond[2]=((((-1.0)*r02*x13194))+((r01*x13196))+(((-1.0)*x13189*x13195)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13194))+((r11*x13196))+(((-1.0)*x13190*x13195)));
evalcond[4]=(((r22*x13188))+(((-1.0)*cj1*x13192))+((sj1*sj2))+(((-1.0)*x13193*x13194))+((x13187*x13191)));
evalcond[5]=(((r02*x13188))+(((-1.0)*cj1*sj2))+((r01*x13197))+(((-1.0)*x13189*x13194))+(((-1.0)*sj1*x13192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13198=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13198.valid){
continue;
}
CheckValue<IkReal> x13199 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13198.value)))+(x13199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13200=IKcos(j4);
IkReal x13201=IKsin(j4);
IkReal x13202=(cj5*r00);
IkReal x13203=(cj5*r10);
IkReal x13204=(r21*sj5);
IkReal x13205=((1.0)*cj2);
IkReal x13206=(cj5*r20);
IkReal x13207=((1.0)*x13200);
IkReal x13208=((1.0)*x13201);
IkReal x13209=(sj5*x13201);
IkReal x13210=(sj5*x13200);
evalcond[0]=(((r11*x13210))+(((-1.0)*x13203*x13207))+((r12*x13201)));
evalcond[1]=(((x13201*x13204))+(((-1.0)*x13206*x13208))+(((-1.0)*r22*x13207)));
evalcond[2]=(((r01*x13209))+(((-1.0)*x13202*x13208))+(((-1.0)*r02*x13207)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13207))+((r11*x13209))+(((-1.0)*x13203*x13208)));
evalcond[4]=((((-1.0)*cj1*x13205))+((x13200*x13204))+((sj1*sj2))+((r22*x13201))+(((-1.0)*x13206*x13207)));
evalcond[5]=(((r01*x13210))+(((-1.0)*x13202*x13207))+((r02*x13201))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13211=((-1.0)*r00);
IkReal x13213 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13213)==0){
continue;
}
IkReal x13212=pow(x13213,-0.5);
CheckValue<IkReal> x13214 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13211),IKFAST_ATAN2_MAGTHRESH);
if(!x13214.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13214.value));
IkReal gconst19=(r01*x13212);
IkReal gconst20=(x13211*x13212);
CheckValue<IkReal> x13215 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13215.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13215.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13216=((-1.0)*r00);
IkReal x13217=x13212;
CheckValue<IkReal> x13219 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13216),IKFAST_ATAN2_MAGTHRESH);
if(!x13219.valid){
continue;
}
IkReal x13218=((-1.0)*(x13219.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13218;
IkReal gconst18=x13218;
IkReal gconst19=(r01*x13217);
IkReal gconst20=(x13216*x13217);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13220=((-1.0)*r00);
IkReal x13221=x13212;
CheckValue<IkReal> x13223 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13220),IKFAST_ATAN2_MAGTHRESH);
if(!x13223.valid){
continue;
}
IkReal x13222=((-1.0)*(x13223.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13222;
IkReal gconst18=x13222;
IkReal gconst19=(r01*x13221);
IkReal gconst20=(x13220*x13221);
CheckValue<IkReal> x13231=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13231.valid){
continue;
}
IkReal x13224=x13231.value;
IkReal x13225=(sj3*x13224);
IkReal x13226=(r11*x13225);
IkReal x13227=(r21*x13225);
IkReal x13228=(r20*x13225);
IkReal x13229=(r10*x13225);
IkReal x13230=(r00*r01*x13225);
j4eval[0]=IKsign((((r00*r01*r10*x13227))+((r12*r22*sj3))+((r21*x13226*(r01*r01)))+((r00*r01*r20*x13226))+((r10*x13228*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13232=gconst19*gconst19;
IkReal x13233=gconst20*gconst20;
IkReal x13234=(gconst20*sj3);
IkReal x13235=((1.0)*cj3);
IkReal x13236=(r10*sj3);
IkReal x13237=(gconst19*r21);
IkReal x13238=(r11*r20);
IkReal x13239=(cj3*gconst20);
IkReal x13240=((1.0)*r10*r20);
IkReal x13241=(r21*x13232);
CheckValue<IkReal> x13242 = IKatan2WithCheck(IkReal((((gconst19*r22*x13236))+((r11*r22*x13234)))),IkReal((((r11*x13234*x13237))+((x13236*x13241))+(((-1.0)*gconst19*x13234*x13240))+(((-1.0)*sj3*x13233*x13238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13242.valid){
continue;
}
CheckValue<IkReal> x13243=IKPowWithIntegerCheck(IKsign((((r10*x13237*x13239))+(((-1.0)*r11*x13235*x13241))+(((-1.0)*r10*r20*x13233*x13235))+((gconst19*x13238*x13239))+(((-1.0)*r12*r22*x13235)))),-1);
if(!x13243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13242.value)+(((1.5707963267949)*(x13243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13244=IKsin(j4);
IkReal x13245=IKcos(j4);
IkReal x13246=(sj1*sj2);
IkReal x13247=(gconst20*sj3);
IkReal x13248=(gconst19*r21);
IkReal x13249=(gconst20*r10);
IkReal x13250=(cj3*gconst19);
IkReal x13251=(gconst19*sj3);
IkReal x13252=((1.0)*cj1);
IkReal x13253=(cj3*gconst20);
IkReal x13254=(cj2*sj1);
IkReal x13255=(cj2*x13252);
IkReal x13256=((1.0)*x13245);
IkReal x13257=((1.0)*x13244);
IkReal x13258=(cj3*x13244);
IkReal x13259=(gconst19*x13244);
evalcond[0]=((((-1.0)*r22*x13256))+((x13244*x13248))+(((-1.0)*gconst20*r20*x13257)));
evalcond[1]=((((-1.0)*r02*x13256))+((r01*x13259))+(((-1.0)*gconst20*r00*x13257)));
evalcond[2]=((1.0)+((r11*x13259))+(((-1.0)*r12*x13256))+(((-1.0)*x13249*x13257)));
evalcond[3]=(((r10*x13251))+((r12*x13258))+(((-1.0)*cj3*x13249*x13256))+((r11*x13247))+((r11*x13245*x13250)));
evalcond[4]=(((r10*x13245*x13247))+((r10*x13250))+(((-1.0)*r12*sj3*x13257))+((r11*x13253))+(((-1.0)*r11*x13251*x13256)));
evalcond[5]=(((r21*x13247))+((cj1*sj2))+(((-1.0)*r20*x13253*x13256))+((r22*x13258))+((cj3*x13245*x13248))+x13254+((r20*x13251)));
evalcond[6]=(((r01*x13245*x13250))+((r02*x13258))+((r01*x13247))+((r00*x13251))+(((-1.0)*r00*x13253*x13256))+(((-1.0)*x13255))+x13246);
evalcond[7]=(((r21*x13253))+(((-1.0)*r22*sj3*x13257))+((r20*x13245*x13247))+(((-1.0)*sj3*x13248*x13256))+(((-1.0)*x13255))+x13246+((r20*x13250)));
evalcond[8]=((((-1.0)*x13254))+((r00*x13245*x13247))+(((-1.0)*r02*sj3*x13257))+(((-1.0)*r01*x13251*x13256))+((r01*x13253))+((r00*x13250))+(((-1.0)*sj2*x13252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13260=gconst19*gconst19;
IkReal x13261=gconst20*gconst20;
IkReal x13262=(r21*sj3);
IkReal x13263=(cj3*r11);
IkReal x13264=(gconst19*gconst20);
IkReal x13265=((1.0)*r10);
IkReal x13266=(cj3*r10);
IkReal x13267=(r20*x13261);
CheckValue<IkReal> x13268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x13264))+(((-1.0)*x13262*x13264*x13265))+((r11*x13260*x13262))+((r12*r22*sj3))+((r10*sj3*x13267)))),-1);
if(!x13268.valid){
continue;
}
CheckValue<IkReal> x13269 = IKatan2WithCheck(IkReal((((gconst19*r22*x13266))+((gconst20*r22*x13263)))),IkReal((((r21*x13263*x13264))+(((-1.0)*x13263*x13267))+(((-1.0)*cj3*r20*x13264*x13265))+((r21*x13260*x13266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13268.value)))+(x13269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13270=IKsin(j4);
IkReal x13271=IKcos(j4);
IkReal x13272=(sj1*sj2);
IkReal x13273=(gconst20*sj3);
IkReal x13274=(gconst19*r21);
IkReal x13275=(gconst20*r10);
IkReal x13276=(cj3*gconst19);
IkReal x13277=(gconst19*sj3);
IkReal x13278=((1.0)*cj1);
IkReal x13279=(cj3*gconst20);
IkReal x13280=(cj2*sj1);
IkReal x13281=(cj2*x13278);
IkReal x13282=((1.0)*x13271);
IkReal x13283=((1.0)*x13270);
IkReal x13284=(cj3*x13270);
IkReal x13285=(gconst19*x13270);
evalcond[0]=((((-1.0)*r22*x13282))+(((-1.0)*gconst20*r20*x13283))+((x13270*x13274)));
evalcond[1]=((((-1.0)*gconst20*r00*x13283))+(((-1.0)*r02*x13282))+((r01*x13285)));
evalcond[2]=((1.0)+((r11*x13285))+(((-1.0)*x13275*x13283))+(((-1.0)*r12*x13282)));
evalcond[3]=(((r12*x13284))+((r11*x13273))+((r11*x13271*x13276))+((r10*x13277))+(((-1.0)*cj3*x13275*x13282)));
evalcond[4]=(((r11*x13279))+((r10*x13276))+(((-1.0)*r11*x13277*x13282))+(((-1.0)*r12*sj3*x13283))+((r10*x13271*x13273)));
evalcond[5]=(((r21*x13273))+((r20*x13277))+((cj1*sj2))+((cj3*x13271*x13274))+((r22*x13284))+x13280+(((-1.0)*r20*x13279*x13282)));
evalcond[6]=(((r01*x13273))+((r00*x13277))+((r02*x13284))+((r01*x13271*x13276))+(((-1.0)*r00*x13279*x13282))+x13272+(((-1.0)*x13281)));
evalcond[7]=(((r21*x13279))+((r20*x13276))+(((-1.0)*r22*sj3*x13283))+(((-1.0)*sj3*x13274*x13282))+x13272+((r20*x13271*x13273))+(((-1.0)*x13281)));
evalcond[8]=(((r01*x13279))+(((-1.0)*sj2*x13278))+((r00*x13276))+(((-1.0)*x13280))+(((-1.0)*r01*x13277*x13282))+((r00*x13271*x13273))+(((-1.0)*r02*sj3*x13283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13286 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13286.valid){
continue;
}
CheckValue<IkReal> x13287=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13286.value)+(((1.5707963267949)*(x13287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13288=IKsin(j4);
IkReal x13289=IKcos(j4);
IkReal x13290=(sj1*sj2);
IkReal x13291=(gconst20*sj3);
IkReal x13292=(gconst19*r21);
IkReal x13293=(gconst20*r10);
IkReal x13294=(cj3*gconst19);
IkReal x13295=(gconst19*sj3);
IkReal x13296=((1.0)*cj1);
IkReal x13297=(cj3*gconst20);
IkReal x13298=(cj2*sj1);
IkReal x13299=(cj2*x13296);
IkReal x13300=((1.0)*x13289);
IkReal x13301=((1.0)*x13288);
IkReal x13302=(cj3*x13288);
IkReal x13303=(gconst19*x13288);
evalcond[0]=((((-1.0)*gconst20*r20*x13301))+((x13288*x13292))+(((-1.0)*r22*x13300)));
evalcond[1]=((((-1.0)*gconst20*r00*x13301))+((r01*x13303))+(((-1.0)*r02*x13300)));
evalcond[2]=((1.0)+(((-1.0)*x13293*x13301))+(((-1.0)*r12*x13300))+((r11*x13303)));
evalcond[3]=(((r11*x13291))+((r12*x13302))+((r11*x13289*x13294))+(((-1.0)*cj3*x13293*x13300))+((r10*x13295)));
evalcond[4]=((((-1.0)*r12*sj3*x13301))+((r11*x13297))+((r10*x13289*x13291))+(((-1.0)*r11*x13295*x13300))+((r10*x13294)));
evalcond[5]=(((r20*x13295))+((cj1*sj2))+(((-1.0)*r20*x13297*x13300))+((r22*x13302))+((cj3*x13289*x13292))+x13298+((r21*x13291)));
evalcond[6]=((((-1.0)*r00*x13297*x13300))+x13290+((r02*x13302))+(((-1.0)*x13299))+((r01*x13289*x13294))+((r00*x13295))+((r01*x13291)));
evalcond[7]=(((r20*x13294))+((r20*x13289*x13291))+(((-1.0)*sj3*x13292*x13300))+(((-1.0)*r22*sj3*x13301))+x13290+(((-1.0)*x13299))+((r21*x13297)));
evalcond[8]=(((r00*x13289*x13291))+(((-1.0)*r01*x13295*x13300))+(((-1.0)*r02*sj3*x13301))+(((-1.0)*x13298))+(((-1.0)*sj2*x13296))+((r00*x13294))+((r01*x13297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13304=((-1.0)*r01);
IkReal x13306 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13306)==0){
continue;
}
IkReal x13305=pow(x13306,-0.5);
CheckValue<IkReal> x13307 = IKatan2WithCheck(IkReal(x13304),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13307.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13307.value))));
IkReal gconst22=(x13304*x13305);
IkReal gconst23=((1.0)*r00*x13305);
CheckValue<IkReal> x13308 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13308.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13308.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13309=((-1.0)*r01);
CheckValue<IkReal> x13312 = IKatan2WithCheck(IkReal(x13309),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13312.valid){
continue;
}
IkReal x13310=((1.0)*(x13312.value));
IkReal x13311=x13305;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13310)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13310)));
IkReal gconst22=(x13309*x13311);
IkReal gconst23=((1.0)*r00*x13311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13313=((-1.0)*r01);
CheckValue<IkReal> x13316 = IKatan2WithCheck(IkReal(x13313),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13316.valid){
continue;
}
IkReal x13314=((1.0)*(x13316.value));
IkReal x13315=x13305;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13314)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13314)));
IkReal gconst22=(x13313*x13315);
IkReal gconst23=((1.0)*r00*x13315);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13317=gconst22*gconst22;
IkReal x13318=gconst23*gconst23;
IkReal x13319=(r21*sj3);
IkReal x13320=((1.0)*cj3);
IkReal x13321=(gconst23*r11);
IkReal x13322=(r22*sj3);
IkReal x13323=(gconst22*r10);
IkReal x13324=((1.0)*r20*sj3);
CheckValue<IkReal> x13325 = IKatan2WithCheck(IkReal((((x13321*x13322))+((x13322*x13323)))),IkReal(((((-1.0)*r11*x13318*x13324))+((gconst22*x13319*x13321))+((r10*x13317*x13319))+(((-1.0)*gconst23*x13323*x13324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13325.valid){
continue;
}
CheckValue<IkReal> x13326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13320))+(((-1.0)*r11*r21*x13317*x13320))+(((-1.0)*r10*r20*x13318*x13320))+((cj3*gconst23*r21*x13323))+((cj3*gconst22*r20*x13321)))),-1);
if(!x13326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13325.value)+(((1.5707963267949)*(x13326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13327=IKsin(j4);
IkReal x13328=IKcos(j4);
IkReal x13329=(sj1*sj2);
IkReal x13330=(gconst23*sj3);
IkReal x13331=(gconst22*sj3);
IkReal x13332=(cj2*sj1);
IkReal x13333=((1.0)*cj1);
IkReal x13334=(cj3*gconst23);
IkReal x13335=(cj3*gconst22);
IkReal x13336=(cj2*x13333);
IkReal x13337=((1.0)*x13328);
IkReal x13338=(cj3*x13327);
IkReal x13339=(gconst22*x13327);
IkReal x13340=((1.0)*sj3*x13327);
IkReal x13341=(x13328*x13335);
IkReal x13342=((1.0)*gconst23*x13327);
evalcond[0]=((((-1.0)*r22*x13337))+((r21*x13339))+(((-1.0)*r20*x13342)));
evalcond[1]=(((r01*x13339))+(((-1.0)*r00*x13342))+(((-1.0)*r02*x13337)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13337))+(((-1.0)*r10*x13342))+((r11*x13339)));
evalcond[3]=(((r10*x13331))+(((-1.0)*r10*x13334*x13337))+((r11*x13341))+((r12*x13338))+((r11*x13330)));
evalcond[4]=((((-1.0)*r11*x13331*x13337))+((r10*x13335))+((r10*x13328*x13330))+(((-1.0)*r12*x13340))+((r11*x13334)));
evalcond[5]=((((-1.0)*r20*x13334*x13337))+((r22*x13338))+((cj1*sj2))+((r21*x13341))+((r20*x13331))+((r21*x13330))+x13332);
evalcond[6]=((((-1.0)*x13336))+((r02*x13338))+((r00*x13331))+((r01*x13330))+((r01*x13341))+(((-1.0)*r00*x13334*x13337))+x13329);
evalcond[7]=((((-1.0)*x13336))+(((-1.0)*r21*x13331*x13337))+((r20*x13335))+((r21*x13334))+((r20*x13328*x13330))+(((-1.0)*r22*x13340))+x13329);
evalcond[8]=((((-1.0)*sj2*x13333))+(((-1.0)*x13332))+(((-1.0)*r02*x13340))+((r00*x13328*x13330))+((r00*x13335))+((r01*x13334))+(((-1.0)*r01*x13331*x13337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13343=((1.0)*gconst23);
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
CheckValue<IkReal> x13345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13343))+(((-1.0)*gconst22*r00)))),-1);
if(!x13345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13344.value)+(((1.5707963267949)*(x13345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13346=IKsin(j4);
IkReal x13347=IKcos(j4);
IkReal x13348=(sj1*sj2);
IkReal x13349=(gconst23*sj3);
IkReal x13350=(gconst22*sj3);
IkReal x13351=(cj2*sj1);
IkReal x13352=((1.0)*cj1);
IkReal x13353=(cj3*gconst23);
IkReal x13354=(cj3*gconst22);
IkReal x13355=(cj2*x13352);
IkReal x13356=((1.0)*x13347);
IkReal x13357=(cj3*x13346);
IkReal x13358=(gconst22*x13346);
IkReal x13359=((1.0)*sj3*x13346);
IkReal x13360=(x13347*x13354);
IkReal x13361=((1.0)*gconst23*x13346);
evalcond[0]=((((-1.0)*r22*x13356))+(((-1.0)*r20*x13361))+((r21*x13358)));
evalcond[1]=((((-1.0)*r02*x13356))+(((-1.0)*r00*x13361))+((r01*x13358)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13361))+(((-1.0)*r12*x13356))+((r11*x13358)));
evalcond[3]=(((r11*x13360))+(((-1.0)*r10*x13353*x13356))+((r10*x13350))+((r11*x13349))+((r12*x13357)));
evalcond[4]=((((-1.0)*r12*x13359))+((r10*x13347*x13349))+((r10*x13354))+((r11*x13353))+(((-1.0)*r11*x13350*x13356)));
evalcond[5]=(((r22*x13357))+((cj1*sj2))+((r20*x13350))+(((-1.0)*r20*x13353*x13356))+((r21*x13349))+((r21*x13360))+x13351);
evalcond[6]=(((r02*x13357))+((r01*x13360))+(((-1.0)*r00*x13353*x13356))+((r00*x13350))+((r01*x13349))+(((-1.0)*x13355))+x13348);
evalcond[7]=((((-1.0)*r22*x13359))+((r20*x13347*x13349))+((r20*x13354))+((r21*x13353))+(((-1.0)*x13355))+x13348+(((-1.0)*r21*x13350*x13356)));
evalcond[8]=((((-1.0)*r02*x13359))+((r00*x13347*x13349))+(((-1.0)*x13351))+(((-1.0)*r01*x13350*x13356))+((r01*x13353))+((r00*x13354))+(((-1.0)*sj2*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13362=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13362.valid){
continue;
}
CheckValue<IkReal> x13363 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13362.value)))+(x13363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13364=IKsin(j4);
IkReal x13365=IKcos(j4);
IkReal x13366=(sj1*sj2);
IkReal x13367=(gconst23*sj3);
IkReal x13368=(gconst22*sj3);
IkReal x13369=(cj2*sj1);
IkReal x13370=((1.0)*cj1);
IkReal x13371=(cj3*gconst23);
IkReal x13372=(cj3*gconst22);
IkReal x13373=(cj2*x13370);
IkReal x13374=((1.0)*x13365);
IkReal x13375=(cj3*x13364);
IkReal x13376=(gconst22*x13364);
IkReal x13377=((1.0)*sj3*x13364);
IkReal x13378=(x13365*x13372);
IkReal x13379=((1.0)*gconst23*x13364);
evalcond[0]=((((-1.0)*r22*x13374))+(((-1.0)*r20*x13379))+((r21*x13376)));
evalcond[1]=((((-1.0)*r00*x13379))+((r01*x13376))+(((-1.0)*r02*x13374)));
evalcond[2]=((1.0)+((r11*x13376))+(((-1.0)*r10*x13379))+(((-1.0)*r12*x13374)));
evalcond[3]=(((r10*x13368))+((r12*x13375))+((r11*x13378))+((r11*x13367))+(((-1.0)*r10*x13371*x13374)));
evalcond[4]=(((r10*x13372))+((r11*x13371))+(((-1.0)*r11*x13368*x13374))+((r10*x13365*x13367))+(((-1.0)*r12*x13377)));
evalcond[5]=((((-1.0)*r20*x13371*x13374))+((r20*x13368))+((cj1*sj2))+((r22*x13375))+((r21*x13367))+((r21*x13378))+x13369);
evalcond[6]=(((r02*x13375))+((r01*x13367))+(((-1.0)*r00*x13371*x13374))+((r01*x13378))+((r00*x13368))+(((-1.0)*x13373))+x13366);
evalcond[7]=((((-1.0)*r22*x13377))+((r20*x13372))+((r20*x13365*x13367))+(((-1.0)*x13373))+(((-1.0)*r21*x13368*x13374))+((r21*x13371))+x13366);
evalcond[8]=((((-1.0)*x13369))+(((-1.0)*r01*x13368*x13374))+((r00*x13372))+((r01*x13371))+((r00*x13365*x13367))+(((-1.0)*r02*x13377))+(((-1.0)*sj2*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13381 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13381)==0){
continue;
}
IkReal x13380=pow(x13381,-0.5);
CheckValue<IkReal> x13382 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13382.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13382.value));
IkReal gconst25=((-1.0)*r21*x13380);
IkReal gconst26=(r20*x13380);
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13383.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13386 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13386.valid){
continue;
}
IkReal x13384=((-1.0)*(x13386.value));
IkReal x13385=x13380;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13384;
IkReal gconst24=x13384;
IkReal gconst25=((-1.0)*r21*x13385);
IkReal gconst26=(r20*x13385);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13389 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13389.valid){
continue;
}
IkReal x13387=((-1.0)*(x13389.value));
IkReal x13388=x13380;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13387;
IkReal gconst24=x13387;
IkReal gconst25=((-1.0)*r21*x13388);
IkReal gconst26=(r20*x13388);
CheckValue<IkReal> x13397=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13397.valid){
continue;
}
IkReal x13390=x13397.value;
IkReal x13391=(sj3*x13390);
IkReal x13392=(r11*x13391);
IkReal x13393=(r00*x13391);
IkReal x13394=(r01*x13391);
IkReal x13395=(r10*x13391);
IkReal x13396=(r20*r21*x13391);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13393*(r20*r20)))+((r00*r20*r21*x13392))+((r01*x13392*(r21*r21)))+((r10*r20*r21*x13394))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13398=gconst25*gconst25;
IkReal x13399=gconst26*gconst26;
IkReal x13400=(r00*r11);
IkReal x13401=(r01*r10);
IkReal x13402=(r02*sj3);
IkReal x13403=(gconst25*r10);
IkReal x13404=(gconst26*r11);
IkReal x13405=((1.0)*sj3);
IkReal x13406=((1.0)*cj3);
IkReal x13407=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r11*x13398*x13406))+(((-1.0)*r02*r12*x13406))+((x13400*x13407))+(((-1.0)*r00*r10*x13399*x13406))+((x13401*x13407)))),-1);
if(!x13408.valid){
continue;
}
CheckValue<IkReal> x13409 = IKatan2WithCheck(IkReal((((x13402*x13403))+((x13402*x13404)))),IkReal((((sj3*x13398*x13401))+((gconst25*r01*sj3*x13404))+(((-1.0)*x13399*x13400*x13405))+(((-1.0)*gconst26*r00*x13403*x13405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13408.value)))+(x13409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13410=IKsin(j4);
IkReal x13411=IKcos(j4);
IkReal x13412=(sj1*sj2);
IkReal x13413=(gconst26*sj3);
IkReal x13414=(gconst25*sj3);
IkReal x13415=(gconst26*r10);
IkReal x13416=(gconst25*r11);
IkReal x13417=(cj3*gconst25);
IkReal x13418=((1.0)*cj2);
IkReal x13419=(cj1*sj2);
IkReal x13420=(gconst26*r00);
IkReal x13421=(gconst26*r20);
IkReal x13422=(cj3*gconst26);
IkReal x13423=(cj1*x13418);
IkReal x13424=((1.0)*x13411);
IkReal x13425=((1.0)*x13410);
IkReal x13426=(cj3*x13410);
IkReal x13427=(gconst25*x13410);
evalcond[0]=((((-1.0)*x13421*x13425))+(((-1.0)*r22*x13424))+((r21*x13427)));
evalcond[1]=((((-1.0)*x13420*x13425))+(((-1.0)*r02*x13424))+((r01*x13427)));
evalcond[2]=((1.0)+((x13410*x13416))+(((-1.0)*x13415*x13425))+(((-1.0)*r12*x13424)));
evalcond[3]=((((-1.0)*cj3*x13415*x13424))+((cj3*x13411*x13416))+((r12*x13426))+((r10*x13414))+((r11*x13413)));
evalcond[4]=(((r10*x13411*x13413))+(((-1.0)*r12*sj3*x13425))+((r11*x13422))+((r10*x13417))+(((-1.0)*r11*x13414*x13424)));
evalcond[5]=(x13419+((cj2*sj1))+(((-1.0)*cj3*x13421*x13424))+((r22*x13426))+((r20*x13414))+((r21*x13411*x13417))+((r21*x13413)));
evalcond[6]=(x13412+(((-1.0)*cj3*x13420*x13424))+(((-1.0)*x13423))+((r01*x13411*x13417))+((r02*x13426))+((r01*x13413))+((r00*x13414)));
evalcond[7]=(x13412+((r20*x13417))+(((-1.0)*x13423))+((r21*x13422))+(((-1.0)*r22*sj3*x13425))+((r20*x13411*x13413))+(((-1.0)*r21*x13414*x13424)));
evalcond[8]=(((r00*x13411*x13413))+(((-1.0)*x13419))+(((-1.0)*r01*x13414*x13424))+(((-1.0)*r02*sj3*x13425))+((r00*x13417))+((r01*x13422))+(((-1.0)*sj1*x13418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13428=gconst26*gconst26;
IkReal x13429=gconst25*gconst25;
IkReal x13430=(r01*r10);
IkReal x13431=(cj3*r11);
IkReal x13432=(gconst25*gconst26);
IkReal x13433=(cj3*r10);
IkReal x13434=(r00*x13428);
IkReal x13435=((1.0)*sj3*x13432);
CheckValue<IkReal> x13436=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x13429))+(((-1.0)*x13430*x13435))+((r10*sj3*x13434))+(((-1.0)*r00*r11*x13435)))),-1);
if(!x13436.valid){
continue;
}
CheckValue<IkReal> x13437 = IKatan2WithCheck(IkReal((((gconst25*r02*x13433))+((gconst26*r02*x13431)))),IkReal(((((-1.0)*r00*x13432*x13433))+((r01*x13431*x13432))+((cj3*x13429*x13430))+(((-1.0)*x13431*x13434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13436.value)))+(x13437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13438=IKsin(j4);
IkReal x13439=IKcos(j4);
IkReal x13440=(sj1*sj2);
IkReal x13441=(gconst26*sj3);
IkReal x13442=(gconst25*sj3);
IkReal x13443=(gconst26*r10);
IkReal x13444=(gconst25*r11);
IkReal x13445=(cj3*gconst25);
IkReal x13446=((1.0)*cj2);
IkReal x13447=(cj1*sj2);
IkReal x13448=(gconst26*r00);
IkReal x13449=(gconst26*r20);
IkReal x13450=(cj3*gconst26);
IkReal x13451=(cj1*x13446);
IkReal x13452=((1.0)*x13439);
IkReal x13453=((1.0)*x13438);
IkReal x13454=(cj3*x13438);
IkReal x13455=(gconst25*x13438);
evalcond[0]=((((-1.0)*r22*x13452))+((r21*x13455))+(((-1.0)*x13449*x13453)));
evalcond[1]=((((-1.0)*x13448*x13453))+(((-1.0)*r02*x13452))+((r01*x13455)));
evalcond[2]=((1.0)+(((-1.0)*x13443*x13453))+((x13438*x13444))+(((-1.0)*r12*x13452)));
evalcond[3]=((((-1.0)*cj3*x13443*x13452))+((r12*x13454))+((cj3*x13439*x13444))+((r10*x13442))+((r11*x13441)));
evalcond[4]=(((r11*x13450))+(((-1.0)*r11*x13442*x13452))+((r10*x13439*x13441))+(((-1.0)*r12*sj3*x13453))+((r10*x13445)));
evalcond[5]=(x13447+((cj2*sj1))+(((-1.0)*cj3*x13449*x13452))+((r21*x13439*x13445))+((r20*x13442))+((r22*x13454))+((r21*x13441)));
evalcond[6]=(x13440+(((-1.0)*x13451))+((r00*x13442))+((r01*x13441))+((r01*x13439*x13445))+((r02*x13454))+(((-1.0)*cj3*x13448*x13452)));
evalcond[7]=(x13440+((r21*x13450))+(((-1.0)*r21*x13442*x13452))+(((-1.0)*x13451))+((r20*x13445))+((r20*x13439*x13441))+(((-1.0)*r22*sj3*x13453)));
evalcond[8]=((((-1.0)*r02*sj3*x13453))+((r00*x13439*x13441))+(((-1.0)*r01*x13442*x13452))+((r00*x13445))+(((-1.0)*x13447))+((r01*x13450))+(((-1.0)*sj1*x13446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13456=((1.0)*gconst26);
CheckValue<IkReal> x13457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13456))+(((-1.0)*gconst25*r00)))),-1);
if(!x13457.valid){
continue;
}
CheckValue<IkReal> x13458 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13456))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13457.value)))+(x13458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13459=IKsin(j4);
IkReal x13460=IKcos(j4);
IkReal x13461=(sj1*sj2);
IkReal x13462=(gconst26*sj3);
IkReal x13463=(gconst25*sj3);
IkReal x13464=(gconst26*r10);
IkReal x13465=(gconst25*r11);
IkReal x13466=(cj3*gconst25);
IkReal x13467=((1.0)*cj2);
IkReal x13468=(cj1*sj2);
IkReal x13469=(gconst26*r00);
IkReal x13470=(gconst26*r20);
IkReal x13471=(cj3*gconst26);
IkReal x13472=(cj1*x13467);
IkReal x13473=((1.0)*x13460);
IkReal x13474=((1.0)*x13459);
IkReal x13475=(cj3*x13459);
IkReal x13476=(gconst25*x13459);
evalcond[0]=(((r21*x13476))+(((-1.0)*r22*x13473))+(((-1.0)*x13470*x13474)));
evalcond[1]=(((r01*x13476))+(((-1.0)*r02*x13473))+(((-1.0)*x13469*x13474)));
evalcond[2]=((1.0)+((x13459*x13465))+(((-1.0)*x13464*x13474))+(((-1.0)*r12*x13473)));
evalcond[3]=(((r10*x13463))+((r12*x13475))+((r11*x13462))+((cj3*x13460*x13465))+(((-1.0)*cj3*x13464*x13473)));
evalcond[4]=(((r10*x13460*x13462))+((r10*x13466))+((r11*x13471))+(((-1.0)*r12*sj3*x13474))+(((-1.0)*r11*x13463*x13473)));
evalcond[5]=(x13468+((r20*x13463))+((cj2*sj1))+((r21*x13460*x13466))+((r21*x13462))+(((-1.0)*cj3*x13470*x13473))+((r22*x13475)));
evalcond[6]=(x13461+(((-1.0)*x13472))+(((-1.0)*cj3*x13469*x13473))+((r02*x13475))+((r01*x13460*x13466))+((r01*x13462))+((r00*x13463)));
evalcond[7]=(x13461+((r20*x13466))+(((-1.0)*r22*sj3*x13474))+((r21*x13471))+(((-1.0)*x13472))+((r20*x13460*x13462))+(((-1.0)*r21*x13463*x13473)));
evalcond[8]=((((-1.0)*r01*x13463*x13473))+((r01*x13471))+(((-1.0)*r02*sj3*x13474))+((r00*x13460*x13462))+(((-1.0)*sj1*x13467))+(((-1.0)*x13468))+((r00*x13466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13478 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13478)==0){
continue;
}
IkReal x13477=pow(x13478,-0.5);
CheckValue<IkReal> x13479 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13479.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13479.value))));
IkReal gconst28=((1.0)*r21*x13477);
IkReal gconst29=((-1.0)*r20*x13477);
CheckValue<IkReal> x13480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13480.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13480.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13483 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13483.valid){
continue;
}
IkReal x13481=((1.0)*(x13483.value));
IkReal x13482=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13481)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13481)));
IkReal gconst28=((1.0)*r21*x13482);
IkReal gconst29=((-1.0)*r20*x13482);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13486 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13486.valid){
continue;
}
IkReal x13484=((1.0)*(x13486.value));
IkReal x13485=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13484)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13484)));
IkReal gconst28=((1.0)*r21*x13485);
IkReal gconst29=((-1.0)*r20*x13485);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13489 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13489.valid){
continue;
}
IkReal x13487=((1.0)*(x13489.value));
IkReal x13488=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13487)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13487)));
IkReal gconst28=((1.0)*r21*x13488);
IkReal gconst29=((-1.0)*r20*x13488);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13492 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13492.valid){
continue;
}
IkReal x13490=((1.0)*(x13492.value));
IkReal x13491=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13490)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13490)));
IkReal gconst28=((1.0)*r21*x13491);
IkReal gconst29=((-1.0)*r20*x13491);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
IkReal x13493=((1.0)*(x13495.value));
IkReal x13494=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13493)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13493)));
IkReal gconst28=((1.0)*r21*x13494);
IkReal gconst29=((-1.0)*r20*x13494);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
IkReal x13496=((1.0)*(x13498.value));
IkReal x13497=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13496)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13496)));
IkReal gconst28=((1.0)*r21*x13497);
IkReal gconst29=((-1.0)*r20*x13497);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13499=(gconst29*r10);
IkReal x13500=(gconst28*r11);
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13500*x13500)+(x13499*x13499)+(((-2.0)*x13499*x13500)))),-1);
if(!x13501.valid){
continue;
}
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal((x13499+(((-1.0)*x13500)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13501.value)))+(x13502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13503=IKsin(j4);
IkReal x13504=IKcos(j4);
IkReal x13505=(gconst28*r11);
IkReal x13506=((1.0)*cj2);
IkReal x13507=((1.0)*x13504);
IkReal x13508=(gconst29*x13504);
IkReal x13509=(gconst28*x13503);
IkReal x13510=((1.0)*x13503);
IkReal x13511=(gconst29*x13510);
evalcond[0]=((((-1.0)*r20*x13511))+((r21*x13509))+(((-1.0)*r22*x13507)));
evalcond[1]=((((-1.0)*r00*x13511))+(((-1.0)*r02*x13507))+((r01*x13509)));
evalcond[2]=(((r10*x13508))+(((-1.0)*r12*x13510))+(((-1.0)*x13505*x13507)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13507))+(((-1.0)*r10*x13511))+((x13503*x13505)));
evalcond[4]=(((r20*x13508))+(((-1.0)*r22*x13510))+((sj1*sj2))+(((-1.0)*cj1*x13506))+(((-1.0)*gconst28*r21*x13507)));
evalcond[5]=((((-1.0)*sj1*x13506))+(((-1.0)*gconst28*r01*x13507))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13510))+((r00*x13508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13512=((1.0)*gconst29);
CheckValue<IkReal> x13513 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13512))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13513.valid){
continue;
}
CheckValue<IkReal> x13514=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13512)))),-1);
if(!x13514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13513.value)+(((1.5707963267949)*(x13514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13515=IKsin(j4);
IkReal x13516=IKcos(j4);
IkReal x13517=(gconst28*r11);
IkReal x13518=((1.0)*cj2);
IkReal x13519=((1.0)*x13516);
IkReal x13520=(gconst29*x13516);
IkReal x13521=(gconst28*x13515);
IkReal x13522=((1.0)*x13515);
IkReal x13523=(gconst29*x13522);
evalcond[0]=(((r21*x13521))+(((-1.0)*r22*x13519))+(((-1.0)*r20*x13523)));
evalcond[1]=(((r01*x13521))+(((-1.0)*r00*x13523))+(((-1.0)*r02*x13519)));
evalcond[2]=((((-1.0)*r12*x13522))+(((-1.0)*x13517*x13519))+((r10*x13520)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13519))+((x13515*x13517))+(((-1.0)*r10*x13523)));
evalcond[4]=((((-1.0)*r22*x13522))+((r20*x13520))+(((-1.0)*cj1*x13518))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13519)));
evalcond[5]=((((-1.0)*sj1*x13518))+(((-1.0)*gconst28*r01*x13519))+(((-1.0)*cj1*sj2))+((r00*x13520))+(((-1.0)*r02*x13522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13524=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13524.valid){
continue;
}
CheckValue<IkReal> x13525 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13524.value)))+(x13525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13526=IKsin(j4);
IkReal x13527=IKcos(j4);
IkReal x13528=(gconst28*r11);
IkReal x13529=((1.0)*cj2);
IkReal x13530=((1.0)*x13527);
IkReal x13531=(gconst29*x13527);
IkReal x13532=(gconst28*x13526);
IkReal x13533=((1.0)*x13526);
IkReal x13534=(gconst29*x13533);
evalcond[0]=((((-1.0)*r22*x13530))+(((-1.0)*r20*x13534))+((r21*x13532)));
evalcond[1]=((((-1.0)*r02*x13530))+(((-1.0)*r00*x13534))+((r01*x13532)));
evalcond[2]=((((-1.0)*r12*x13533))+(((-1.0)*x13528*x13530))+((r10*x13531)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13530))+((x13526*x13528))+(((-1.0)*r10*x13534)));
evalcond[4]=((((-1.0)*r22*x13533))+((r20*x13531))+((sj1*sj2))+(((-1.0)*cj1*x13529))+(((-1.0)*gconst28*r21*x13530)));
evalcond[5]=((((-1.0)*sj1*x13529))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13530))+(((-1.0)*r02*x13533))+((r00*x13531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
IkReal x13535=((1.0)*(x13537.value));
IkReal x13536=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13535)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13535)));
IkReal gconst28=((1.0)*r21*x13536);
IkReal gconst29=((-1.0)*r20*x13536);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13540 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13540.valid){
continue;
}
IkReal x13538=((1.0)*(x13540.value));
IkReal x13539=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13538)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13538)));
IkReal gconst28=((1.0)*r21*x13539);
IkReal gconst29=((-1.0)*r20*x13539);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13543 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13543.valid){
continue;
}
IkReal x13541=((1.0)*(x13543.value));
IkReal x13542=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13541)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13541)));
IkReal gconst28=((1.0)*r21*x13542);
IkReal gconst29=((-1.0)*r20*x13542);
IkReal x13544=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13548=IKPowWithIntegerCheck(x13544,-1);
if(!x13548.valid){
continue;
}
IkReal x13545=x13548.value;
IkReal x13546=((1.0)*x13545);
IkReal x13547=((((-1.0)*(r12*r12)))+(((-1.0)*x13546*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13545))+(((-1.0)*x13546*(r11*r11)*(r21*r21))));
j4eval[0]=x13547;
j4eval[1]=r12;
j4eval[2]=x13544;
j4eval[3]=IKsign(x13547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13549=(gconst28*r11);
IkReal x13550=(gconst29*r10);
CheckValue<IkReal> x13551 = IKatan2WithCheck(IkReal((x13549+(((-1.0)*x13550)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13551.valid){
continue;
}
CheckValue<IkReal> x13552=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13549*x13549)))+(((2.0)*x13549*x13550))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13550*x13550))))),-1);
if(!x13552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13551.value)+(((1.5707963267949)*(x13552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13553=IKcos(j4);
IkReal x13554=IKsin(j4);
IkReal x13555=(gconst29*r10);
IkReal x13556=(gconst29*r20);
IkReal x13557=(gconst28*r21);
IkReal x13558=((1.0)*cj2);
IkReal x13559=(gconst29*r00);
IkReal x13560=((1.0)*x13553);
IkReal x13561=((1.0)*x13554);
IkReal x13562=(gconst28*x13553);
IkReal x13563=(gconst28*x13554);
evalcond[0]=(((r12*x13554))+(((-1.0)*x13555*x13560))+((r11*x13562)));
evalcond[1]=(((x13554*x13557))+(((-1.0)*x13556*x13561))+(((-1.0)*r22*x13560)));
evalcond[2]=(((r01*x13563))+(((-1.0)*r02*x13560))+(((-1.0)*x13559*x13561)));
evalcond[3]=((1.0)+(((-1.0)*x13555*x13561))+((r11*x13563))+(((-1.0)*r12*x13560)));
evalcond[4]=(((r22*x13554))+((sj1*sj2))+(((-1.0)*cj1*x13558))+(((-1.0)*x13556*x13560))+((x13553*x13557)));
evalcond[5]=(((r01*x13562))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13558))+(((-1.0)*x13559*x13560))+((r02*x13554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13564=((1.0)*gconst29);
CheckValue<IkReal> x13565=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13564)))),-1);
if(!x13565.valid){
continue;
}
CheckValue<IkReal> x13566 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13565.value)))+(x13566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13567=IKcos(j4);
IkReal x13568=IKsin(j4);
IkReal x13569=(gconst29*r10);
IkReal x13570=(gconst29*r20);
IkReal x13571=(gconst28*r21);
IkReal x13572=((1.0)*cj2);
IkReal x13573=(gconst29*r00);
IkReal x13574=((1.0)*x13567);
IkReal x13575=((1.0)*x13568);
IkReal x13576=(gconst28*x13567);
IkReal x13577=(gconst28*x13568);
evalcond[0]=(((r11*x13576))+((r12*x13568))+(((-1.0)*x13569*x13574)));
evalcond[1]=((((-1.0)*r22*x13574))+((x13568*x13571))+(((-1.0)*x13570*x13575)));
evalcond[2]=((((-1.0)*r02*x13574))+(((-1.0)*x13573*x13575))+((r01*x13577)));
evalcond[3]=((1.0)+((r11*x13577))+(((-1.0)*r12*x13574))+(((-1.0)*x13569*x13575)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x13570*x13574))+(((-1.0)*cj1*x13572))+((x13567*x13571))+((r22*x13568)));
evalcond[5]=((((-1.0)*sj1*x13572))+(((-1.0)*cj1*sj2))+(((-1.0)*x13573*x13574))+((r02*x13568))+((r01*x13576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13578=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13578.valid){
continue;
}
CheckValue<IkReal> x13579 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13578.value)))+(x13579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13580=IKcos(j4);
IkReal x13581=IKsin(j4);
IkReal x13582=(gconst29*r10);
IkReal x13583=(gconst29*r20);
IkReal x13584=(gconst28*r21);
IkReal x13585=((1.0)*cj2);
IkReal x13586=(gconst29*r00);
IkReal x13587=((1.0)*x13580);
IkReal x13588=((1.0)*x13581);
IkReal x13589=(gconst28*x13580);
IkReal x13590=(gconst28*x13581);
evalcond[0]=(((r12*x13581))+((r11*x13589))+(((-1.0)*x13582*x13587)));
evalcond[1]=((((-1.0)*x13583*x13588))+((x13581*x13584))+(((-1.0)*r22*x13587)));
evalcond[2]=((((-1.0)*r02*x13587))+((r01*x13590))+(((-1.0)*x13586*x13588)));
evalcond[3]=((1.0)+((r11*x13590))+(((-1.0)*r12*x13587))+(((-1.0)*x13582*x13588)));
evalcond[4]=(((x13580*x13584))+((sj1*sj2))+(((-1.0)*cj1*x13585))+(((-1.0)*x13583*x13587))+((r22*x13581)));
evalcond[5]=((((-1.0)*sj1*x13585))+(((-1.0)*cj1*sj2))+(((-1.0)*x13586*x13587))+((r01*x13589))+((r02*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13593.valid){
continue;
}
IkReal x13591=((1.0)*(x13593.value));
IkReal x13592=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13591)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13591)));
IkReal gconst28=((1.0)*r21*x13592);
IkReal gconst29=((-1.0)*r20*x13592);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13596 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13596.valid){
continue;
}
IkReal x13594=((1.0)*(x13596.value));
IkReal x13595=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13594)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13594)));
IkReal gconst28=((1.0)*r21*x13595);
IkReal gconst29=((-1.0)*r20*x13595);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13599 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13599.valid){
continue;
}
IkReal x13597=((1.0)*(x13599.value));
IkReal x13598=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13597)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13597)));
IkReal gconst28=((1.0)*r21*x13598);
IkReal gconst29=((-1.0)*r20*x13598);
IkReal x13600=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13604=IKPowWithIntegerCheck(x13600,-1);
if(!x13604.valid){
continue;
}
IkReal x13601=x13604.value;
IkReal x13602=((1.0)*x13601);
IkReal x13603=((((-1.0)*x13602*(r10*r10)*(r20*r20)))+(((-1.0)*x13602*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13601)));
j4eval[0]=x13603;
j4eval[1]=r12;
j4eval[2]=x13600;
j4eval[3]=IKsign(x13603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13605=(gconst28*r11);
IkReal x13606=(gconst29*r10);
CheckValue<IkReal> x13607 = IKatan2WithCheck(IkReal(((((-1.0)*x13606))+x13605)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13607.valid){
continue;
}
CheckValue<IkReal> x13608=IKPowWithIntegerCheck(IKsign(((((2.0)*x13605*x13606))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13606*x13606)))+(((-1.0)*(x13605*x13605))))),-1);
if(!x13608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13607.value)+(((1.5707963267949)*(x13608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13609=IKcos(j4);
IkReal x13610=IKsin(j4);
IkReal x13611=(gconst29*r10);
IkReal x13612=(gconst29*r20);
IkReal x13613=(gconst28*r21);
IkReal x13614=(gconst29*r00);
IkReal x13615=((1.0)*x13609);
IkReal x13616=((1.0)*x13610);
IkReal x13617=(gconst28*x13609);
IkReal x13618=(gconst28*x13610);
evalcond[0]=(((r11*x13617))+((r12*x13610))+(((-1.0)*x13611*x13615)));
evalcond[1]=((((-1.0)*x13612*x13616))+((x13610*x13613))+(((-1.0)*r22*x13615)));
evalcond[2]=((((-1.0)*r02*x13615))+((r01*x13618))+(((-1.0)*x13614*x13616)));
evalcond[3]=((1.0)+((r11*x13618))+(((-1.0)*x13611*x13616))+(((-1.0)*r12*x13615)));
evalcond[4]=(((cj2*sj1))+((x13609*x13613))+((cj1*sj2))+(((-1.0)*x13612*x13615))+((r22*x13610)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13617))+(((-1.0)*x13614*x13615))+((r02*x13610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13619=((1.0)*gconst29);
CheckValue<IkReal> x13620=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13619)))),-1);
if(!x13620.valid){
continue;
}
CheckValue<IkReal> x13621 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13619))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13620.value)))+(x13621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13622=IKcos(j4);
IkReal x13623=IKsin(j4);
IkReal x13624=(gconst29*r10);
IkReal x13625=(gconst29*r20);
IkReal x13626=(gconst28*r21);
IkReal x13627=(gconst29*r00);
IkReal x13628=((1.0)*x13622);
IkReal x13629=((1.0)*x13623);
IkReal x13630=(gconst28*x13622);
IkReal x13631=(gconst28*x13623);
evalcond[0]=(((r11*x13630))+((r12*x13623))+(((-1.0)*x13624*x13628)));
evalcond[1]=(((x13623*x13626))+(((-1.0)*x13625*x13629))+(((-1.0)*r22*x13628)));
evalcond[2]=((((-1.0)*x13627*x13629))+(((-1.0)*r02*x13628))+((r01*x13631)));
evalcond[3]=((1.0)+((r11*x13631))+(((-1.0)*x13624*x13629))+(((-1.0)*r12*x13628)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13622*x13626))+(((-1.0)*x13625*x13628))+((r22*x13623)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13623))+(((-1.0)*x13627*x13628))+((r01*x13630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13632=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13632.valid){
continue;
}
CheckValue<IkReal> x13633 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13632.value)))+(x13633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13634=IKcos(j4);
IkReal x13635=IKsin(j4);
IkReal x13636=(gconst29*r10);
IkReal x13637=(gconst29*r20);
IkReal x13638=(gconst28*r21);
IkReal x13639=(gconst29*r00);
IkReal x13640=((1.0)*x13634);
IkReal x13641=((1.0)*x13635);
IkReal x13642=(gconst28*x13634);
IkReal x13643=(gconst28*x13635);
evalcond[0]=(((r12*x13635))+((r11*x13642))+(((-1.0)*x13636*x13640)));
evalcond[1]=(((x13635*x13638))+(((-1.0)*r22*x13640))+(((-1.0)*x13637*x13641)));
evalcond[2]=((((-1.0)*x13639*x13641))+((r01*x13643))+(((-1.0)*r02*x13640)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13640))+((r11*x13643))+(((-1.0)*x13636*x13641)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13634*x13638))+((r22*x13635))+(((-1.0)*x13637*x13640)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13635))+(((-1.0)*x13639*x13640))+((r01*x13642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13646 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13646.valid){
continue;
}
IkReal x13644=((1.0)*(x13646.value));
IkReal x13645=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13644)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13644)));
IkReal gconst28=((1.0)*r21*x13645);
IkReal gconst29=((-1.0)*r20*x13645);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13649 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13649.valid){
continue;
}
IkReal x13647=((1.0)*(x13649.value));
IkReal x13648=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13647)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13647)));
IkReal gconst28=((1.0)*r21*x13648);
IkReal gconst29=((-1.0)*r20*x13648);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13652 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13652.valid){
continue;
}
IkReal x13650=((1.0)*(x13652.value));
IkReal x13651=x13477;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13650)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13650)));
IkReal gconst28=((1.0)*r21*x13651);
IkReal gconst29=((-1.0)*r20*x13651);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13653=(gconst29*r10);
IkReal x13654=(gconst28*r11);
CheckValue<IkReal> x13655 = IKatan2WithCheck(IkReal((x13653+(((-1.0)*x13654)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13655.valid){
continue;
}
CheckValue<IkReal> x13656=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13654*x13654)+(((-2.0)*x13653*x13654))+(x13653*x13653))),-1);
if(!x13656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13655.value)+(((1.5707963267949)*(x13656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13657=IKsin(j4);
IkReal x13658=IKcos(j4);
IkReal x13659=(gconst28*r11);
IkReal x13660=((1.0)*x13658);
IkReal x13661=(gconst29*x13658);
IkReal x13662=(gconst28*x13657);
IkReal x13663=((1.0)*x13657);
IkReal x13664=(gconst29*x13663);
evalcond[0]=((((-1.0)*r22*x13660))+(((-1.0)*r20*x13664))+((r21*x13662)));
evalcond[1]=((((-1.0)*r00*x13664))+((r01*x13662))+(((-1.0)*r02*x13660)));
evalcond[2]=((((-1.0)*r12*x13663))+((r10*x13661))+(((-1.0)*x13659*x13660)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13660))+((x13657*x13659))+(((-1.0)*r10*x13664)));
evalcond[4]=((((-1.0)*r22*x13663))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13660))+((r20*x13661)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13661))+(((-1.0)*r02*x13663))+(((-1.0)*gconst28*r01*x13660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13665=((1.0)*gconst29);
CheckValue<IkReal> x13666 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13665))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13666.valid){
continue;
}
CheckValue<IkReal> x13667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13665))+(((-1.0)*gconst28*r00)))),-1);
if(!x13667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13666.value)+(((1.5707963267949)*(x13667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13668=IKsin(j4);
IkReal x13669=IKcos(j4);
IkReal x13670=(gconst28*r11);
IkReal x13671=((1.0)*x13669);
IkReal x13672=(gconst29*x13669);
IkReal x13673=(gconst28*x13668);
IkReal x13674=((1.0)*x13668);
IkReal x13675=(gconst29*x13674);
evalcond[0]=((((-1.0)*r20*x13675))+((r21*x13673))+(((-1.0)*r22*x13671)));
evalcond[1]=(((r01*x13673))+(((-1.0)*r00*x13675))+(((-1.0)*r02*x13671)));
evalcond[2]=((((-1.0)*r12*x13674))+(((-1.0)*x13670*x13671))+((r10*x13672)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13671))+((x13668*x13670))+(((-1.0)*r10*x13675)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13671))+((cj1*sj2))+((r20*x13672))+(((-1.0)*r22*x13674)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13672))+(((-1.0)*r02*x13674))+(((-1.0)*gconst28*r01*x13671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13676=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13676.valid){
continue;
}
CheckValue<IkReal> x13677 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13676.value)))+(x13677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13678=IKsin(j4);
IkReal x13679=IKcos(j4);
IkReal x13680=(gconst28*r11);
IkReal x13681=((1.0)*x13679);
IkReal x13682=(gconst29*x13679);
IkReal x13683=(gconst28*x13678);
IkReal x13684=((1.0)*x13678);
IkReal x13685=(gconst29*x13684);
evalcond[0]=((((-1.0)*r22*x13681))+(((-1.0)*r20*x13685))+((r21*x13683)));
evalcond[1]=((((-1.0)*r00*x13685))+((r01*x13683))+(((-1.0)*r02*x13681)));
evalcond[2]=((((-1.0)*r12*x13684))+((r10*x13682))+(((-1.0)*x13680*x13681)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13685))+(((-1.0)*r12*x13681))+((x13678*x13680)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13684))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13681))+((r20*x13682)));
evalcond[5]=((((-1.0)*gconst28*r01*x13681))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13682))+(((-1.0)*r02*x13684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13686=gconst28*gconst28;
IkReal x13687=gconst29*gconst29;
IkReal x13688=(r11*r21);
IkReal x13689=(gconst29*sj3);
IkReal x13690=((1.0)*cj3);
IkReal x13691=(r10*r20);
IkReal x13692=(r10*r21);
IkReal x13693=(r11*r20);
IkReal x13694=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13695 = IKatan2WithCheck(IkReal((((r11*r22*x13689))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*gconst28*x13689*x13691))+((gconst28*x13688*x13689))+((sj3*x13686*x13692))+(((-1.0)*sj3*x13687*x13693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696=IKPowWithIntegerCheck(IKsign((((x13692*x13694))+(((-1.0)*r12*r22*x13690))+(((-1.0)*x13686*x13688*x13690))+(((-1.0)*x13687*x13690*x13691))+((x13693*x13694)))),-1);
if(!x13696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13695.value)+(((1.5707963267949)*(x13696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13697=IKsin(j4);
IkReal x13698=IKcos(j4);
IkReal x13699=(sj1*sj2);
IkReal x13700=(gconst29*r20);
IkReal x13701=(gconst28*r20);
IkReal x13702=((1.0)*cj2);
IkReal x13703=(r11*sj3);
IkReal x13704=(cj1*sj2);
IkReal x13705=(gconst29*r01);
IkReal x13706=(gconst29*r10);
IkReal x13707=(cj3*gconst28);
IkReal x13708=(cj3*gconst29);
IkReal x13709=(gconst28*sj3);
IkReal x13710=(gconst29*r00);
IkReal x13711=(cj1*x13702);
IkReal x13712=((1.0)*x13698);
IkReal x13713=((1.0)*x13697);
IkReal x13714=(gconst28*x13697);
IkReal x13715=(cj3*x13697);
IkReal x13716=(sj3*x13698);
evalcond[0]=(((r21*x13714))+(((-1.0)*r22*x13712))+(((-1.0)*x13700*x13713)));
evalcond[1]=(((r01*x13714))+(((-1.0)*r02*x13712))+(((-1.0)*x13710*x13713)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13712))+(((-1.0)*x13706*x13713))+((r11*x13714)));
evalcond[3]=(((r12*x13715))+((r11*x13698*x13707))+((gconst29*x13703))+(((-1.0)*cj3*x13706*x13712))+((r10*x13709)));
evalcond[4]=(((x13706*x13716))+(((-1.0)*gconst28*x13703*x13712))+((r10*x13707))+((r11*x13708))+(((-1.0)*r12*sj3*x13713)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13701))+((r21*x13698*x13707))+x13704+((r22*x13715))+(((-1.0)*cj3*x13700*x13712)));
evalcond[6]=(x13699+((sj3*x13705))+((r00*x13709))+(((-1.0)*r00*x13708*x13712))+((r01*x13698*x13707))+((r02*x13715))+(((-1.0)*x13711)));
evalcond[7]=(((r21*x13708))+x13699+((x13700*x13716))+((cj3*x13701))+(((-1.0)*r22*sj3*x13713))+(((-1.0)*r21*x13709*x13712))+(((-1.0)*x13711)));
evalcond[8]=((((-1.0)*sj1*x13702))+(((-1.0)*x13704))+((x13710*x13716))+(((-1.0)*r01*x13709*x13712))+((cj3*x13705))+((r00*x13707))+(((-1.0)*r02*sj3*x13713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13717=((1.0)*gconst29);
CheckValue<IkReal> x13718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13717))+(((-1.0)*gconst28*r00)))),-1);
if(!x13718.valid){
continue;
}
CheckValue<IkReal> x13719 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13717))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13718.value)))+(x13719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13720=IKsin(j4);
IkReal x13721=IKcos(j4);
IkReal x13722=(sj1*sj2);
IkReal x13723=(gconst29*r20);
IkReal x13724=(gconst28*r20);
IkReal x13725=((1.0)*cj2);
IkReal x13726=(r11*sj3);
IkReal x13727=(cj1*sj2);
IkReal x13728=(gconst29*r01);
IkReal x13729=(gconst29*r10);
IkReal x13730=(cj3*gconst28);
IkReal x13731=(cj3*gconst29);
IkReal x13732=(gconst28*sj3);
IkReal x13733=(gconst29*r00);
IkReal x13734=(cj1*x13725);
IkReal x13735=((1.0)*x13721);
IkReal x13736=((1.0)*x13720);
IkReal x13737=(gconst28*x13720);
IkReal x13738=(cj3*x13720);
IkReal x13739=(sj3*x13721);
evalcond[0]=((((-1.0)*r22*x13735))+((r21*x13737))+(((-1.0)*x13723*x13736)));
evalcond[1]=((((-1.0)*x13733*x13736))+(((-1.0)*r02*x13735))+((r01*x13737)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13735))+(((-1.0)*x13729*x13736))+((r11*x13737)));
evalcond[3]=(((r10*x13732))+((r11*x13721*x13730))+((r12*x13738))+((gconst29*x13726))+(((-1.0)*cj3*x13729*x13735)));
evalcond[4]=(((r10*x13730))+((x13729*x13739))+(((-1.0)*gconst28*x13726*x13735))+((r11*x13731))+(((-1.0)*r12*sj3*x13736)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((r22*x13738))+x13727+((r21*x13721*x13730))+(((-1.0)*cj3*x13723*x13735))+((sj3*x13724)));
evalcond[6]=(((r00*x13732))+((r01*x13721*x13730))+x13722+(((-1.0)*x13734))+((r02*x13738))+(((-1.0)*r00*x13731*x13735))+((sj3*x13728)));
evalcond[7]=(x13722+(((-1.0)*x13734))+((r21*x13731))+((x13723*x13739))+(((-1.0)*r21*x13732*x13735))+((cj3*x13724))+(((-1.0)*r22*sj3*x13736)));
evalcond[8]=(((r00*x13730))+(((-1.0)*r02*sj3*x13736))+(((-1.0)*sj1*x13725))+(((-1.0)*x13727))+(((-1.0)*r01*x13732*x13735))+((x13733*x13739))+((cj3*x13728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13740=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13740.valid){
continue;
}
CheckValue<IkReal> x13741 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13740.value)))+(x13741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13742=IKsin(j4);
IkReal x13743=IKcos(j4);
IkReal x13744=(sj1*sj2);
IkReal x13745=(gconst29*r20);
IkReal x13746=(gconst28*r20);
IkReal x13747=((1.0)*cj2);
IkReal x13748=(r11*sj3);
IkReal x13749=(cj1*sj2);
IkReal x13750=(gconst29*r01);
IkReal x13751=(gconst29*r10);
IkReal x13752=(cj3*gconst28);
IkReal x13753=(cj3*gconst29);
IkReal x13754=(gconst28*sj3);
IkReal x13755=(gconst29*r00);
IkReal x13756=(cj1*x13747);
IkReal x13757=((1.0)*x13743);
IkReal x13758=((1.0)*x13742);
IkReal x13759=(gconst28*x13742);
IkReal x13760=(cj3*x13742);
IkReal x13761=(sj3*x13743);
evalcond[0]=(((r21*x13759))+(((-1.0)*r22*x13757))+(((-1.0)*x13745*x13758)));
evalcond[1]=((((-1.0)*x13755*x13758))+((r01*x13759))+(((-1.0)*r02*x13757)));
evalcond[2]=((1.0)+((r11*x13759))+(((-1.0)*x13751*x13758))+(((-1.0)*r12*x13757)));
evalcond[3]=(((gconst29*x13748))+((r11*x13743*x13752))+(((-1.0)*cj3*x13751*x13757))+((r10*x13754))+((r12*x13760)));
evalcond[4]=(((r11*x13753))+(((-1.0)*r12*sj3*x13758))+(((-1.0)*gconst28*x13748*x13757))+((r10*x13752))+((x13751*x13761)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+(((-1.0)*cj3*x13745*x13757))+x13749+((r21*x13743*x13752))+((r22*x13760))+((sj3*x13746)));
evalcond[6]=(((r01*x13743*x13752))+x13744+(((-1.0)*x13756))+(((-1.0)*r00*x13753*x13757))+((sj3*x13750))+((r00*x13754))+((r02*x13760)));
evalcond[7]=(((r21*x13753))+x13744+(((-1.0)*x13756))+(((-1.0)*r21*x13754*x13757))+(((-1.0)*r22*sj3*x13758))+((cj3*x13746))+((x13745*x13761)));
evalcond[8]=((((-1.0)*x13749))+((x13755*x13761))+(((-1.0)*sj1*x13747))+(((-1.0)*r02*sj3*x13758))+(((-1.0)*r01*x13754*x13757))+((r00*x13752))+((cj3*x13750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13762=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13762);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13762);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13763=(r11*sj5);
IkReal x13764=((1.0)*cj5*r10);
j4eval[0]=(x13763+(((-1.0)*x13764)));
j4eval[1]=((((-1.0)*cj3*x13764))+((cj3*x13763)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13765=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13765);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13765);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13766=(cj5*r10);
IkReal x13767=(r11*sj5);
j4eval[0]=((((-1.0)*x13766))+x13767);
j4eval[1]=(((sj3*x13766))+(((-1.0)*sj3*x13767)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13768=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13768);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13768);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13769=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13769);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13769);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13770=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13770)));
j4eval[1]=((((-1.0)*r00*x13770))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13771=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13771);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13771);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13772=((1.0)*sj1);
CheckValue<IkReal> x13773=IKPowWithIntegerCheck(r22,-1);
if(!x13773.valid){
continue;
}
CheckValue<IkReal> x13774=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13774.valid){
continue;
}
if( IKabs(((x13773.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13772)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13774.value)*(((((-1.0)*sj2*x13772))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13773.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13772))))))+IKsqr(((x13774.value)*(((((-1.0)*sj2*x13772))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13773.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13772))))), ((x13774.value)*(((((-1.0)*sj2*x13772))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13775=IKsin(j4);
IkReal x13776=IKcos(j4);
IkReal x13777=((1.0)*cj5);
IkReal x13778=(sj5*x13776);
IkReal x13779=(sj5*x13775);
evalcond[0]=((-1.0)*r22*x13776);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13775)));
evalcond[2]=(((r01*x13779))+(((-1.0)*r00*x13775*x13777)));
evalcond[3]=(((r11*x13778))+(((-1.0)*r10*x13776*x13777)));
evalcond[4]=((1.0)+((r11*x13779))+(((-1.0)*r10*x13775*x13777)));
evalcond[5]=((((-1.0)*r00*x13776*x13777))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13780=((1.0)*cj5);
CheckValue<IkReal> x13781=IKPowWithIntegerCheck(((((-1.0)*r10*x13780))+((r11*sj5))),-1);
if(!x13781.valid){
continue;
}
CheckValue<IkReal> x13782=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13780))),-1);
if(!x13782.valid){
continue;
}
if( IKabs(((-1.0)*(x13781.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13782.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13781.value)))+IKsqr(((x13782.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13781.value)), ((x13782.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13783=IKsin(j4);
IkReal x13784=IKcos(j4);
IkReal x13785=((1.0)*cj5);
IkReal x13786=(sj5*x13784);
IkReal x13787=(sj5*x13783);
evalcond[0]=((-1.0)*r22*x13784);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13783)));
evalcond[2]=(((r01*x13787))+(((-1.0)*r00*x13783*x13785)));
evalcond[3]=((((-1.0)*r10*x13784*x13785))+((r11*x13786)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13783*x13785))+((r11*x13787)));
evalcond[5]=(((r01*x13786))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13784*x13785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13788=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13788);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13788);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13789=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13789);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13789);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13790.valid){
continue;
}
CheckValue<IkReal> x13791=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13791.valid){
continue;
}
if( IKabs(((-1.0)*(x13790.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13791.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13790.value)))+IKsqr(((x13791.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13790.value)), ((x13791.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13792=IKsin(j4);
IkReal x13793=IKcos(j4);
IkReal x13794=(cj5*x13793);
IkReal x13795=(sj5*x13792);
IkReal x13796=((1.0)*cj5*x13792);
IkReal x13797=((1.0)*sj5*x13793);
evalcond[0]=((-1.0)*r22*x13793);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13792))+((cj1*sj2)));
evalcond[2]=(((r01*x13795))+(((-1.0)*r00*x13796)));
evalcond[3]=(((r10*x13794))+(((-1.0)*r11*x13797)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13796))+((r11*x13795)));
evalcond[5]=(((r00*x13794))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13798=IKPowWithIntegerCheck(r22,-1);
if(!x13798.valid){
continue;
}
CheckValue<IkReal> x13799=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13799.valid){
continue;
}
if( IKabs(((x13798.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13799.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13798.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13799.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13798.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13799.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13800=IKsin(j4);
IkReal x13801=IKcos(j4);
IkReal x13802=(cj5*x13801);
IkReal x13803=(sj5*x13800);
IkReal x13804=((1.0)*cj5*x13800);
IkReal x13805=((1.0)*sj5*x13801);
evalcond[0]=((-1.0)*r22*x13801);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13800)));
evalcond[2]=(((r01*x13803))+(((-1.0)*r00*x13804)));
evalcond[3]=((((-1.0)*r11*x13805))+((r10*x13802)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13804))+((r11*x13803)));
evalcond[5]=(((r00*x13802))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13806=((1.0)*r10);
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(cj3,-1);
if(!x13807.valid){
continue;
}
CheckValue<IkReal> x13808=IKPowWithIntegerCheck(r22,-1);
if(!x13808.valid){
continue;
}
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13806))+((cj3*r11*sj5))),-1);
if(!x13809.valid){
continue;
}
if( IKabs(((x13807.value)*(x13808.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13809.value)*(((((-1.0)*sj3*sj5*x13806))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13807.value)*(x13808.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13809.value)*(((((-1.0)*sj3*sj5*x13806))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13807.value)*(x13808.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13809.value)*(((((-1.0)*sj3*sj5*x13806))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13810=IKsin(j4);
IkReal x13811=IKcos(j4);
IkReal x13812=(sj1*sj2);
IkReal x13813=(r11*sj5);
IkReal x13814=(r00*sj3);
IkReal x13815=(cj5*r01);
IkReal x13816=((1.0)*cj1);
IkReal x13817=(cj3*sj5);
IkReal x13818=(cj5*r11);
IkReal x13819=(r10*sj3);
IkReal x13820=(cj2*sj1);
IkReal x13821=((1.0)*cj5);
IkReal x13822=((1.0)*sj3);
IkReal x13823=(r01*sj5);
IkReal x13824=(cj2*x13816);
IkReal x13825=(cj3*x13811);
IkReal x13826=(r22*x13810);
IkReal x13827=(cj5*x13811);
IkReal x13828=(x13810*x13821);
evalcond[0]=((-1.0)*r22*x13811);
evalcond[1]=(x13820+((cj1*sj2))+((cj3*x13826)));
evalcond[2]=(((x13810*x13823))+(((-1.0)*r00*x13828)));
evalcond[3]=((1.0)+((x13810*x13813))+(((-1.0)*r10*x13828)));
evalcond[4]=((((-1.0)*x13824))+x13812+(((-1.0)*x13822*x13826)));
evalcond[5]=(((sj3*x13818))+(((-1.0)*r10*x13821*x13825))+((sj5*x13819))+((x13813*x13825)));
evalcond[6]=(((r10*x13817))+(((-1.0)*x13811*x13813*x13822))+((x13819*x13827))+((cj3*x13818)));
evalcond[7]=((((-1.0)*x13824))+x13812+(((-1.0)*r00*x13821*x13825))+((r01*x13811*x13817))+((sj3*x13815))+((sj5*x13814)));
evalcond[8]=((((-1.0)*x13811*x13822*x13823))+((r00*x13817))+(((-1.0)*sj2*x13816))+((x13814*x13827))+(((-1.0)*x13820))+((cj3*x13815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13829=(cj5*r10);
IkReal x13830=((1.0)*r11);
CheckValue<IkReal> x13831=IKPowWithIntegerCheck(((((-1.0)*x13829))+((r11*sj5))),-1);
if(!x13831.valid){
continue;
}
CheckValue<IkReal> x13832=IKPowWithIntegerCheck((((sj3*x13829))+(((-1.0)*sj3*sj5*x13830))),-1);
if(!x13832.valid){
continue;
}
if( IKabs(((-1.0)*(x13831.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13832.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13830)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13831.value)))+IKsqr(((x13832.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13830))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13831.value)), ((x13832.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13830))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13833=IKsin(j4);
IkReal x13834=IKcos(j4);
IkReal x13835=(sj1*sj2);
IkReal x13836=(r11*sj5);
IkReal x13837=(r00*sj3);
IkReal x13838=(cj5*r01);
IkReal x13839=((1.0)*cj1);
IkReal x13840=(cj3*sj5);
IkReal x13841=(cj5*r11);
IkReal x13842=(r10*sj3);
IkReal x13843=(cj2*sj1);
IkReal x13844=((1.0)*cj5);
IkReal x13845=((1.0)*sj3);
IkReal x13846=(r01*sj5);
IkReal x13847=(cj2*x13839);
IkReal x13848=(cj3*x13834);
IkReal x13849=(r22*x13833);
IkReal x13850=(cj5*x13834);
IkReal x13851=(x13833*x13844);
evalcond[0]=((-1.0)*r22*x13834);
evalcond[1]=(x13843+((cj1*sj2))+((cj3*x13849)));
evalcond[2]=(((x13833*x13846))+(((-1.0)*r00*x13851)));
evalcond[3]=((1.0)+((x13833*x13836))+(((-1.0)*r10*x13851)));
evalcond[4]=((((-1.0)*x13847))+x13835+(((-1.0)*x13845*x13849)));
evalcond[5]=(((x13836*x13848))+((sj5*x13842))+((sj3*x13841))+(((-1.0)*r10*x13844*x13848)));
evalcond[6]=(((x13842*x13850))+((r10*x13840))+(((-1.0)*x13834*x13836*x13845))+((cj3*x13841)));
evalcond[7]=((((-1.0)*x13847))+((r01*x13834*x13840))+x13835+((sj5*x13837))+((sj3*x13838))+(((-1.0)*r00*x13844*x13848)));
evalcond[8]=((((-1.0)*x13834*x13845*x13846))+((x13837*x13850))+(((-1.0)*sj2*x13839))+((cj3*x13838))+(((-1.0)*x13843))+((r00*x13840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13852=((1.0)*sj3);
IkReal x13853=(r11*sj5);
IkReal x13854=((1.0)*cj5*r10);
CheckValue<IkReal> x13855=IKPowWithIntegerCheck((x13853+(((-1.0)*x13854))),-1);
if(!x13855.valid){
continue;
}
CheckValue<IkReal> x13856=IKPowWithIntegerCheck(((((-1.0)*cj3*x13854))+((cj3*x13853))),-1);
if(!x13856.valid){
continue;
}
if( IKabs(((-1.0)*(x13855.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13856.value)*(((((-1.0)*r10*sj5*x13852))+(((-1.0)*cj5*r11*x13852)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13855.value)))+IKsqr(((x13856.value)*(((((-1.0)*r10*sj5*x13852))+(((-1.0)*cj5*r11*x13852))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13855.value)), ((x13856.value)*(((((-1.0)*r10*sj5*x13852))+(((-1.0)*cj5*r11*x13852))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13857=IKsin(j4);
IkReal x13858=IKcos(j4);
IkReal x13859=(sj1*sj2);
IkReal x13860=(r11*sj5);
IkReal x13861=(r00*sj3);
IkReal x13862=(cj5*r01);
IkReal x13863=((1.0)*cj1);
IkReal x13864=(cj3*sj5);
IkReal x13865=(cj5*r11);
IkReal x13866=(r10*sj3);
IkReal x13867=(cj2*sj1);
IkReal x13868=((1.0)*cj5);
IkReal x13869=((1.0)*sj3);
IkReal x13870=(r01*sj5);
IkReal x13871=(cj2*x13863);
IkReal x13872=(cj3*x13858);
IkReal x13873=(r22*x13857);
IkReal x13874=(cj5*x13858);
IkReal x13875=(x13857*x13868);
evalcond[0]=((-1.0)*r22*x13858);
evalcond[1]=(((cj3*x13873))+x13867+((cj1*sj2)));
evalcond[2]=(((x13857*x13870))+(((-1.0)*r00*x13875)));
evalcond[3]=((1.0)+((x13857*x13860))+(((-1.0)*r10*x13875)));
evalcond[4]=(x13859+(((-1.0)*x13871))+(((-1.0)*x13869*x13873)));
evalcond[5]=(((sj3*x13865))+((sj5*x13866))+((x13860*x13872))+(((-1.0)*r10*x13868*x13872)));
evalcond[6]=(((x13866*x13874))+(((-1.0)*x13858*x13860*x13869))+((cj3*x13865))+((r10*x13864)));
evalcond[7]=(x13859+(((-1.0)*x13871))+((sj3*x13862))+((sj5*x13861))+(((-1.0)*r00*x13868*x13872))+((r01*x13858*x13864)));
evalcond[8]=((((-1.0)*x13867))+((r00*x13864))+(((-1.0)*sj2*x13863))+((x13861*x13874))+(((-1.0)*x13858*x13869*x13870))+((cj3*x13862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13876=cj5*cj5;
IkReal x13877=((1.0)*cj3);
IkReal x13878=(r10*r21);
IkReal x13879=(cj5*sj5);
IkReal x13880=(r11*r21);
IkReal x13881=(r11*r20);
IkReal x13882=(r22*sj3);
IkReal x13883=(r10*r20);
IkReal x13884=((1.0)*sj3*x13876);
CheckValue<IkReal> x13885 = IKatan2WithCheck(IkReal((((r10*sj5*x13882))+((cj5*r11*x13882)))),IkReal((((sj3*x13878))+(((-1.0)*x13878*x13884))+(((-1.0)*x13881*x13884))+(((-1.0)*sj3*x13879*x13883))+((sj3*x13879*x13880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13885.valid){
continue;
}
CheckValue<IkReal> x13886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13877))+((cj3*x13876*x13880))+(((-1.0)*x13876*x13877*x13883))+((cj3*x13878*x13879))+((cj3*x13879*x13881))+(((-1.0)*x13877*x13880)))),-1);
if(!x13886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13885.value)+(((1.5707963267949)*(x13886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13887=IKsin(j4);
IkReal x13888=IKcos(j4);
IkReal x13889=(sj1*sj2);
IkReal x13890=(cj5*sj3);
IkReal x13891=(cj5*r10);
IkReal x13892=(r00*sj5);
IkReal x13893=(r11*sj5);
IkReal x13894=(cj3*cj5);
IkReal x13895=((1.0)*cj1);
IkReal x13896=(cj3*sj5);
IkReal x13897=(r21*sj5);
IkReal x13898=(cj2*sj1);
IkReal x13899=(sj3*sj5);
IkReal x13900=(r01*sj5);
IkReal x13901=(cj2*x13895);
IkReal x13902=((1.0)*x13888);
IkReal x13903=((1.0)*x13887);
IkReal x13904=(cj3*x13887);
IkReal x13905=(cj3*x13888);
evalcond[0]=((((-1.0)*cj5*r20*x13903))+(((-1.0)*r22*x13902))+((x13887*x13897)));
evalcond[1]=((((-1.0)*cj5*r00*x13903))+(((-1.0)*r02*x13902))+((x13887*x13900)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13902))+((x13887*x13893))+(((-1.0)*x13891*x13903)));
evalcond[3]=((((-1.0)*cj3*x13891*x13902))+((r10*x13899))+((r12*x13904))+((x13893*x13905))+((r11*x13890)));
evalcond[4]=((((-1.0)*r12*sj3*x13903))+((r10*x13896))+((r10*x13888*x13890))+(((-1.0)*sj3*x13893*x13902))+((r11*x13894)));
evalcond[5]=(((r22*x13904))+(((-1.0)*r20*x13894*x13902))+x13898+((cj1*sj2))+((r21*x13888*x13896))+((r20*x13899))+((r21*x13890)));
evalcond[6]=((((-1.0)*r00*x13894*x13902))+((r02*x13904))+x13889+((sj3*x13892))+((r01*x13890))+((r01*x13888*x13896))+(((-1.0)*x13901)));
evalcond[7]=((((-1.0)*r22*sj3*x13903))+((r20*x13888*x13890))+x13889+((r20*x13896))+((r21*x13894))+(((-1.0)*x13901))+(((-1.0)*sj3*x13897*x13902)));
evalcond[8]=(((r00*x13888*x13890))+(((-1.0)*sj2*x13895))+((cj3*x13892))+(((-1.0)*r01*x13899*x13902))+(((-1.0)*r02*sj3*x13903))+((r01*x13894))+(((-1.0)*x13898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13906=((1.0)*cj5);
CheckValue<IkReal> x13907 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13907.valid){
continue;
}
CheckValue<IkReal> x13908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13906)))),-1);
if(!x13908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13907.value)+(((1.5707963267949)*(x13908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13909=IKsin(j4);
IkReal x13910=IKcos(j4);
IkReal x13911=(sj1*sj2);
IkReal x13912=(cj5*sj3);
IkReal x13913=(cj5*r10);
IkReal x13914=(r00*sj5);
IkReal x13915=(r11*sj5);
IkReal x13916=(cj3*cj5);
IkReal x13917=((1.0)*cj1);
IkReal x13918=(cj3*sj5);
IkReal x13919=(r21*sj5);
IkReal x13920=(cj2*sj1);
IkReal x13921=(sj3*sj5);
IkReal x13922=(r01*sj5);
IkReal x13923=(cj2*x13917);
IkReal x13924=((1.0)*x13910);
IkReal x13925=((1.0)*x13909);
IkReal x13926=(cj3*x13909);
IkReal x13927=(cj3*x13910);
evalcond[0]=((((-1.0)*r22*x13924))+((x13909*x13919))+(((-1.0)*cj5*r20*x13925)));
evalcond[1]=((((-1.0)*cj5*r00*x13925))+((x13909*x13922))+(((-1.0)*r02*x13924)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13924))+(((-1.0)*x13913*x13925))+((x13909*x13915)));
evalcond[3]=(((r10*x13921))+(((-1.0)*cj3*x13913*x13924))+((x13915*x13927))+((r11*x13912))+((r12*x13926)));
evalcond[4]=(((r10*x13918))+(((-1.0)*sj3*x13915*x13924))+((r10*x13910*x13912))+(((-1.0)*r12*sj3*x13925))+((r11*x13916)));
evalcond[5]=((((-1.0)*r20*x13916*x13924))+((r20*x13921))+((cj1*sj2))+((r21*x13910*x13918))+x13920+((r22*x13926))+((r21*x13912)));
evalcond[6]=(x13911+((r01*x13910*x13918))+(((-1.0)*x13923))+((sj3*x13914))+((r01*x13912))+((r02*x13926))+(((-1.0)*r00*x13916*x13924)));
evalcond[7]=(((r20*x13910*x13912))+(((-1.0)*sj3*x13919*x13924))+x13911+(((-1.0)*x13923))+((r20*x13918))+((r21*x13916))+(((-1.0)*r22*sj3*x13925)));
evalcond[8]=(((r00*x13910*x13912))+(((-1.0)*x13920))+(((-1.0)*sj2*x13917))+((cj3*x13914))+((r01*x13916))+(((-1.0)*r02*sj3*x13925))+(((-1.0)*r01*x13921*x13924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13928=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13928.valid){
continue;
}
CheckValue<IkReal> x13929 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13928.value)))+(x13929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13930=IKsin(j4);
IkReal x13931=IKcos(j4);
IkReal x13932=(sj1*sj2);
IkReal x13933=(cj5*sj3);
IkReal x13934=(cj5*r10);
IkReal x13935=(r00*sj5);
IkReal x13936=(r11*sj5);
IkReal x13937=(cj3*cj5);
IkReal x13938=((1.0)*cj1);
IkReal x13939=(cj3*sj5);
IkReal x13940=(r21*sj5);
IkReal x13941=(cj2*sj1);
IkReal x13942=(sj3*sj5);
IkReal x13943=(r01*sj5);
IkReal x13944=(cj2*x13938);
IkReal x13945=((1.0)*x13931);
IkReal x13946=((1.0)*x13930);
IkReal x13947=(cj3*x13930);
IkReal x13948=(cj3*x13931);
evalcond[0]=((((-1.0)*cj5*r20*x13946))+(((-1.0)*r22*x13945))+((x13930*x13940)));
evalcond[1]=((((-1.0)*cj5*r00*x13946))+(((-1.0)*r02*x13945))+((x13930*x13943)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13945))+((x13930*x13936))+(((-1.0)*x13934*x13946)));
evalcond[3]=(((r11*x13933))+((x13936*x13948))+(((-1.0)*cj3*x13934*x13945))+((r12*x13947))+((r10*x13942)));
evalcond[4]=(((r10*x13931*x13933))+((r11*x13937))+(((-1.0)*r12*sj3*x13946))+((r10*x13939))+(((-1.0)*sj3*x13936*x13945)));
evalcond[5]=(((r21*x13933))+(((-1.0)*r20*x13937*x13945))+((cj1*sj2))+x13941+((r20*x13942))+((r21*x13931*x13939))+((r22*x13947)));
evalcond[6]=(((sj3*x13935))+((r01*x13933))+(((-1.0)*r00*x13937*x13945))+x13932+((r01*x13931*x13939))+(((-1.0)*x13944))+((r02*x13947)));
evalcond[7]=(((r20*x13939))+((r20*x13931*x13933))+(((-1.0)*sj3*x13940*x13945))+((r21*x13937))+x13932+(((-1.0)*x13944))+(((-1.0)*r22*sj3*x13946)));
evalcond[8]=(((r00*x13931*x13933))+(((-1.0)*x13941))+(((-1.0)*sj2*x13938))+((cj3*x13935))+((r01*x13937))+(((-1.0)*r02*sj3*x13946))+(((-1.0)*r01*x13942*x13945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13949=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13949;
j4eval[1]=IKsign(x13949);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13950=((1.0)*cj5);
IkReal x13951=((((-1.0)*r21*x13950))+(((-1.0)*r20*sj5)));
j4eval[0]=x13951;
j4eval[1]=((IKabs(((((-1.0)*r00*x13950))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13952=cj5*cj5;
IkReal x13953=(cj3*r21);
IkReal x13954=(cj5*sj5);
IkReal x13955=((1.0)*cj3);
IkReal x13956=(((r11*x13952*x13953))+(((-1.0)*r11*x13953))+((r10*x13953*x13954))+(((-1.0)*r10*r20*x13952*x13955))+(((-1.0)*r12*r22*x13955))+((cj3*r11*r20*x13954)));
j4eval[0]=x13956;
j4eval[1]=IKsign(x13956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13957=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13957;
j4eval[1]=IKsign(x13957);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13958=((1.0)*cj5);
IkReal x13959=((((-1.0)*r21*x13958))+(((-1.0)*r20*sj5)));
j4eval[0]=x13959;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13958))+((r01*sj5))))));
j4eval[2]=IKsign(x13959);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13960=cj5*cj5;
IkReal x13961=r11*r11;
IkReal x13962=(cj5*r10);
IkReal x13963=(r11*sj5);
IkReal x13964=((((2.0)*x13962*x13963))+(((-1.0)*x13961))+(((-1.0)*(r12*r12)))+((x13960*x13961))+(((-1.0)*x13960*(r10*r10))));
j4eval[0]=x13964;
j4eval[1]=((IKabs(r12))+(IKabs((x13962+(((-1.0)*x13963))))));
j4eval[2]=IKsign(x13964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13965=cj5*cj5;
IkReal x13966=r11*r11;
IkReal x13967=(cj5*r10);
IkReal x13968=(r11*sj5);
CheckValue<IkReal> x13969 = IKatan2WithCheck(IkReal((x13967+(((-1.0)*x13968)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13969.valid){
continue;
}
CheckValue<IkReal> x13970=IKPowWithIntegerCheck(IKsign(((((2.0)*x13967*x13968))+(((-1.0)*x13965*(r10*r10)))+(((-1.0)*x13966))+(((-1.0)*(r12*r12)))+((x13965*x13966)))),-1);
if(!x13970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13969.value)+(((1.5707963267949)*(x13970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13971=IKsin(j4);
IkReal x13972=IKcos(j4);
IkReal x13973=(cj5*r10);
IkReal x13974=(r01*sj5);
IkReal x13975=(cj5*r00);
IkReal x13976=(cj5*r20);
IkReal x13977=((1.0)*x13972);
IkReal x13978=((1.0)*x13971);
IkReal x13979=(sj5*x13971);
evalcond[0]=((((-1.0)*r22*x13977))+(((-1.0)*x13976*x13978))+((r21*x13979)));
evalcond[1]=((((-1.0)*r02*x13977))+((x13971*x13974))+(((-1.0)*x13975*x13978)));
evalcond[2]=((((-1.0)*r12*x13978))+(((-1.0)*r11*sj5*x13977))+((x13972*x13973)));
evalcond[3]=((-1.0)+(((-1.0)*x13973*x13978))+(((-1.0)*r12*x13977))+((r11*x13979)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13978))+((cj1*sj2))+(((-1.0)*x13974*x13977))+((x13972*x13975)));
evalcond[5]=((((-1.0)*r22*x13978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13972*x13976))+(((-1.0)*r21*sj5*x13977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13980=((1.0)*cj5);
CheckValue<IkReal> x13981 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13981.valid){
continue;
}
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13980))+(((-1.0)*r20*sj5)))),-1);
if(!x13982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13981.value)+(((1.5707963267949)*(x13982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13983=IKsin(j4);
IkReal x13984=IKcos(j4);
IkReal x13985=(cj5*r10);
IkReal x13986=(r01*sj5);
IkReal x13987=(cj5*r00);
IkReal x13988=(cj5*r20);
IkReal x13989=((1.0)*x13984);
IkReal x13990=((1.0)*x13983);
IkReal x13991=(sj5*x13983);
evalcond[0]=((((-1.0)*x13988*x13990))+((r21*x13991))+(((-1.0)*r22*x13989)));
evalcond[1]=(((x13983*x13986))+(((-1.0)*r02*x13989))+(((-1.0)*x13987*x13990)));
evalcond[2]=((((-1.0)*r11*sj5*x13989))+(((-1.0)*r12*x13990))+((x13984*x13985)));
evalcond[3]=((-1.0)+((r11*x13991))+(((-1.0)*x13985*x13990))+(((-1.0)*r12*x13989)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13990))+((cj1*sj2))+(((-1.0)*x13986*x13989))+((x13984*x13987)));
evalcond[5]=((((-1.0)*r21*sj5*x13989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13984*x13988))+(((-1.0)*r22*x13990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13992 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13992.valid){
continue;
}
CheckValue<IkReal> x13993=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13992.value)+(((1.5707963267949)*(x13993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13994=IKsin(j4);
IkReal x13995=IKcos(j4);
IkReal x13996=(cj5*r10);
IkReal x13997=(r01*sj5);
IkReal x13998=(cj5*r00);
IkReal x13999=(cj5*r20);
IkReal x14000=((1.0)*x13995);
IkReal x14001=((1.0)*x13994);
IkReal x14002=(sj5*x13994);
evalcond[0]=(((r21*x14002))+(((-1.0)*x13999*x14001))+(((-1.0)*r22*x14000)));
evalcond[1]=((((-1.0)*r02*x14000))+(((-1.0)*x13998*x14001))+((x13994*x13997)));
evalcond[2]=(((x13995*x13996))+(((-1.0)*r11*sj5*x14000))+(((-1.0)*r12*x14001)));
evalcond[3]=((-1.0)+((r11*x14002))+(((-1.0)*x13996*x14001))+(((-1.0)*r12*x14000)));
evalcond[4]=((((-1.0)*r02*x14001))+((cj2*sj1))+((x13995*x13998))+((cj1*sj2))+(((-1.0)*x13997*x14000)));
evalcond[5]=(((x13995*x13999))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14000))+(((-1.0)*r22*x14001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14003=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14003;
j4eval[1]=IKsign(x14003);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14004=((1.0)*cj5);
IkReal x14005=((((-1.0)*r21*x14004))+(((-1.0)*r20*sj5)));
j4eval[0]=x14005;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x14004))+((r01*sj5))))));
j4eval[2]=IKsign(x14005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14006=cj5*cj5;
IkReal x14007=r11*r11;
IkReal x14008=(r11*sj5);
IkReal x14009=(cj5*r10);
IkReal x14010=((r12*r12)+(((-1.0)*x14006*x14007))+(((-2.0)*x14008*x14009))+((x14006*(r10*r10)))+x14007);
j4eval[0]=x14010;
j4eval[1]=IKsign(x14010);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14009))+x14008))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14011=cj5*cj5;
IkReal x14012=r11*r11;
IkReal x14013=(cj5*r10);
IkReal x14014=(r11*sj5);
CheckValue<IkReal> x14015 = IKatan2WithCheck(IkReal(((((-1.0)*x14013))+x14014)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14015.valid){
continue;
}
CheckValue<IkReal> x14016=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x14011*x14012))+(((-2.0)*x14013*x14014))+x14012+((x14011*(r10*r10))))),-1);
if(!x14016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14015.value)+(((1.5707963267949)*(x14016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14017=IKcos(j4);
IkReal x14018=IKsin(j4);
IkReal x14019=(cj5*r00);
IkReal x14020=(cj5*r10);
IkReal x14021=(r21*sj5);
IkReal x14022=(cj5*r20);
IkReal x14023=((1.0)*x14017);
IkReal x14024=((1.0)*x14018);
IkReal x14025=(sj5*x14018);
IkReal x14026=(sj5*x14017);
evalcond[0]=(((r11*x14026))+(((-1.0)*x14020*x14023))+((r12*x14018)));
evalcond[1]=(((x14018*x14021))+(((-1.0)*r22*x14023))+(((-1.0)*x14022*x14024)));
evalcond[2]=(((r01*x14025))+(((-1.0)*x14019*x14024))+(((-1.0)*r02*x14023)));
evalcond[3]=((-1.0)+((r11*x14025))+(((-1.0)*x14020*x14024))+(((-1.0)*r12*x14023)));
evalcond[4]=(((cj2*sj1))+((r01*x14026))+((r02*x14018))+((cj1*sj2))+(((-1.0)*x14019*x14023)));
evalcond[5]=(((x14017*x14021))+(((-1.0)*cj1*cj2))+((r22*x14018))+((sj1*sj2))+(((-1.0)*x14022*x14023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14027=((1.0)*cj5);
CheckValue<IkReal> x14028 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14028.valid){
continue;
}
CheckValue<IkReal> x14029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14027))+(((-1.0)*r20*sj5)))),-1);
if(!x14029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14028.value)+(((1.5707963267949)*(x14029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14030=IKcos(j4);
IkReal x14031=IKsin(j4);
IkReal x14032=(cj5*r00);
IkReal x14033=(cj5*r10);
IkReal x14034=(r21*sj5);
IkReal x14035=(cj5*r20);
IkReal x14036=((1.0)*x14030);
IkReal x14037=((1.0)*x14031);
IkReal x14038=(sj5*x14031);
IkReal x14039=(sj5*x14030);
evalcond[0]=(((r11*x14039))+(((-1.0)*x14033*x14036))+((r12*x14031)));
evalcond[1]=((((-1.0)*x14035*x14037))+((x14031*x14034))+(((-1.0)*r22*x14036)));
evalcond[2]=(((r01*x14038))+(((-1.0)*x14032*x14037))+(((-1.0)*r02*x14036)));
evalcond[3]=((-1.0)+((r11*x14038))+(((-1.0)*x14033*x14037))+(((-1.0)*r12*x14036)));
evalcond[4]=(((r01*x14039))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14032*x14036))+((r02*x14031)));
evalcond[5]=(((r22*x14031))+((x14030*x14034))+(((-1.0)*x14035*x14036))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
CheckValue<IkReal> x14041=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14040.value)+(((1.5707963267949)*(x14041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14042=IKcos(j4);
IkReal x14043=IKsin(j4);
IkReal x14044=(cj5*r00);
IkReal x14045=(cj5*r10);
IkReal x14046=(r21*sj5);
IkReal x14047=(cj5*r20);
IkReal x14048=((1.0)*x14042);
IkReal x14049=((1.0)*x14043);
IkReal x14050=(sj5*x14043);
IkReal x14051=(sj5*x14042);
evalcond[0]=((((-1.0)*x14045*x14048))+((r11*x14051))+((r12*x14043)));
evalcond[1]=(((x14043*x14046))+(((-1.0)*r22*x14048))+(((-1.0)*x14047*x14049)));
evalcond[2]=((((-1.0)*x14044*x14049))+(((-1.0)*r02*x14048))+((r01*x14050)));
evalcond[3]=((-1.0)+(((-1.0)*x14045*x14049))+((r11*x14050))+(((-1.0)*r12*x14048)));
evalcond[4]=((((-1.0)*x14044*x14048))+((cj2*sj1))+((cj1*sj2))+((r02*x14043))+((r01*x14051)));
evalcond[5]=(((r22*x14043))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14042*x14046))+(((-1.0)*x14047*x14048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14053 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14053)==0){
continue;
}
IkReal x14052=pow(x14053,-0.5);
CheckValue<IkReal> x14054 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14054.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14054.value));
IkReal gconst37=((-1.0)*r01*x14052);
IkReal gconst38=(r00*x14052);
CheckValue<IkReal> x14055 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14055.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14055.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
IkReal x14056=((-1.0)*(x14058.value));
IkReal x14057=x14052;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14056;
IkReal gconst36=x14056;
IkReal gconst37=((-1.0)*r01*x14057);
IkReal gconst38=(r00*x14057);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14061 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14061.valid){
continue;
}
IkReal x14059=((-1.0)*(x14061.value));
IkReal x14060=x14052;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14059;
IkReal gconst36=x14059;
IkReal gconst37=((-1.0)*r01*x14060);
IkReal gconst38=(r00*x14060);
CheckValue<IkReal> x14069=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14069.valid){
continue;
}
IkReal x14062=x14069.value;
IkReal x14063=(sj3*x14062);
IkReal x14064=(r11*x14063);
IkReal x14065=(r21*x14063);
IkReal x14066=(r20*x14063);
IkReal x14067=(r10*x14063);
IkReal x14068=(r00*r01*x14063);
j4eval[0]=IKsign((((r21*x14064*(r01*r01)))+((r10*x14066*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x14064))+((r00*r01*r10*x14065))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14070=gconst38*gconst38;
IkReal x14071=gconst37*gconst37;
IkReal x14072=((1.0)*cj3);
IkReal x14073=(r11*r20);
IkReal x14074=(r10*sj3);
IkReal x14075=(gconst37*gconst38);
IkReal x14076=(r11*sj3);
IkReal x14077=(r21*x14071);
IkReal x14078=(cj3*x14075);
CheckValue<IkReal> x14079=IKPowWithIntegerCheck(IKsign((((r10*r21*x14078))+(((-1.0)*r10*r20*x14070*x14072))+((x14073*x14078))+(((-1.0)*r11*x14072*x14077))+(((-1.0)*r12*r22*x14072)))),-1);
if(!x14079.valid){
continue;
}
CheckValue<IkReal> x14080 = IKatan2WithCheck(IkReal((((gconst37*r22*x14074))+((gconst38*r22*x14076)))),IkReal(((((-1.0)*r20*x14074*x14075))+(((-1.0)*sj3*x14070*x14073))+((x14074*x14077))+((r21*x14075*x14076)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14079.value)))+(x14080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14081=IKsin(j4);
IkReal x14082=IKcos(j4);
IkReal x14083=(cj2*sj1);
IkReal x14084=(cj1*sj2);
IkReal x14085=(gconst38*r21);
IkReal x14086=(cj3*r20);
IkReal x14087=(gconst38*r10);
IkReal x14088=(cj3*gconst37);
IkReal x14089=(sj1*sj2);
IkReal x14090=(gconst38*r00);
IkReal x14091=(cj1*cj2);
IkReal x14092=(gconst37*sj3);
IkReal x14093=(gconst38*r20);
IkReal x14094=(gconst38*r01);
IkReal x14095=(gconst38*r11);
IkReal x14096=((1.0)*x14082);
IkReal x14097=((1.0)*x14081);
IkReal x14098=(cj3*x14081);
IkReal x14099=(sj3*x14082);
IkReal x14100=(gconst37*x14081);
IkReal x14101=(x14083+x14084);
evalcond[0]=((((-1.0)*x14093*x14097))+(((-1.0)*r22*x14096))+((r21*x14100)));
evalcond[1]=((((-1.0)*r02*x14096))+((r01*x14100))+(((-1.0)*x14090*x14097)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14096))+(((-1.0)*x14087*x14097))+((r11*x14100)));
evalcond[3]=(((sj3*x14095))+((r12*x14098))+((r10*x14092))+(((-1.0)*cj3*x14087*x14096))+((r11*x14082*x14088)));
evalcond[4]=((((-1.0)*r12*sj3*x14097))+((x14087*x14099))+((r10*x14088))+((cj3*x14095))+(((-1.0)*r11*x14092*x14096)));
evalcond[5]=((((-1.0)*gconst38*x14086*x14096))+((r20*x14092))+x14101+((r22*x14098))+((sj3*x14085))+((r21*x14082*x14088)));
evalcond[6]=(((r00*x14092))+((sj3*x14094))+(((-1.0)*x14089))+(((-1.0)*cj3*x14090*x14096))+((r02*x14098))+x14091+((r01*x14082*x14088)));
evalcond[7]=(((r00*x14088))+(((-1.0)*r02*sj3*x14097))+(((-1.0)*r01*x14092*x14096))+((x14090*x14099))+x14101+((cj3*x14094)));
evalcond[8]=((((-1.0)*r21*x14092*x14096))+(((-1.0)*x14091))+((cj3*x14085))+x14089+((gconst37*x14086))+(((-1.0)*r22*sj3*x14097))+((x14093*x14099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14102=gconst38*gconst38;
IkReal x14103=gconst37*gconst37;
IkReal x14104=(gconst37*r10);
IkReal x14105=(cj3*r22);
IkReal x14106=((1.0)*gconst38);
IkReal x14107=(r21*sj3);
IkReal x14108=(gconst38*r11);
IkReal x14109=(cj3*r20);
IkReal x14110=(cj3*r21);
IkReal x14111=(r20*sj3);
CheckValue<IkReal> x14112=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14106*x14111))+((r11*x14103*x14107))+(((-1.0)*x14104*x14106*x14107))+((r12*r22*sj3))+((r10*x14102*x14111)))),-1);
if(!x14112.valid){
continue;
}
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal((((x14105*x14108))+((x14104*x14105)))),IkReal((((r10*x14103*x14110))+(((-1.0)*x14104*x14106*x14109))+(((-1.0)*r11*x14102*x14109))+((gconst37*x14108*x14110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14112.value)))+(x14113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14114=IKsin(j4);
IkReal x14115=IKcos(j4);
IkReal x14116=(cj2*sj1);
IkReal x14117=(cj1*sj2);
IkReal x14118=(gconst38*r21);
IkReal x14119=(cj3*r20);
IkReal x14120=(gconst38*r10);
IkReal x14121=(cj3*gconst37);
IkReal x14122=(sj1*sj2);
IkReal x14123=(gconst38*r00);
IkReal x14124=(cj1*cj2);
IkReal x14125=(gconst37*sj3);
IkReal x14126=(gconst38*r20);
IkReal x14127=(gconst38*r01);
IkReal x14128=(gconst38*r11);
IkReal x14129=((1.0)*x14115);
IkReal x14130=((1.0)*x14114);
IkReal x14131=(cj3*x14114);
IkReal x14132=(sj3*x14115);
IkReal x14133=(gconst37*x14114);
IkReal x14134=(x14116+x14117);
evalcond[0]=((((-1.0)*r22*x14129))+((r21*x14133))+(((-1.0)*x14126*x14130)));
evalcond[1]=((((-1.0)*x14123*x14130))+(((-1.0)*r02*x14129))+((r01*x14133)));
evalcond[2]=((-1.0)+(((-1.0)*x14120*x14130))+(((-1.0)*r12*x14129))+((r11*x14133)));
evalcond[3]=((((-1.0)*cj3*x14120*x14129))+((r12*x14131))+((r11*x14115*x14121))+((r10*x14125))+((sj3*x14128)));
evalcond[4]=(((cj3*x14128))+(((-1.0)*r11*x14125*x14129))+(((-1.0)*r12*sj3*x14130))+((r10*x14121))+((x14120*x14132)));
evalcond[5]=(((r21*x14115*x14121))+((sj3*x14118))+(((-1.0)*gconst38*x14119*x14129))+((r20*x14125))+((r22*x14131))+x14134);
evalcond[6]=(((r01*x14115*x14121))+((r00*x14125))+(((-1.0)*cj3*x14123*x14129))+((r02*x14131))+(((-1.0)*x14122))+x14124+((sj3*x14127)));
evalcond[7]=((((-1.0)*r02*sj3*x14130))+((cj3*x14127))+((r00*x14121))+(((-1.0)*r01*x14125*x14129))+x14134+((x14123*x14132)));
evalcond[8]=(((x14126*x14132))+((cj3*x14118))+(((-1.0)*r22*sj3*x14130))+(((-1.0)*x14124))+x14122+((gconst37*x14119))+(((-1.0)*r21*x14125*x14129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14135=((1.0)*gconst38);
CheckValue<IkReal> x14136 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14135))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14136.valid){
continue;
}
CheckValue<IkReal> x14137=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14135)))),-1);
if(!x14137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14136.value)+(((1.5707963267949)*(x14137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14138=IKsin(j4);
IkReal x14139=IKcos(j4);
IkReal x14140=(cj2*sj1);
IkReal x14141=(cj1*sj2);
IkReal x14142=(gconst38*r21);
IkReal x14143=(cj3*r20);
IkReal x14144=(gconst38*r10);
IkReal x14145=(cj3*gconst37);
IkReal x14146=(sj1*sj2);
IkReal x14147=(gconst38*r00);
IkReal x14148=(cj1*cj2);
IkReal x14149=(gconst37*sj3);
IkReal x14150=(gconst38*r20);
IkReal x14151=(gconst38*r01);
IkReal x14152=(gconst38*r11);
IkReal x14153=((1.0)*x14139);
IkReal x14154=((1.0)*x14138);
IkReal x14155=(cj3*x14138);
IkReal x14156=(sj3*x14139);
IkReal x14157=(gconst37*x14138);
IkReal x14158=(x14141+x14140);
evalcond[0]=((((-1.0)*r22*x14153))+((r21*x14157))+(((-1.0)*x14150*x14154)));
evalcond[1]=((((-1.0)*r02*x14153))+(((-1.0)*x14147*x14154))+((r01*x14157)));
evalcond[2]=((-1.0)+(((-1.0)*x14144*x14154))+((r11*x14157))+(((-1.0)*r12*x14153)));
evalcond[3]=(((r10*x14149))+((sj3*x14152))+(((-1.0)*cj3*x14144*x14153))+((r12*x14155))+((r11*x14139*x14145)));
evalcond[4]=(((r10*x14145))+((cj3*x14152))+(((-1.0)*r12*sj3*x14154))+((x14144*x14156))+(((-1.0)*r11*x14149*x14153)));
evalcond[5]=((((-1.0)*gconst38*x14143*x14153))+((sj3*x14142))+((r22*x14155))+x14158+((r21*x14139*x14145))+((r20*x14149)));
evalcond[6]=(((sj3*x14151))+((r02*x14155))+((r00*x14149))+((r01*x14139*x14145))+(((-1.0)*cj3*x14147*x14153))+x14148+(((-1.0)*x14146)));
evalcond[7]=(((cj3*x14151))+(((-1.0)*r02*sj3*x14154))+((x14147*x14156))+((r00*x14145))+x14158+(((-1.0)*r01*x14149*x14153)));
evalcond[8]=(((cj3*x14142))+((gconst37*x14143))+(((-1.0)*r22*sj3*x14154))+(((-1.0)*r21*x14149*x14153))+x14146+((x14150*x14156))+(((-1.0)*x14148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14160 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14160)==0){
continue;
}
IkReal x14159=pow(x14160,-0.5);
CheckValue<IkReal> x14161 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14161.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14161.value))));
IkReal gconst40=((1.0)*r01*x14159);
IkReal gconst41=((-1.0)*r00*x14159);
CheckValue<IkReal> x14162 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14162.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14162.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14165 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14165.valid){
continue;
}
IkReal x14163=((1.0)*(x14165.value));
IkReal x14164=x14159;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14163)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14163)));
IkReal gconst40=((1.0)*r01*x14164);
IkReal gconst41=((-1.0)*r00*x14164);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14168 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14168.valid){
continue;
}
IkReal x14166=((1.0)*(x14168.value));
IkReal x14167=x14159;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14166)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14166)));
IkReal gconst40=((1.0)*r01*x14167);
IkReal gconst41=((-1.0)*r00*x14167);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14169=gconst41*gconst41;
IkReal x14170=gconst40*gconst40;
IkReal x14171=(gconst40*r10);
IkReal x14172=(r22*sj3);
IkReal x14173=(r11*sj3);
IkReal x14174=((1.0)*cj3);
IkReal x14175=(gconst41*r21);
IkReal x14176=(gconst41*r20);
IkReal x14177=(r21*x14170);
IkReal x14178=((1.0)*r20*x14169);
CheckValue<IkReal> x14179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14174))+((cj3*x14171*x14175))+(((-1.0)*r10*r20*x14169*x14174))+((cj3*gconst40*r11*x14176))+(((-1.0)*r11*x14174*x14177)))),-1);
if(!x14179.valid){
continue;
}
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal((((x14171*x14172))+((gconst41*r11*x14172)))),IkReal((((gconst40*x14173*x14175))+(((-1.0)*sj3*x14171*x14176))+(((-1.0)*x14173*x14178))+((r10*sj3*x14177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14179.value)))+(x14180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14181=IKsin(j4);
IkReal x14182=IKcos(j4);
IkReal x14183=(cj2*sj1);
IkReal x14184=(cj1*sj2);
IkReal x14185=(gconst40*sj3);
IkReal x14186=(gconst41*sj3);
IkReal x14187=(gconst41*r20);
IkReal x14188=(cj3*gconst41);
IkReal x14189=(sj1*sj2);
IkReal x14190=(cj1*cj2);
IkReal x14191=(cj3*gconst40);
IkReal x14192=((1.0)*x14182);
IkReal x14193=((1.0)*x14181);
IkReal x14194=(cj3*x14181);
IkReal x14195=(gconst40*x14181);
IkReal x14196=(x14183+x14184);
IkReal x14197=(x14182*x14191);
evalcond[0]=((((-1.0)*x14187*x14193))+(((-1.0)*r22*x14192))+((r21*x14195)));
evalcond[1]=((((-1.0)*gconst41*r00*x14193))+(((-1.0)*r02*x14192))+((r01*x14195)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14192))+((r11*x14195))+(((-1.0)*gconst41*r10*x14193)));
evalcond[3]=((((-1.0)*r10*x14188*x14192))+((r11*x14197))+((r12*x14194))+((r11*x14186))+((r10*x14185)));
evalcond[4]=(((r10*x14191))+(((-1.0)*r12*sj3*x14193))+((r11*x14188))+(((-1.0)*r11*x14185*x14192))+((r10*x14182*x14186)));
evalcond[5]=(((r20*x14185))+((r22*x14194))+((r21*x14186))+x14196+((r21*x14197))+(((-1.0)*cj3*x14187*x14192)));
evalcond[6]=(((r02*x14194))+((r01*x14186))+((r00*x14185))+((r01*x14197))+x14190+(((-1.0)*r00*x14188*x14192))+(((-1.0)*x14189)));
evalcond[7]=(((r00*x14182*x14186))+(((-1.0)*r01*x14185*x14192))+((r01*x14188))+((r00*x14191))+x14196+(((-1.0)*r02*sj3*x14193)));
evalcond[8]=((((-1.0)*x14190))+(((-1.0)*r22*sj3*x14193))+(((-1.0)*r21*x14185*x14192))+((r21*x14188))+x14189+((r20*x14182*x14186))+((r20*x14191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14198=((1.0)*gconst41);
CheckValue<IkReal> x14199=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14198))+(((-1.0)*gconst40*r20)))),-1);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14198))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14199.value)))+(x14200.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14201=IKsin(j4);
IkReal x14202=IKcos(j4);
IkReal x14203=(cj2*sj1);
IkReal x14204=(cj1*sj2);
IkReal x14205=(gconst40*sj3);
IkReal x14206=(gconst41*sj3);
IkReal x14207=(gconst41*r20);
IkReal x14208=(cj3*gconst41);
IkReal x14209=(sj1*sj2);
IkReal x14210=(cj1*cj2);
IkReal x14211=(cj3*gconst40);
IkReal x14212=((1.0)*x14202);
IkReal x14213=((1.0)*x14201);
IkReal x14214=(cj3*x14201);
IkReal x14215=(gconst40*x14201);
IkReal x14216=(x14203+x14204);
IkReal x14217=(x14202*x14211);
evalcond[0]=((((-1.0)*x14207*x14213))+(((-1.0)*r22*x14212))+((r21*x14215)));
evalcond[1]=((((-1.0)*gconst41*r00*x14213))+(((-1.0)*r02*x14212))+((r01*x14215)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14212))+((r11*x14215))+(((-1.0)*gconst41*r10*x14213)));
evalcond[3]=(((r11*x14217))+((r12*x14214))+((r10*x14205))+(((-1.0)*r10*x14208*x14212))+((r11*x14206)));
evalcond[4]=(((r10*x14202*x14206))+(((-1.0)*r11*x14205*x14212))+((r10*x14211))+(((-1.0)*r12*sj3*x14213))+((r11*x14208)));
evalcond[5]=(((r22*x14214))+((r20*x14205))+((r21*x14206))+((r21*x14217))+x14216+(((-1.0)*cj3*x14207*x14212)));
evalcond[6]=((((-1.0)*r00*x14208*x14212))+((r01*x14217))+((r00*x14205))+((r01*x14206))+(((-1.0)*x14209))+((r02*x14214))+x14210);
evalcond[7]=((((-1.0)*r02*sj3*x14213))+((r00*x14202*x14206))+(((-1.0)*r01*x14205*x14212))+((r00*x14211))+((r01*x14208))+x14216);
evalcond[8]=((((-1.0)*r21*x14205*x14212))+((r20*x14202*x14206))+((r21*x14208))+(((-1.0)*r22*sj3*x14213))+(((-1.0)*x14210))+((r20*x14211))+x14209);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14218 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14218.valid){
continue;
}
CheckValue<IkReal> x14219=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14218.value)+(((1.5707963267949)*(x14219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14220=IKsin(j4);
IkReal x14221=IKcos(j4);
IkReal x14222=(cj2*sj1);
IkReal x14223=(cj1*sj2);
IkReal x14224=(gconst40*sj3);
IkReal x14225=(gconst41*sj3);
IkReal x14226=(gconst41*r20);
IkReal x14227=(cj3*gconst41);
IkReal x14228=(sj1*sj2);
IkReal x14229=(cj1*cj2);
IkReal x14230=(cj3*gconst40);
IkReal x14231=((1.0)*x14221);
IkReal x14232=((1.0)*x14220);
IkReal x14233=(cj3*x14220);
IkReal x14234=(gconst40*x14220);
IkReal x14235=(x14222+x14223);
IkReal x14236=(x14221*x14230);
evalcond[0]=(((r21*x14234))+(((-1.0)*r22*x14231))+(((-1.0)*x14226*x14232)));
evalcond[1]=((((-1.0)*gconst41*r00*x14232))+(((-1.0)*r02*x14231))+((r01*x14234)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14232))+(((-1.0)*r12*x14231))+((r11*x14234)));
evalcond[3]=(((r10*x14224))+(((-1.0)*r10*x14227*x14231))+((r11*x14225))+((r12*x14233))+((r11*x14236)));
evalcond[4]=((((-1.0)*r11*x14224*x14231))+((r10*x14230))+(((-1.0)*r12*sj3*x14232))+((r11*x14227))+((r10*x14221*x14225)));
evalcond[5]=(((r20*x14224))+((r21*x14236))+((r21*x14225))+((r22*x14233))+(((-1.0)*cj3*x14226*x14231))+x14235);
evalcond[6]=(((r02*x14233))+((r01*x14236))+((r00*x14224))+(((-1.0)*x14228))+(((-1.0)*r00*x14227*x14231))+((r01*x14225))+x14229);
evalcond[7]=(((r00*x14221*x14225))+(((-1.0)*r01*x14224*x14231))+((r00*x14230))+(((-1.0)*r02*sj3*x14232))+((r01*x14227))+x14235);
evalcond[8]=((((-1.0)*r21*x14224*x14231))+((r20*x14230))+((r21*x14227))+((r20*x14221*x14225))+(((-1.0)*r22*sj3*x14232))+(((-1.0)*x14229))+x14228);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14237=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14237);
rxp1_1=(px*r21);
rxp1_2=(r11*x14237);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14238=(r11*sj5);
IkReal x14239=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14239))+x14238);
j4eval[1]=((((-1.0)*cj3*x14239))+((cj3*x14238)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14240=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14240);
rxp1_1=(px*r21);
rxp1_2=(r11*x14240);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14241=(cj5*r10);
IkReal x14242=(r11*sj5);
j4eval[0]=((((-1.0)*x14241))+x14242);
j4eval[1]=((((-1.0)*sj3*x14242))+((sj3*x14241)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14243=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14243);
rxp1_1=(px*r21);
rxp1_2=(r11*x14243);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14244=((1.0)*r10);
CheckValue<IkReal> x14245=IKPowWithIntegerCheck(cj3,-1);
if(!x14245.valid){
continue;
}
CheckValue<IkReal> x14246=IKPowWithIntegerCheck(r02,-1);
if(!x14246.valid){
continue;
}
CheckValue<IkReal> x14247=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14244))),-1);
if(!x14247.valid){
continue;
}
if( IKabs(((x14245.value)*(x14246.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14247.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14244)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14245.value)*(x14246.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14247.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14244))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14245.value)*(x14246.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14247.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14244))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14248=IKsin(j4);
IkReal x14249=IKcos(j4);
IkReal x14250=(cj2*sj1);
IkReal x14251=(cj1*sj2);
IkReal x14252=(cj5*r10);
IkReal x14253=(sj1*sj2);
IkReal x14254=(cj5*sj3);
IkReal x14255=(r11*sj5);
IkReal x14256=(cj3*sj5);
IkReal x14257=(r21*sj5);
IkReal x14258=(cj1*cj2);
IkReal x14259=(cj3*cj5);
IkReal x14260=(sj3*sj5);
IkReal x14261=((1.0)*x14248);
IkReal x14262=(r20*x14249);
IkReal x14263=(cj3*x14249);
IkReal x14264=(sj3*x14249);
IkReal x14265=(x14251+x14250);
evalcond[0]=((-1.0)*r02*x14249);
evalcond[1]=(((x14248*x14257))+(((-1.0)*cj5*r20*x14261)));
evalcond[2]=(((cj3*r02*x14248))+x14258+(((-1.0)*x14253)));
evalcond[3]=((((-1.0)*r02*sj3*x14261))+x14265);
evalcond[4]=((-1.0)+(((-1.0)*x14252*x14261))+((x14248*x14255)));
evalcond[5]=(((r11*x14254))+(((-1.0)*x14252*x14263))+((r10*x14260))+((x14255*x14263)));
evalcond[6]=((((-1.0)*x14255*x14264))+((r10*x14256))+((r11*x14259))+((x14252*x14264)));
evalcond[7]=(((r21*x14254))+((r20*x14260))+(((-1.0)*x14259*x14262))+((r21*x14249*x14256))+x14265);
evalcond[8]=(((r21*x14259))+((r20*x14256))+((x14254*x14262))+(((-1.0)*x14257*x14264))+x14253+(((-1.0)*x14258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14266=(cj5*r10);
IkReal x14267=((1.0)*r11);
CheckValue<IkReal> x14268=IKPowWithIntegerCheck(((((-1.0)*x14266))+((r11*sj5))),-1);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14267))+((sj3*x14266))),-1);
if(!x14269.valid){
continue;
}
if( IKabs(x14268.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14269.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14267)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14268.value)+IKsqr(((x14269.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14267))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14268.value, ((x14269.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14267))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14270=IKsin(j4);
IkReal x14271=IKcos(j4);
IkReal x14272=(cj2*sj1);
IkReal x14273=(cj1*sj2);
IkReal x14274=(cj5*r10);
IkReal x14275=(sj1*sj2);
IkReal x14276=(cj5*sj3);
IkReal x14277=(r11*sj5);
IkReal x14278=(cj3*sj5);
IkReal x14279=(r21*sj5);
IkReal x14280=(cj1*cj2);
IkReal x14281=(cj3*cj5);
IkReal x14282=(sj3*sj5);
IkReal x14283=((1.0)*x14270);
IkReal x14284=(r20*x14271);
IkReal x14285=(cj3*x14271);
IkReal x14286=(sj3*x14271);
IkReal x14287=(x14273+x14272);
evalcond[0]=((-1.0)*r02*x14271);
evalcond[1]=((((-1.0)*cj5*r20*x14283))+((x14270*x14279)));
evalcond[2]=((((-1.0)*x14275))+((cj3*r02*x14270))+x14280);
evalcond[3]=((((-1.0)*r02*sj3*x14283))+x14287);
evalcond[4]=((-1.0)+(((-1.0)*x14274*x14283))+((x14270*x14277)));
evalcond[5]=(((r10*x14282))+((r11*x14276))+(((-1.0)*x14274*x14285))+((x14277*x14285)));
evalcond[6]=(((r11*x14281))+((r10*x14278))+((x14274*x14286))+(((-1.0)*x14277*x14286)));
evalcond[7]=(((r21*x14276))+(((-1.0)*x14281*x14284))+x14287+((r20*x14282))+((r21*x14271*x14278)));
evalcond[8]=(((r21*x14281))+(((-1.0)*x14279*x14286))+((x14276*x14284))+((r20*x14278))+(((-1.0)*x14280))+x14275);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14288=((1.0)*r10);
IkReal x14289=(r11*sj5);
CheckValue<IkReal> x14290=IKPowWithIntegerCheck(((((-1.0)*cj5*x14288))+x14289),-1);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291=IKPowWithIntegerCheck((((cj3*x14289))+(((-1.0)*cj3*cj5*x14288))),-1);
if(!x14291.valid){
continue;
}
if( IKabs(x14290.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14291.value)*(((((-1.0)*sj3*sj5*x14288))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14290.value)+IKsqr(((x14291.value)*(((((-1.0)*sj3*sj5*x14288))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14290.value, ((x14291.value)*(((((-1.0)*sj3*sj5*x14288))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14292=IKsin(j4);
IkReal x14293=IKcos(j4);
IkReal x14294=(cj2*sj1);
IkReal x14295=(cj1*sj2);
IkReal x14296=(cj5*r10);
IkReal x14297=(sj1*sj2);
IkReal x14298=(cj5*sj3);
IkReal x14299=(r11*sj5);
IkReal x14300=(cj3*sj5);
IkReal x14301=(r21*sj5);
IkReal x14302=(cj1*cj2);
IkReal x14303=(cj3*cj5);
IkReal x14304=(sj3*sj5);
IkReal x14305=((1.0)*x14292);
IkReal x14306=(r20*x14293);
IkReal x14307=(cj3*x14293);
IkReal x14308=(sj3*x14293);
IkReal x14309=(x14295+x14294);
evalcond[0]=((-1.0)*r02*x14293);
evalcond[1]=((((-1.0)*cj5*r20*x14305))+((x14292*x14301)));
evalcond[2]=(((cj3*r02*x14292))+(((-1.0)*x14297))+x14302);
evalcond[3]=((((-1.0)*r02*sj3*x14305))+x14309);
evalcond[4]=((-1.0)+((x14292*x14299))+(((-1.0)*x14296*x14305)));
evalcond[5]=(((x14299*x14307))+(((-1.0)*x14296*x14307))+((r11*x14298))+((r10*x14304)));
evalcond[6]=(((x14296*x14308))+((r11*x14303))+((r10*x14300))+(((-1.0)*x14299*x14308)));
evalcond[7]=(((r20*x14304))+(((-1.0)*x14303*x14306))+((r21*x14298))+((r21*x14293*x14300))+x14309);
evalcond[8]=(((r20*x14300))+((x14298*x14306))+(((-1.0)*x14301*x14308))+(((-1.0)*x14302))+((r21*x14303))+x14297);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14310=cj5*cj5;
IkReal x14311=((1.0)*cj3);
IkReal x14312=(r10*r21);
IkReal x14313=(cj5*sj5);
IkReal x14314=(r11*r21);
IkReal x14315=(r11*r20);
IkReal x14316=(r22*sj3);
IkReal x14317=(r10*r20);
IkReal x14318=((1.0)*sj3*x14310);
CheckValue<IkReal> x14319 = IKatan2WithCheck(IkReal((((r10*sj5*x14316))+((cj5*r11*x14316)))),IkReal(((((-1.0)*x14315*x14318))+(((-1.0)*x14312*x14318))+((sj3*x14312))+((sj3*x14313*x14314))+(((-1.0)*sj3*x14313*x14317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14319.valid){
continue;
}
CheckValue<IkReal> x14320=IKPowWithIntegerCheck(IKsign((((cj3*x14313*x14315))+((cj3*x14310*x14314))+(((-1.0)*r12*r22*x14311))+(((-1.0)*x14310*x14311*x14317))+(((-1.0)*x14311*x14314))+((cj3*x14312*x14313)))),-1);
if(!x14320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14319.value)+(((1.5707963267949)*(x14320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14321=IKsin(j4);
IkReal x14322=IKcos(j4);
IkReal x14323=(cj2*sj1);
IkReal x14324=(cj1*sj2);
IkReal x14325=(cj5*sj3);
IkReal x14326=(cj5*r10);
IkReal x14327=(r00*sj5);
IkReal x14328=(sj1*sj2);
IkReal x14329=(r11*sj5);
IkReal x14330=(cj3*cj5);
IkReal x14331=(cj3*sj5);
IkReal x14332=(r21*sj5);
IkReal x14333=(cj1*cj2);
IkReal x14334=(sj3*sj5);
IkReal x14335=(r01*sj5);
IkReal x14336=((1.0)*x14322);
IkReal x14337=((1.0)*x14321);
IkReal x14338=(cj3*x14321);
IkReal x14339=(cj3*x14322);
IkReal x14340=(x14324+x14323);
evalcond[0]=((((-1.0)*r22*x14336))+(((-1.0)*cj5*r20*x14337))+((x14321*x14332)));
evalcond[1]=((((-1.0)*cj5*r00*x14337))+(((-1.0)*r02*x14336))+((x14321*x14335)));
evalcond[2]=((-1.0)+((x14321*x14329))+(((-1.0)*r12*x14336))+(((-1.0)*x14326*x14337)));
evalcond[3]=(((r12*x14338))+((r11*x14325))+((r10*x14334))+((x14329*x14339))+(((-1.0)*cj3*x14326*x14336)));
evalcond[4]=(((r11*x14330))+((r10*x14322*x14325))+(((-1.0)*sj3*x14329*x14336))+((r10*x14331))+(((-1.0)*r12*sj3*x14337)));
evalcond[5]=((((-1.0)*r20*x14330*x14336))+((r20*x14334))+((r21*x14322*x14331))+((r21*x14325))+((r22*x14338))+x14340);
evalcond[6]=(((r02*x14338))+((r01*x14325))+((r01*x14322*x14331))+((sj3*x14327))+(((-1.0)*r00*x14330*x14336))+x14333+(((-1.0)*x14328)));
evalcond[7]=((((-1.0)*r02*sj3*x14337))+((r01*x14330))+((cj3*x14327))+(((-1.0)*r01*x14334*x14336))+((r00*x14322*x14325))+x14340);
evalcond[8]=(((r20*x14322*x14325))+((r20*x14331))+(((-1.0)*r22*sj3*x14337))+(((-1.0)*sj3*x14332*x14336))+(((-1.0)*x14333))+x14328+((r21*x14330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14341=((1.0)*cj5);
CheckValue<IkReal> x14342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14341))+(((-1.0)*r20*sj5)))),-1);
if(!x14342.valid){
continue;
}
CheckValue<IkReal> x14343 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14342.value)))+(x14343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14344=IKsin(j4);
IkReal x14345=IKcos(j4);
IkReal x14346=(cj2*sj1);
IkReal x14347=(cj1*sj2);
IkReal x14348=(cj5*sj3);
IkReal x14349=(cj5*r10);
IkReal x14350=(r00*sj5);
IkReal x14351=(sj1*sj2);
IkReal x14352=(r11*sj5);
IkReal x14353=(cj3*cj5);
IkReal x14354=(cj3*sj5);
IkReal x14355=(r21*sj5);
IkReal x14356=(cj1*cj2);
IkReal x14357=(sj3*sj5);
IkReal x14358=(r01*sj5);
IkReal x14359=((1.0)*x14345);
IkReal x14360=((1.0)*x14344);
IkReal x14361=(cj3*x14344);
IkReal x14362=(cj3*x14345);
IkReal x14363=(x14347+x14346);
evalcond[0]=((((-1.0)*cj5*r20*x14360))+(((-1.0)*r22*x14359))+((x14344*x14355)));
evalcond[1]=((((-1.0)*r02*x14359))+(((-1.0)*cj5*r00*x14360))+((x14344*x14358)));
evalcond[2]=((-1.0)+(((-1.0)*x14349*x14360))+(((-1.0)*r12*x14359))+((x14344*x14352)));
evalcond[3]=(((x14352*x14362))+(((-1.0)*cj3*x14349*x14359))+((r11*x14348))+((r10*x14357))+((r12*x14361)));
evalcond[4]=(((r10*x14345*x14348))+((r11*x14353))+(((-1.0)*r12*sj3*x14360))+((r10*x14354))+(((-1.0)*sj3*x14352*x14359)));
evalcond[5]=((((-1.0)*r20*x14353*x14359))+((r20*x14357))+((r21*x14348))+x14363+((r21*x14345*x14354))+((r22*x14361)));
evalcond[6]=(((r01*x14345*x14354))+((sj3*x14350))+((r02*x14361))+((r01*x14348))+(((-1.0)*x14351))+(((-1.0)*r00*x14353*x14359))+x14356);
evalcond[7]=(((cj3*x14350))+(((-1.0)*r01*x14357*x14359))+((r00*x14345*x14348))+((r01*x14353))+(((-1.0)*r02*sj3*x14360))+x14363);
evalcond[8]=(((r20*x14354))+(((-1.0)*sj3*x14355*x14359))+(((-1.0)*x14356))+((r21*x14353))+x14351+(((-1.0)*r22*sj3*x14360))+((r20*x14345*x14348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14364 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14364.valid){
continue;
}
CheckValue<IkReal> x14365=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14364.value)+(((1.5707963267949)*(x14365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14366=IKsin(j4);
IkReal x14367=IKcos(j4);
IkReal x14368=(cj2*sj1);
IkReal x14369=(cj1*sj2);
IkReal x14370=(cj5*sj3);
IkReal x14371=(cj5*r10);
IkReal x14372=(r00*sj5);
IkReal x14373=(sj1*sj2);
IkReal x14374=(r11*sj5);
IkReal x14375=(cj3*cj5);
IkReal x14376=(cj3*sj5);
IkReal x14377=(r21*sj5);
IkReal x14378=(cj1*cj2);
IkReal x14379=(sj3*sj5);
IkReal x14380=(r01*sj5);
IkReal x14381=((1.0)*x14367);
IkReal x14382=((1.0)*x14366);
IkReal x14383=(cj3*x14366);
IkReal x14384=(cj3*x14367);
IkReal x14385=(x14369+x14368);
evalcond[0]=(((x14366*x14377))+(((-1.0)*cj5*r20*x14382))+(((-1.0)*r22*x14381)));
evalcond[1]=(((x14366*x14380))+(((-1.0)*cj5*r00*x14382))+(((-1.0)*r02*x14381)));
evalcond[2]=((-1.0)+(((-1.0)*x14371*x14382))+((x14366*x14374))+(((-1.0)*r12*x14381)));
evalcond[3]=((((-1.0)*cj3*x14371*x14381))+((r10*x14379))+((r12*x14383))+((x14374*x14384))+((r11*x14370)));
evalcond[4]=(((r10*x14367*x14370))+((r10*x14376))+(((-1.0)*r12*sj3*x14382))+((r11*x14375))+(((-1.0)*sj3*x14374*x14381)));
evalcond[5]=(((r21*x14370))+(((-1.0)*r20*x14375*x14381))+((r22*x14383))+((r21*x14367*x14376))+((r20*x14379))+x14385);
evalcond[6]=(((r01*x14370))+(((-1.0)*x14373))+((r01*x14367*x14376))+(((-1.0)*r00*x14375*x14381))+((sj3*x14372))+((r02*x14383))+x14378);
evalcond[7]=(((r01*x14375))+(((-1.0)*r01*x14379*x14381))+((cj3*x14372))+((r00*x14367*x14370))+x14385+(((-1.0)*r02*sj3*x14382)));
evalcond[8]=(((r21*x14375))+((r20*x14367*x14370))+(((-1.0)*x14378))+(((-1.0)*r22*sj3*x14382))+(((-1.0)*sj3*x14377*x14381))+((r20*x14376))+x14373);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14386=((-1.0)*r00);
IkReal x14388 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14388)==0){
continue;
}
IkReal x14387=pow(x14388,-0.5);
CheckValue<IkReal> x14389 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14386),IKFAST_ATAN2_MAGTHRESH);
if(!x14389.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14389.value));
IkReal gconst13=(r01*x14387);
IkReal gconst14=(x14386*x14387);
CheckValue<IkReal> x14390 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14390.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14390.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14391=((-1.0)*r00);
IkReal x14392=x14387;
CheckValue<IkReal> x14394 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14391),IKFAST_ATAN2_MAGTHRESH);
if(!x14394.valid){
continue;
}
IkReal x14393=((-1.0)*(x14394.value));
sj5=gconst13;
cj5=gconst14;
j5=x14393;
IkReal gconst12=x14393;
IkReal gconst13=(r01*x14392);
IkReal gconst14=(x14391*x14392);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14395=((1.0)*sj0);
IkReal x14396=((1.0)*cj0);
CheckValue<IkReal> x14397 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14395))+(((-1.0)*r02*x14396)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14395))+(((-1.0)*gconst13*r01*x14396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14397.valid){
continue;
}
CheckValue<IkReal> x14398=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14397.value)+(((1.5707963267949)*(x14398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14399=IKsin(j4);
IkReal x14400=IKcos(j4);
IkReal x14401=((1.0)*r22);
IkReal x14402=((1.0)*r12);
IkReal x14403=(gconst13*sj3);
IkReal x14404=(gconst13*r01);
IkReal x14405=(sj1*sj2);
IkReal x14406=(gconst14*sj3);
IkReal x14407=(cj2*sj1);
IkReal x14408=((1.0)*sj0);
IkReal x14409=(cj3*gconst13);
IkReal x14410=(cj3*gconst14);
IkReal x14411=((1.0)*cj0);
IkReal x14412=((1.0)*gconst14);
IkReal x14413=(cj1*sj2);
IkReal x14414=(sj3*x14399);
IkReal x14415=((1.0)*cj1*cj2);
IkReal x14416=(cj3*x14400);
IkReal x14417=(cj3*x14399);
IkReal x14418=(gconst13*x14399);
IkReal x14419=((1.0)*x14400);
IkReal x14420=(x14399*x14412);
evalcond[0]=(((r21*x14418))+(((-1.0)*x14400*x14401))+(((-1.0)*r20*x14420)));
evalcond[1]=((((-1.0)*r10*x14420))+cj0+((r11*x14418))+(((-1.0)*x14400*x14402)));
evalcond[2]=((((-1.0)*x14408))+((x14399*x14404))+(((-1.0)*r02*x14419))+(((-1.0)*r00*x14420)));
evalcond[3]=(((r21*x14406))+((r22*x14417))+x14413+x14407+((r21*x14400*x14409))+((r20*x14403))+(((-1.0)*r20*x14410*x14419)));
evalcond[4]=(((r21*x14410))+(((-1.0)*x14401*x14414))+(((-1.0)*x14415))+x14405+((r20*x14409))+(((-1.0)*r21*x14403*x14419))+((r20*x14400*x14406)));
evalcond[5]=(((x14404*x14416))+(((-1.0)*cj1*cj2*x14411))+((cj0*x14405))+((r02*x14417))+((r01*x14406))+((r00*x14403))+(((-1.0)*r00*x14410*x14419)));
evalcond[6]=(((r10*x14403))+(((-1.0)*r10*x14410*x14419))+((r12*x14417))+((sj0*x14405))+((r11*x14406))+(((-1.0)*cj1*cj2*x14408))+((r11*x14400*x14409)));
evalcond[7]=(((r00*x14400*x14406))+(((-1.0)*x14407*x14411))+((r00*x14409))+(((-1.0)*r02*x14414))+((r01*x14410))+(((-1.0)*x14411*x14413))+(((-1.0)*r01*x14403*x14419)));
evalcond[8]=(((r10*x14409))+(((-1.0)*r11*x14403*x14419))+((r10*x14400*x14406))+((r11*x14410))+(((-1.0)*x14407*x14408))+(((-1.0)*x14402*x14414))+(((-1.0)*x14408*x14413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14421=((1.0)*gconst14);
CheckValue<IkReal> x14422=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14421)))),-1);
if(!x14422.valid){
continue;
}
CheckValue<IkReal> x14423 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14421))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14422.value)))+(x14423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14424=IKsin(j4);
IkReal x14425=IKcos(j4);
IkReal x14426=((1.0)*r22);
IkReal x14427=((1.0)*r12);
IkReal x14428=(gconst13*sj3);
IkReal x14429=(gconst13*r01);
IkReal x14430=(sj1*sj2);
IkReal x14431=(gconst14*sj3);
IkReal x14432=(cj2*sj1);
IkReal x14433=((1.0)*sj0);
IkReal x14434=(cj3*gconst13);
IkReal x14435=(cj3*gconst14);
IkReal x14436=((1.0)*cj0);
IkReal x14437=((1.0)*gconst14);
IkReal x14438=(cj1*sj2);
IkReal x14439=(sj3*x14424);
IkReal x14440=((1.0)*cj1*cj2);
IkReal x14441=(cj3*x14425);
IkReal x14442=(cj3*x14424);
IkReal x14443=(gconst13*x14424);
IkReal x14444=((1.0)*x14425);
IkReal x14445=(x14424*x14437);
evalcond[0]=((((-1.0)*x14425*x14426))+((r21*x14443))+(((-1.0)*r20*x14445)));
evalcond[1]=(cj0+(((-1.0)*x14425*x14427))+((r11*x14443))+(((-1.0)*r10*x14445)));
evalcond[2]=((((-1.0)*x14433))+((x14424*x14429))+(((-1.0)*r02*x14444))+(((-1.0)*r00*x14445)));
evalcond[3]=(((r21*x14431))+((r21*x14425*x14434))+(((-1.0)*r20*x14435*x14444))+((r20*x14428))+x14432+x14438+((r22*x14442)));
evalcond[4]=(((r21*x14435))+((r20*x14425*x14431))+(((-1.0)*x14440))+(((-1.0)*r21*x14428*x14444))+(((-1.0)*x14426*x14439))+((r20*x14434))+x14430);
evalcond[5]=((((-1.0)*cj1*cj2*x14436))+((cj0*x14430))+((r00*x14428))+((r01*x14431))+((x14429*x14441))+(((-1.0)*r00*x14435*x14444))+((r02*x14442)));
evalcond[6]=(((r11*x14425*x14434))+(((-1.0)*cj1*cj2*x14433))+(((-1.0)*r10*x14435*x14444))+((r11*x14431))+((r12*x14442))+((sj0*x14430))+((r10*x14428)));
evalcond[7]=((((-1.0)*x14436*x14438))+((r00*x14425*x14431))+(((-1.0)*x14432*x14436))+((r00*x14434))+((r01*x14435))+(((-1.0)*r02*x14439))+(((-1.0)*r01*x14428*x14444)));
evalcond[8]=((((-1.0)*x14433*x14438))+(((-1.0)*x14432*x14433))+((r11*x14435))+((r10*x14425*x14431))+((r10*x14434))+(((-1.0)*r11*x14428*x14444))+(((-1.0)*x14427*x14439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14446=((-1.0)*r01);
IkReal x14448 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14448)==0){
continue;
}
IkReal x14447=pow(x14448,-0.5);
CheckValue<IkReal> x14449 = IKatan2WithCheck(IkReal(x14446),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14449.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14449.value))));
IkReal gconst16=(x14446*x14447);
IkReal gconst17=((1.0)*r00*x14447);
CheckValue<IkReal> x14450 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14450.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14450.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14451=((-1.0)*r01);
CheckValue<IkReal> x14454 = IKatan2WithCheck(IkReal(x14451),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14454.valid){
continue;
}
IkReal x14452=((1.0)*(x14454.value));
IkReal x14453=x14447;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14452)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14452)));
IkReal gconst16=(x14451*x14453);
IkReal gconst17=((1.0)*r00*x14453);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14455=((-1.0)*r01);
CheckValue<IkReal> x14458 = IKatan2WithCheck(IkReal(x14455),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14458.valid){
continue;
}
IkReal x14456=((1.0)*(x14458.value));
IkReal x14457=x14447;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14456)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14456)));
IkReal gconst16=(x14455*x14457);
IkReal gconst17=((1.0)*r00*x14457);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14459=((-1.0)*r01);
CheckValue<IkReal> x14462 = IKatan2WithCheck(IkReal(x14459),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14462.valid){
continue;
}
IkReal x14460=((1.0)*(x14462.value));
IkReal x14461=x14447;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14460)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14460)));
IkReal gconst16=(x14459*x14461);
IkReal gconst17=((1.0)*r00*x14461);
IkReal x14463=r02*r02;
IkReal x14464=(r12*sj0);
IkReal x14465=((1.0)*cj0);
IkReal x14466=x14447;
j4eval[0]=((IKabs((((r02*x14464*x14466))+((cj0*x14463*x14466))+(((-1.0)*x14465*x14466)))))+(IKabs(((((-1.0)*x14464))+(((-1.0)*r02*x14465))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14467=((-1.0)*r01);
CheckValue<IkReal> x14470 = IKatan2WithCheck(IkReal(x14467),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14470.valid){
continue;
}
IkReal x14468=((1.0)*(x14470.value));
IkReal x14469=x14447;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14468)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14468)));
IkReal gconst16=(x14467*x14469);
IkReal gconst17=((1.0)*r00*x14469);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14471=((-1.0)*r01);
CheckValue<IkReal> x14474 = IKatan2WithCheck(IkReal(x14471),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14474.valid){
continue;
}
IkReal x14472=((1.0)*(x14474.value));
IkReal x14473=x14447;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14472)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14472)));
IkReal gconst16=(x14471*x14473);
IkReal gconst17=((1.0)*r00*x14473);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14475=gconst16*gconst16;
IkReal x14476=gconst17*gconst17;
IkReal x14477=(r11*sj3);
IkReal x14478=(cj3*r10);
IkReal x14479=((1.0)*cj3);
IkReal x14480=(r10*sj3);
IkReal x14481=(gconst16*gconst17);
IkReal x14482=(r21*x14475);
IkReal x14483=((1.0)*r20*x14476);
CheckValue<IkReal> x14484 = IKatan2WithCheck(IkReal((((gconst16*r22*x14480))+((gconst17*r22*x14477)))),IkReal(((((-1.0)*r20*x14480*x14481))+(((-1.0)*x14477*x14483))+((r21*x14477*x14481))+((x14480*x14482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14484.valid){
continue;
}
CheckValue<IkReal> x14485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14479*x14482))+(((-1.0)*r12*r22*x14479))+((cj3*r11*r20*x14481))+(((-1.0)*x14478*x14483))+((r21*x14478*x14481)))),-1);
if(!x14485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14484.value)+(((1.5707963267949)*(x14485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14486=IKsin(j4);
IkReal x14487=IKcos(j4);
IkReal x14488=(cj2*sj1);
IkReal x14489=(cj1*sj2);
IkReal x14490=(gconst16*r21);
IkReal x14491=(cj3*gconst17);
IkReal x14492=(gconst16*r20);
IkReal x14493=(sj1*sj2);
IkReal x14494=(gconst17*r20);
IkReal x14495=(gconst17*sj3);
IkReal x14496=(gconst16*r10);
IkReal x14497=(cj1*cj2);
IkReal x14498=(gconst16*sj3);
IkReal x14499=((1.0)*x14487);
IkReal x14500=((1.0)*x14486);
IkReal x14501=(gconst16*x14486);
IkReal x14502=(cj3*x14487);
IkReal x14503=(cj3*x14486);
IkReal x14504=(x14488+x14489);
evalcond[0]=((((-1.0)*r22*x14499))+((x14486*x14490))+(((-1.0)*x14494*x14500)));
evalcond[1]=((((-1.0)*r02*x14499))+(((-1.0)*gconst17*r00*x14500))+((r01*x14501)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14499))+((r11*x14501))+(((-1.0)*gconst17*r10*x14500)));
evalcond[3]=(((r11*x14495))+((gconst16*r11*x14502))+((sj3*x14496))+(((-1.0)*r10*x14491*x14499))+((r12*x14503)));
evalcond[4]=(((r11*x14491))+((r10*x14487*x14495))+((cj3*x14496))+(((-1.0)*r12*sj3*x14500))+(((-1.0)*r11*x14498*x14499)));
evalcond[5]=(((r21*x14495))+((sj3*x14492))+((r22*x14503))+((x14490*x14502))+x14504+(((-1.0)*r20*x14491*x14499)));
evalcond[6]=((((-1.0)*x14493))+((r02*x14503))+((gconst16*r01*x14502))+x14497+((r00*x14498))+((r01*x14495))+(((-1.0)*r00*x14491*x14499)));
evalcond[7]=(((r00*x14487*x14495))+x14504+((r01*x14491))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14500))+(((-1.0)*r01*x14498*x14499)));
evalcond[8]=((((-1.0)*x14497))+((sj3*x14487*x14494))+((r21*x14491))+(((-1.0)*sj3*x14490*x14499))+x14493+((cj3*x14492))+(((-1.0)*r22*sj3*x14500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14505=((1.0)*gconst17);
CheckValue<IkReal> x14506 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14506.valid){
continue;
}
CheckValue<IkReal> x14507=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14505)))),-1);
if(!x14507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14506.value)+(((1.5707963267949)*(x14507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14508=IKsin(j4);
IkReal x14509=IKcos(j4);
IkReal x14510=(cj2*sj1);
IkReal x14511=(cj1*sj2);
IkReal x14512=(gconst16*r21);
IkReal x14513=(cj3*gconst17);
IkReal x14514=(gconst16*r20);
IkReal x14515=(sj1*sj2);
IkReal x14516=(gconst17*r20);
IkReal x14517=(gconst17*sj3);
IkReal x14518=(gconst16*r10);
IkReal x14519=(cj1*cj2);
IkReal x14520=(gconst16*sj3);
IkReal x14521=((1.0)*x14509);
IkReal x14522=((1.0)*x14508);
IkReal x14523=(gconst16*x14508);
IkReal x14524=(cj3*x14509);
IkReal x14525=(cj3*x14508);
IkReal x14526=(x14510+x14511);
evalcond[0]=((((-1.0)*r22*x14521))+((x14508*x14512))+(((-1.0)*x14516*x14522)));
evalcond[1]=((((-1.0)*gconst17*r00*x14522))+((r01*x14523))+(((-1.0)*r02*x14521)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14522))+((r11*x14523))+(((-1.0)*r12*x14521)));
evalcond[3]=(((sj3*x14518))+((r11*x14517))+((r12*x14525))+((gconst16*r11*x14524))+(((-1.0)*r10*x14513*x14521)));
evalcond[4]=((((-1.0)*r12*sj3*x14522))+((cj3*x14518))+((r11*x14513))+((r10*x14509*x14517))+(((-1.0)*r11*x14520*x14521)));
evalcond[5]=(((r22*x14525))+((sj3*x14514))+((x14512*x14524))+(((-1.0)*r20*x14513*x14521))+x14526+((r21*x14517)));
evalcond[6]=(((gconst16*r01*x14524))+((r00*x14520))+((r01*x14517))+x14519+((r02*x14525))+(((-1.0)*r00*x14513*x14521))+(((-1.0)*x14515)));
evalcond[7]=(((r00*x14509*x14517))+((r01*x14513))+(((-1.0)*r01*x14520*x14521))+x14526+(((-1.0)*r02*sj3*x14522))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14512*x14521))+((cj3*x14514))+x14515+(((-1.0)*r22*sj3*x14522))+((sj3*x14509*x14516))+((r21*x14513))+(((-1.0)*x14519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14527=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14527.valid){
continue;
}
CheckValue<IkReal> x14528 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14527.value)))+(x14528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14529=IKsin(j4);
IkReal x14530=IKcos(j4);
IkReal x14531=(cj2*sj1);
IkReal x14532=(cj1*sj2);
IkReal x14533=(gconst16*r21);
IkReal x14534=(cj3*gconst17);
IkReal x14535=(gconst16*r20);
IkReal x14536=(sj1*sj2);
IkReal x14537=(gconst17*r20);
IkReal x14538=(gconst17*sj3);
IkReal x14539=(gconst16*r10);
IkReal x14540=(cj1*cj2);
IkReal x14541=(gconst16*sj3);
IkReal x14542=((1.0)*x14530);
IkReal x14543=((1.0)*x14529);
IkReal x14544=(gconst16*x14529);
IkReal x14545=(cj3*x14530);
IkReal x14546=(cj3*x14529);
IkReal x14547=(x14532+x14531);
evalcond[0]=(((x14529*x14533))+(((-1.0)*x14537*x14543))+(((-1.0)*r22*x14542)));
evalcond[1]=(((r01*x14544))+(((-1.0)*gconst17*r00*x14543))+(((-1.0)*r02*x14542)));
evalcond[2]=((-1.0)+((r11*x14544))+(((-1.0)*gconst17*r10*x14543))+(((-1.0)*r12*x14542)));
evalcond[3]=(((r12*x14546))+((gconst16*r11*x14545))+((r11*x14538))+((sj3*x14539))+(((-1.0)*r10*x14534*x14542)));
evalcond[4]=(((r10*x14530*x14538))+((cj3*x14539))+((r11*x14534))+(((-1.0)*r12*sj3*x14543))+(((-1.0)*r11*x14541*x14542)));
evalcond[5]=(((r21*x14538))+(((-1.0)*r20*x14534*x14542))+((r22*x14546))+x14547+((sj3*x14535))+((x14533*x14545)));
evalcond[6]=(((r02*x14546))+(((-1.0)*x14536))+((r00*x14541))+((r01*x14538))+x14540+((gconst16*r01*x14545))+(((-1.0)*r00*x14534*x14542)));
evalcond[7]=((((-1.0)*r02*sj3*x14543))+((r01*x14534))+((r00*x14530*x14538))+x14547+((cj3*gconst16*r00))+(((-1.0)*r01*x14541*x14542)));
evalcond[8]=(((cj3*x14535))+(((-1.0)*x14540))+((r21*x14534))+(((-1.0)*sj3*x14533*x14542))+((sj3*x14530*x14537))+x14536+(((-1.0)*r22*sj3*x14543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14548=((-1.0)*r01);
CheckValue<IkReal> x14551 = IKatan2WithCheck(IkReal(x14548),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14551.valid){
continue;
}
IkReal x14549=((1.0)*(x14551.value));
IkReal x14550=x14447;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14549)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14549)));
IkReal gconst16=(x14548*x14550);
IkReal gconst17=((1.0)*r00*x14550);
IkReal x14552=r02*r02;
IkReal x14553=(r12*sj0);
IkReal x14554=((1.0)*cj0);
IkReal x14555=x14447;
j4eval[0]=((IKabs((((cj0*x14552*x14555))+(((-1.0)*x14554*x14555))+((r02*x14553*x14555)))))+(IKabs(((((-1.0)*r02*x14554))+(((-1.0)*x14553))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14556=((1.0)*r12);
IkReal x14557=(sj1*sj2);
IkReal x14558=(cj1*cj2);
IkReal x14559=((1.0)*sj3);
IkReal x14560=(gconst16*r21);
IkReal x14561=(cj3*gconst16*r20);
IkReal x14562=(gconst17*r20*sj3);
IkReal x14563=(cj3*gconst17*r21);
CheckValue<IkReal> x14564=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14560))+(((-1.0)*r10*r20*x14559*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14559*x14560))+((gconst16*r11*x14562))),-1);
if(!x14564.valid){
continue;
}
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(((((-1.0)*x14559*x14560))+x14562),-1);
if(!x14565.valid){
continue;
}
if( IKabs(((x14564.value)*(((((-1.0)*cj0*gconst17*r20*x14559))+((r12*x14558))+((cj0*sj3*x14560))+(((-1.0)*x14556*x14557))+(((-1.0)*x14556*x14563))+(((-1.0)*x14556*x14561)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14565.value)*((x14558+(((-1.0)*x14557))+(((-1.0)*x14563))+(((-1.0)*x14561)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14564.value)*(((((-1.0)*cj0*gconst17*r20*x14559))+((r12*x14558))+((cj0*sj3*x14560))+(((-1.0)*x14556*x14557))+(((-1.0)*x14556*x14563))+(((-1.0)*x14556*x14561))))))+IKsqr(((x14565.value)*((x14558+(((-1.0)*x14557))+(((-1.0)*x14563))+(((-1.0)*x14561))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14564.value)*(((((-1.0)*cj0*gconst17*r20*x14559))+((r12*x14558))+((cj0*sj3*x14560))+(((-1.0)*x14556*x14557))+(((-1.0)*x14556*x14563))+(((-1.0)*x14556*x14561))))), ((x14565.value)*((x14558+(((-1.0)*x14557))+(((-1.0)*x14563))+(((-1.0)*x14561))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14566=IKsin(j4);
IkReal x14567=IKcos(j4);
IkReal x14568=((1.0)*gconst17);
IkReal x14569=(gconst17*sj3);
IkReal x14570=(gconst16*r21);
IkReal x14571=(cj3*gconst17);
IkReal x14572=(sj1*sj2);
IkReal x14573=((1.0)*sj0);
IkReal x14574=(gconst16*sj3);
IkReal x14575=(cj3*gconst16);
IkReal x14576=(cj2*sj1);
IkReal x14577=((1.0)*cj0);
IkReal x14578=((1.0)*sj3);
IkReal x14579=(cj1*sj2);
IkReal x14580=(cj3*x14567);
IkReal x14581=(gconst16*x14566);
IkReal x14582=((1.0)*x14567);
IkReal x14583=((1.0)*cj1*cj2);
IkReal x14584=(r02*x14566);
IkReal x14585=(r12*x14566);
evalcond[0]=((((-1.0)*r20*x14566*x14568))+((x14566*x14570)));
evalcond[1]=(cj0+(((-1.0)*r10*x14566*x14568))+(((-1.0)*r12*x14582))+((r11*x14581)));
evalcond[2]=((((-1.0)*r02*x14582))+(((-1.0)*x14573))+(((-1.0)*r00*x14566*x14568))+((r01*x14581)));
evalcond[3]=(((x14570*x14580))+((r21*x14569))+((r20*x14574))+x14576+x14579+(((-1.0)*r20*x14568*x14580)));
evalcond[4]=(((r21*x14571))+((r20*x14567*x14569))+((r20*x14575))+(((-1.0)*x14583))+x14572+(((-1.0)*x14567*x14570*x14578)));
evalcond[5]=(((r01*x14569))+(((-1.0)*r00*x14568*x14580))+((cj3*x14584))+((cj0*x14572))+(((-1.0)*cj1*cj2*x14577))+((r01*x14567*x14575))+((r00*x14574)));
evalcond[6]=(((cj3*x14585))+((r11*x14567*x14575))+(((-1.0)*cj1*cj2*x14573))+(((-1.0)*r10*x14568*x14580))+((r11*x14569))+((sj0*x14572))+((r10*x14574)));
evalcond[7]=((((-1.0)*x14578*x14584))+(((-1.0)*x14577*x14579))+((r00*x14567*x14569))+(((-1.0)*x14576*x14577))+(((-1.0)*r01*x14574*x14582))+((r01*x14571))+((r00*x14575)));
evalcond[8]=(((r10*x14567*x14569))+(((-1.0)*x14578*x14585))+(((-1.0)*x14573*x14576))+(((-1.0)*x14573*x14579))+(((-1.0)*r11*x14574*x14582))+((r11*x14571))+((r10*x14575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14586=((1.0)*sj0);
IkReal x14587=((1.0)*cj0);
CheckValue<IkReal> x14588=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14588.valid){
continue;
}
CheckValue<IkReal> x14589 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14587))+(((-1.0)*r12*x14586)))),IkReal(((((-1.0)*gconst16*r01*x14587))+(((-1.0)*gconst16*r11*x14586))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14588.value)))+(x14589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14590=IKsin(j4);
IkReal x14591=IKcos(j4);
IkReal x14592=((1.0)*gconst17);
IkReal x14593=(gconst17*sj3);
IkReal x14594=(gconst16*r21);
IkReal x14595=(cj3*gconst17);
IkReal x14596=(sj1*sj2);
IkReal x14597=((1.0)*sj0);
IkReal x14598=(gconst16*sj3);
IkReal x14599=(cj3*gconst16);
IkReal x14600=(cj2*sj1);
IkReal x14601=((1.0)*cj0);
IkReal x14602=((1.0)*sj3);
IkReal x14603=(cj1*sj2);
IkReal x14604=(cj3*x14591);
IkReal x14605=(gconst16*x14590);
IkReal x14606=((1.0)*x14591);
IkReal x14607=((1.0)*cj1*cj2);
IkReal x14608=(r02*x14590);
IkReal x14609=(r12*x14590);
evalcond[0]=(((x14590*x14594))+(((-1.0)*r20*x14590*x14592)));
evalcond[1]=(cj0+(((-1.0)*r12*x14606))+((r11*x14605))+(((-1.0)*r10*x14590*x14592)));
evalcond[2]=((((-1.0)*x14597))+(((-1.0)*r00*x14590*x14592))+((r01*x14605))+(((-1.0)*r02*x14606)));
evalcond[3]=(((r20*x14598))+(((-1.0)*r20*x14592*x14604))+((x14594*x14604))+((r21*x14593))+x14600+x14603);
evalcond[4]=(((r20*x14599))+(((-1.0)*x14591*x14594*x14602))+((r21*x14595))+x14596+(((-1.0)*x14607))+((r20*x14591*x14593)));
evalcond[5]=((((-1.0)*r00*x14592*x14604))+(((-1.0)*cj1*cj2*x14601))+((r01*x14591*x14599))+((cj3*x14608))+((r01*x14593))+((cj0*x14596))+((r00*x14598)));
evalcond[6]=(((sj0*x14596))+(((-1.0)*cj1*cj2*x14597))+((r10*x14598))+((r11*x14591*x14599))+((cj3*x14609))+((r11*x14593))+(((-1.0)*r10*x14592*x14604)));
evalcond[7]=((((-1.0)*x14600*x14601))+((r00*x14591*x14593))+((r01*x14595))+(((-1.0)*x14602*x14608))+(((-1.0)*r01*x14598*x14606))+(((-1.0)*x14601*x14603))+((r00*x14599)));
evalcond[8]=(((r10*x14599))+((r10*x14591*x14593))+(((-1.0)*x14602*x14609))+((r11*x14595))+(((-1.0)*r11*x14598*x14606))+(((-1.0)*x14597*x14600))+(((-1.0)*x14597*x14603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14610=((1.0)*sj0);
IkReal x14611=((1.0)*cj0);
CheckValue<IkReal> x14612=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14612.valid){
continue;
}
CheckValue<IkReal> x14613 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14610))+(((-1.0)*r02*x14611)))),IkReal(((((-1.0)*gconst16*r01*x14611))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14612.value)))+(x14613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14614=IKsin(j4);
IkReal x14615=IKcos(j4);
IkReal x14616=(cj3*gconst17);
IkReal x14617=(gconst16*r21);
IkReal x14618=(gconst17*sj3);
IkReal x14619=(gconst16*r20);
IkReal x14620=(sj1*sj2);
IkReal x14621=(gconst16*r10);
IkReal x14622=(cj2*sj1);
IkReal x14623=(gconst16*sj3);
IkReal x14624=((1.0)*cj0);
IkReal x14625=((1.0)*sj0);
IkReal x14626=(cj1*sj2);
IkReal x14627=((1.0)*x14615);
IkReal x14628=(gconst16*x14614);
IkReal x14629=(cj3*x14615);
IkReal x14630=(cj3*x14614);
IkReal x14631=((1.0)*cj1*cj2);
IkReal x14632=((1.0)*gconst17*x14614);
IkReal x14633=((1.0)*sj3*x14614);
evalcond[0]=((((-1.0)*r20*x14632))+((x14614*x14617))+(((-1.0)*r22*x14627)));
evalcond[1]=(cj0+((r11*x14628))+(((-1.0)*r12*x14627))+(((-1.0)*r10*x14632)));
evalcond[2]=((((-1.0)*r02*x14627))+(((-1.0)*x14625))+(((-1.0)*r00*x14632))+((r01*x14628)));
evalcond[3]=(((r22*x14630))+(((-1.0)*r20*x14616*x14627))+((r21*x14618))+((x14617*x14629))+x14626+x14622+((sj3*x14619)));
evalcond[4]=((((-1.0)*r22*x14633))+((r20*x14615*x14618))+((r21*x14616))+(((-1.0)*x14631))+((cj3*x14619))+x14620+(((-1.0)*sj3*x14617*x14627)));
evalcond[5]=(((gconst16*r01*x14629))+((r02*x14630))+((r01*x14618))+(((-1.0)*r00*x14616*x14627))+((cj0*x14620))+((r00*x14623))+(((-1.0)*cj1*cj2*x14624)));
evalcond[6]=(((sj3*x14621))+(((-1.0)*r10*x14616*x14627))+((gconst16*r11*x14629))+((r12*x14630))+((r11*x14618))+(((-1.0)*cj1*cj2*x14625))+((sj0*x14620)));
evalcond[7]=((((-1.0)*r01*x14623*x14627))+(((-1.0)*x14622*x14624))+((r01*x14616))+((cj3*gconst16*r00))+(((-1.0)*x14624*x14626))+(((-1.0)*r02*x14633))+((r00*x14615*x14618)));
evalcond[8]=(((cj3*x14621))+((r10*x14615*x14618))+(((-1.0)*x14622*x14625))+(((-1.0)*r11*x14623*x14627))+(((-1.0)*x14625*x14626))+((r11*x14616))+(((-1.0)*r12*x14633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14634=((1.0)*gconst17);
CheckValue<IkReal> x14635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14634)))),-1);
if(!x14635.valid){
continue;
}
CheckValue<IkReal> x14636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14634)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14635.value)))+(x14636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14637=IKsin(j4);
IkReal x14638=IKcos(j4);
IkReal x14639=(cj3*gconst17);
IkReal x14640=(gconst16*r21);
IkReal x14641=(gconst17*sj3);
IkReal x14642=(gconst16*r20);
IkReal x14643=(sj1*sj2);
IkReal x14644=(gconst16*r10);
IkReal x14645=(cj2*sj1);
IkReal x14646=(gconst16*sj3);
IkReal x14647=((1.0)*cj0);
IkReal x14648=((1.0)*sj0);
IkReal x14649=(cj1*sj2);
IkReal x14650=((1.0)*x14638);
IkReal x14651=(gconst16*x14637);
IkReal x14652=(cj3*x14638);
IkReal x14653=(cj3*x14637);
IkReal x14654=((1.0)*cj1*cj2);
IkReal x14655=((1.0)*gconst17*x14637);
IkReal x14656=((1.0)*sj3*x14637);
evalcond[0]=((((-1.0)*r22*x14650))+(((-1.0)*r20*x14655))+((x14637*x14640)));
evalcond[1]=(cj0+(((-1.0)*r12*x14650))+(((-1.0)*r10*x14655))+((r11*x14651)));
evalcond[2]=(((r01*x14651))+(((-1.0)*r02*x14650))+(((-1.0)*x14648))+(((-1.0)*r00*x14655)));
evalcond[3]=((((-1.0)*r20*x14639*x14650))+((r22*x14653))+((x14640*x14652))+((sj3*x14642))+((r21*x14641))+x14645+x14649);
evalcond[4]=(((r20*x14638*x14641))+(((-1.0)*r22*x14656))+x14643+(((-1.0)*x14654))+(((-1.0)*sj3*x14640*x14650))+((r21*x14639))+((cj3*x14642)));
evalcond[5]=(((gconst16*r01*x14652))+((cj0*x14643))+(((-1.0)*r00*x14639*x14650))+((r01*x14641))+((r00*x14646))+(((-1.0)*cj1*cj2*x14647))+((r02*x14653)));
evalcond[6]=(((r11*x14641))+((r12*x14653))+((sj0*x14643))+(((-1.0)*r10*x14639*x14650))+(((-1.0)*cj1*cj2*x14648))+((sj3*x14644))+((gconst16*r11*x14652)));
evalcond[7]=((((-1.0)*r01*x14646*x14650))+(((-1.0)*r02*x14656))+((r01*x14639))+((r00*x14638*x14641))+(((-1.0)*x14645*x14647))+((cj3*gconst16*r00))+(((-1.0)*x14647*x14649)));
evalcond[8]=(((r10*x14638*x14641))+(((-1.0)*r11*x14646*x14650))+(((-1.0)*r12*x14656))+((r11*x14639))+(((-1.0)*x14645*x14648))+(((-1.0)*x14648*x14649))+((cj3*x14644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14657=((1.0)*gconst17);
CheckValue<IkReal> x14658 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14657))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14658.valid){
continue;
}
CheckValue<IkReal> x14659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14657)))),-1);
if(!x14659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14658.value)+(((1.5707963267949)*(x14659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14660=IKsin(j4);
IkReal x14661=IKcos(j4);
IkReal x14662=(cj3*gconst17);
IkReal x14663=(gconst16*r21);
IkReal x14664=(gconst17*sj3);
IkReal x14665=(gconst16*r20);
IkReal x14666=(sj1*sj2);
IkReal x14667=(gconst16*r10);
IkReal x14668=(cj2*sj1);
IkReal x14669=(gconst16*sj3);
IkReal x14670=((1.0)*cj0);
IkReal x14671=((1.0)*sj0);
IkReal x14672=(cj1*sj2);
IkReal x14673=((1.0)*x14661);
IkReal x14674=(gconst16*x14660);
IkReal x14675=(cj3*x14661);
IkReal x14676=(cj3*x14660);
IkReal x14677=((1.0)*cj1*cj2);
IkReal x14678=((1.0)*gconst17*x14660);
IkReal x14679=((1.0)*sj3*x14660);
evalcond[0]=(((x14660*x14663))+(((-1.0)*r22*x14673))+(((-1.0)*r20*x14678)));
evalcond[1]=(cj0+(((-1.0)*r10*x14678))+(((-1.0)*r12*x14673))+((r11*x14674)));
evalcond[2]=((((-1.0)*x14671))+((r01*x14674))+(((-1.0)*r00*x14678))+(((-1.0)*r02*x14673)));
evalcond[3]=(((x14663*x14675))+(((-1.0)*r20*x14662*x14673))+((r21*x14664))+x14672+x14668+((r22*x14676))+((sj3*x14665)));
evalcond[4]=((((-1.0)*x14677))+(((-1.0)*sj3*x14663*x14673))+((r21*x14662))+(((-1.0)*r22*x14679))+((cj3*x14665))+((r20*x14661*x14664))+x14666);
evalcond[5]=((((-1.0)*r00*x14662*x14673))+((r02*x14676))+((gconst16*r01*x14675))+(((-1.0)*cj1*cj2*x14670))+((cj0*x14666))+((r00*x14669))+((r01*x14664)));
evalcond[6]=(((sj0*x14666))+(((-1.0)*cj1*cj2*x14671))+(((-1.0)*r10*x14662*x14673))+((r11*x14664))+((r12*x14676))+((sj3*x14667))+((gconst16*r11*x14675)));
evalcond[7]=((((-1.0)*r01*x14669*x14673))+(((-1.0)*x14668*x14670))+((r00*x14661*x14664))+(((-1.0)*x14670*x14672))+((r01*x14662))+(((-1.0)*r02*x14679))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14671*x14672))+(((-1.0)*x14668*x14671))+((r10*x14661*x14664))+((cj3*x14667))+(((-1.0)*r12*x14679))+((r11*x14662))+(((-1.0)*r11*x14669*x14673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14680=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14680;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14681=((1.0)*cj5);
IkReal x14682=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14681)));
j4eval[0]=x14682;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14681)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14683=cj5*cj5;
IkReal x14684=(cj3*r01);
IkReal x14685=(cj5*sj5);
IkReal x14686=((1.0)*cj3);
IkReal x14687=(((r20*x14684*x14685))+(((-1.0)*r02*r22*x14686))+((r21*x14683*x14684))+(((-1.0)*r21*x14684))+(((-1.0)*r00*r20*x14683*x14686))+((cj3*r00*r21*x14685)));
j4eval[0]=x14687;
j4eval[1]=IKsign(x14687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14688=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14688;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14689=((1.0)*cj5);
IkReal x14690=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14689)));
j4eval[0]=x14690;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14689)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14691=cj5*cj5;
IkReal x14692=r01*r01;
IkReal x14693=(r01*sj5);
IkReal x14694=(cj5*r00);
IkReal x14695=((((-1.0)*(r02*r02)))+(((2.0)*x14693*x14694))+((x14691*x14692))+(((-1.0)*x14691*(r00*r00)))+(((-1.0)*x14692)));
j4eval[0]=x14695;
j4eval[1]=IKsign(x14695);
j4eval[2]=((IKabs(r02))+(IKabs((x14694+(((-1.0)*x14693))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14696=cj5*cj5;
IkReal x14697=r01*r01;
IkReal x14698=(r01*sj5);
IkReal x14699=(cj5*r00);
CheckValue<IkReal> x14700=IKPowWithIntegerCheck(IKsign(((((2.0)*x14698*x14699))+(((-1.0)*(r02*r02)))+((x14696*x14697))+(((-1.0)*x14696*(r00*r00)))+(((-1.0)*x14697)))),-1);
if(!x14700.valid){
continue;
}
CheckValue<IkReal> x14701 = IKatan2WithCheck(IkReal((x14699+(((-1.0)*x14698)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14700.value)))+(x14701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14702=IKsin(j4);
IkReal x14703=IKcos(j4);
IkReal x14704=(cj5*r10);
IkReal x14705=(r01*sj5);
IkReal x14706=((1.0)*cj2);
IkReal x14707=(cj5*r00);
IkReal x14708=(cj5*r20);
IkReal x14709=((1.0)*x14703);
IkReal x14710=((1.0)*x14702);
IkReal x14711=(sj5*x14702);
evalcond[0]=(((r21*x14711))+(((-1.0)*x14708*x14710))+(((-1.0)*r22*x14709)));
evalcond[1]=(((r11*x14711))+(((-1.0)*r12*x14709))+(((-1.0)*x14704*x14710)));
evalcond[2]=((((-1.0)*x14705*x14709))+(((-1.0)*r02*x14710))+((x14703*x14707)));
evalcond[3]=((-1.0)+(((-1.0)*x14707*x14710))+((x14702*x14705))+(((-1.0)*r02*x14709)));
evalcond[4]=((((-1.0)*r22*x14710))+((sj1*sj2))+(((-1.0)*cj1*x14706))+(((-1.0)*r21*sj5*x14709))+((x14703*x14708)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14706))+(((-1.0)*r11*sj5*x14709))+((x14703*x14704))+(((-1.0)*r12*x14710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14712=((1.0)*cj5);
CheckValue<IkReal> x14713 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14713.valid){
continue;
}
CheckValue<IkReal> x14714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14712)))),-1);
if(!x14714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14713.value)+(((1.5707963267949)*(x14714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14715=IKsin(j4);
IkReal x14716=IKcos(j4);
IkReal x14717=(cj5*r10);
IkReal x14718=(r01*sj5);
IkReal x14719=((1.0)*cj2);
IkReal x14720=(cj5*r00);
IkReal x14721=(cj5*r20);
IkReal x14722=((1.0)*x14716);
IkReal x14723=((1.0)*x14715);
IkReal x14724=(sj5*x14715);
evalcond[0]=(((r21*x14724))+(((-1.0)*x14721*x14723))+(((-1.0)*r22*x14722)));
evalcond[1]=((((-1.0)*r12*x14722))+(((-1.0)*x14717*x14723))+((r11*x14724)));
evalcond[2]=((((-1.0)*x14718*x14722))+(((-1.0)*r02*x14723))+((x14716*x14720)));
evalcond[3]=((-1.0)+(((-1.0)*x14720*x14723))+(((-1.0)*r02*x14722))+((x14715*x14718)));
evalcond[4]=((((-1.0)*r21*sj5*x14722))+((sj1*sj2))+(((-1.0)*r22*x14723))+((x14716*x14721))+(((-1.0)*cj1*x14719)));
evalcond[5]=((((-1.0)*sj1*x14719))+(((-1.0)*r12*x14723))+((x14716*x14717))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14725=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14725.valid){
continue;
}
CheckValue<IkReal> x14726 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14725.value)))+(x14726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14727=IKsin(j4);
IkReal x14728=IKcos(j4);
IkReal x14729=(cj5*r10);
IkReal x14730=(r01*sj5);
IkReal x14731=((1.0)*cj2);
IkReal x14732=(cj5*r00);
IkReal x14733=(cj5*r20);
IkReal x14734=((1.0)*x14728);
IkReal x14735=((1.0)*x14727);
IkReal x14736=(sj5*x14727);
evalcond[0]=((((-1.0)*r22*x14734))+(((-1.0)*x14733*x14735))+((r21*x14736)));
evalcond[1]=((((-1.0)*x14729*x14735))+(((-1.0)*r12*x14734))+((r11*x14736)));
evalcond[2]=(((x14728*x14732))+(((-1.0)*r02*x14735))+(((-1.0)*x14730*x14734)));
evalcond[3]=((-1.0)+((x14727*x14730))+(((-1.0)*x14732*x14735))+(((-1.0)*r02*x14734)));
evalcond[4]=((((-1.0)*r21*sj5*x14734))+((x14728*x14733))+((sj1*sj2))+(((-1.0)*cj1*x14731))+(((-1.0)*r22*x14735)));
evalcond[5]=(((x14728*x14729))+(((-1.0)*sj1*x14731))+(((-1.0)*r12*x14735))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14737=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14737;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14738=((1.0)*cj5);
IkReal x14739=((((-1.0)*r11*x14738))+(((-1.0)*r10*sj5)));
j4eval[0]=x14739;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14738))+((r21*sj5))))));
j4eval[2]=IKsign(x14739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14740=cj5*cj5;
IkReal x14741=r01*r01;
IkReal x14742=(cj5*r00);
IkReal x14743=(r01*sj5);
IkReal x14744=((((-2.0)*x14742*x14743))+(((-1.0)*x14740*x14741))+x14741+(r02*r02)+((x14740*(r00*r00))));
j4eval[0]=x14744;
j4eval[1]=IKsign(x14744);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14742))+x14743))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14745=cj5*cj5;
IkReal x14746=r01*r01;
IkReal x14747=(r01*sj5);
IkReal x14748=(cj5*r00);
CheckValue<IkReal> x14749 = IKatan2WithCheck(IkReal(((((-1.0)*x14748))+x14747)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14749.valid){
continue;
}
CheckValue<IkReal> x14750=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14747*x14748))+(((-1.0)*x14745*x14746))+((x14745*(r00*r00)))+x14746+(r02*r02))),-1);
if(!x14750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14749.value)+(((1.5707963267949)*(x14750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14751=IKcos(j4);
IkReal x14752=IKsin(j4);
IkReal x14753=(cj5*r00);
IkReal x14754=(cj5*r10);
IkReal x14755=(r21*sj5);
IkReal x14756=((1.0)*cj2);
IkReal x14757=(cj5*r20);
IkReal x14758=((1.0)*x14751);
IkReal x14759=((1.0)*x14752);
IkReal x14760=(sj5*x14752);
IkReal x14761=(sj5*x14751);
evalcond[0]=((((-1.0)*x14753*x14758))+((r01*x14761))+((r02*x14752)));
evalcond[1]=((((-1.0)*x14757*x14759))+(((-1.0)*r22*x14758))+((x14752*x14755)));
evalcond[2]=((((-1.0)*r12*x14758))+((r11*x14760))+(((-1.0)*x14754*x14759)));
evalcond[3]=((-1.0)+(((-1.0)*x14753*x14759))+((r01*x14760))+(((-1.0)*r02*x14758)));
evalcond[4]=((((-1.0)*x14757*x14758))+(((-1.0)*cj1*x14756))+((sj1*sj2))+((r22*x14752))+((x14751*x14755)));
evalcond[5]=((((-1.0)*sj1*x14756))+(((-1.0)*cj1*sj2))+((r11*x14761))+(((-1.0)*x14754*x14758))+((r12*x14752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14762=((1.0)*cj5);
CheckValue<IkReal> x14763 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14763.valid){
continue;
}
CheckValue<IkReal> x14764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14762)))),-1);
if(!x14764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14763.value)+(((1.5707963267949)*(x14764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14765=IKcos(j4);
IkReal x14766=IKsin(j4);
IkReal x14767=(cj5*r00);
IkReal x14768=(cj5*r10);
IkReal x14769=(r21*sj5);
IkReal x14770=((1.0)*cj2);
IkReal x14771=(cj5*r20);
IkReal x14772=((1.0)*x14765);
IkReal x14773=((1.0)*x14766);
IkReal x14774=(sj5*x14766);
IkReal x14775=(sj5*x14765);
evalcond[0]=(((r01*x14775))+(((-1.0)*x14767*x14772))+((r02*x14766)));
evalcond[1]=(((x14766*x14769))+(((-1.0)*x14771*x14773))+(((-1.0)*r22*x14772)));
evalcond[2]=((((-1.0)*x14768*x14773))+((r11*x14774))+(((-1.0)*r12*x14772)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14772))+((r01*x14774))+(((-1.0)*x14767*x14773)));
evalcond[4]=((((-1.0)*x14771*x14772))+((sj1*sj2))+((x14765*x14769))+(((-1.0)*cj1*x14770))+((r22*x14766)));
evalcond[5]=((((-1.0)*x14768*x14772))+((r11*x14775))+(((-1.0)*cj1*sj2))+((r12*x14766))+(((-1.0)*sj1*x14770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14776=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14776.valid){
continue;
}
CheckValue<IkReal> x14777 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14776.value)))+(x14777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14778=IKcos(j4);
IkReal x14779=IKsin(j4);
IkReal x14780=(cj5*r00);
IkReal x14781=(cj5*r10);
IkReal x14782=(r21*sj5);
IkReal x14783=((1.0)*cj2);
IkReal x14784=(cj5*r20);
IkReal x14785=((1.0)*x14778);
IkReal x14786=((1.0)*x14779);
IkReal x14787=(sj5*x14779);
IkReal x14788=(sj5*x14778);
evalcond[0]=(((r01*x14788))+(((-1.0)*x14780*x14785))+((r02*x14779)));
evalcond[1]=(((x14779*x14782))+(((-1.0)*x14784*x14786))+(((-1.0)*r22*x14785)));
evalcond[2]=((((-1.0)*x14781*x14786))+(((-1.0)*r12*x14785))+((r11*x14787)));
evalcond[3]=((-1.0)+((r01*x14787))+(((-1.0)*x14780*x14786))+(((-1.0)*r02*x14785)));
evalcond[4]=(((r22*x14779))+((x14778*x14782))+((sj1*sj2))+(((-1.0)*x14784*x14785))+(((-1.0)*cj1*x14783)));
evalcond[5]=(((r12*x14779))+(((-1.0)*sj1*x14783))+(((-1.0)*cj1*sj2))+(((-1.0)*x14781*x14785))+((r11*x14788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14790 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14790)==0){
continue;
}
IkReal x14789=pow(x14790,-0.5);
CheckValue<IkReal> x14791 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14791.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14791.value));
IkReal gconst49=((-1.0)*r21*x14789);
IkReal gconst50=(r20*x14789);
CheckValue<IkReal> x14792 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14795 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14795.valid){
continue;
}
IkReal x14793=((-1.0)*(x14795.value));
IkReal x14794=x14789;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14793;
IkReal gconst48=x14793;
IkReal gconst49=((-1.0)*r21*x14794);
IkReal gconst50=(r20*x14794);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14798 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14798.valid){
continue;
}
IkReal x14796=((-1.0)*(x14798.value));
IkReal x14797=x14789;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14796;
IkReal gconst48=x14796;
IkReal gconst49=((-1.0)*r21*x14797);
IkReal gconst50=(r20*x14797);
CheckValue<IkReal> x14806=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14806.valid){
continue;
}
IkReal x14799=x14806.value;
IkReal x14800=(sj3*x14799);
IkReal x14801=(r11*x14800);
IkReal x14802=(r00*x14800);
IkReal x14803=(r01*x14800);
IkReal x14804=(r10*x14800);
IkReal x14805=(r20*r21*x14800);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x14803))+((r01*x14801*(r21*r21)))+((r10*x14802*(r20*r20)))+((r00*r20*r21*x14801))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14807=gconst49*gconst49;
IkReal x14808=gconst50*gconst50;
IkReal x14809=((1.0)*cj3);
IkReal x14810=(gconst50*r01);
IkReal x14811=(gconst49*r10);
IkReal x14812=(r12*sj3);
IkReal x14813=(gconst49*r00);
IkReal x14814=(r00*sj3);
IkReal x14815=(r11*x14807);
IkReal x14816=(r10*x14808);
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal((((x14810*x14812))+((x14812*x14813)))),IkReal((((gconst49*r11*sj3*x14810))+(((-1.0)*r01*sj3*x14816))+(((-1.0)*gconst50*x14811*x14814))+((x14814*x14815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
CheckValue<IkReal> x14818=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14809*x14815))+(((-1.0)*r02*r12*x14809))+((cj3*gconst50*r11*x14813))+((cj3*x14810*x14811))+(((-1.0)*r00*x14809*x14816)))),-1);
if(!x14818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14817.value)+(((1.5707963267949)*(x14818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14819=IKsin(j4);
IkReal x14820=IKcos(j4);
IkReal x14821=(sj1*sj2);
IkReal x14822=(gconst50*r20);
IkReal x14823=(gconst50*sj3);
IkReal x14824=(cj3*r01);
IkReal x14825=(gconst50*r10);
IkReal x14826=(gconst49*sj3);
IkReal x14827=((1.0)*cj2);
IkReal x14828=(cj1*sj2);
IkReal x14829=(cj3*r11);
IkReal x14830=(gconst50*r00);
IkReal x14831=(cj3*r21);
IkReal x14832=(cj3*gconst49);
IkReal x14833=(cj1*x14827);
IkReal x14834=((1.0)*x14820);
IkReal x14835=((1.0)*x14819);
IkReal x14836=(gconst49*x14819);
IkReal x14837=(gconst49*x14820);
IkReal x14838=(cj3*x14819);
evalcond[0]=(((r21*x14836))+(((-1.0)*x14822*x14835))+(((-1.0)*r22*x14834)));
evalcond[1]=((((-1.0)*r12*x14834))+((r11*x14836))+(((-1.0)*x14825*x14835)));
evalcond[2]=((-1.0)+(((-1.0)*x14830*x14835))+(((-1.0)*r02*x14834))+((r01*x14836)));
evalcond[3]=(((r01*x14823))+((r00*x14826))+((r02*x14838))+(((-1.0)*cj3*x14830*x14834))+((x14824*x14837)));
evalcond[4]=(((r00*x14820*x14823))+(((-1.0)*r02*sj3*x14835))+((gconst50*x14824))+(((-1.0)*r01*x14826*x14834))+((r00*x14832)));
evalcond[5]=(((cj2*sj1))+((r21*x14823))+((r22*x14838))+x14828+((x14831*x14837))+(((-1.0)*cj3*x14822*x14834))+((r20*x14826)));
evalcond[6]=(((r12*x14838))+((r10*x14826))+x14821+(((-1.0)*x14833))+((x14829*x14837))+(((-1.0)*cj3*x14825*x14834))+((r11*x14823)));
evalcond[7]=((((-1.0)*r21*x14826*x14834))+(((-1.0)*r22*sj3*x14835))+((gconst50*x14831))+x14821+((sj3*x14820*x14822))+((r20*x14832))+(((-1.0)*x14833)));
evalcond[8]=((((-1.0)*sj1*x14827))+((r10*x14820*x14823))+(((-1.0)*r11*x14826*x14834))+((r10*x14832))+(((-1.0)*x14828))+(((-1.0)*r12*sj3*x14835))+((gconst50*x14829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14839=gconst49*gconst49;
IkReal x14840=gconst50*gconst50;
IkReal x14841=(cj3*r12);
IkReal x14842=(gconst49*r00);
IkReal x14843=(r01*r11);
IkReal x14844=(r00*r11);
IkReal x14845=(cj3*gconst50);
IkReal x14846=((1.0)*r01*r10);
IkReal x14847=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14848=IKPowWithIntegerCheck(IKsign((((sj3*x14839*x14843))+(((-1.0)*gconst50*r11*sj3*x14842))+((r02*r12*sj3))+(((-1.0)*x14846*x14847))+((r00*r10*sj3*x14840)))),-1);
if(!x14848.valid){
continue;
}
CheckValue<IkReal> x14849 = IKatan2WithCheck(IkReal((((x14841*x14842))+((gconst50*r01*x14841)))),IkReal(((((-1.0)*r10*x14842*x14845))+(((-1.0)*cj3*x14840*x14846))+((cj3*x14839*x14844))+((gconst49*x14843*x14845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14848.value)))+(x14849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14850=IKsin(j4);
IkReal x14851=IKcos(j4);
IkReal x14852=(sj1*sj2);
IkReal x14853=(gconst50*r20);
IkReal x14854=(gconst50*sj3);
IkReal x14855=(cj3*r01);
IkReal x14856=(gconst50*r10);
IkReal x14857=(gconst49*sj3);
IkReal x14858=((1.0)*cj2);
IkReal x14859=(cj1*sj2);
IkReal x14860=(cj3*r11);
IkReal x14861=(gconst50*r00);
IkReal x14862=(cj3*r21);
IkReal x14863=(cj3*gconst49);
IkReal x14864=(cj1*x14858);
IkReal x14865=((1.0)*x14851);
IkReal x14866=((1.0)*x14850);
IkReal x14867=(gconst49*x14850);
IkReal x14868=(gconst49*x14851);
IkReal x14869=(cj3*x14850);
evalcond[0]=(((r21*x14867))+(((-1.0)*x14853*x14866))+(((-1.0)*r22*x14865)));
evalcond[1]=((((-1.0)*x14856*x14866))+((r11*x14867))+(((-1.0)*r12*x14865)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14865))+(((-1.0)*x14861*x14866))+((r01*x14867)));
evalcond[3]=(((x14855*x14868))+((r02*x14869))+(((-1.0)*cj3*x14861*x14865))+((r00*x14857))+((r01*x14854)));
evalcond[4]=((((-1.0)*r02*sj3*x14866))+(((-1.0)*r01*x14857*x14865))+((r00*x14851*x14854))+((gconst50*x14855))+((r00*x14863)));
evalcond[5]=(((r21*x14854))+((cj2*sj1))+(((-1.0)*cj3*x14853*x14865))+((r20*x14857))+x14859+((r22*x14869))+((x14862*x14868)));
evalcond[6]=(x14852+((r11*x14854))+((r12*x14869))+((x14860*x14868))+(((-1.0)*cj3*x14856*x14865))+((r10*x14857))+(((-1.0)*x14864)));
evalcond[7]=(((r20*x14863))+x14852+(((-1.0)*r21*x14857*x14865))+((gconst50*x14862))+(((-1.0)*x14864))+((sj3*x14851*x14853))+(((-1.0)*r22*sj3*x14866)));
evalcond[8]=((((-1.0)*sj1*x14858))+((gconst50*x14860))+((r10*x14863))+(((-1.0)*r12*sj3*x14866))+((r10*x14851*x14854))+(((-1.0)*r11*x14857*x14865))+(((-1.0)*x14859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14870=((1.0)*gconst50);
CheckValue<IkReal> x14871 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14871.valid){
continue;
}
CheckValue<IkReal> x14872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14870)))),-1);
if(!x14872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14871.value)+(((1.5707963267949)*(x14872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14873=IKsin(j4);
IkReal x14874=IKcos(j4);
IkReal x14875=(sj1*sj2);
IkReal x14876=(gconst50*r20);
IkReal x14877=(gconst50*sj3);
IkReal x14878=(cj3*r01);
IkReal x14879=(gconst50*r10);
IkReal x14880=(gconst49*sj3);
IkReal x14881=((1.0)*cj2);
IkReal x14882=(cj1*sj2);
IkReal x14883=(cj3*r11);
IkReal x14884=(gconst50*r00);
IkReal x14885=(cj3*r21);
IkReal x14886=(cj3*gconst49);
IkReal x14887=(cj1*x14881);
IkReal x14888=((1.0)*x14874);
IkReal x14889=((1.0)*x14873);
IkReal x14890=(gconst49*x14873);
IkReal x14891=(gconst49*x14874);
IkReal x14892=(cj3*x14873);
evalcond[0]=((((-1.0)*r22*x14888))+((r21*x14890))+(((-1.0)*x14876*x14889)));
evalcond[1]=((((-1.0)*x14879*x14889))+((r11*x14890))+(((-1.0)*r12*x14888)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14888))+((r01*x14890))+(((-1.0)*x14884*x14889)));
evalcond[3]=(((r02*x14892))+((x14878*x14891))+((r00*x14880))+((r01*x14877))+(((-1.0)*cj3*x14884*x14888)));
evalcond[4]=(((r00*x14874*x14877))+((r00*x14886))+((gconst50*x14878))+(((-1.0)*r02*sj3*x14889))+(((-1.0)*r01*x14880*x14888)));
evalcond[5]=(((cj2*sj1))+((x14885*x14891))+(((-1.0)*cj3*x14876*x14888))+x14882+((r22*x14892))+((r21*x14877))+((r20*x14880)));
evalcond[6]=(((r11*x14877))+((r12*x14892))+((r10*x14880))+x14875+((x14883*x14891))+(((-1.0)*cj3*x14879*x14888))+(((-1.0)*x14887)));
evalcond[7]=((((-1.0)*r22*sj3*x14889))+x14875+((gconst50*x14885))+(((-1.0)*x14887))+((r20*x14886))+(((-1.0)*r21*x14880*x14888))+((sj3*x14874*x14876)));
evalcond[8]=(((r10*x14886))+(((-1.0)*r12*sj3*x14889))+(((-1.0)*r11*x14880*x14888))+((gconst50*x14883))+((r10*x14874*x14877))+(((-1.0)*x14882))+(((-1.0)*sj1*x14881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14894 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14894)==0){
continue;
}
IkReal x14893=pow(x14894,-0.5);
CheckValue<IkReal> x14895 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14895.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14895.value))));
IkReal gconst52=((1.0)*r21*x14893);
IkReal gconst53=((-1.0)*r20*x14893);
CheckValue<IkReal> x14896 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14896.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14899 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14899.valid){
continue;
}
IkReal x14897=((1.0)*(x14899.value));
IkReal x14898=x14893;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14897)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14897)));
IkReal gconst52=((1.0)*r21*x14898);
IkReal gconst53=((-1.0)*r20*x14898);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14902 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14902.valid){
continue;
}
IkReal x14900=((1.0)*(x14902.value));
IkReal x14901=x14893;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14900)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14900)));
IkReal gconst52=((1.0)*r21*x14901);
IkReal gconst53=((-1.0)*r20*x14901);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14905.valid){
continue;
}
IkReal x14903=((1.0)*(x14905.value));
IkReal x14904=x14893;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14903)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14903)));
IkReal gconst52=((1.0)*r21*x14904);
IkReal gconst53=((-1.0)*r20*x14904);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14906=gconst52*gconst52;
IkReal x14907=gconst53*gconst53;
IkReal x14908=(gconst53*r01);
IkReal x14909=(cj3*r20);
IkReal x14910=(r22*sj3);
IkReal x14911=((1.0)*cj3);
IkReal x14912=(gconst52*sj3);
IkReal x14913=((1.0)*r00);
IkReal x14914=(gconst52*r00);
IkReal x14915=(r21*x14906);
CheckValue<IkReal> x14916 = IKatan2WithCheck(IkReal((((x14910*x14914))+((x14908*x14910)))),IkReal((((r00*sj3*x14915))+(((-1.0)*gconst53*r20*x14912*x14913))+(((-1.0)*r01*r20*sj3*x14907))+((r21*x14908*x14912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14916.valid){
continue;
}
CheckValue<IkReal> x14917=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14907*x14909*x14913))+((gconst52*x14908*x14909))+((cj3*gconst53*r21*x14914))+(((-1.0)*r01*x14911*x14915))+(((-1.0)*r02*r22*x14911)))),-1);
if(!x14917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14916.value)+(((1.5707963267949)*(x14917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14918=IKsin(j4);
IkReal x14919=IKcos(j4);
IkReal x14920=(sj1*sj2);
IkReal x14921=((1.0)*cj1);
IkReal x14922=(cj3*gconst52);
IkReal x14923=(gconst53*sj3);
IkReal x14924=(cj3*gconst53);
IkReal x14925=(cj2*sj1);
IkReal x14926=(gconst52*sj3);
IkReal x14927=(cj2*x14921);
IkReal x14928=((1.0)*x14919);
IkReal x14929=((1.0)*x14918);
IkReal x14930=(gconst52*x14918);
IkReal x14931=(cj3*x14918);
evalcond[0]=((((-1.0)*r22*x14928))+((r21*x14930))+(((-1.0)*gconst53*r20*x14929)));
evalcond[1]=((((-1.0)*r12*x14928))+((r11*x14930))+(((-1.0)*gconst53*r10*x14929)));
evalcond[2]=((-1.0)+((r01*x14930))+(((-1.0)*gconst53*r00*x14929))+(((-1.0)*r02*x14928)));
evalcond[3]=((((-1.0)*r00*x14924*x14928))+((r01*x14919*x14922))+((r01*x14923))+((r00*x14926))+((r02*x14931)));
evalcond[4]=((((-1.0)*r02*sj3*x14929))+((r01*x14924))+(((-1.0)*r01*x14926*x14928))+((r00*x14922))+((r00*x14919*x14923)));
evalcond[5]=(x14925+((cj1*sj2))+((r21*x14923))+(((-1.0)*r20*x14924*x14928))+((r22*x14931))+((r21*x14919*x14922))+((r20*x14926)));
evalcond[6]=(((r11*x14919*x14922))+x14920+((r10*x14926))+(((-1.0)*x14927))+(((-1.0)*r10*x14924*x14928))+((r11*x14923))+((r12*x14931)));
evalcond[7]=((((-1.0)*r21*x14926*x14928))+x14920+(((-1.0)*r22*sj3*x14929))+((r20*x14919*x14923))+((r21*x14924))+(((-1.0)*x14927))+((r20*x14922)));
evalcond[8]=((((-1.0)*x14925))+(((-1.0)*r12*sj3*x14929))+((r10*x14919*x14923))+((r10*x14922))+(((-1.0)*sj2*x14921))+((r11*x14924))+(((-1.0)*r11*x14926*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14932=((1.0)*gconst53);
CheckValue<IkReal> x14933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14932))+(((-1.0)*gconst52*r10)))),-1);
if(!x14933.valid){
continue;
}
CheckValue<IkReal> x14934 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14933.value)))+(x14934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14935=IKsin(j4);
IkReal x14936=IKcos(j4);
IkReal x14937=(sj1*sj2);
IkReal x14938=((1.0)*cj1);
IkReal x14939=(cj3*gconst52);
IkReal x14940=(gconst53*sj3);
IkReal x14941=(cj3*gconst53);
IkReal x14942=(cj2*sj1);
IkReal x14943=(gconst52*sj3);
IkReal x14944=(cj2*x14938);
IkReal x14945=((1.0)*x14936);
IkReal x14946=((1.0)*x14935);
IkReal x14947=(gconst52*x14935);
IkReal x14948=(cj3*x14935);
evalcond[0]=((((-1.0)*gconst53*r20*x14946))+((r21*x14947))+(((-1.0)*r22*x14945)));
evalcond[1]=((((-1.0)*r12*x14945))+(((-1.0)*gconst53*r10*x14946))+((r11*x14947)));
evalcond[2]=((-1.0)+((r01*x14947))+(((-1.0)*r02*x14945))+(((-1.0)*gconst53*r00*x14946)));
evalcond[3]=((((-1.0)*r00*x14941*x14945))+((r00*x14943))+((r01*x14940))+((r02*x14948))+((r01*x14936*x14939)));
evalcond[4]=((((-1.0)*r02*sj3*x14946))+(((-1.0)*r01*x14943*x14945))+((r01*x14941))+((r00*x14939))+((r00*x14936*x14940)));
evalcond[5]=(x14942+((r22*x14948))+((cj1*sj2))+(((-1.0)*r20*x14941*x14945))+((r21*x14936*x14939))+((r21*x14940))+((r20*x14943)));
evalcond[6]=(((r12*x14948))+x14937+((r10*x14943))+((r11*x14936*x14939))+(((-1.0)*r10*x14941*x14945))+(((-1.0)*x14944))+((r11*x14940)));
evalcond[7]=((((-1.0)*r21*x14943*x14945))+x14937+((r20*x14936*x14940))+(((-1.0)*x14944))+(((-1.0)*r22*sj3*x14946))+((r21*x14941))+((r20*x14939)));
evalcond[8]=((((-1.0)*r12*sj3*x14946))+((r10*x14936*x14940))+(((-1.0)*r11*x14943*x14945))+((r10*x14939))+(((-1.0)*x14942))+(((-1.0)*sj2*x14938))+((r11*x14941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14949 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14949.valid){
continue;
}
CheckValue<IkReal> x14950=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14949.value)+(((1.5707963267949)*(x14950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14951=IKsin(j4);
IkReal x14952=IKcos(j4);
IkReal x14953=(sj1*sj2);
IkReal x14954=((1.0)*cj1);
IkReal x14955=(cj3*gconst52);
IkReal x14956=(gconst53*sj3);
IkReal x14957=(cj3*gconst53);
IkReal x14958=(cj2*sj1);
IkReal x14959=(gconst52*sj3);
IkReal x14960=(cj2*x14954);
IkReal x14961=((1.0)*x14952);
IkReal x14962=((1.0)*x14951);
IkReal x14963=(gconst52*x14951);
IkReal x14964=(cj3*x14951);
evalcond[0]=((((-1.0)*r22*x14961))+((r21*x14963))+(((-1.0)*gconst53*r20*x14962)));
evalcond[1]=((((-1.0)*r12*x14961))+((r11*x14963))+(((-1.0)*gconst53*r10*x14962)));
evalcond[2]=((-1.0)+((r01*x14963))+(((-1.0)*r02*x14961))+(((-1.0)*gconst53*r00*x14962)));
evalcond[3]=(((r01*x14956))+((r00*x14959))+((r02*x14964))+(((-1.0)*r00*x14957*x14961))+((r01*x14952*x14955)));
evalcond[4]=(((r00*x14952*x14956))+((r01*x14957))+(((-1.0)*r02*sj3*x14962))+((r00*x14955))+(((-1.0)*r01*x14959*x14961)));
evalcond[5]=(((r22*x14964))+x14958+((cj1*sj2))+((r21*x14952*x14955))+(((-1.0)*r20*x14957*x14961))+((r21*x14956))+((r20*x14959)));
evalcond[6]=(x14953+((r12*x14964))+(((-1.0)*r10*x14957*x14961))+((r10*x14959))+(((-1.0)*x14960))+((r11*x14952*x14955))+((r11*x14956)));
evalcond[7]=(x14953+(((-1.0)*r22*sj3*x14962))+(((-1.0)*x14960))+((r20*x14952*x14956))+(((-1.0)*r21*x14959*x14961))+((r21*x14957))+((r20*x14955)));
evalcond[8]=((((-1.0)*sj2*x14954))+((r10*x14955))+(((-1.0)*r11*x14959*x14961))+((r10*x14952*x14956))+(((-1.0)*x14958))+(((-1.0)*r12*sj3*x14962))+((r11*x14957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14965=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14965);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14965);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14966=(r01*sj5);
IkReal x14967=((1.0)*cj5*r00);
j4eval[0]=(x14966+(((-1.0)*x14967)));
j4eval[1]=(((cj3*x14966))+(((-1.0)*cj3*x14967)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14968=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14968);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14968);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14969=(cj5*r00);
IkReal x14970=(r01*sj5);
j4eval[0]=((((-1.0)*x14969))+x14970);
j4eval[1]=((((-1.0)*sj3*x14970))+((sj3*x14969)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14971=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14971);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14971);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14972=((1.0)*r00);
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(cj3,-1);
if(!x14973.valid){
continue;
}
CheckValue<IkReal> x14974=IKPowWithIntegerCheck(r22,-1);
if(!x14974.valid){
continue;
}
CheckValue<IkReal> x14975=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14972))),-1);
if(!x14975.valid){
continue;
}
if( IKabs(((x14973.value)*(x14974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14975.value)*(((((-1.0)*sj3*sj5*x14972))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14973.value)*(x14974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14975.value)*(((((-1.0)*sj3*sj5*x14972))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14973.value)*(x14974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14975.value)*(((((-1.0)*sj3*sj5*x14972))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14976=IKsin(j4);
IkReal x14977=IKcos(j4);
IkReal x14978=(sj1*sj2);
IkReal x14979=(cj5*sj3);
IkReal x14980=(r11*sj5);
IkReal x14981=(cj3*cj5);
IkReal x14982=((1.0)*cj1);
IkReal x14983=(cj3*sj5);
IkReal x14984=(sj3*sj5);
IkReal x14985=(cj2*sj1);
IkReal x14986=(r01*sj5);
IkReal x14987=((1.0)*sj3);
IkReal x14988=(cj2*x14982);
IkReal x14989=(r10*x14977);
IkReal x14990=(r22*x14976);
IkReal x14991=(cj3*x14977);
IkReal x14992=((1.0)*cj5*x14976);
evalcond[0]=((-1.0)*r22*x14977);
evalcond[1]=(x14985+((cj1*sj2))+((cj3*x14990)));
evalcond[2]=((((-1.0)*r10*x14992))+((x14976*x14980)));
evalcond[3]=((-1.0)+((x14976*x14986))+(((-1.0)*r00*x14992)));
evalcond[4]=(x14978+(((-1.0)*x14988))+(((-1.0)*x14987*x14990)));
evalcond[5]=((((-1.0)*r00*x14977*x14981))+((r01*x14977*x14983))+((r00*x14984))+((r01*x14979)));
evalcond[6]=(((r00*x14977*x14979))+((r00*x14983))+((r01*x14981))+(((-1.0)*r01*x14977*x14984)));
evalcond[7]=(x14978+((r10*x14984))+((r11*x14979))+(((-1.0)*x14981*x14989))+((x14980*x14991))+(((-1.0)*x14988)));
evalcond[8]=((((-1.0)*sj2*x14982))+((r10*x14983))+((r11*x14981))+((x14979*x14989))+(((-1.0)*x14977*x14980*x14987))+(((-1.0)*x14985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14993=((1.0)*cj3);
IkReal x14994=(cj5*r00);
IkReal x14995=(r01*sj5);
CheckValue<IkReal> x14996=IKPowWithIntegerCheck((x14995+(((-1.0)*x14994))),-1);
if(!x14996.valid){
continue;
}
CheckValue<IkReal> x14997=IKPowWithIntegerCheck((((sj3*x14994))+(((-1.0)*sj3*x14995))),-1);
if(!x14997.valid){
continue;
}
if( IKabs(x14996.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14997.value)*(((((-1.0)*cj5*r01*x14993))+(((-1.0)*r00*sj5*x14993)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14996.value)+IKsqr(((x14997.value)*(((((-1.0)*cj5*r01*x14993))+(((-1.0)*r00*sj5*x14993))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14996.value, ((x14997.value)*(((((-1.0)*cj5*r01*x14993))+(((-1.0)*r00*sj5*x14993))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14998=IKsin(j4);
IkReal x14999=IKcos(j4);
IkReal x15000=(sj1*sj2);
IkReal x15001=(cj5*sj3);
IkReal x15002=(r11*sj5);
IkReal x15003=(cj3*cj5);
IkReal x15004=((1.0)*cj1);
IkReal x15005=(cj3*sj5);
IkReal x15006=(sj3*sj5);
IkReal x15007=(cj2*sj1);
IkReal x15008=(r01*sj5);
IkReal x15009=((1.0)*sj3);
IkReal x15010=(cj2*x15004);
IkReal x15011=(r10*x14999);
IkReal x15012=(r22*x14998);
IkReal x15013=(cj3*x14999);
IkReal x15014=((1.0)*cj5*x14998);
evalcond[0]=((-1.0)*r22*x14999);
evalcond[1]=(((cj3*x15012))+((cj1*sj2))+x15007);
evalcond[2]=((((-1.0)*r10*x15014))+((x14998*x15002)));
evalcond[3]=((-1.0)+((x14998*x15008))+(((-1.0)*r00*x15014)));
evalcond[4]=((((-1.0)*x15010))+x15000+(((-1.0)*x15009*x15012)));
evalcond[5]=(((r01*x15001))+((r00*x15006))+(((-1.0)*r00*x14999*x15003))+((r01*x14999*x15005)));
evalcond[6]=(((r01*x15003))+((r00*x15005))+((r00*x14999*x15001))+(((-1.0)*r01*x14999*x15006)));
evalcond[7]=((((-1.0)*x15010))+x15000+((r10*x15006))+(((-1.0)*x15003*x15011))+((r11*x15001))+((x15002*x15013)));
evalcond[8]=((((-1.0)*sj2*x15004))+(((-1.0)*x15007))+((r10*x15005))+((r11*x15003))+((x15001*x15011))+(((-1.0)*x14999*x15002*x15009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15015=((1.0)*sj3);
IkReal x15016=(r01*sj5);
IkReal x15017=((1.0)*cj5*r00);
CheckValue<IkReal> x15018=IKPowWithIntegerCheck(((((-1.0)*x15017))+x15016),-1);
if(!x15018.valid){
continue;
}
CheckValue<IkReal> x15019=IKPowWithIntegerCheck((((cj3*x15016))+(((-1.0)*cj3*x15017))),-1);
if(!x15019.valid){
continue;
}
if( IKabs(x15018.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15019.value)*(((((-1.0)*r00*sj5*x15015))+(((-1.0)*cj5*r01*x15015)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15018.value)+IKsqr(((x15019.value)*(((((-1.0)*r00*sj5*x15015))+(((-1.0)*cj5*r01*x15015))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15018.value, ((x15019.value)*(((((-1.0)*r00*sj5*x15015))+(((-1.0)*cj5*r01*x15015))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15020=IKsin(j4);
IkReal x15021=IKcos(j4);
IkReal x15022=(sj1*sj2);
IkReal x15023=(cj5*sj3);
IkReal x15024=(r11*sj5);
IkReal x15025=(cj3*cj5);
IkReal x15026=((1.0)*cj1);
IkReal x15027=(cj3*sj5);
IkReal x15028=(sj3*sj5);
IkReal x15029=(cj2*sj1);
IkReal x15030=(r01*sj5);
IkReal x15031=((1.0)*sj3);
IkReal x15032=(cj2*x15026);
IkReal x15033=(r10*x15021);
IkReal x15034=(r22*x15020);
IkReal x15035=(cj3*x15021);
IkReal x15036=((1.0)*cj5*x15020);
evalcond[0]=((-1.0)*r22*x15021);
evalcond[1]=(((cj1*sj2))+x15029+((cj3*x15034)));
evalcond[2]=(((x15020*x15024))+(((-1.0)*r10*x15036)));
evalcond[3]=((-1.0)+((x15020*x15030))+(((-1.0)*r00*x15036)));
evalcond[4]=((((-1.0)*x15032))+(((-1.0)*x15031*x15034))+x15022);
evalcond[5]=(((r00*x15028))+((r01*x15021*x15027))+(((-1.0)*r00*x15021*x15025))+((r01*x15023)));
evalcond[6]=(((r00*x15027))+((r00*x15021*x15023))+((r01*x15025))+(((-1.0)*r01*x15021*x15028)));
evalcond[7]=((((-1.0)*x15032))+((x15024*x15035))+((r10*x15028))+x15022+((r11*x15023))+(((-1.0)*x15025*x15033)));
evalcond[8]=((((-1.0)*x15029))+((r10*x15027))+((x15023*x15033))+(((-1.0)*sj2*x15026))+((r11*x15025))+(((-1.0)*x15021*x15024*x15031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15037=cj5*cj5;
IkReal x15038=(cj3*r20);
IkReal x15039=(r21*sj3);
IkReal x15040=((1.0)*cj3);
IkReal x15041=(r01*r21);
IkReal x15042=(r01*sj3);
IkReal x15043=(r00*sj5);
IkReal x15044=(cj5*r01*sj5);
IkReal x15045=((1.0)*x15037);
CheckValue<IkReal> x15046=IKPowWithIntegerCheck(IKsign((((x15038*x15044))+(((-1.0)*x15040*x15041))+((cj3*cj5*r21*x15043))+(((-1.0)*r00*x15038*x15045))+(((-1.0)*r02*r22*x15040))+((cj3*x15037*x15041)))),-1);
if(!x15046.valid){
continue;
}
CheckValue<IkReal> x15047 = IKatan2WithCheck(IkReal((((cj5*r22*x15042))+((r22*sj3*x15043)))),IkReal((((r00*x15039))+(((-1.0)*r00*x15039*x15045))+((x15039*x15044))+(((-1.0)*cj5*r20*sj3*x15043))+(((-1.0)*r20*x15042*x15045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15046.value)))+(x15047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15048=IKsin(j4);
IkReal x15049=IKcos(j4);
IkReal x15050=(sj1*sj2);
IkReal x15051=(r11*sj5);
IkReal x15052=(cj5*r10);
IkReal x15053=(cj5*r01);
IkReal x15054=(cj5*r00);
IkReal x15055=((1.0)*cj1);
IkReal x15056=(cj3*sj5);
IkReal x15057=(r21*sj5);
IkReal x15058=(cj5*sj3);
IkReal x15059=(sj3*sj5);
IkReal x15060=(cj2*sj1);
IkReal x15061=(r01*sj5);
IkReal x15062=(cj3*cj5);
IkReal x15063=(cj5*r20);
IkReal x15064=(cj2*x15055);
IkReal x15065=((1.0)*x15049);
IkReal x15066=((1.0)*x15048);
IkReal x15067=(cj3*x15049);
IkReal x15068=(sj3*x15049);
IkReal x15069=(cj3*x15048);
evalcond[0]=((((-1.0)*x15063*x15066))+(((-1.0)*r22*x15065))+((x15048*x15057)));
evalcond[1]=((((-1.0)*x15052*x15066))+(((-1.0)*r12*x15065))+((x15048*x15051)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15065))+((x15048*x15061))+(((-1.0)*x15054*x15066)));
evalcond[3]=(((r01*x15049*x15056))+((r02*x15069))+((sj3*x15053))+(((-1.0)*cj3*x15054*x15065))+((r00*x15059)));
evalcond[4]=((((-1.0)*r02*sj3*x15066))+((x15054*x15068))+(((-1.0)*r01*x15059*x15065))+((cj3*x15053))+((r00*x15056)));
evalcond[5]=(((r20*x15059))+((cj1*sj2))+((r21*x15049*x15056))+x15060+((r21*x15058))+(((-1.0)*r20*x15062*x15065))+((r22*x15069)));
evalcond[6]=(((x15051*x15067))+((r10*x15059))+x15050+((r12*x15069))+(((-1.0)*cj3*x15052*x15065))+((r11*x15058))+(((-1.0)*x15064)));
evalcond[7]=(((r20*x15056))+((r21*x15062))+x15050+((r20*x15049*x15058))+(((-1.0)*x15064))+(((-1.0)*sj3*x15057*x15065))+(((-1.0)*r22*sj3*x15066)));
evalcond[8]=(((r10*x15056))+(((-1.0)*r12*sj3*x15066))+((x15052*x15068))+(((-1.0)*x15060))+((r11*x15062))+(((-1.0)*sj2*x15055))+(((-1.0)*sj3*x15051*x15065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15070=((1.0)*cj5);
CheckValue<IkReal> x15071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15070))+(((-1.0)*r10*sj5)))),-1);
if(!x15071.valid){
continue;
}
CheckValue<IkReal> x15072 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15070))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15071.value)))+(x15072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15073=IKsin(j4);
IkReal x15074=IKcos(j4);
IkReal x15075=(sj1*sj2);
IkReal x15076=(r11*sj5);
IkReal x15077=(cj5*r10);
IkReal x15078=(cj5*r01);
IkReal x15079=(cj5*r00);
IkReal x15080=((1.0)*cj1);
IkReal x15081=(cj3*sj5);
IkReal x15082=(r21*sj5);
IkReal x15083=(cj5*sj3);
IkReal x15084=(sj3*sj5);
IkReal x15085=(cj2*sj1);
IkReal x15086=(r01*sj5);
IkReal x15087=(cj3*cj5);
IkReal x15088=(cj5*r20);
IkReal x15089=(cj2*x15080);
IkReal x15090=((1.0)*x15074);
IkReal x15091=((1.0)*x15073);
IkReal x15092=(cj3*x15074);
IkReal x15093=(sj3*x15074);
IkReal x15094=(cj3*x15073);
evalcond[0]=((((-1.0)*r22*x15090))+(((-1.0)*x15088*x15091))+((x15073*x15082)));
evalcond[1]=((((-1.0)*x15077*x15091))+((x15073*x15076))+(((-1.0)*r12*x15090)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15090))+((x15073*x15086))+(((-1.0)*x15079*x15091)));
evalcond[3]=((((-1.0)*cj3*x15079*x15090))+((sj3*x15078))+((r02*x15094))+((r00*x15084))+((r01*x15074*x15081)));
evalcond[4]=(((x15079*x15093))+(((-1.0)*r01*x15084*x15090))+(((-1.0)*r02*sj3*x15091))+((cj3*x15078))+((r00*x15081)));
evalcond[5]=(((r21*x15074*x15081))+((cj1*sj2))+x15085+(((-1.0)*r20*x15087*x15090))+((r21*x15083))+((r20*x15084))+((r22*x15094)));
evalcond[6]=((((-1.0)*cj3*x15077*x15090))+(((-1.0)*x15089))+((x15076*x15092))+x15075+((r12*x15094))+((r11*x15083))+((r10*x15084)));
evalcond[7]=((((-1.0)*r22*sj3*x15091))+(((-1.0)*x15089))+x15075+(((-1.0)*sj3*x15082*x15090))+((r21*x15087))+((r20*x15074*x15083))+((r20*x15081)));
evalcond[8]=((((-1.0)*r12*sj3*x15091))+(((-1.0)*sj2*x15080))+((x15077*x15093))+(((-1.0)*sj3*x15076*x15090))+((r11*x15087))+(((-1.0)*x15085))+((r10*x15081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15095=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15095.valid){
continue;
}
CheckValue<IkReal> x15096 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15095.value)))+(x15096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15097=IKsin(j4);
IkReal x15098=IKcos(j4);
IkReal x15099=(sj1*sj2);
IkReal x15100=(r11*sj5);
IkReal x15101=(cj5*r10);
IkReal x15102=(cj5*r01);
IkReal x15103=(cj5*r00);
IkReal x15104=((1.0)*cj1);
IkReal x15105=(cj3*sj5);
IkReal x15106=(r21*sj5);
IkReal x15107=(cj5*sj3);
IkReal x15108=(sj3*sj5);
IkReal x15109=(cj2*sj1);
IkReal x15110=(r01*sj5);
IkReal x15111=(cj3*cj5);
IkReal x15112=(cj5*r20);
IkReal x15113=(cj2*x15104);
IkReal x15114=((1.0)*x15098);
IkReal x15115=((1.0)*x15097);
IkReal x15116=(cj3*x15098);
IkReal x15117=(sj3*x15098);
IkReal x15118=(cj3*x15097);
evalcond[0]=(((x15097*x15106))+(((-1.0)*x15112*x15115))+(((-1.0)*r22*x15114)));
evalcond[1]=(((x15097*x15100))+(((-1.0)*r12*x15114))+(((-1.0)*x15101*x15115)));
evalcond[2]=((-1.0)+(((-1.0)*x15103*x15115))+(((-1.0)*r02*x15114))+((x15097*x15110)));
evalcond[3]=(((r00*x15108))+(((-1.0)*cj3*x15103*x15114))+((r01*x15098*x15105))+((sj3*x15102))+((r02*x15118)));
evalcond[4]=((((-1.0)*r02*sj3*x15115))+((x15103*x15117))+((r00*x15105))+(((-1.0)*r01*x15108*x15114))+((cj3*x15102)));
evalcond[5]=(((r21*x15098*x15105))+((cj1*sj2))+((r21*x15107))+(((-1.0)*r20*x15111*x15114))+x15109+((r20*x15108))+((r22*x15118)));
evalcond[6]=((((-1.0)*x15113))+x15099+((r10*x15108))+((r12*x15118))+(((-1.0)*cj3*x15101*x15114))+((x15100*x15116))+((r11*x15107)));
evalcond[7]=((((-1.0)*sj3*x15106*x15114))+(((-1.0)*x15113))+x15099+((r20*x15105))+((r20*x15098*x15107))+(((-1.0)*r22*sj3*x15115))+((r21*x15111)));
evalcond[8]=((((-1.0)*sj3*x15100*x15114))+((r11*x15111))+((r10*x15105))+(((-1.0)*r12*sj3*x15115))+(((-1.0)*sj2*x15104))+((x15101*x15117))+(((-1.0)*x15109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15119=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15119;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15120=((1.0)*cj5);
IkReal x15121=((((-1.0)*r21*x15120))+(((-1.0)*r20*sj5)));
j4eval[0]=x15121;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15120))+((r11*sj5))))));
j4eval[2]=IKsign(x15121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15122=cj5*cj5;
IkReal x15123=(cj3*r01);
IkReal x15124=(cj5*sj5);
IkReal x15125=((1.0)*cj3);
IkReal x15126=((((-1.0)*r00*r20*x15122*x15125))+((r21*x15122*x15123))+((r20*x15123*x15124))+((cj3*r00*r21*x15124))+(((-1.0)*r02*r22*x15125))+(((-1.0)*r21*x15123)));
j4eval[0]=x15126;
j4eval[1]=IKsign(x15126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15127=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15127;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15128=((1.0)*cj5);
IkReal x15129=((((-1.0)*r21*x15128))+(((-1.0)*r20*sj5)));
j4eval[0]=x15129;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15128))+((r11*sj5))))));
j4eval[2]=IKsign(x15129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15130=cj5*cj5;
IkReal x15131=r01*r01;
IkReal x15132=(cj5*r00);
IkReal x15133=(r01*sj5);
IkReal x15134=(((x15130*(r00*r00)))+(((-2.0)*x15132*x15133))+(((-1.0)*x15130*x15131))+x15131+(r02*r02));
j4eval[0]=x15134;
j4eval[1]=((IKabs(r02))+(IKabs((x15132+(((-1.0)*x15133))))));
j4eval[2]=IKsign(x15134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15135=cj5*cj5;
IkReal x15136=r01*r01;
IkReal x15137=(r01*sj5);
IkReal x15138=(cj5*r00);
CheckValue<IkReal> x15139=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15137*x15138))+((x15135*(r00*r00)))+x15136+(((-1.0)*x15135*x15136))+(r02*r02))),-1);
if(!x15139.valid){
continue;
}
CheckValue<IkReal> x15140 = IKatan2WithCheck(IkReal((x15138+(((-1.0)*x15137)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15139.value)))+(x15140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15141=IKsin(j4);
IkReal x15142=IKcos(j4);
IkReal x15143=(cj5*r10);
IkReal x15144=(r01*sj5);
IkReal x15145=(cj5*r00);
IkReal x15146=(cj5*r20);
IkReal x15147=((1.0)*x15142);
IkReal x15148=((1.0)*x15141);
IkReal x15149=(sj5*x15141);
evalcond[0]=(((r21*x15149))+(((-1.0)*x15146*x15148))+(((-1.0)*r22*x15147)));
evalcond[1]=(((r11*x15149))+(((-1.0)*x15143*x15148))+(((-1.0)*r12*x15147)));
evalcond[2]=((((-1.0)*r02*x15148))+(((-1.0)*x15144*x15147))+((x15142*x15145)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15147))+(((-1.0)*x15145*x15148))+((x15141*x15144)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15142*x15143))+(((-1.0)*r11*sj5*x15147))+(((-1.0)*r12*x15148)));
evalcond[5]=((((-1.0)*r21*sj5*x15147))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15142*x15146))+(((-1.0)*r22*x15148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15150=((1.0)*cj5);
CheckValue<IkReal> x15151 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15150))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15151.valid){
continue;
}
CheckValue<IkReal> x15152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15150))+(((-1.0)*r20*sj5)))),-1);
if(!x15152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15151.value)+(((1.5707963267949)*(x15152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15153=IKsin(j4);
IkReal x15154=IKcos(j4);
IkReal x15155=(cj5*r10);
IkReal x15156=(r01*sj5);
IkReal x15157=(cj5*r00);
IkReal x15158=(cj5*r20);
IkReal x15159=((1.0)*x15154);
IkReal x15160=((1.0)*x15153);
IkReal x15161=(sj5*x15153);
evalcond[0]=((((-1.0)*r22*x15159))+((r21*x15161))+(((-1.0)*x15158*x15160)));
evalcond[1]=(((r11*x15161))+(((-1.0)*x15155*x15160))+(((-1.0)*r12*x15159)));
evalcond[2]=(((x15154*x15157))+(((-1.0)*x15156*x15159))+(((-1.0)*r02*x15160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15159))+((x15153*x15156))+(((-1.0)*x15157*x15160)));
evalcond[4]=(((x15154*x15155))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15159))+(((-1.0)*r12*x15160)));
evalcond[5]=(((x15154*x15158))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15160))+(((-1.0)*r21*sj5*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15162 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15162.valid){
continue;
}
CheckValue<IkReal> x15163=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15162.value)+(((1.5707963267949)*(x15163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15164=IKsin(j4);
IkReal x15165=IKcos(j4);
IkReal x15166=(cj5*r10);
IkReal x15167=(r01*sj5);
IkReal x15168=(cj5*r00);
IkReal x15169=(cj5*r20);
IkReal x15170=((1.0)*x15165);
IkReal x15171=((1.0)*x15164);
IkReal x15172=(sj5*x15164);
evalcond[0]=(((r21*x15172))+(((-1.0)*r22*x15170))+(((-1.0)*x15169*x15171)));
evalcond[1]=(((r11*x15172))+(((-1.0)*x15166*x15171))+(((-1.0)*r12*x15170)));
evalcond[2]=(((x15165*x15168))+(((-1.0)*r02*x15171))+(((-1.0)*x15167*x15170)));
evalcond[3]=((1.0)+((x15164*x15167))+(((-1.0)*r02*x15170))+(((-1.0)*x15168*x15171)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15165*x15166))+(((-1.0)*r11*sj5*x15170))+(((-1.0)*r12*x15171)));
evalcond[5]=((((-1.0)*r21*sj5*x15170))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15165*x15169))+(((-1.0)*r22*x15171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15173=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15173;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15173);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15174=((1.0)*cj5);
IkReal x15175=((((-1.0)*r21*x15174))+(((-1.0)*r20*sj5)));
j4eval[0]=x15175;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15174))))));
j4eval[2]=IKsign(x15175);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15176=cj5*cj5;
IkReal x15177=r01*r01;
IkReal x15178=(r01*sj5);
IkReal x15179=(cj5*r00);
IkReal x15180=((((2.0)*x15178*x15179))+((x15176*x15177))+(((-1.0)*(r02*r02)))+(((-1.0)*x15176*(r00*r00)))+(((-1.0)*x15177)));
j4eval[0]=x15180;
j4eval[1]=IKsign(x15180);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15179))+x15178))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15181=cj5*cj5;
IkReal x15182=r01*r01;
IkReal x15183=(r01*sj5);
IkReal x15184=(cj5*r00);
CheckValue<IkReal> x15185=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15181*(r00*r00)))+(((-1.0)*x15182))+(((-1.0)*(r02*r02)))+((x15181*x15182))+(((2.0)*x15183*x15184)))),-1);
if(!x15185.valid){
continue;
}
CheckValue<IkReal> x15186 = IKatan2WithCheck(IkReal(((((-1.0)*x15184))+x15183)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15185.value)))+(x15186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15187=IKcos(j4);
IkReal x15188=IKsin(j4);
IkReal x15189=(cj5*r00);
IkReal x15190=(cj5*r10);
IkReal x15191=(r21*sj5);
IkReal x15192=(cj5*r20);
IkReal x15193=((1.0)*x15187);
IkReal x15194=((1.0)*x15188);
IkReal x15195=(sj5*x15188);
IkReal x15196=(sj5*x15187);
evalcond[0]=(((r02*x15188))+(((-1.0)*x15189*x15193))+((r01*x15196)));
evalcond[1]=(((x15188*x15191))+(((-1.0)*r22*x15193))+(((-1.0)*x15192*x15194)));
evalcond[2]=((((-1.0)*x15190*x15194))+((r11*x15195))+(((-1.0)*r12*x15193)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15193))+(((-1.0)*x15189*x15194))+((r01*x15195)));
evalcond[4]=((((-1.0)*x15190*x15193))+((cj2*sj1))+((r11*x15196))+((cj1*sj2))+((r12*x15188)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15187*x15191))+(((-1.0)*x15192*x15193))+((r22*x15188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15197=((1.0)*cj5);
CheckValue<IkReal> x15198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15197))+(((-1.0)*r20*sj5)))),-1);
if(!x15198.valid){
continue;
}
CheckValue<IkReal> x15199 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15197))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15198.value)))+(x15199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15200=IKcos(j4);
IkReal x15201=IKsin(j4);
IkReal x15202=(cj5*r00);
IkReal x15203=(cj5*r10);
IkReal x15204=(r21*sj5);
IkReal x15205=(cj5*r20);
IkReal x15206=((1.0)*x15200);
IkReal x15207=((1.0)*x15201);
IkReal x15208=(sj5*x15201);
IkReal x15209=(sj5*x15200);
evalcond[0]=((((-1.0)*x15202*x15206))+((r01*x15209))+((r02*x15201)));
evalcond[1]=((((-1.0)*r22*x15206))+(((-1.0)*x15205*x15207))+((x15201*x15204)));
evalcond[2]=(((r11*x15208))+(((-1.0)*r12*x15206))+(((-1.0)*x15203*x15207)));
evalcond[3]=((1.0)+(((-1.0)*x15202*x15207))+((r01*x15208))+(((-1.0)*r02*x15206)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15209))+((r12*x15201))+(((-1.0)*x15203*x15206)));
evalcond[5]=(((x15200*x15204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15201))+(((-1.0)*x15205*x15206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15210 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15210.valid){
continue;
}
CheckValue<IkReal> x15211=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15210.value)+(((1.5707963267949)*(x15211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15212=IKcos(j4);
IkReal x15213=IKsin(j4);
IkReal x15214=(cj5*r00);
IkReal x15215=(cj5*r10);
IkReal x15216=(r21*sj5);
IkReal x15217=(cj5*r20);
IkReal x15218=((1.0)*x15212);
IkReal x15219=((1.0)*x15213);
IkReal x15220=(sj5*x15213);
IkReal x15221=(sj5*x15212);
evalcond[0]=((((-1.0)*x15214*x15218))+((r02*x15213))+((r01*x15221)));
evalcond[1]=(((x15213*x15216))+(((-1.0)*r22*x15218))+(((-1.0)*x15217*x15219)));
evalcond[2]=((((-1.0)*r12*x15218))+((r11*x15220))+(((-1.0)*x15215*x15219)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15218))+(((-1.0)*x15214*x15219))+((r01*x15220)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15213))+((r11*x15221))+(((-1.0)*x15215*x15218)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15213))+((x15212*x15216))+(((-1.0)*x15217*x15218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15223 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15223)==0){
continue;
}
IkReal x15222=pow(x15223,-0.5);
CheckValue<IkReal> x15224 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15224.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15224.value));
IkReal gconst61=((-1.0)*r11*x15222);
IkReal gconst62=(r10*x15222);
CheckValue<IkReal> x15225 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15225.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15225.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15228 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15228.valid){
continue;
}
IkReal x15226=((-1.0)*(x15228.value));
IkReal x15227=x15222;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15226;
IkReal gconst60=x15226;
IkReal gconst61=((-1.0)*r11*x15227);
IkReal gconst62=(r10*x15227);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15231 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15231.valid){
continue;
}
IkReal x15229=((-1.0)*(x15231.value));
IkReal x15230=x15222;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15229;
IkReal gconst60=x15229;
IkReal gconst61=((-1.0)*r11*x15230);
IkReal gconst62=(r10*x15230);
CheckValue<IkReal> x15239=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15239.valid){
continue;
}
IkReal x15232=x15239.value;
IkReal x15233=(sj3*x15232);
IkReal x15234=(r20*x15233);
IkReal x15235=(r00*x15233);
IkReal x15236=(r01*x15233);
IkReal x15237=(r21*x15233);
IkReal x15238=(r10*r11*x15233);
j4eval[0]=IKsign((((r00*x15234*(r10*r10)))+((r21*x15236*(r11*r11)))+((r10*r11*r21*x15235))+((r01*r10*r11*x15234))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15240=gconst61*gconst61;
IkReal x15241=gconst62*gconst62;
IkReal x15242=(cj3*r01);
IkReal x15243=(r22*sj3);
IkReal x15244=(gconst61*r00);
IkReal x15245=((1.0)*cj3);
IkReal x15246=(gconst62*r01);
IkReal x15247=((1.0)*sj3);
IkReal x15248=(gconst61*gconst62*r20);
IkReal x15249=(r21*x15240);
IkReal x15250=(r20*x15241);
CheckValue<IkReal> x15251 = IKatan2WithCheck(IkReal((((x15243*x15246))+((x15243*x15244)))),IkReal((((gconst61*r21*sj3*x15246))+(((-1.0)*r01*x15247*x15250))+((r00*sj3*x15249))+(((-1.0)*gconst62*r20*x15244*x15247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15251.valid){
continue;
}
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15244))+(((-1.0)*r02*r22*x15245))+((x15242*x15248))+(((-1.0)*x15242*x15249))+(((-1.0)*r00*x15245*x15250)))),-1);
if(!x15252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15251.value)+(((1.5707963267949)*(x15252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15253=IKsin(j4);
IkReal x15254=IKcos(j4);
IkReal x15255=(cj2*sj1);
IkReal x15256=(cj1*sj2);
IkReal x15257=(gconst61*sj3);
IkReal x15258=(cj3*gconst61);
IkReal x15259=(cj3*gconst62);
IkReal x15260=(sj1*sj2);
IkReal x15261=(gconst62*sj3);
IkReal x15262=(cj1*cj2);
IkReal x15263=((1.0)*x15254);
IkReal x15264=((1.0)*x15253);
IkReal x15265=(gconst61*x15253);
IkReal x15266=(cj3*x15253);
IkReal x15267=(x15255+x15256);
evalcond[0]=((((-1.0)*gconst62*r20*x15264))+(((-1.0)*r22*x15263))+((r21*x15265)));
evalcond[1]=((((-1.0)*gconst62*r10*x15264))+(((-1.0)*r12*x15263))+((r11*x15265)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15263))+((r01*x15265))+(((-1.0)*gconst62*r00*x15264)));
evalcond[3]=((((-1.0)*r00*x15259*x15263))+((r00*x15257))+((r01*x15254*x15258))+((r01*x15261))+((r02*x15266)));
evalcond[4]=(((r00*x15258))+((r01*x15259))+(((-1.0)*r01*x15257*x15263))+((r00*x15254*x15261))+(((-1.0)*r02*sj3*x15264)));
evalcond[5]=((((-1.0)*r20*x15259*x15263))+x15267+((r22*x15266))+((r20*x15257))+((r21*x15254*x15258))+((r21*x15261)));
evalcond[6]=(((r12*x15266))+((r11*x15254*x15258))+x15262+(((-1.0)*r10*x15259*x15263))+((r10*x15257))+(((-1.0)*x15260))+((r11*x15261)));
evalcond[7]=((((-1.0)*r12*sj3*x15264))+x15267+((r10*x15254*x15261))+((r11*x15259))+((r10*x15258))+(((-1.0)*r11*x15257*x15263)));
evalcond[8]=((((-1.0)*r21*x15257*x15263))+x15260+((r21*x15259))+((r20*x15258))+(((-1.0)*r22*sj3*x15264))+(((-1.0)*x15262))+((r20*x15254*x15261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15268=gconst61*gconst61;
IkReal x15269=gconst62*gconst62;
IkReal x15270=(cj3*r22);
IkReal x15271=(gconst62*r01);
IkReal x15272=(gconst61*r00);
IkReal x15273=((1.0)*r20);
IkReal x15274=(cj3*r21);
IkReal x15275=(r21*sj3);
CheckValue<IkReal> x15276=IKPowWithIntegerCheck(IKsign((((r01*x15268*x15275))+((r00*r20*sj3*x15269))+(((-1.0)*gconst61*sj3*x15271*x15273))+(((-1.0)*gconst62*x15272*x15275))+((r02*r22*sj3)))),-1);
if(!x15276.valid){
continue;
}
CheckValue<IkReal> x15277 = IKatan2WithCheck(IkReal((((x15270*x15271))+((x15270*x15272)))),IkReal(((((-1.0)*cj3*gconst62*x15272*x15273))+((r00*x15268*x15274))+((gconst61*x15271*x15274))+(((-1.0)*cj3*r01*x15269*x15273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15276.value)))+(x15277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15278=IKsin(j4);
IkReal x15279=IKcos(j4);
IkReal x15280=(cj2*sj1);
IkReal x15281=(cj1*sj2);
IkReal x15282=(gconst61*sj3);
IkReal x15283=(cj3*gconst61);
IkReal x15284=(cj3*gconst62);
IkReal x15285=(sj1*sj2);
IkReal x15286=(gconst62*sj3);
IkReal x15287=(cj1*cj2);
IkReal x15288=((1.0)*x15279);
IkReal x15289=((1.0)*x15278);
IkReal x15290=(gconst61*x15278);
IkReal x15291=(cj3*x15278);
IkReal x15292=(x15281+x15280);
evalcond[0]=((((-1.0)*gconst62*r20*x15289))+((r21*x15290))+(((-1.0)*r22*x15288)));
evalcond[1]=((((-1.0)*r12*x15288))+((r11*x15290))+(((-1.0)*gconst62*r10*x15289)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15289))+(((-1.0)*r02*x15288))+((r01*x15290)));
evalcond[3]=(((r01*x15286))+((r00*x15282))+((r01*x15279*x15283))+(((-1.0)*r00*x15284*x15288))+((r02*x15291)));
evalcond[4]=((((-1.0)*r01*x15282*x15288))+((r01*x15284))+((r00*x15283))+((r00*x15279*x15286))+(((-1.0)*r02*sj3*x15289)));
evalcond[5]=((((-1.0)*r20*x15284*x15288))+x15292+((r22*x15291))+((r20*x15282))+((r21*x15279*x15283))+((r21*x15286)));
evalcond[6]=(((r11*x15279*x15283))+x15287+((r12*x15291))+((r10*x15282))+(((-1.0)*r10*x15284*x15288))+((r11*x15286))+(((-1.0)*x15285)));
evalcond[7]=((((-1.0)*r12*sj3*x15289))+x15292+((r10*x15283))+((r10*x15279*x15286))+(((-1.0)*r11*x15282*x15288))+((r11*x15284)));
evalcond[8]=((((-1.0)*r22*sj3*x15289))+x15285+(((-1.0)*r21*x15282*x15288))+((r20*x15279*x15286))+((r20*x15283))+(((-1.0)*x15287))+((r21*x15284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15293=((1.0)*gconst62);
CheckValue<IkReal> x15294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15293))+(((-1.0)*gconst61*r20)))),-1);
if(!x15294.valid){
continue;
}
CheckValue<IkReal> x15295 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15294.value)))+(x15295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15296=IKsin(j4);
IkReal x15297=IKcos(j4);
IkReal x15298=(cj2*sj1);
IkReal x15299=(cj1*sj2);
IkReal x15300=(gconst61*sj3);
IkReal x15301=(cj3*gconst61);
IkReal x15302=(cj3*gconst62);
IkReal x15303=(sj1*sj2);
IkReal x15304=(gconst62*sj3);
IkReal x15305=(cj1*cj2);
IkReal x15306=((1.0)*x15297);
IkReal x15307=((1.0)*x15296);
IkReal x15308=(gconst61*x15296);
IkReal x15309=(cj3*x15296);
IkReal x15310=(x15298+x15299);
evalcond[0]=((((-1.0)*gconst62*r20*x15307))+((r21*x15308))+(((-1.0)*r22*x15306)));
evalcond[1]=((((-1.0)*gconst62*r10*x15307))+(((-1.0)*r12*x15306))+((r11*x15308)));
evalcond[2]=((1.0)+((r01*x15308))+(((-1.0)*r02*x15306))+(((-1.0)*gconst62*r00*x15307)));
evalcond[3]=(((r02*x15309))+((r00*x15300))+((r01*x15304))+(((-1.0)*r00*x15302*x15306))+((r01*x15297*x15301)));
evalcond[4]=((((-1.0)*r01*x15300*x15306))+(((-1.0)*r02*sj3*x15307))+((r00*x15301))+((r01*x15302))+((r00*x15297*x15304)));
evalcond[5]=(((r21*x15297*x15301))+(((-1.0)*r20*x15302*x15306))+((r20*x15300))+((r21*x15304))+x15310+((r22*x15309)));
evalcond[6]=((((-1.0)*x15303))+((r11*x15297*x15301))+x15305+((r10*x15300))+(((-1.0)*r10*x15302*x15306))+((r12*x15309))+((r11*x15304)));
evalcond[7]=((((-1.0)*r11*x15300*x15306))+(((-1.0)*r12*sj3*x15307))+x15310+((r10*x15297*x15304))+((r10*x15301))+((r11*x15302)));
evalcond[8]=(((r20*x15301))+(((-1.0)*x15305))+((r21*x15302))+x15303+(((-1.0)*r21*x15300*x15306))+(((-1.0)*r22*sj3*x15307))+((r20*x15297*x15304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15312 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15312)==0){
continue;
}
IkReal x15311=pow(x15312,-0.5);
CheckValue<IkReal> x15313 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15313.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15313.value))));
IkReal gconst64=((1.0)*r11*x15311);
IkReal gconst65=((-1.0)*r10*x15311);
CheckValue<IkReal> x15314 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15314.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15314.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15317 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15317.valid){
continue;
}
IkReal x15315=((1.0)*(x15317.value));
IkReal x15316=x15311;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15315)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15315)));
IkReal gconst64=((1.0)*r11*x15316);
IkReal gconst65=((-1.0)*r10*x15316);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15318=gconst64*gconst64;
IkReal x15319=gconst65*gconst65;
IkReal x15320=(gconst65*r01);
IkReal x15321=(cj3*r22);
IkReal x15322=(gconst64*r00);
IkReal x15323=(cj3*r21);
IkReal x15324=((1.0)*gconst64*sj3);
IkReal x15325=((1.0)*cj3*r20);
CheckValue<IkReal> x15326=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15319))+(((-1.0)*gconst65*r21*sj3*x15322))+(((-1.0)*r20*x15320*x15324))+((r02*r22*sj3))+((r01*r21*sj3*x15318)))),-1);
if(!x15326.valid){
continue;
}
CheckValue<IkReal> x15327 = IKatan2WithCheck(IkReal((((x15320*x15321))+((x15321*x15322)))),IkReal((((gconst64*x15320*x15323))+((r00*x15318*x15323))+(((-1.0)*r01*x15319*x15325))+(((-1.0)*gconst65*x15322*x15325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15326.value)))+(x15327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15328=IKsin(j4);
IkReal x15329=IKcos(j4);
IkReal x15330=(cj2*sj1);
IkReal x15331=(cj1*sj2);
IkReal x15332=(cj3*gconst64);
IkReal x15333=(gconst65*r21);
IkReal x15334=(sj1*sj2);
IkReal x15335=(gconst65*sj3);
IkReal x15336=(gconst64*sj3);
IkReal x15337=(cj3*gconst65);
IkReal x15338=(cj1*cj2);
IkReal x15339=((1.0)*x15329);
IkReal x15340=((1.0)*x15328);
IkReal x15341=(cj3*x15328);
IkReal x15342=(gconst64*x15328);
IkReal x15343=(x15331+x15330);
evalcond[0]=(((r21*x15342))+(((-1.0)*gconst65*r20*x15340))+(((-1.0)*r22*x15339)));
evalcond[1]=(((r11*x15342))+(((-1.0)*r12*x15339))+(((-1.0)*gconst65*r10*x15340)));
evalcond[2]=((1.0)+((r01*x15342))+(((-1.0)*gconst65*r00*x15340))+(((-1.0)*r02*x15339)));
evalcond[3]=((((-1.0)*r00*x15337*x15339))+((r01*x15335))+((r00*x15336))+((r02*x15341))+((r01*x15329*x15332)));
evalcond[4]=((((-1.0)*r01*x15336*x15339))+((r01*x15337))+((r00*x15332))+((r00*x15329*x15335))+(((-1.0)*r02*sj3*x15340)));
evalcond[5]=(((r20*x15336))+((r21*x15329*x15332))+((r22*x15341))+((sj3*x15333))+(((-1.0)*r20*x15337*x15339))+x15343);
evalcond[6]=((((-1.0)*x15334))+((r11*x15329*x15332))+((r11*x15335))+x15338+((r10*x15336))+((r12*x15341))+(((-1.0)*r10*x15337*x15339)));
evalcond[7]=(((r10*x15329*x15335))+(((-1.0)*r12*sj3*x15340))+((r11*x15337))+x15343+((r10*x15332))+(((-1.0)*r11*x15336*x15339)));
evalcond[8]=(((r20*x15332))+(((-1.0)*x15338))+((cj3*x15333))+(((-1.0)*r22*sj3*x15340))+x15334+(((-1.0)*r21*x15336*x15339))+((r20*x15329*x15335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15344=((1.0)*gconst65);
CheckValue<IkReal> x15345 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15344))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15345.valid){
continue;
}
CheckValue<IkReal> x15346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15344))+(((-1.0)*gconst64*r20)))),-1);
if(!x15346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15345.value)+(((1.5707963267949)*(x15346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15347=IKsin(j4);
IkReal x15348=IKcos(j4);
IkReal x15349=(cj2*sj1);
IkReal x15350=(cj1*sj2);
IkReal x15351=(cj3*gconst64);
IkReal x15352=(gconst65*r21);
IkReal x15353=(sj1*sj2);
IkReal x15354=(gconst65*sj3);
IkReal x15355=(gconst64*sj3);
IkReal x15356=(cj3*gconst65);
IkReal x15357=(cj1*cj2);
IkReal x15358=((1.0)*x15348);
IkReal x15359=((1.0)*x15347);
IkReal x15360=(cj3*x15347);
IkReal x15361=(gconst64*x15347);
IkReal x15362=(x15350+x15349);
evalcond[0]=((((-1.0)*r22*x15358))+(((-1.0)*gconst65*r20*x15359))+((r21*x15361)));
evalcond[1]=((((-1.0)*r12*x15358))+((r11*x15361))+(((-1.0)*gconst65*r10*x15359)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15359))+(((-1.0)*r02*x15358))+((r01*x15361)));
evalcond[3]=((((-1.0)*r00*x15356*x15358))+((r02*x15360))+((r01*x15348*x15351))+((r01*x15354))+((r00*x15355)));
evalcond[4]=((((-1.0)*r01*x15355*x15358))+((r00*x15348*x15354))+((r01*x15356))+(((-1.0)*r02*sj3*x15359))+((r00*x15351)));
evalcond[5]=(((r22*x15360))+x15362+((r20*x15355))+(((-1.0)*r20*x15356*x15358))+((r21*x15348*x15351))+((sj3*x15352)));
evalcond[6]=(((r11*x15348*x15351))+((r10*x15355))+((r12*x15360))+x15357+((r11*x15354))+(((-1.0)*x15353))+(((-1.0)*r10*x15356*x15358)));
evalcond[7]=((((-1.0)*r12*sj3*x15359))+((r10*x15348*x15354))+((r10*x15351))+x15362+(((-1.0)*r11*x15355*x15358))+((r11*x15356)));
evalcond[8]=((((-1.0)*r21*x15355*x15358))+(((-1.0)*r22*sj3*x15359))+((r20*x15348*x15354))+((cj3*x15352))+x15353+((r20*x15351))+(((-1.0)*x15357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15363=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15363);
rxp0_2=(py*r00);
rxp1_0=(r21*x15363);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15364=(r01*sj5);
IkReal x15365=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15365))+x15364);
j4eval[1]=(((cj3*x15364))+(((-1.0)*cj3*x15365)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15366=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15366);
rxp0_2=(py*r00);
rxp1_0=(r21*x15366);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15367=(cj5*r00);
IkReal x15368=(r01*sj5);
j4eval[0]=(x15368+(((-1.0)*x15367)));
j4eval[1]=((((-1.0)*sj3*x15368))+((sj3*x15367)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15369=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15369);
rxp0_2=(py*r00);
rxp1_0=(r21*x15369);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15370=((1.0)*r00);
CheckValue<IkReal> x15371=IKPowWithIntegerCheck(cj3,-1);
if(!x15371.valid){
continue;
}
CheckValue<IkReal> x15372=IKPowWithIntegerCheck(r12,-1);
if(!x15372.valid){
continue;
}
CheckValue<IkReal> x15373=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15370))),-1);
if(!x15373.valid){
continue;
}
if( IKabs(((x15371.value)*(x15372.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15373.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15370)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15371.value)*(x15372.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15373.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15370))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15371.value)*(x15372.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15373.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15370))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15374=IKsin(j4);
IkReal x15375=IKcos(j4);
IkReal x15376=(cj2*sj1);
IkReal x15377=(cj1*sj2);
IkReal x15378=(sj1*sj2);
IkReal x15379=(cj5*sj3);
IkReal x15380=(cj3*cj5);
IkReal x15381=(r21*sj5);
IkReal x15382=(cj1*cj2);
IkReal x15383=(r00*sj5);
IkReal x15384=(r01*sj5);
IkReal x15385=(r20*sj5);
IkReal x15386=((1.0)*x15374);
IkReal x15387=(r20*x15375);
IkReal x15388=(r00*x15375);
IkReal x15389=(cj3*x15375);
IkReal x15390=(x15377+x15376);
IkReal x15391=((1.0)*sj3*x15375);
evalcond[0]=((-1.0)*r12*x15375);
evalcond[1]=((((-1.0)*cj5*r20*x15386))+((x15374*x15381)));
evalcond[2]=((((-1.0)*x15378))+((cj3*r12*x15374))+x15382);
evalcond[3]=((((-1.0)*r12*sj3*x15386))+x15390);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15386))+((x15374*x15384)));
evalcond[5]=(((r01*x15379))+(((-1.0)*x15380*x15388))+((sj3*x15383))+((x15384*x15389)));
evalcond[6]=(((r01*x15380))+((cj3*x15383))+((x15379*x15388))+(((-1.0)*x15384*x15391)));
evalcond[7]=(((r21*x15379))+x15390+(((-1.0)*x15380*x15387))+((x15381*x15389))+((sj3*x15385)));
evalcond[8]=(((r21*x15380))+((cj3*x15385))+x15378+((x15379*x15387))+(((-1.0)*x15382))+(((-1.0)*x15381*x15391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15392=((1.0)*r01);
IkReal x15393=(cj5*r00);
CheckValue<IkReal> x15394=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15393))),-1);
if(!x15394.valid){
continue;
}
CheckValue<IkReal> x15395=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15392))+((sj3*x15393))),-1);
if(!x15395.valid){
continue;
}
if( IKabs(((-1.0)*(x15394.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15395.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15392)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15394.value)))+IKsqr(((x15395.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15392))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15394.value)), ((x15395.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15392))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15396=IKsin(j4);
IkReal x15397=IKcos(j4);
IkReal x15398=(cj2*sj1);
IkReal x15399=(cj1*sj2);
IkReal x15400=(sj1*sj2);
IkReal x15401=(cj5*sj3);
IkReal x15402=(cj3*cj5);
IkReal x15403=(r21*sj5);
IkReal x15404=(cj1*cj2);
IkReal x15405=(r00*sj5);
IkReal x15406=(r01*sj5);
IkReal x15407=(r20*sj5);
IkReal x15408=((1.0)*x15396);
IkReal x15409=(r20*x15397);
IkReal x15410=(r00*x15397);
IkReal x15411=(cj3*x15397);
IkReal x15412=(x15399+x15398);
IkReal x15413=((1.0)*sj3*x15397);
evalcond[0]=((-1.0)*r12*x15397);
evalcond[1]=((((-1.0)*cj5*r20*x15408))+((x15396*x15403)));
evalcond[2]=((((-1.0)*x15400))+x15404+((cj3*r12*x15396)));
evalcond[3]=(x15412+(((-1.0)*r12*sj3*x15408)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15408))+((x15396*x15406)));
evalcond[5]=((((-1.0)*x15402*x15410))+((sj3*x15405))+((r01*x15401))+((x15406*x15411)));
evalcond[6]=(((x15401*x15410))+((r01*x15402))+(((-1.0)*x15406*x15413))+((cj3*x15405)));
evalcond[7]=(((x15403*x15411))+(((-1.0)*x15402*x15409))+((sj3*x15407))+x15412+((r21*x15401)));
evalcond[8]=(((x15401*x15409))+(((-1.0)*x15404))+x15400+((r21*x15402))+(((-1.0)*x15403*x15413))+((cj3*x15407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15414=((1.0)*r00);
IkReal x15415=(r01*sj5);
CheckValue<IkReal> x15416=IKPowWithIntegerCheck((x15415+(((-1.0)*cj5*x15414))),-1);
if(!x15416.valid){
continue;
}
CheckValue<IkReal> x15417=IKPowWithIntegerCheck((((cj3*x15415))+(((-1.0)*cj3*cj5*x15414))),-1);
if(!x15417.valid){
continue;
}
if( IKabs(((-1.0)*(x15416.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15417.value)*(((((-1.0)*sj3*sj5*x15414))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15416.value)))+IKsqr(((x15417.value)*(((((-1.0)*sj3*sj5*x15414))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15416.value)), ((x15417.value)*(((((-1.0)*sj3*sj5*x15414))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15418=IKsin(j4);
IkReal x15419=IKcos(j4);
IkReal x15420=(cj2*sj1);
IkReal x15421=(cj1*sj2);
IkReal x15422=(sj1*sj2);
IkReal x15423=(cj5*sj3);
IkReal x15424=(cj3*cj5);
IkReal x15425=(r21*sj5);
IkReal x15426=(cj1*cj2);
IkReal x15427=(r00*sj5);
IkReal x15428=(r01*sj5);
IkReal x15429=(r20*sj5);
IkReal x15430=((1.0)*x15418);
IkReal x15431=(r20*x15419);
IkReal x15432=(r00*x15419);
IkReal x15433=(cj3*x15419);
IkReal x15434=(x15421+x15420);
IkReal x15435=((1.0)*sj3*x15419);
evalcond[0]=((-1.0)*r12*x15419);
evalcond[1]=(((x15418*x15425))+(((-1.0)*cj5*r20*x15430)));
evalcond[2]=((((-1.0)*x15422))+x15426+((cj3*r12*x15418)));
evalcond[3]=((((-1.0)*r12*sj3*x15430))+x15434);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15430))+((x15418*x15428)));
evalcond[5]=(((sj3*x15427))+(((-1.0)*x15424*x15432))+((x15428*x15433))+((r01*x15423)));
evalcond[6]=((((-1.0)*x15428*x15435))+((x15423*x15432))+((cj3*x15427))+((r01*x15424)));
evalcond[7]=(((x15425*x15433))+((sj3*x15429))+((r21*x15423))+(((-1.0)*x15424*x15431))+x15434);
evalcond[8]=(((r21*x15424))+(((-1.0)*x15425*x15435))+((x15423*x15431))+(((-1.0)*x15426))+((cj3*x15429))+x15422);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15436=cj5*cj5;
IkReal x15437=(cj3*r20);
IkReal x15438=(r21*sj3);
IkReal x15439=((1.0)*cj3);
IkReal x15440=(r01*r21);
IkReal x15441=(r01*sj3);
IkReal x15442=(r00*sj5);
IkReal x15443=(cj5*r01*sj5);
IkReal x15444=((1.0)*x15436);
CheckValue<IkReal> x15445=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15439*x15440))+(((-1.0)*r00*x15437*x15444))+((x15437*x15443))+(((-1.0)*r02*r22*x15439))+((cj3*cj5*r21*x15442))+((cj3*x15436*x15440)))),-1);
if(!x15445.valid){
continue;
}
CheckValue<IkReal> x15446 = IKatan2WithCheck(IkReal((((cj5*r22*x15441))+((r22*sj3*x15442)))),IkReal(((((-1.0)*cj5*r20*sj3*x15442))+(((-1.0)*r00*x15438*x15444))+((x15438*x15443))+(((-1.0)*r20*x15441*x15444))+((r00*x15438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15445.value)))+(x15446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15447=IKsin(j4);
IkReal x15448=IKcos(j4);
IkReal x15449=(cj2*sj1);
IkReal x15450=(cj1*sj2);
IkReal x15451=(r11*sj5);
IkReal x15452=(cj5*r10);
IkReal x15453=(sj1*sj2);
IkReal x15454=(cj5*r01);
IkReal x15455=(cj5*r00);
IkReal x15456=(cj3*sj5);
IkReal x15457=(r21*sj5);
IkReal x15458=(cj1*cj2);
IkReal x15459=(cj5*sj3);
IkReal x15460=(sj3*sj5);
IkReal x15461=(r01*sj5);
IkReal x15462=(cj3*cj5);
IkReal x15463=(cj5*r20);
IkReal x15464=((1.0)*x15448);
IkReal x15465=((1.0)*x15447);
IkReal x15466=(cj3*x15448);
IkReal x15467=(sj3*x15448);
IkReal x15468=(cj3*x15447);
IkReal x15469=(x15449+x15450);
evalcond[0]=((((-1.0)*r22*x15464))+(((-1.0)*x15463*x15465))+((x15447*x15457)));
evalcond[1]=(((x15447*x15451))+(((-1.0)*r12*x15464))+(((-1.0)*x15452*x15465)));
evalcond[2]=((1.0)+((x15447*x15461))+(((-1.0)*x15455*x15465))+(((-1.0)*r02*x15464)));
evalcond[3]=(((r02*x15468))+((sj3*x15454))+((r01*x15448*x15456))+((r00*x15460))+(((-1.0)*cj3*x15455*x15464)));
evalcond[4]=(((cj3*x15454))+((x15455*x15467))+((r00*x15456))+(((-1.0)*r01*x15460*x15464))+(((-1.0)*r02*sj3*x15465)));
evalcond[5]=(((r22*x15468))+(((-1.0)*r20*x15462*x15464))+x15469+((r21*x15459))+((r20*x15460))+((r21*x15448*x15456)));
evalcond[6]=(((r11*x15459))+(((-1.0)*cj3*x15452*x15464))+x15458+((r12*x15468))+((x15451*x15466))+((r10*x15460))+(((-1.0)*x15453)));
evalcond[7]=((((-1.0)*sj3*x15451*x15464))+((r10*x15456))+((x15452*x15467))+x15469+((r11*x15462))+(((-1.0)*r12*sj3*x15465)));
evalcond[8]=(((r20*x15456))+((r21*x15462))+x15453+(((-1.0)*sj3*x15457*x15464))+((r20*x15448*x15459))+(((-1.0)*r22*sj3*x15465))+(((-1.0)*x15458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15470=((1.0)*cj5);
CheckValue<IkReal> x15471 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15471.valid){
continue;
}
CheckValue<IkReal> x15472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15470))+(((-1.0)*r20*sj5)))),-1);
if(!x15472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15471.value)+(((1.5707963267949)*(x15472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15473=IKsin(j4);
IkReal x15474=IKcos(j4);
IkReal x15475=(cj2*sj1);
IkReal x15476=(cj1*sj2);
IkReal x15477=(r11*sj5);
IkReal x15478=(cj5*r10);
IkReal x15479=(sj1*sj2);
IkReal x15480=(cj5*r01);
IkReal x15481=(cj5*r00);
IkReal x15482=(cj3*sj5);
IkReal x15483=(r21*sj5);
IkReal x15484=(cj1*cj2);
IkReal x15485=(cj5*sj3);
IkReal x15486=(sj3*sj5);
IkReal x15487=(r01*sj5);
IkReal x15488=(cj3*cj5);
IkReal x15489=(cj5*r20);
IkReal x15490=((1.0)*x15474);
IkReal x15491=((1.0)*x15473);
IkReal x15492=(cj3*x15474);
IkReal x15493=(sj3*x15474);
IkReal x15494=(cj3*x15473);
IkReal x15495=(x15475+x15476);
evalcond[0]=(((x15473*x15483))+(((-1.0)*r22*x15490))+(((-1.0)*x15489*x15491)));
evalcond[1]=(((x15473*x15477))+(((-1.0)*r12*x15490))+(((-1.0)*x15478*x15491)));
evalcond[2]=((1.0)+((x15473*x15487))+(((-1.0)*r02*x15490))+(((-1.0)*x15481*x15491)));
evalcond[3]=(((sj3*x15480))+(((-1.0)*cj3*x15481*x15490))+((r02*x15494))+((r01*x15474*x15482))+((r00*x15486)));
evalcond[4]=((((-1.0)*r02*sj3*x15491))+((cj3*x15480))+((x15481*x15493))+(((-1.0)*r01*x15486*x15490))+((r00*x15482)));
evalcond[5]=(((r21*x15474*x15482))+((r21*x15485))+(((-1.0)*r20*x15488*x15490))+x15495+((r22*x15494))+((r20*x15486)));
evalcond[6]=(((x15477*x15492))+((r12*x15494))+((r10*x15486))+(((-1.0)*x15479))+((r11*x15485))+x15484+(((-1.0)*cj3*x15478*x15490)));
evalcond[7]=((((-1.0)*sj3*x15477*x15490))+((r10*x15482))+(((-1.0)*r12*sj3*x15491))+((r11*x15488))+x15495+((x15478*x15493)));
evalcond[8]=(((r21*x15488))+(((-1.0)*r22*sj3*x15491))+x15479+(((-1.0)*sj3*x15483*x15490))+(((-1.0)*x15484))+((r20*x15482))+((r20*x15474*x15485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15496 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15496.valid){
continue;
}
CheckValue<IkReal> x15497=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15496.value)+(((1.5707963267949)*(x15497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15498=IKsin(j4);
IkReal x15499=IKcos(j4);
IkReal x15500=(cj2*sj1);
IkReal x15501=(cj1*sj2);
IkReal x15502=(r11*sj5);
IkReal x15503=(cj5*r10);
IkReal x15504=(sj1*sj2);
IkReal x15505=(cj5*r01);
IkReal x15506=(cj5*r00);
IkReal x15507=(cj3*sj5);
IkReal x15508=(r21*sj5);
IkReal x15509=(cj1*cj2);
IkReal x15510=(cj5*sj3);
IkReal x15511=(sj3*sj5);
IkReal x15512=(r01*sj5);
IkReal x15513=(cj3*cj5);
IkReal x15514=(cj5*r20);
IkReal x15515=((1.0)*x15499);
IkReal x15516=((1.0)*x15498);
IkReal x15517=(cj3*x15499);
IkReal x15518=(sj3*x15499);
IkReal x15519=(cj3*x15498);
IkReal x15520=(x15500+x15501);
evalcond[0]=((((-1.0)*r22*x15515))+(((-1.0)*x15514*x15516))+((x15498*x15508)));
evalcond[1]=((((-1.0)*r12*x15515))+(((-1.0)*x15503*x15516))+((x15498*x15502)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15515))+(((-1.0)*x15506*x15516))+((x15498*x15512)));
evalcond[3]=((((-1.0)*cj3*x15506*x15515))+((r02*x15519))+((r01*x15499*x15507))+((sj3*x15505))+((r00*x15511)));
evalcond[4]=(((r00*x15507))+((cj3*x15505))+(((-1.0)*r02*sj3*x15516))+(((-1.0)*r01*x15511*x15515))+((x15506*x15518)));
evalcond[5]=((((-1.0)*r20*x15513*x15515))+((r21*x15510))+((r20*x15511))+((r21*x15499*x15507))+x15520+((r22*x15519)));
evalcond[6]=((((-1.0)*cj3*x15503*x15515))+((r11*x15510))+((r10*x15511))+((r12*x15519))+(((-1.0)*x15504))+((x15502*x15517))+x15509);
evalcond[7]=(((x15503*x15518))+((r10*x15507))+((r11*x15513))+(((-1.0)*sj3*x15502*x15515))+(((-1.0)*r12*sj3*x15516))+x15520);
evalcond[8]=((((-1.0)*r22*sj3*x15516))+(((-1.0)*sj3*x15508*x15515))+((r21*x15513))+(((-1.0)*x15509))+((r20*x15499*x15510))+x15504+((r20*x15507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15521=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15521);
rxp1_1=(px*r21);
rxp1_2=(r11*x15521);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15522=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15522);
rxp1_1=(px*r21);
rxp1_2=(r11*x15522);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15523=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15523)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15523)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15524=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15524);
rxp1_1=(px*r21);
rxp1_2=(r11*x15524);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15525=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15525);
rxp1_1=(px*r21);
rxp1_2=(r11*x15525);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15526=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15526);
rxp1_1=(px*r21);
rxp1_2=(r11*x15526);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15527=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15527);
rxp1_1=(px*r21);
rxp1_2=(r11*x15527);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15530=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15530.valid){
continue;
}
IkReal x15528=x15530.value;
IkReal x15529=(sj0*x15528);
cj4array[0]=(((cj2*sj1*x15529))+((cj1*sj2*x15529)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15531=IKsin(j4);
IkReal x15532=IKcos(j4);
IkReal x15533=(cj5*r20);
IkReal x15534=(r21*sj5);
IkReal x15535=((1.0)*x15531);
IkReal x15536=((1.0)*x15532);
evalcond[0]=((-1.0)*r02*x15531);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15536)));
evalcond[2]=((((-1.0)*x15533*x15535))+((x15531*x15534)));
evalcond[3]=((((-1.0)*cj5*r10*x15535))+((r11*sj5*x15531)));
evalcond[4]=(((x15532*x15533))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15534*x15536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15538=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15538.valid){
continue;
}
IkReal x15537=x15538.value;
cj4array[0]=(((cj1*cj2*x15537))+(((-1.0)*sj1*sj2*x15537)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15539=IKsin(j4);
IkReal x15540=IKcos(j4);
IkReal x15541=(r11*sj5);
IkReal x15542=((1.0)*sj0);
IkReal x15543=((1.0)*x15540);
IkReal x15544=((1.0)*cj5*x15539);
evalcond[0]=((-1.0)*r02*x15539);
evalcond[1]=((((-1.0)*x15542))+(((-1.0)*r02*x15543)));
evalcond[2]=(((r21*sj5*x15539))+(((-1.0)*r20*x15544)));
evalcond[3]=(((x15539*x15541))+(((-1.0)*r10*x15544)));
evalcond[4]=((((-1.0)*cj1*sj2*x15542))+((cj5*r10*x15540))+(((-1.0)*cj2*sj1*x15542))+(((-1.0)*x15541*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15545=IKPowWithIntegerCheck(r02,-1);
if(!x15545.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15545.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15546=IKsin(j4);
IkReal x15547=IKcos(j4);
IkReal x15548=((1.0)*sj0);
IkReal x15549=(cj5*x15547);
IkReal x15550=(sj5*x15546);
IkReal x15551=((1.0)*sj5*x15547);
IkReal x15552=((1.0)*cj5*x15546);
evalcond[0]=((-1.0)*r02*x15546);
evalcond[1]=(((r21*x15550))+(((-1.0)*r20*x15552)));
evalcond[2]=(((r11*x15550))+(((-1.0)*r10*x15552)));
evalcond[3]=(((r20*x15549))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15551)));
evalcond[4]=((((-1.0)*cj1*sj2*x15548))+((r10*x15549))+(((-1.0)*cj2*sj1*x15548))+(((-1.0)*r11*x15551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15553=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15553);
rxp1_1=(px*r21);
rxp1_2=(r11*x15553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15554=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15554);
rxp1_1=(px*r21);
rxp1_2=(r11*x15554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15555=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15555);
rxp1_1=(px*r21);
rxp1_2=(r11*x15555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15558=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15558.valid){
continue;
}
IkReal x15556=x15558.value;
IkReal x15557=(sj0*x15556);
cj4array[0]=(((cj1*sj2*x15557))+((cj2*sj1*x15557)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15559=IKsin(j4);
IkReal x15560=IKcos(j4);
IkReal x15561=(r21*sj5);
IkReal x15562=((1.0)*cj5*r20);
evalcond[0]=(r02*x15559);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15560)));
evalcond[2]=(((x15559*x15561))+(((-1.0)*x15559*x15562)));
evalcond[3]=(((r11*sj5*x15559))+(((-1.0)*cj5*r10*x15559)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15560*x15561))+(((-1.0)*x15560*x15562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15564=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15564.valid){
continue;
}
IkReal x15563=x15564.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15563))+((cj1*cj2*x15563)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15565=IKsin(j4);
IkReal x15566=IKcos(j4);
IkReal x15567=((1.0)*sj0);
IkReal x15568=((1.0)*cj5);
IkReal x15569=(sj5*x15565);
evalcond[0]=(r02*x15565);
evalcond[1]=((((-1.0)*r02*x15566))+(((-1.0)*x15567)));
evalcond[2]=(((r21*x15569))+(((-1.0)*r20*x15565*x15568)));
evalcond[3]=(((r11*x15569))+(((-1.0)*r10*x15565*x15568)));
evalcond[4]=(((r11*sj5*x15566))+(((-1.0)*r10*x15566*x15568))+(((-1.0)*cj1*sj2*x15567))+(((-1.0)*cj2*sj1*x15567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15570=IKPowWithIntegerCheck(r02,-1);
if(!x15570.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15570.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15571=IKsin(j4);
IkReal x15572=IKcos(j4);
IkReal x15573=((1.0)*cj1);
IkReal x15574=(r21*sj5);
IkReal x15575=((1.0)*cj5);
IkReal x15576=(r11*sj5);
evalcond[0]=(r02*x15571);
evalcond[1]=(((x15571*x15574))+(((-1.0)*r20*x15571*x15575)));
evalcond[2]=((((-1.0)*r10*x15571*x15575))+((x15571*x15576)));
evalcond[3]=((((-1.0)*r20*x15572*x15575))+((x15572*x15574))+(((-1.0)*cj2*x15573))+((sj1*sj2)));
evalcond[4]=(((x15572*x15576))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15573))+(((-1.0)*r10*x15572*x15575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15577 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15577.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15577.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15578 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15578.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15578.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15579=((-1.0)*r10);
CheckValue<IkReal> x15581 = IKatan2WithCheck(IkReal(x15579),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15581.valid){
continue;
}
IkReal x15580=((-1.0)*(x15581.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15579);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15580;
IkReal gconst66=x15580;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15582=((-1.0)*r10);
CheckValue<IkReal> x15584 = IKatan2WithCheck(IkReal(x15582),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15584.valid){
continue;
}
IkReal x15583=((-1.0)*(x15584.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15582);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15583;
IkReal gconst66=x15583;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15585=((-1.0)*r10);
CheckValue<IkReal> x15587 = IKatan2WithCheck(IkReal(x15585),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15587.valid){
continue;
}
IkReal x15586=((-1.0)*(x15587.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15585);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15586;
IkReal gconst66=x15586;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15588=((1.0)*gconst67);
IkReal x15589=(cj1*cj2);
IkReal x15590=((1.0)*sj1*sj2);
CheckValue<IkReal> x15591=IKPowWithIntegerCheck(cj3,-1);
if(!x15591.valid){
continue;
}
CheckValue<IkReal> x15592=IKPowWithIntegerCheck(r02,-1);
if(!x15592.valid){
continue;
}
CheckValue<IkReal> x15593=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15588))),-1);
if(!x15593.valid){
continue;
}
if( IKabs(((x15591.value)*(x15592.value)*((((cj0*x15589))+(((-1.0)*cj0*x15590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15593.value)*(((((-1.0)*cj3*r20*x15588))+(((-1.0)*x15590))+x15589+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15591.value)*(x15592.value)*((((cj0*x15589))+(((-1.0)*cj0*x15590))))))+IKsqr(((x15593.value)*(((((-1.0)*cj3*r20*x15588))+(((-1.0)*x15590))+x15589+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15591.value)*(x15592.value)*((((cj0*x15589))+(((-1.0)*cj0*x15590))))), ((x15593.value)*(((((-1.0)*cj3*r20*x15588))+(((-1.0)*x15590))+x15589+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15594=IKsin(j4);
IkReal x15595=IKcos(j4);
IkReal x15596=(sj1*sj2);
IkReal x15597=(gconst68*sj3);
IkReal x15598=(gconst67*r11);
IkReal x15599=(gconst67*sj3);
IkReal x15600=((1.0)*gconst68);
IkReal x15601=(cj2*sj1);
IkReal x15602=((1.0)*cj0);
IkReal x15603=((1.0)*sj0);
IkReal x15604=(cj3*gconst67);
IkReal x15605=(cj3*gconst68);
IkReal x15606=(cj1*sj2);
IkReal x15607=(gconst67*r21);
IkReal x15608=((1.0)*cj1*cj2);
IkReal x15609=(cj3*x15595);
IkReal x15610=((1.0)*x15595);
IkReal x15611=(r02*x15594);
evalcond[0]=((((-1.0)*x15603))+(((-1.0)*r02*x15610)));
evalcond[1]=((((-1.0)*r20*x15594*x15600))+((x15594*x15607)));
evalcond[2]=(cj0+((x15594*x15598))+(((-1.0)*r10*x15594*x15600)));
evalcond[3]=(((cj0*x15596))+((cj3*x15611))+(((-1.0)*cj1*cj2*x15602)));
evalcond[4]=((((-1.0)*x15602*x15606))+(((-1.0)*x15601*x15602))+(((-1.0)*sj3*x15611)));
evalcond[5]=(((r21*x15597))+((r20*x15599))+((r21*x15595*x15604))+x15601+x15606+(((-1.0)*r20*x15600*x15609)));
evalcond[6]=((((-1.0)*x15608))+((r20*x15604))+((r20*x15595*x15597))+(((-1.0)*r21*x15599*x15610))+x15596+((r21*x15605)));
evalcond[7]=((((-1.0)*r10*x15600*x15609))+((sj0*x15596))+((r11*x15597))+((r10*x15599))+(((-1.0)*cj1*cj2*x15603))+((x15598*x15609)));
evalcond[8]=((((-1.0)*x15603*x15606))+(((-1.0)*sj3*x15598*x15610))+((r10*x15595*x15597))+(((-1.0)*x15601*x15603))+((r10*x15604))+((r11*x15605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15614=IKPowWithIntegerCheck(r02,-1);
if(!x15614.valid){
continue;
}
IkReal x15612=x15614.value;
IkReal x15613=((1.0)*cj0);
CheckValue<IkReal> x15615=IKPowWithIntegerCheck(sj3,-1);
if(!x15615.valid){
continue;
}
if( IKabs((x15612*(x15615.value)*(((((-1.0)*cj1*sj2*x15613))+(((-1.0)*cj2*sj1*x15613)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15612)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15612*(x15615.value)*(((((-1.0)*cj1*sj2*x15613))+(((-1.0)*cj2*sj1*x15613))))))+IKsqr(((-1.0)*sj0*x15612))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15612*(x15615.value)*(((((-1.0)*cj1*sj2*x15613))+(((-1.0)*cj2*sj1*x15613))))), ((-1.0)*sj0*x15612));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15616=IKsin(j4);
IkReal x15617=IKcos(j4);
IkReal x15618=(sj1*sj2);
IkReal x15619=(gconst68*sj3);
IkReal x15620=(gconst67*r11);
IkReal x15621=(gconst67*sj3);
IkReal x15622=((1.0)*gconst68);
IkReal x15623=(cj2*sj1);
IkReal x15624=((1.0)*cj0);
IkReal x15625=((1.0)*sj0);
IkReal x15626=(cj3*gconst67);
IkReal x15627=(cj3*gconst68);
IkReal x15628=(cj1*sj2);
IkReal x15629=(gconst67*r21);
IkReal x15630=((1.0)*cj1*cj2);
IkReal x15631=(cj3*x15617);
IkReal x15632=((1.0)*x15617);
IkReal x15633=(r02*x15616);
evalcond[0]=((((-1.0)*x15625))+(((-1.0)*r02*x15632)));
evalcond[1]=(((x15616*x15629))+(((-1.0)*r20*x15616*x15622)));
evalcond[2]=(cj0+((x15616*x15620))+(((-1.0)*r10*x15616*x15622)));
evalcond[3]=(((cj3*x15633))+((cj0*x15618))+(((-1.0)*cj1*cj2*x15624)));
evalcond[4]=((((-1.0)*sj3*x15633))+(((-1.0)*x15623*x15624))+(((-1.0)*x15624*x15628)));
evalcond[5]=(((r21*x15617*x15626))+((r21*x15619))+(((-1.0)*r20*x15622*x15631))+x15628+x15623+((r20*x15621)));
evalcond[6]=(((r20*x15617*x15619))+((r21*x15627))+(((-1.0)*r21*x15621*x15632))+x15618+((r20*x15626))+(((-1.0)*x15630)));
evalcond[7]=(((sj0*x15618))+((x15620*x15631))+((r11*x15619))+(((-1.0)*cj1*cj2*x15625))+((r10*x15621))+(((-1.0)*r10*x15622*x15631)));
evalcond[8]=(((r10*x15617*x15619))+(((-1.0)*sj3*x15620*x15632))+(((-1.0)*x15623*x15625))+(((-1.0)*x15625*x15628))+((r11*x15627))+((r10*x15626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15635=IKPowWithIntegerCheck(r02,-1);
if(!x15635.valid){
continue;
}
IkReal x15634=x15635.value;
CheckValue<IkReal> x15636=IKPowWithIntegerCheck(cj3,-1);
if(!x15636.valid){
continue;
}
if( IKabs((x15634*(x15636.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15634)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15634*(x15636.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15634))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15634*(x15636.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15634));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15637=IKsin(j4);
IkReal x15638=IKcos(j4);
IkReal x15639=(sj1*sj2);
IkReal x15640=(gconst68*sj3);
IkReal x15641=(gconst67*r11);
IkReal x15642=(gconst67*sj3);
IkReal x15643=((1.0)*gconst68);
IkReal x15644=(cj2*sj1);
IkReal x15645=((1.0)*cj0);
IkReal x15646=((1.0)*sj0);
IkReal x15647=(cj3*gconst67);
IkReal x15648=(cj3*gconst68);
IkReal x15649=(cj1*sj2);
IkReal x15650=(gconst67*r21);
IkReal x15651=((1.0)*cj1*cj2);
IkReal x15652=(cj3*x15638);
IkReal x15653=((1.0)*x15638);
IkReal x15654=(r02*x15637);
evalcond[0]=((((-1.0)*x15646))+(((-1.0)*r02*x15653)));
evalcond[1]=(((x15637*x15650))+(((-1.0)*r20*x15637*x15643)));
evalcond[2]=((((-1.0)*r10*x15637*x15643))+cj0+((x15637*x15641)));
evalcond[3]=(((cj3*x15654))+((cj0*x15639))+(((-1.0)*cj1*cj2*x15645)));
evalcond[4]=((((-1.0)*x15645*x15649))+(((-1.0)*sj3*x15654))+(((-1.0)*x15644*x15645)));
evalcond[5]=(((r21*x15638*x15647))+(((-1.0)*r20*x15643*x15652))+x15649+x15644+((r21*x15640))+((r20*x15642)));
evalcond[6]=(((r20*x15638*x15640))+(((-1.0)*r21*x15642*x15653))+x15639+((r21*x15648))+(((-1.0)*x15651))+((r20*x15647)));
evalcond[7]=((((-1.0)*r10*x15643*x15652))+((x15641*x15652))+((r11*x15640))+((sj0*x15639))+(((-1.0)*cj1*cj2*x15646))+((r10*x15642)));
evalcond[8]=((((-1.0)*x15646*x15649))+(((-1.0)*x15644*x15646))+((r11*x15648))+((r10*x15638*x15640))+(((-1.0)*sj3*x15641*x15653))+((r10*x15647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15655=((-1.0)*r10);
CheckValue<IkReal> x15656 = IKatan2WithCheck(IkReal(x15655),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15656.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15656.value))));
IkReal gconst70=x15655;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15657 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15657.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15658=((-1.0)*r10);
IkReal x15659=((-1.0)*r11);
CheckValue<IkReal> x15661 = IKatan2WithCheck(IkReal(x15658),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15661.valid){
continue;
}
IkReal x15660=((1.0)*(x15661.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15658);
rxp1_1=(px*r21);
rxp1_2=(px*x15659);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15660)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15660)));
IkReal gconst70=x15658;
IkReal gconst71=x15659;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15662=((-1.0)*r10);
IkReal x15663=((-1.0)*r11);
CheckValue<IkReal> x15665 = IKatan2WithCheck(IkReal(x15662),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15665.valid){
continue;
}
IkReal x15664=((1.0)*(x15665.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15662);
rxp1_1=(px*r21);
rxp1_2=(px*x15663);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15664)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15664)));
IkReal gconst70=x15662;
IkReal gconst71=x15663;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15666=((-1.0)*r10);
IkReal x15667=((-1.0)*r11);
CheckValue<IkReal> x15669 = IKatan2WithCheck(IkReal(x15666),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15669.valid){
continue;
}
IkReal x15668=((1.0)*(x15669.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15666);
rxp1_1=(px*r21);
rxp1_2=(px*x15667);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15668)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15668)));
IkReal gconst70=x15666;
IkReal gconst71=x15667;
IkReal x15670=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15670))+((r10*r21*x15670)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15671=((1.0)*r21);
IkReal x15672=(cj1*cj2);
IkReal x15673=((1.0)*sj1*sj2);
CheckValue<IkReal> x15674=IKPowWithIntegerCheck(cj3,-1);
if(!x15674.valid){
continue;
}
CheckValue<IkReal> x15675=IKPowWithIntegerCheck(r02,-1);
if(!x15675.valid){
continue;
}
CheckValue<IkReal> x15676=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15671))+((gconst71*r20*sj3))),-1);
if(!x15676.valid){
continue;
}
if( IKabs(((x15674.value)*(x15675.value)*(((((-1.0)*cj0*x15673))+((cj0*x15672)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15676.value)*(((((-1.0)*x15673))+(((-1.0)*cj3*gconst71*x15671))+x15672+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15674.value)*(x15675.value)*(((((-1.0)*cj0*x15673))+((cj0*x15672))))))+IKsqr(((x15676.value)*(((((-1.0)*x15673))+(((-1.0)*cj3*gconst71*x15671))+x15672+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15674.value)*(x15675.value)*(((((-1.0)*cj0*x15673))+((cj0*x15672))))), ((x15676.value)*(((((-1.0)*x15673))+(((-1.0)*cj3*gconst71*x15671))+x15672+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15677=IKsin(j4);
IkReal x15678=IKcos(j4);
IkReal x15679=(cj3*gconst70);
IkReal x15680=(sj1*sj2);
IkReal x15681=((1.0)*gconst71);
IkReal x15682=(gconst71*sj3);
IkReal x15683=(cj2*sj1);
IkReal x15684=((1.0)*sj0);
IkReal x15685=(gconst70*r11);
IkReal x15686=(gconst70*sj3);
IkReal x15687=((1.0)*cj0);
IkReal x15688=(cj3*gconst71);
IkReal x15689=(cj1*sj2);
IkReal x15690=((1.0)*cj1*cj2);
IkReal x15691=(r21*x15678);
IkReal x15692=(r10*x15678);
IkReal x15693=((1.0)*x15678);
IkReal x15694=(r02*x15677);
IkReal x15695=(r20*x15678);
evalcond[0]=((((-1.0)*r02*x15693))+(((-1.0)*x15684)));
evalcond[1]=((((-1.0)*r20*x15677*x15681))+((gconst70*r21*x15677)));
evalcond[2]=(cj0+((x15677*x15685))+(((-1.0)*r10*x15677*x15681)));
evalcond[3]=(((cj3*x15694))+((cj0*x15680))+(((-1.0)*cj1*cj2*x15687)));
evalcond[4]=((((-1.0)*x15683*x15687))+(((-1.0)*x15687*x15689))+(((-1.0)*sj3*x15694)));
evalcond[5]=(((r20*x15686))+(((-1.0)*cj3*x15681*x15695))+x15689+x15683+((x15679*x15691))+((r21*x15682)));
evalcond[6]=((((-1.0)*x15690))+((r20*x15679))+((x15682*x15695))+x15680+(((-1.0)*x15686*x15691))+((r21*x15688)));
evalcond[7]=(((r11*x15678*x15679))+((r10*x15686))+(((-1.0)*cj3*x15681*x15692))+((r11*x15682))+((sj0*x15680))+(((-1.0)*cj1*cj2*x15684)));
evalcond[8]=(((r10*x15679))+(((-1.0)*x15684*x15689))+(((-1.0)*x15683*x15684))+((x15682*x15692))+((r11*x15688))+(((-1.0)*sj3*x15685*x15693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15698=IKPowWithIntegerCheck(r02,-1);
if(!x15698.valid){
continue;
}
IkReal x15696=x15698.value;
IkReal x15697=((1.0)*cj0);
CheckValue<IkReal> x15699=IKPowWithIntegerCheck(sj3,-1);
if(!x15699.valid){
continue;
}
if( IKabs((x15696*(x15699.value)*(((((-1.0)*cj1*sj2*x15697))+(((-1.0)*cj2*sj1*x15697)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15696)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15696*(x15699.value)*(((((-1.0)*cj1*sj2*x15697))+(((-1.0)*cj2*sj1*x15697))))))+IKsqr(((-1.0)*sj0*x15696))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15696*(x15699.value)*(((((-1.0)*cj1*sj2*x15697))+(((-1.0)*cj2*sj1*x15697))))), ((-1.0)*sj0*x15696));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15700=IKsin(j4);
IkReal x15701=IKcos(j4);
IkReal x15702=(cj3*gconst70);
IkReal x15703=(sj1*sj2);
IkReal x15704=((1.0)*gconst71);
IkReal x15705=(gconst71*sj3);
IkReal x15706=(cj2*sj1);
IkReal x15707=((1.0)*sj0);
IkReal x15708=(gconst70*r11);
IkReal x15709=(gconst70*sj3);
IkReal x15710=((1.0)*cj0);
IkReal x15711=(cj3*gconst71);
IkReal x15712=(cj1*sj2);
IkReal x15713=((1.0)*cj1*cj2);
IkReal x15714=(r21*x15701);
IkReal x15715=(r10*x15701);
IkReal x15716=((1.0)*x15701);
IkReal x15717=(r02*x15700);
IkReal x15718=(r20*x15701);
evalcond[0]=((((-1.0)*x15707))+(((-1.0)*r02*x15716)));
evalcond[1]=((((-1.0)*r20*x15700*x15704))+((gconst70*r21*x15700)));
evalcond[2]=(cj0+(((-1.0)*r10*x15700*x15704))+((x15700*x15708)));
evalcond[3]=(((cj0*x15703))+(((-1.0)*cj1*cj2*x15710))+((cj3*x15717)));
evalcond[4]=((((-1.0)*x15706*x15710))+(((-1.0)*x15710*x15712))+(((-1.0)*sj3*x15717)));
evalcond[5]=((((-1.0)*cj3*x15704*x15718))+((r20*x15709))+((x15702*x15714))+x15706+x15712+((r21*x15705)));
evalcond[6]=((((-1.0)*x15713))+(((-1.0)*x15709*x15714))+((r20*x15702))+((r21*x15711))+x15703+((x15705*x15718)));
evalcond[7]=(((r11*x15705))+((sj0*x15703))+(((-1.0)*cj3*x15704*x15715))+((r11*x15701*x15702))+(((-1.0)*cj1*cj2*x15707))+((r10*x15709)));
evalcond[8]=((((-1.0)*sj3*x15708*x15716))+((x15705*x15715))+((r10*x15702))+((r11*x15711))+(((-1.0)*x15707*x15712))+(((-1.0)*x15706*x15707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15720=IKPowWithIntegerCheck(r02,-1);
if(!x15720.valid){
continue;
}
IkReal x15719=x15720.value;
CheckValue<IkReal> x15721=IKPowWithIntegerCheck(cj3,-1);
if(!x15721.valid){
continue;
}
if( IKabs((x15719*(x15721.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15719)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15719*(x15721.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15719))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15719*(x15721.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15719));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15722=IKsin(j4);
IkReal x15723=IKcos(j4);
IkReal x15724=(cj3*gconst70);
IkReal x15725=(sj1*sj2);
IkReal x15726=((1.0)*gconst71);
IkReal x15727=(gconst71*sj3);
IkReal x15728=(cj2*sj1);
IkReal x15729=((1.0)*sj0);
IkReal x15730=(gconst70*r11);
IkReal x15731=(gconst70*sj3);
IkReal x15732=((1.0)*cj0);
IkReal x15733=(cj3*gconst71);
IkReal x15734=(cj1*sj2);
IkReal x15735=((1.0)*cj1*cj2);
IkReal x15736=(r21*x15723);
IkReal x15737=(r10*x15723);
IkReal x15738=((1.0)*x15723);
IkReal x15739=(r02*x15722);
IkReal x15740=(r20*x15723);
evalcond[0]=((((-1.0)*x15729))+(((-1.0)*r02*x15738)));
evalcond[1]=(((gconst70*r21*x15722))+(((-1.0)*r20*x15722*x15726)));
evalcond[2]=(((x15722*x15730))+cj0+(((-1.0)*r10*x15722*x15726)));
evalcond[3]=(((cj0*x15725))+(((-1.0)*cj1*cj2*x15732))+((cj3*x15739)));
evalcond[4]=((((-1.0)*sj3*x15739))+(((-1.0)*x15732*x15734))+(((-1.0)*x15728*x15732)));
evalcond[5]=(((x15724*x15736))+((r20*x15731))+((r21*x15727))+x15734+x15728+(((-1.0)*cj3*x15726*x15740)));
evalcond[6]=((((-1.0)*x15735))+(((-1.0)*x15731*x15736))+((r20*x15724))+((x15727*x15740))+((r21*x15733))+x15725);
evalcond[7]=(((r11*x15727))+(((-1.0)*cj3*x15726*x15737))+(((-1.0)*cj1*cj2*x15729))+((sj0*x15725))+((r11*x15723*x15724))+((r10*x15731)));
evalcond[8]=(((r11*x15733))+(((-1.0)*x15728*x15729))+((x15727*x15737))+((r10*x15724))+(((-1.0)*x15729*x15734))+(((-1.0)*sj3*x15730*x15738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15742=IKPowWithIntegerCheck(r02,-1);
if(!x15742.valid){
continue;
}
IkReal x15741=x15742.value;
CheckValue<IkReal> x15743=IKPowWithIntegerCheck(cj3,-1);
if(!x15743.valid){
continue;
}
if( IKabs((x15741*(x15743.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15741)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15741*(x15743.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15741))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15741*(x15743.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15741));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15744=IKsin(j4);
IkReal x15745=IKcos(j4);
IkReal x15746=(cj5*r10);
IkReal x15747=(sj1*sj2);
IkReal x15748=(cj5*sj3);
IkReal x15749=(r11*sj5);
IkReal x15750=(cj3*cj5);
IkReal x15751=(cj3*sj5);
IkReal x15752=(r21*sj5);
IkReal x15753=(cj2*sj1);
IkReal x15754=((1.0)*sj0);
IkReal x15755=((1.0)*cj0);
IkReal x15756=(sj3*sj5);
IkReal x15757=(cj1*sj2);
IkReal x15758=((1.0)*cj1*cj2);
IkReal x15759=((1.0)*x15744);
IkReal x15760=(r20*x15745);
IkReal x15761=(cj3*x15745);
IkReal x15762=(sj3*x15745);
evalcond[0]=((((-1.0)*r02*x15745))+(((-1.0)*x15754)));
evalcond[1]=((((-1.0)*cj5*r20*x15759))+((x15744*x15752)));
evalcond[2]=((((-1.0)*x15746*x15759))+cj0+((x15744*x15749)));
evalcond[3]=(((cj3*r02*x15744))+((cj0*x15747))+(((-1.0)*cj1*cj2*x15755)));
evalcond[4]=((((-1.0)*x15753*x15755))+(((-1.0)*r02*sj3*x15759))+(((-1.0)*x15755*x15757)));
evalcond[5]=((((-1.0)*x15750*x15760))+((r21*x15745*x15751))+((r20*x15756))+((r21*x15748))+x15753+x15757);
evalcond[6]=((((-1.0)*x15758))+((r21*x15750))+((r20*x15751))+x15747+(((-1.0)*x15752*x15762))+((x15748*x15760)));
evalcond[7]=(((r10*x15756))+((x15749*x15761))+((r11*x15748))+((sj0*x15747))+(((-1.0)*cj1*cj2*x15754))+(((-1.0)*x15746*x15761)));
evalcond[8]=(((r10*x15751))+(((-1.0)*x15753*x15754))+(((-1.0)*x15754*x15757))+((r11*x15750))+(((-1.0)*x15749*x15762))+((x15746*x15762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15763=((1.0)*sj3);
IkReal x15764=((1.0)*cj5);
CheckValue<IkReal> x15765=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15764))),-1);
if(!x15765.valid){
continue;
}
CheckValue<IkReal> x15766=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15764))),-1);
if(!x15766.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15765.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15766.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15763))+(((-1.0)*cj5*r21*x15763)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15765.value)))+IKsqr(((x15766.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15763))+(((-1.0)*cj5*r21*x15763))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15765.value)), ((x15766.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15763))+(((-1.0)*cj5*r21*x15763))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15767=IKsin(j4);
IkReal x15768=IKcos(j4);
IkReal x15769=(cj5*r10);
IkReal x15770=(sj1*sj2);
IkReal x15771=(cj5*sj3);
IkReal x15772=(r11*sj5);
IkReal x15773=(cj3*cj5);
IkReal x15774=(cj3*sj5);
IkReal x15775=(r21*sj5);
IkReal x15776=(cj2*sj1);
IkReal x15777=((1.0)*sj0);
IkReal x15778=((1.0)*cj0);
IkReal x15779=(sj3*sj5);
IkReal x15780=(cj1*sj2);
IkReal x15781=((1.0)*cj1*cj2);
IkReal x15782=((1.0)*x15767);
IkReal x15783=(r20*x15768);
IkReal x15784=(cj3*x15768);
IkReal x15785=(sj3*x15768);
evalcond[0]=((((-1.0)*r02*x15768))+(((-1.0)*x15777)));
evalcond[1]=(((x15767*x15775))+(((-1.0)*cj5*r20*x15782)));
evalcond[2]=(((x15767*x15772))+cj0+(((-1.0)*x15769*x15782)));
evalcond[3]=(((cj0*x15770))+(((-1.0)*cj1*cj2*x15778))+((cj3*r02*x15767)));
evalcond[4]=((((-1.0)*x15776*x15778))+(((-1.0)*r02*sj3*x15782))+(((-1.0)*x15778*x15780)));
evalcond[5]=(((r21*x15771))+((r21*x15768*x15774))+((r20*x15779))+x15780+x15776+(((-1.0)*x15773*x15783)));
evalcond[6]=(((x15771*x15783))+((r21*x15773))+(((-1.0)*x15775*x15785))+((r20*x15774))+x15770+(((-1.0)*x15781)));
evalcond[7]=(((r10*x15779))+((x15772*x15784))+((sj0*x15770))+(((-1.0)*x15769*x15784))+(((-1.0)*cj1*cj2*x15777))+((r11*x15771)));
evalcond[8]=(((r10*x15774))+(((-1.0)*x15776*x15777))+((x15769*x15785))+(((-1.0)*x15777*x15780))+(((-1.0)*x15772*x15785))+((r11*x15773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15786=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15786.valid){
continue;
}
CheckValue<IkReal> x15787=IKPowWithIntegerCheck(r02,-1);
if(!x15787.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15786.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15787.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15786.value)))+IKsqr(((-1.0)*sj0*(x15787.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15786.value)), ((-1.0)*sj0*(x15787.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15788=IKsin(j4);
IkReal x15789=IKcos(j4);
IkReal x15790=(cj5*r10);
IkReal x15791=(sj1*sj2);
IkReal x15792=(cj5*sj3);
IkReal x15793=(r11*sj5);
IkReal x15794=(cj3*cj5);
IkReal x15795=(cj3*sj5);
IkReal x15796=(r21*sj5);
IkReal x15797=(cj2*sj1);
IkReal x15798=((1.0)*sj0);
IkReal x15799=((1.0)*cj0);
IkReal x15800=(sj3*sj5);
IkReal x15801=(cj1*sj2);
IkReal x15802=((1.0)*cj1*cj2);
IkReal x15803=((1.0)*x15788);
IkReal x15804=(r20*x15789);
IkReal x15805=(cj3*x15789);
IkReal x15806=(sj3*x15789);
evalcond[0]=((((-1.0)*x15798))+(((-1.0)*r02*x15789)));
evalcond[1]=((((-1.0)*cj5*r20*x15803))+((x15788*x15796)));
evalcond[2]=(cj0+((x15788*x15793))+(((-1.0)*x15790*x15803)));
evalcond[3]=(((cj0*x15791))+((cj3*r02*x15788))+(((-1.0)*cj1*cj2*x15799)));
evalcond[4]=((((-1.0)*x15797*x15799))+(((-1.0)*r02*sj3*x15803))+(((-1.0)*x15799*x15801)));
evalcond[5]=((((-1.0)*x15794*x15804))+((r21*x15792))+x15797+x15801+((r20*x15800))+((r21*x15789*x15795)));
evalcond[6]=((((-1.0)*x15802))+(((-1.0)*x15796*x15806))+((r20*x15795))+((r21*x15794))+x15791+((x15792*x15804)));
evalcond[7]=(((r10*x15800))+((r11*x15792))+(((-1.0)*cj1*cj2*x15798))+(((-1.0)*x15790*x15805))+((x15793*x15805))+((sj0*x15791)));
evalcond[8]=(((r11*x15794))+(((-1.0)*x15798*x15801))+(((-1.0)*x15797*x15798))+((x15790*x15806))+((r10*x15795))+(((-1.0)*x15793*x15806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15807=((1.0)*sj0);
IkReal x15808=((1.0)*cj0);
CheckValue<IkReal> x15809 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15807))+(((-1.0)*r02*x15808)))),IkReal(((((-1.0)*r11*sj5*x15807))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15809.valid){
continue;
}
CheckValue<IkReal> x15810=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15809.value)+(((1.5707963267949)*(x15810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15811=IKsin(j4);
IkReal x15812=IKcos(j4);
IkReal x15813=(r11*sj5);
IkReal x15814=(cj5*r10);
IkReal x15815=(sj1*sj2);
IkReal x15816=(cj5*sj3);
IkReal x15817=((1.0)*sj0);
IkReal x15818=(cj3*cj5);
IkReal x15819=(cj3*sj5);
IkReal x15820=(r21*sj5);
IkReal x15821=(cj2*sj1);
IkReal x15822=(sj3*sj5);
IkReal x15823=(r01*sj5);
IkReal x15824=((1.0)*cj0);
IkReal x15825=(cj1*sj2);
IkReal x15826=((1.0)*x15812);
IkReal x15827=((1.0)*x15811);
IkReal x15828=(cj3*x15812);
IkReal x15829=((1.0)*cj1*cj2);
IkReal x15830=(cj3*x15811);
evalcond[0]=((((-1.0)*cj5*r20*x15827))+(((-1.0)*r22*x15826))+((x15811*x15820)));
evalcond[1]=((((-1.0)*x15814*x15827))+cj0+(((-1.0)*r12*x15826))+((x15811*x15813)));
evalcond[2]=((((-1.0)*r02*x15826))+(((-1.0)*x15817))+((x15811*x15823))+(((-1.0)*cj5*r00*x15827)));
evalcond[3]=(((r20*x15822))+((r22*x15830))+((r21*x15812*x15819))+(((-1.0)*r20*x15818*x15826))+((r21*x15816))+x15821+x15825);
evalcond[4]=((((-1.0)*sj3*x15820*x15826))+((r20*x15812*x15816))+(((-1.0)*x15829))+(((-1.0)*r22*sj3*x15827))+((r21*x15818))+((r20*x15819))+x15815);
evalcond[5]=(((r02*x15830))+(((-1.0)*r00*x15818*x15826))+((r00*x15822))+((cj0*x15815))+(((-1.0)*cj1*cj2*x15824))+((r01*x15812*x15819))+((r01*x15816)));
evalcond[6]=(((r11*x15816))+(((-1.0)*cj1*cj2*x15817))+((sj0*x15815))+((x15813*x15828))+((r12*x15830))+((r10*x15822))+(((-1.0)*cj3*x15814*x15826)));
evalcond[7]=(((r00*x15812*x15816))+(((-1.0)*x15824*x15825))+(((-1.0)*r02*sj3*x15827))+(((-1.0)*x15821*x15824))+((r00*x15819))+((r01*x15818))+(((-1.0)*r01*x15822*x15826)));
evalcond[8]=(((r11*x15818))+((r10*x15819))+(((-1.0)*sj3*x15813*x15826))+(((-1.0)*x15817*x15821))+(((-1.0)*x15817*x15825))+(((-1.0)*r12*sj3*x15827))+((sj3*x15812*x15814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15831=((1.0)*cj5);
CheckValue<IkReal> x15832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15831)))),-1);
if(!x15832.valid){
continue;
}
CheckValue<IkReal> x15833 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15832.value)))+(x15833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15834=IKsin(j4);
IkReal x15835=IKcos(j4);
IkReal x15836=(r11*sj5);
IkReal x15837=(cj5*r10);
IkReal x15838=(sj1*sj2);
IkReal x15839=(cj5*sj3);
IkReal x15840=((1.0)*sj0);
IkReal x15841=(cj3*cj5);
IkReal x15842=(cj3*sj5);
IkReal x15843=(r21*sj5);
IkReal x15844=(cj2*sj1);
IkReal x15845=(sj3*sj5);
IkReal x15846=(r01*sj5);
IkReal x15847=((1.0)*cj0);
IkReal x15848=(cj1*sj2);
IkReal x15849=((1.0)*x15835);
IkReal x15850=((1.0)*x15834);
IkReal x15851=(cj3*x15835);
IkReal x15852=((1.0)*cj1*cj2);
IkReal x15853=(cj3*x15834);
evalcond[0]=((((-1.0)*cj5*r20*x15850))+(((-1.0)*r22*x15849))+((x15834*x15843)));
evalcond[1]=(cj0+((x15834*x15836))+(((-1.0)*r12*x15849))+(((-1.0)*x15837*x15850)));
evalcond[2]=((((-1.0)*x15840))+((x15834*x15846))+(((-1.0)*r02*x15849))+(((-1.0)*cj5*r00*x15850)));
evalcond[3]=(((r20*x15845))+(((-1.0)*r20*x15841*x15849))+((r22*x15853))+((r21*x15835*x15842))+x15848+x15844+((r21*x15839)));
evalcond[4]=(((r20*x15842))+((r21*x15841))+((r20*x15835*x15839))+(((-1.0)*x15852))+(((-1.0)*r22*sj3*x15850))+x15838+(((-1.0)*sj3*x15843*x15849)));
evalcond[5]=(((r00*x15845))+(((-1.0)*r00*x15841*x15849))+((cj0*x15838))+(((-1.0)*cj1*cj2*x15847))+((r02*x15853))+((r01*x15835*x15842))+((r01*x15839)));
evalcond[6]=(((r12*x15853))+(((-1.0)*cj3*x15837*x15849))+((sj0*x15838))+((r11*x15839))+(((-1.0)*cj1*cj2*x15840))+((r10*x15845))+((x15836*x15851)));
evalcond[7]=(((r01*x15841))+((r00*x15842))+(((-1.0)*r02*sj3*x15850))+(((-1.0)*x15844*x15847))+(((-1.0)*x15847*x15848))+((r00*x15835*x15839))+(((-1.0)*r01*x15845*x15849)));
evalcond[8]=(((r11*x15841))+(((-1.0)*sj3*x15836*x15849))+((r10*x15842))+(((-1.0)*r12*sj3*x15850))+((sj3*x15835*x15837))+(((-1.0)*x15840*x15848))+(((-1.0)*x15840*x15844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15854=((1.0)*cj5);
CheckValue<IkReal> x15855 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15855.valid){
continue;
}
CheckValue<IkReal> x15856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15854)))),-1);
if(!x15856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15855.value)+(((1.5707963267949)*(x15856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15857=IKsin(j4);
IkReal x15858=IKcos(j4);
IkReal x15859=(r11*sj5);
IkReal x15860=(cj5*r10);
IkReal x15861=(sj1*sj2);
IkReal x15862=(cj5*sj3);
IkReal x15863=((1.0)*sj0);
IkReal x15864=(cj3*cj5);
IkReal x15865=(cj3*sj5);
IkReal x15866=(r21*sj5);
IkReal x15867=(cj2*sj1);
IkReal x15868=(sj3*sj5);
IkReal x15869=(r01*sj5);
IkReal x15870=((1.0)*cj0);
IkReal x15871=(cj1*sj2);
IkReal x15872=((1.0)*x15858);
IkReal x15873=((1.0)*x15857);
IkReal x15874=(cj3*x15858);
IkReal x15875=((1.0)*cj1*cj2);
IkReal x15876=(cj3*x15857);
evalcond[0]=((((-1.0)*cj5*r20*x15873))+((x15857*x15866))+(((-1.0)*r22*x15872)));
evalcond[1]=(((x15857*x15859))+cj0+(((-1.0)*x15860*x15873))+(((-1.0)*r12*x15872)));
evalcond[2]=((((-1.0)*x15863))+((x15857*x15869))+(((-1.0)*cj5*r00*x15873))+(((-1.0)*r02*x15872)));
evalcond[3]=(((r21*x15862))+((r21*x15858*x15865))+(((-1.0)*r20*x15864*x15872))+((r22*x15876))+((r20*x15868))+x15871+x15867);
evalcond[4]=(((r21*x15864))+((r20*x15858*x15862))+(((-1.0)*sj3*x15866*x15872))+(((-1.0)*r22*sj3*x15873))+(((-1.0)*x15875))+((r20*x15865))+x15861);
evalcond[5]=((((-1.0)*r00*x15864*x15872))+((cj0*x15861))+(((-1.0)*cj1*cj2*x15870))+((r00*x15868))+((r02*x15876))+((r01*x15862))+((r01*x15858*x15865)));
evalcond[6]=(((x15859*x15874))+((r11*x15862))+((sj0*x15861))+((r12*x15876))+((r10*x15868))+(((-1.0)*cj3*x15860*x15872))+(((-1.0)*cj1*cj2*x15863)));
evalcond[7]=((((-1.0)*x15870*x15871))+(((-1.0)*r02*sj3*x15873))+((r00*x15865))+((r01*x15864))+(((-1.0)*x15867*x15870))+((r00*x15858*x15862))+(((-1.0)*r01*x15868*x15872)));
evalcond[8]=((((-1.0)*x15863*x15867))+((sj3*x15858*x15860))+(((-1.0)*sj3*x15859*x15872))+((r11*x15864))+(((-1.0)*r12*sj3*x15873))+(((-1.0)*x15863*x15871))+((r10*x15865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15877=cj5*cj5;
IkReal x15878=r21*r21;
IkReal x15879=r20*r20;
IkReal x15880=(r20*r21);
IkReal x15881=((1.0)*cj3);
IkReal x15882=((1.0)*cj5);
IkReal x15883=(cj1*sj2);
IkReal x15884=(cj5*sj5);
IkReal x15885=(sj3*sj5);
IkReal x15886=(cj2*sj1);
IkReal x15887=(r21*sj5);
CheckValue<IkReal> x15888 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r20*r22*x15885))+((r22*x15886))+((r22*x15883)))),IkReal((((x15883*x15887))+(((-1.0)*r20*x15882*x15883))+(((-1.0)*r20*x15882*x15886))+(((-1.0)*x15879*x15882*x15885))+((x15886*x15887))+(((-2.0)*sj3*x15877*x15880))+((sj3*x15878*x15884))+((sj3*x15880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15888.valid){
continue;
}
CheckValue<IkReal> x15889=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15880*x15884))+(((-1.0)*x15878*x15881))+((cj3*x15877*x15878))+(((-1.0)*x15881*(r22*r22)))+(((-1.0)*x15877*x15879*x15881)))),-1);
if(!x15889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15888.value)+(((1.5707963267949)*(x15889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15890=IKsin(j4);
IkReal x15891=IKcos(j4);
IkReal x15892=(cj3*r21);
IkReal x15893=(r21*sj5);
IkReal x15894=(r20*sj5);
IkReal x15895=(cj5*r20);
IkReal x15896=((1.0)*x15891);
IkReal x15897=((1.0)*x15890);
evalcond[0]=((((-1.0)*x15895*x15897))+(((-1.0)*r22*x15896))+((x15890*x15893)));
evalcond[1]=(((cj3*r22*x15890))+((sj5*x15891*x15892))+((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15894))+(((-1.0)*cj3*x15895*x15896)));
evalcond[2]=(((sj3*x15891*x15895))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x15894))+(((-1.0)*sj3*x15893*x15896))+(((-1.0)*r22*sj3*x15897))+((cj5*x15892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15898=(cj5*sj4);
IkReal x15899=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15899))+(((-1.0)*r00*x15898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15898))+(((-1.0)*r11*x15899))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15899))+(((-1.0)*r00*x15898))))+IKsqr((((r10*x15898))+(((-1.0)*r11*x15899))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15899))+(((-1.0)*r00*x15898))), (((r10*x15898))+(((-1.0)*r11*x15899))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15900=IKcos(j0);
IkReal x15901=IKsin(j0);
IkReal x15902=(r02*sj4);
IkReal x15903=((1.0)*sj3);
IkReal x15904=(r12*sj4);
IkReal x15905=((0.21325)*cj2);
IkReal x15906=((1.0)*cj3);
IkReal x15907=((1.0)*sj2);
IkReal x15908=(r11*sj5);
IkReal x15909=(cj5*r01);
IkReal x15910=(cj5*r11);
IkReal x15911=(r00*sj5);
IkReal x15912=((1.0)*cj2);
IkReal x15913=(r10*sj5);
IkReal x15914=((1.0)*cj4);
IkReal x15915=(cj1*x15901);
IkReal x15916=(cj4*cj5*r00);
IkReal x15917=(cj1*x15900);
IkReal x15918=(cj4*cj5*r10);
IkReal x15919=(cj4*r01*sj5);
IkReal x15920=((0.21325)*sj1*sj2);
IkReal x15921=(sj1*x15900);
IkReal x15922=((1.0)*cj5*sj4);
IkReal x15923=(sj1*x15901);
evalcond[0]=((((-1.0)*r10*x15922))+(((-1.0)*r12*x15914))+((sj4*x15908))+x15900);
evalcond[1]=((((-1.0)*x15901))+(((-1.0)*r02*x15914))+((r01*sj4*sj5))+(((-1.0)*r00*x15922)));
evalcond[2]=((((-0.11235)*x15901))+((x15905*x15917))+(((-1.0)*x15900*x15920))+(((-0.08535)*x15911))+(((-0.08535)*x15909))+(((-1.0)*px))+(((0.24365)*x15917)));
evalcond[3]=(((x15905*x15915))+(((0.11235)*x15900))+(((-0.08535)*x15913))+(((-0.08535)*x15910))+(((-1.0)*py))+(((-1.0)*x15901*x15920))+(((0.24365)*x15915)));
evalcond[4]=((((-1.0)*x15906*x15916))+((sj3*x15911))+((sj3*x15909))+((sj2*x15921))+((cj3*x15919))+((cj3*x15902))+(((-1.0)*x15912*x15917)));
evalcond[5]=((((-1.0)*x15906*x15918))+((sj3*x15910))+((sj3*x15913))+((sj2*x15923))+((cj3*cj4*x15908))+((cj3*x15904))+(((-1.0)*x15912*x15915)));
evalcond[6]=((((-1.0)*x15912*x15921))+((sj3*x15916))+(((-1.0)*x15907*x15917))+(((-1.0)*x15903*x15919))+(((-1.0)*x15902*x15903))+((cj3*x15911))+((cj3*x15909)));
evalcond[7]=((((-1.0)*x15912*x15923))+((sj3*x15918))+(((-1.0)*x15907*x15915))+(((-1.0)*cj4*x15903*x15908))+(((-1.0)*x15903*x15904))+((cj3*x15913))+((cj3*x15910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15924=cj5*cj5;
IkReal x15925=r21*r21;
IkReal x15926=r20*r20;
IkReal x15927=(r20*r21);
IkReal x15928=(sj1*sj2);
IkReal x15929=(r21*sj5);
IkReal x15930=(cj1*cj2);
IkReal x15931=(cj5*r20);
IkReal x15932=(cj5*sj5);
IkReal x15933=(cj3*r22);
IkReal x15934=(sj3*x15925);
CheckValue<IkReal> x15935=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15927*x15932))+((sj3*x15924*x15926))+(((-1.0)*x15924*x15934))+x15934)),-1);
if(!x15935.valid){
continue;
}
CheckValue<IkReal> x15936 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15930))+((r20*sj5*x15933))+((cj5*r21*x15933))+((r22*x15928)))),IkReal((((x15930*x15931))+(((-1.0)*x15929*x15930))+((cj3*x15927))+((x15928*x15929))+(((-1.0)*x15928*x15931))+(((-1.0)*cj3*x15926*x15932))+(((-2.0)*cj3*x15924*x15927))+((cj3*x15925*x15932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15935.value)))+(x15936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15937=IKsin(j4);
IkReal x15938=IKcos(j4);
IkReal x15939=(cj3*r21);
IkReal x15940=(r21*sj5);
IkReal x15941=(r20*sj5);
IkReal x15942=(cj5*r20);
IkReal x15943=((1.0)*x15938);
IkReal x15944=((1.0)*x15937);
evalcond[0]=((((-1.0)*r22*x15943))+((x15937*x15940))+(((-1.0)*x15942*x15944)));
evalcond[1]=(((cj2*sj1))+((cj3*r22*x15937))+(((-1.0)*cj3*x15942*x15943))+((cj5*r21*sj3))+((sj5*x15938*x15939))+((cj1*sj2))+((sj3*x15941)));
evalcond[2]=((((-1.0)*r22*sj3*x15944))+((cj3*x15941))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15940*x15943))+((sj3*x15938*x15942))+((cj5*x15939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15945=(cj5*sj4);
IkReal x15946=(sj4*sj5);
if( IKabs((((r01*x15946))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x15945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15946))+((r10*x15945))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x15946))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x15945))))+IKsqr(((((-1.0)*r11*x15946))+((r10*x15945))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x15946))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x15945))), ((((-1.0)*r11*x15946))+((r10*x15945))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15947=IKcos(j0);
IkReal x15948=IKsin(j0);
IkReal x15949=(r02*sj4);
IkReal x15950=((1.0)*sj3);
IkReal x15951=(r12*sj4);
IkReal x15952=((0.21325)*cj2);
IkReal x15953=((1.0)*cj3);
IkReal x15954=((1.0)*sj2);
IkReal x15955=(r11*sj5);
IkReal x15956=(cj5*r01);
IkReal x15957=(cj5*r11);
IkReal x15958=(r00*sj5);
IkReal x15959=((1.0)*cj2);
IkReal x15960=(r10*sj5);
IkReal x15961=((1.0)*cj4);
IkReal x15962=(cj1*x15948);
IkReal x15963=(cj4*cj5*r00);
IkReal x15964=(cj1*x15947);
IkReal x15965=(cj4*cj5*r10);
IkReal x15966=(cj4*r01*sj5);
IkReal x15967=((0.21325)*sj1*sj2);
IkReal x15968=(sj1*x15947);
IkReal x15969=((1.0)*cj5*sj4);
IkReal x15970=(sj1*x15948);
evalcond[0]=(((sj4*x15955))+(((-1.0)*r10*x15969))+(((-1.0)*r12*x15961))+x15947);
evalcond[1]=((((-1.0)*x15948))+(((-1.0)*r02*x15961))+((r01*sj4*sj5))+(((-1.0)*r00*x15969)));
evalcond[2]=((((-0.08535)*x15958))+(((-0.08535)*x15956))+(((0.24365)*x15964))+(((-0.11235)*x15948))+(((-1.0)*px))+((x15952*x15964))+(((-1.0)*x15947*x15967)));
evalcond[3]=((((0.11235)*x15947))+(((-0.08535)*x15957))+(((0.24365)*x15962))+(((-0.08535)*x15960))+(((-1.0)*py))+((x15952*x15962))+(((-1.0)*x15948*x15967)));
evalcond[4]=((((-1.0)*x15959*x15964))+((cj3*x15949))+(((-1.0)*x15953*x15963))+((sj2*x15968))+((sj3*x15956))+((sj3*x15958))+((cj3*x15966)));
evalcond[5]=((((-1.0)*x15959*x15962))+((cj3*cj4*x15955))+(((-1.0)*x15953*x15965))+((sj3*x15960))+((sj2*x15970))+((sj3*x15957))+((cj3*x15951)));
evalcond[6]=((((-1.0)*x15959*x15968))+(((-1.0)*x15949*x15950))+(((-1.0)*x15950*x15966))+(((-1.0)*x15954*x15964))+((sj3*x15963))+((cj3*x15958))+((cj3*x15956)));
evalcond[7]=((((-1.0)*x15950*x15951))+(((-1.0)*cj4*x15950*x15955))+(((-1.0)*x15954*x15962))+((sj3*x15965))+((cj3*x15960))+(((-1.0)*x15959*x15970))+((cj3*x15957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur3 (9f2cc977d4819bee1f95ed08a7e0bd58)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
